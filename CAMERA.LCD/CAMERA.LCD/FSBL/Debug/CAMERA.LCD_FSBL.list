
CAMERA.LCD_FSBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34180400  34180400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132d8  34180750  34180750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003408  34193a28  34193a28  00013a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .version      0000000c  34196e30  34196e30  00016e30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  34196e3c  34196e3c  00017fc0  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  34196e3c  34196e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  34196e44  34196e44  00017fc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  34196e44  34196e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  34196e48  34196e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000013c  341c0000  34196e4c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .noncacheable 00000004  341c013c  34196f88  0001713c  2**0
                  ALLOC
 11 .gnu.sgstubs  00000020  34196fa0  34196fa0  00017fa0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .bss          00001804  341c0140  341c0140  00018140  2**3
                  ALLOC
 13 ._user_heap_stack 00000a04  341c1944  341c1944  00018140  2**0
                  ALLOC
 14 .ARM.attributes 0000003a  00000000  00000000  00017fc0  2**0
                  CONTENTS, READONLY
 15 .debug_info   00030b2a  00000000  00000000  00017ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003fdf  00000000  00000000  00048b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002930  00000000  00000000  0004cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001fe1  00000000  00000000  0004f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00058d02  00000000  00000000  00051419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002786a  00000000  00000000  000aa11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0022fdec  00000000  00000000  000d1985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000086  00000000  00000000  00301771  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c264  00000000  00000000  003017f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  0030da5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34180750 <__do_global_dtors_aux>:
34180750:	b510      	push	{r4, lr}
34180752:	4c05      	ldr	r4, [pc, #20]	@ (34180768 <__do_global_dtors_aux+0x18>)
34180754:	7823      	ldrb	r3, [r4, #0]
34180756:	b933      	cbnz	r3, 34180766 <__do_global_dtors_aux+0x16>
34180758:	4b04      	ldr	r3, [pc, #16]	@ (3418076c <__do_global_dtors_aux+0x1c>)
3418075a:	b113      	cbz	r3, 34180762 <__do_global_dtors_aux+0x12>
3418075c:	4804      	ldr	r0, [pc, #16]	@ (34180770 <__do_global_dtors_aux+0x20>)
3418075e:	f3af 8000 	nop.w
34180762:	2301      	movs	r3, #1
34180764:	7023      	strb	r3, [r4, #0]
34180766:	bd10      	pop	{r4, pc}
34180768:	341c0140 	.word	0x341c0140
3418076c:	00000000 	.word	0x00000000
34180770:	34193a10 	.word	0x34193a10

34180774 <frame_dummy>:
34180774:	b508      	push	{r3, lr}
34180776:	4b03      	ldr	r3, [pc, #12]	@ (34180784 <frame_dummy+0x10>)
34180778:	b11b      	cbz	r3, 34180782 <frame_dummy+0xe>
3418077a:	4903      	ldr	r1, [pc, #12]	@ (34180788 <frame_dummy+0x14>)
3418077c:	4803      	ldr	r0, [pc, #12]	@ (3418078c <frame_dummy+0x18>)
3418077e:	f3af 8000 	nop.w
34180782:	bd08      	pop	{r3, pc}
34180784:	00000000 	.word	0x00000000
34180788:	341c0144 	.word	0x341c0144
3418078c:	34193a10 	.word	0x34193a10

34180790 <eLGgzyBnqV>:
34180790:	ed90 5aad 	vldr	s10, [r0, #692]	@ 0x2b4
34180794:	b530      	push	{r4, r5, lr}
34180796:	ed2d 8b10 	vpush	{d8-d15}
3418079a:	ed90 7ba8 	vldr	d7, [r0, #672]	@ 0x2a0
3418079e:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
341807a2:	b089      	sub	sp, #36	@ 0x24
341807a4:	ed8d 7b00 	vstr	d7, [sp]
341807a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341807ac:	ed90 7ba4 	vldr	d7, [r0, #656]	@ 0x290
341807b0:	4604      	mov	r4, r0
341807b2:	ed91 4a01 	vldr	s8, [r1, #4]
341807b6:	ed91 2a00 	vldr	s4, [r1]
341807ba:	ed91 fb02 	vldr	d15, [r1, #8]
341807be:	ed91 eb04 	vldr	d14, [r1, #16]
341807c2:	ed90 3b12 	vldr	d3, [r0, #72]	@ 0x48
341807c6:	ed90 cbaa 	vldr	d12, [r0, #680]	@ 0x2a8
341807ca:	ed90 bb16 	vldr	d11, [r0, #88]	@ 0x58
341807ce:	ed8d 7b04 	vstr	d7, [sp, #16]
341807d2:	ed90 6ba6 	vldr	d6, [r0, #664]	@ 0x298
341807d6:	dc09      	bgt.n	341807ec <eLGgzyBnqV+0x5c>
341807d8:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
341807dc:	48d6      	ldr	r0, [pc, #856]	@ (34180b38 <eLGgzyBnqV+0x3a8>)
341807de:	4798      	blx	r3
341807e0:	f04f 30ff 	mov.w	r0, #4294967295
341807e4:	b009      	add	sp, #36	@ 0x24
341807e6:	ecbd 8b10 	vpop	{d8-d15}
341807ea:	bd30      	pop	{r4, r5, pc}
341807ec:	eeb8 4b44 	vcvt.f64.u32	d4, s8
341807f0:	ed9f 7bc3 	vldr	d7, [pc, #780]	@ 34180b00 <eLGgzyBnqV+0x370>
341807f4:	eeb8 2b42 	vcvt.f64.u32	d2, s4
341807f8:	ee24 7b07 	vmul.f64	d7, d4, d7
341807fc:	eeb4 7bc2 	vcmpe.f64	d7, d2
34180800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180804:	dd0f      	ble.n	34180826 <eLGgzyBnqV+0x96>
34180806:	ed90 7b1c 	vldr	d7, [r0, #112]	@ 0x70
3418080a:	ed9f 1bbf 	vldr	d1, [pc, #764]	@ 34180b08 <eLGgzyBnqV+0x378>
3418080e:	ee37 1b01 	vadd.f64	d1, d7, d1
34180812:	ed9f 7bbf 	vldr	d7, [pc, #764]	@ 34180b10 <eLGgzyBnqV+0x380>
34180816:	eeb4 1bc7 	vcmpe.f64	d1, d7
3418081a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418081e:	fe37 7b01 	vselgt.f64	d7, d7, d1
34180822:	ed80 7b1c 	vstr	d7, [r0, #112]	@ 0x70
34180826:	ed9f 7bbc 	vldr	d7, [pc, #752]	@ 34180b18 <eLGgzyBnqV+0x388>
3418082a:	ee24 4b07 	vmul.f64	d4, d4, d7
3418082e:	eeb4 4bc2 	vcmpe.f64	d4, d2
34180832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180836:	d510      	bpl.n	3418085a <eLGgzyBnqV+0xca>
34180838:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
3418083c:	ed9f 4bb2 	vldr	d4, [pc, #712]	@ 34180b08 <eLGgzyBnqV+0x378>
34180840:	ee37 7b44 	vsub.f64	d7, d7, d4
34180844:	ed9f 4bb6 	vldr	d4, [pc, #728]	@ 34180b20 <eLGgzyBnqV+0x390>
34180848:	eeb4 7bc4 	vcmpe.f64	d7, d4
3418084c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180850:	bf58      	it	pl
34180852:	eeb0 4b47 	vmovpl.f64	d4, d7
34180856:	ed84 4b1c 	vstr	d4, [r4, #112]	@ 0x70
3418085a:	f894 5050 	ldrb.w	r5, [r4, #80]	@ 0x50
3418085e:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
34180862:	2d01      	cmp	r5, #1
34180864:	d164      	bne.n	34180930 <eLGgzyBnqV+0x1a0>
34180866:	ed9f 7bb0 	vldr	d7, [pc, #704]	@ 34180b28 <eLGgzyBnqV+0x398>
3418086a:	ee3f 4b4e 	vsub.f64	d4, d15, d14
3418086e:	ee84 db07 	vdiv.f64	d13, d4, d7
34180872:	ee3f 4b0e 	vadd.f64	d4, d15, d14
34180876:	ee84 ab07 	vdiv.f64	d10, d4, d7
3418087a:	eeb0 7bcd 	vabs.f64	d7, d13
3418087e:	eeb4 5bc7 	vcmpe.f64	d5, d7
34180882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180886:	eeb0 4bca 	vabs.f64	d4, d10
3418088a:	db3c      	blt.n	34180906 <eLGgzyBnqV+0x176>
3418088c:	eeb4 5bc4 	vcmpe.f64	d5, d4
34180890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180894:	db37      	blt.n	34180906 <eLGgzyBnqV+0x176>
34180896:	2300      	movs	r3, #0
34180898:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
3418089c:	ee83 9b0c 	vdiv.f64	d9, d3, d12
341808a0:	eebc 9bc9 	vcvt.u32.f64	s18, d9
341808a4:	eeb8 9b49 	vcvt.f64.u32	d9, s18
341808a8:	ee29 9b0c 	vmul.f64	d9, d9, d12
341808ac:	2200      	movs	r2, #0
341808ae:	eefc 5bc9 	vcvt.u32.f64	s11, d9
341808b2:	eeb0 8b49 	vmov.f64	d8, d9
341808b6:	edcd 5a03 	vstr	s11, [sp, #12]
341808ba:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
341808be:	2b00      	cmp	r3, #0
341808c0:	f000 808c 	beq.w	341809dc <eLGgzyBnqV+0x24c>
341808c4:	eef7 0bcb 	vcvt.f32.f64	s1, d11
341808c8:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
341808cc:	ed8d 6b06 	vstr	d6, [sp, #24]
341808d0:	f012 fd0e 	bl	341932f0 <powf>
341808d4:	eeb2 7b04 	vmov.f64	d7, #36	@ 0x41200000  10.0
341808d8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
341808dc:	eeb0 5bce 	vabs.f64	d5, d14
341808e0:	ee20 0b07 	vmul.f64	d0, d0, d7
341808e4:	eeb0 7bcf 	vabs.f64	d7, d15
341808e8:	eeb4 7bc5 	vcmpe.f64	d7, d5
341808ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341808f0:	ed9d 6b06 	vldr	d6, [sp, #24]
341808f4:	dd34      	ble.n	34180960 <eLGgzyBnqV+0x1d0>
341808f6:	eeb5 fbc0 	vcmpe.f64	d15, #0.0
341808fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341808fe:	d534      	bpl.n	3418096a <eLGgzyBnqV+0x1da>
34180900:	ee39 0b40 	vsub.f64	d0, d9, d0
34180904:	e033      	b.n	3418096e <eLGgzyBnqV+0x1de>
34180906:	eeb4 5bc4 	vcmpe.f64	d5, d4
3418090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418090e:	d525      	bpl.n	3418095c <eLGgzyBnqV+0x1cc>
34180910:	ee8a 4b0d 	vdiv.f64	d4, d10, d13
34180914:	ed94 5aae 	vldr	s10, [r4, #696]	@ 0x2b8
34180918:	eeb0 4bc4 	vabs.f64	d4, d4
3418091c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
34180920:	eeb4 4bc5 	vcmpe.f64	d4, d5
34180924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180928:	bfb4      	ite	lt
3418092a:	2301      	movlt	r3, #1
3418092c:	2300      	movge	r3, #0
3418092e:	e7b5      	b.n	3418089c <eLGgzyBnqV+0x10c>
34180930:	eeb0 7bcf 	vabs.f64	d7, d15
34180934:	eeb0 4bce 	vabs.f64	d4, d14
34180938:	eeb4 4b47 	vcmp.f64	d4, d7
3418093c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180940:	fe34 7b07 	vselgt.f64	d7, d4, d7
34180944:	eeb4 7bc5 	vcmpe.f64	d7, d5
34180948:	ed9f ab79 	vldr	d10, [pc, #484]	@ 34180b30 <eLGgzyBnqV+0x3a0>
3418094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180950:	eeb0 db4a 	vmov.f64	d13, d10
34180954:	bf8c      	ite	hi
34180956:	2301      	movhi	r3, #1
34180958:	2300      	movls	r3, #0
3418095a:	e79f      	b.n	3418089c <eLGgzyBnqV+0x10c>
3418095c:	2301      	movs	r3, #1
3418095e:	e79d      	b.n	3418089c <eLGgzyBnqV+0x10c>
34180960:	eeb5 ebc0 	vcmpe.f64	d14, #0.0
34180964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180968:	d5ca      	bpl.n	34180900 <eLGgzyBnqV+0x170>
3418096a:	ee39 0b00 	vadd.f64	d0, d9, d0
3418096e:	ed94 7b3c 	vldr	d7, [r4, #240]	@ 0xf0
34180972:	eeb4 7bc0 	vcmpe.f64	d7, d0
34180976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418097a:	d503      	bpl.n	34180984 <eLGgzyBnqV+0x1f4>
3418097c:	eeb0 bb46 	vmov.f64	d11, d6
34180980:	eeb0 0b47 	vmov.f64	d0, d7
34180984:	ed94 7b3a 	vldr	d7, [r4, #232]	@ 0xe8
34180988:	eeb4 7bc0 	vcmpe.f64	d7, d0
3418098c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180990:	dd03      	ble.n	3418099a <eLGgzyBnqV+0x20a>
34180992:	eeb0 bb46 	vmov.f64	d11, d6
34180996:	eeb0 0b47 	vmov.f64	d0, d7
3418099a:	ee80 8b0c 	vdiv.f64	d8, d0, d12
3418099e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
341809a2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
341809a6:	2d01      	cmp	r5, #1
341809a8:	ee2c 8b08 	vmul.f64	d8, d12, d8
341809ac:	d116      	bne.n	341809dc <eLGgzyBnqV+0x24c>
341809ae:	f8b4 30e0 	ldrh.w	r3, [r4, #224]	@ 0xe0
341809b2:	2b02      	cmp	r3, #2
341809b4:	d85f      	bhi.n	34180a76 <eLGgzyBnqV+0x2e6>
341809b6:	eefc 7bc9 	vcvt.u32.f64	s15, d9
341809ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
341809be:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
341809c2:	ed82 7b20 	vstr	d7, [r2, #128]	@ 0x80
341809c6:	ed82 8b26 	vstr	d8, [r2, #152]	@ 0x98
341809ca:	eb04 1203 	add.w	r2, r4, r3, lsl #4
341809ce:	3301      	adds	r3, #1
341809d0:	ed82 db2c 	vstr	d13, [r2, #176]	@ 0xb0
341809d4:	ed82 ab2e 	vstr	d10, [r2, #184]	@ 0xb8
341809d8:	f8a4 30e0 	strh.w	r3, [r4, #224]	@ 0xe0
341809dc:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
341809e0:	bb4b      	cbnz	r3, 34180a36 <eLGgzyBnqV+0x2a6>
341809e2:	2210      	movs	r2, #16
341809e4:	f104 0188 	add.w	r1, r4, #136	@ 0x88
341809e8:	f104 0080 	add.w	r0, r4, #128	@ 0x80
341809ec:	ed8d 6b06 	vstr	d6, [sp, #24]
341809f0:	f011 fa3c 	bl	34191e6c <memmove>
341809f4:	2210      	movs	r2, #16
341809f6:	f104 01a0 	add.w	r1, r4, #160	@ 0xa0
341809fa:	f104 0098 	add.w	r0, r4, #152	@ 0x98
341809fe:	f011 fa35 	bl	34191e6c <memmove>
34180a02:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	@ 0xc0
34180a06:	ed84 9b24 	vstr	d9, [r4, #144]	@ 0x90
34180a0a:	e9c4 232c 	strd	r2, r3, [r4, #176]	@ 0xb0
34180a0e:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	@ 0xc8
34180a12:	ed84 8b2a 	vstr	d8, [r4, #168]	@ 0xa8
34180a16:	e9c4 232e 	strd	r2, r3, [r4, #184]	@ 0xb8
34180a1a:	e9d4 2334 	ldrd	r2, r3, [r4, #208]	@ 0xd0
34180a1e:	ed9d 6b06 	vldr	d6, [sp, #24]
34180a22:	e9c4 2330 	strd	r2, r3, [r4, #192]	@ 0xc0
34180a26:	e9d4 2336 	ldrd	r2, r3, [r4, #216]	@ 0xd8
34180a2a:	ed84 db34 	vstr	d13, [r4, #208]	@ 0xd0
34180a2e:	ed84 ab36 	vstr	d10, [r4, #216]	@ 0xd8
34180a32:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
34180a36:	eefc 7bc8 	vcvt.u32.f64	s15, d8
34180a3a:	ee17 3a90 	vmov	r3, s15
34180a3e:	ed94 7b1a 	vldr	d7, [r4, #104]	@ 0x68
34180a42:	9a03      	ldr	r2, [sp, #12]
34180a44:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
34180a48:	4293      	cmp	r3, r2
34180a4a:	bf1c      	itt	ne
34180a4c:	2301      	movne	r3, #1
34180a4e:	f884 3060 	strbne.w	r3, [r4, #96]	@ 0x60
34180a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180a56:	dd71      	ble.n	34180b3c <eLGgzyBnqV+0x3ac>
34180a58:	2301      	movs	r3, #1
34180a5a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
34180a5e:	ed9d 7b00 	vldr	d7, [sp]
34180a62:	eeb4 bbc7 	vcmpe.f64	d11, d7
34180a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180a6a:	d579      	bpl.n	34180b60 <eLGgzyBnqV+0x3d0>
34180a6c:	ed9d 7b04 	vldr	d7, [sp, #16]
34180a70:	ee3b 6b07 	vadd.f64	d6, d11, d7
34180a74:	e066      	b.n	34180b44 <eLGgzyBnqV+0x3b4>
34180a76:	ed94 7b2a 	vldr	d7, [r4, #168]	@ 0xa8
34180a7a:	ed94 5aaf 	vldr	s10, [r4, #700]	@ 0x2bc
34180a7e:	ee38 7b47 	vsub.f64	d7, d8, d7
34180a82:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
34180a86:	eeb0 7bc7 	vabs.f64	d7, d7
34180a8a:	eeb4 7bc5 	vcmpe.f64	d7, d5
34180a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180a92:	db2c      	blt.n	34180aee <eLGgzyBnqV+0x35e>
34180a94:	ed94 7b28 	vldr	d7, [r4, #160]	@ 0xa0
34180a98:	ee38 7b47 	vsub.f64	d7, d8, d7
34180a9c:	eeb0 7bc7 	vabs.f64	d7, d7
34180aa0:	eeb4 5bc7 	vcmpe.f64	d5, d7
34180aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180aa8:	dd21      	ble.n	34180aee <eLGgzyBnqV+0x35e>
34180aaa:	ed94 0b32 	vldr	d0, [r4, #200]	@ 0xc8
34180aae:	ed94 7b30 	vldr	d7, [r4, #192]	@ 0xc0
34180ab2:	ee3a 0b40 	vsub.f64	d0, d10, d0
34180ab6:	ee3d 7b47 	vsub.f64	d7, d13, d7
34180aba:	ee20 0b00 	vmul.f64	d0, d0, d0
34180abe:	eea7 0b07 	vfma.f64	d0, d7, d7
34180ac2:	ed8d 6b06 	vstr	d6, [sp, #24]
34180ac6:	f012 f94f 	bl	34192d68 <sqrt>
34180aca:	ed94 7ab0 	vldr	s14, [r4, #704]	@ 0x2c0
34180ace:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180ad2:	eeb4 0bc7 	vcmpe.f64	d0, d7
34180ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180ada:	ed9d 6b06 	vldr	d6, [sp, #24]
34180ade:	d506      	bpl.n	34180aee <eLGgzyBnqV+0x35e>
34180ae0:	eefc 7bc9 	vcvt.u32.f64	s15, d9
34180ae4:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
34180ae8:	eeb8 8b67 	vcvt.f64.u32	d8, s15
34180aec:	e776      	b.n	341809dc <eLGgzyBnqV+0x24c>
34180aee:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
34180af2:	2b01      	cmp	r3, #1
34180af4:	bf04      	itt	eq
34180af6:	2300      	moveq	r3, #0
34180af8:	f884 3078 	strbeq.w	r3, [r4, #120]	@ 0x78
34180afc:	e76e      	b.n	341809dc <eLGgzyBnqV+0x24c>
34180afe:	bf00      	nop
34180b00:	9999999a 	.word	0x9999999a
34180b04:	3fa99999 	.word	0x3fa99999
34180b08:	47ae147b 	.word	0x47ae147b
34180b0c:	3f847ae1 	.word	0x3f847ae1
34180b10:	33333334 	.word	0x33333334
34180b14:	3fc33333 	.word	0x3fc33333
34180b18:	33333333 	.word	0x33333333
34180b1c:	3fc33333 	.word	0x3fc33333
34180b20:	11111111 	.word	0x11111111
34180b24:	3fb11111 	.word	0x3fb11111
34180b28:	667f3bcd 	.word	0x667f3bcd
34180b2c:	3ff6a09e 	.word	0x3ff6a09e
	...
34180b38:	341943a0 	.word	0x341943a0
34180b3c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
34180b40:	2b00      	cmp	r3, #0
34180b42:	d18c      	bne.n	34180a5e <eLGgzyBnqV+0x2ce>
34180b44:	ee88 7b0c 	vdiv.f64	d7, d8, d12
34180b48:	eebc 7bc7 	vcvt.u32.f64	s14, d7
34180b4c:	eeb8 7b47 	vcvt.f64.u32	d7, s14
34180b50:	ee27 7b0c 	vmul.f64	d7, d7, d12
34180b54:	ed84 6b16 	vstr	d6, [r4, #88]	@ 0x58
34180b58:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
34180b5c:	2001      	movs	r0, #1
34180b5e:	e641      	b.n	341807e4 <eLGgzyBnqV+0x54>
34180b60:	ed9d 6b00 	vldr	d6, [sp]
34180b64:	e7ee      	b.n	34180b44 <eLGgzyBnqV+0x3b4>

34180b66 <FLXvKtIdpl>:
34180b66:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
34180b6a:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
34180b6e:	ed90 4b12 	vldr	d4, [r0, #72]	@ 0x48
34180b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180b76:	ed90 5baa 	vldr	d5, [r0, #680]	@ 0x2a8
34180b7a:	eeb0 7b46 	vmov.f64	d7, d6
34180b7e:	bfdf      	itttt	le
34180b80:	ee84 7b05 	vdivle.f64	d7, d4, d5
34180b84:	eebc 7bc7 	vcvtle.u32.f64	s14, d7
34180b88:	eeb8 7b47 	vcvtle.f64.u32	d7, s14
34180b8c:	ee27 7b05 	vmulle.f64	d7, d7, d5
34180b90:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
34180b94:	ed90 5b3c 	vldr	d5, [r0, #240]	@ 0xf0
34180b98:	eeb7 4ac7 	vcvt.f64.f32	d4, s14
34180b9c:	eeb4 4bc5 	vcmpe.f64	d4, d5
34180ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180ba4:	bfc8      	it	gt
34180ba6:	eeb7 7bc5 	vcvtgt.f32.f64	s14, d5
34180baa:	ed90 5b3a 	vldr	d5, [r0, #232]	@ 0xe8
34180bae:	eeb7 4ac7 	vcvt.f64.f32	d4, s14
34180bb2:	eeb4 4bc5 	vcmpe.f64	d4, d5
34180bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180bba:	bf48      	it	mi
34180bbc:	eeb7 7bc5 	vcvtmi.f32.f64	s14, d5
34180bc0:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
34180bc4:	f8d0 3274 	ldr.w	r3, [r0, #628]	@ 0x274
34180bc8:	b530      	push	{r4, r5, lr}
34180bca:	ed80 5b12 	vstr	d5, [r0, #72]	@ 0x48
34180bce:	ed93 5a00 	vldr	s10, [r3]
34180bd2:	edd0 7aac 	vldr	s15, [r0, #688]	@ 0x2b0
34180bd6:	eeb4 5ac7 	vcmpe.f32	s10, s14
34180bda:	eef1 5a67 	vneg.f32	s11, s15
34180bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180be2:	f04f 0100 	mov.w	r1, #0
34180be6:	f8b0 30f8 	ldrh.w	r3, [r0, #248]	@ 0xf8
34180bea:	fe75 7aa7 	vselgt.f32	s15, s11, s15
34180bee:	3b01      	subs	r3, #1
34180bf0:	b28a      	uxth	r2, r1
34180bf2:	4293      	cmp	r3, r2
34180bf4:	d805      	bhi.n	34180c02 <FLXvKtIdpl+0x9c>
34180bf6:	2244      	movs	r2, #68	@ 0x44
34180bf8:	fb02 0303 	mla	r3, r2, r3, r0
34180bfc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
34180c00:	e011      	b.n	34180c26 <FLXvKtIdpl+0xc0>
34180c02:	eb00 0482 	add.w	r4, r0, r2, lsl #2
34180c06:	edd4 5a44 	vldr	s11, [r4, #272]	@ 0x110
34180c0a:	ee77 5aa5 	vadd.f32	s11, s15, s11
34180c0e:	eef4 5ac7 	vcmpe.f32	s11, s14
34180c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180c16:	f101 0101 	add.w	r1, r1, #1
34180c1a:	dbe9      	blt.n	34180bf0 <FLXvKtIdpl+0x8a>
34180c1c:	2344      	movs	r3, #68	@ 0x44
34180c1e:	fb03 0202 	mla	r2, r3, r2, r0
34180c22:	f502 7390 	add.w	r3, r2, #288	@ 0x120
34180c26:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
34180c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180c2e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
34180c32:	dc05      	bgt.n	34180c40 <FLXvKtIdpl+0xda>
34180c34:	ed93 7a00 	vldr	s14, [r3]
34180c38:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180c3c:	ed80 7b12 	vstr	d7, [r0, #72]	@ 0x48
34180c40:	685a      	ldr	r2, [r3, #4]
34180c42:	f103 0138 	add.w	r1, r3, #56	@ 0x38
34180c46:	6042      	str	r2, [r0, #4]
34180c48:	689a      	ldr	r2, [r3, #8]
34180c4a:	f103 0424 	add.w	r4, r3, #36	@ 0x24
34180c4e:	6082      	str	r2, [r0, #8]
34180c50:	68da      	ldr	r2, [r3, #12]
34180c52:	60c2      	str	r2, [r0, #12]
34180c54:	691a      	ldr	r2, [r3, #16]
34180c56:	6102      	str	r2, [r0, #16]
34180c58:	f100 0238 	add.w	r2, r0, #56	@ 0x38
34180c5c:	695d      	ldr	r5, [r3, #20]
34180c5e:	330c      	adds	r3, #12
34180c60:	6145      	str	r5, [r0, #20]
34180c62:	68dd      	ldr	r5, [r3, #12]
34180c64:	300c      	adds	r0, #12
34180c66:	60c5      	str	r5, [r0, #12]
34180c68:	691d      	ldr	r5, [r3, #16]
34180c6a:	42a3      	cmp	r3, r4
34180c6c:	6105      	str	r5, [r0, #16]
34180c6e:	f851 5b04 	ldr.w	r5, [r1], #4
34180c72:	f842 5b04 	str.w	r5, [r2], #4
34180c76:	d1f1      	bne.n	34180c5c <FLXvKtIdpl+0xf6>
34180c78:	2001      	movs	r0, #1
34180c7a:	bd30      	pop	{r4, r5, pc}

34180c7c <evision_api_awb_new>:
34180c7c:	b510      	push	{r4, lr}
34180c7e:	4604      	mov	r4, r0
34180c80:	b090      	sub	sp, #64	@ 0x40
34180c82:	b170      	cbz	r0, 34180ca2 <evision_api_awb_new+0x26>
34180c84:	2300      	movs	r3, #0
34180c86:	4c08      	ldr	r4, [pc, #32]	@ (34180ca8 <evision_api_awb_new+0x2c>)
34180c88:	2140      	movs	r1, #64	@ 0x40
34180c8a:	7023      	strb	r3, [r4, #0]
34180c8c:	f8c4 02c8 	str.w	r0, [r4, #712]	@ 0x2c8
34180c90:	4b06      	ldr	r3, [pc, #24]	@ (34180cac <evision_api_awb_new+0x30>)
34180c92:	4668      	mov	r0, sp
34180c94:	4a06      	ldr	r2, [pc, #24]	@ (34180cb0 <evision_api_awb_new+0x34>)
34180c96:	f010 ffdb 	bl	34191c50 <sniprintf>
34180c9a:	4668      	mov	r0, sp
34180c9c:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34180ca0:	4798      	blx	r3
34180ca2:	4620      	mov	r0, r4
34180ca4:	b010      	add	sp, #64	@ 0x40
34180ca6:	bd10      	pop	{r4, pc}
34180ca8:	341c0160 	.word	0x341c0160
34180cac:	34196e30 	.word	0x34196e30
34180cb0:	341943e0 	.word	0x341943e0

34180cb4 <evision_api_awb_delete>:
34180cb4:	2800      	cmp	r0, #0
34180cb6:	bf14      	ite	ne
34180cb8:	2001      	movne	r0, #1
34180cba:	f04f 30ff 	moveq.w	r0, #4294967295
34180cbe:	4770      	bx	lr

34180cc0 <evision_api_awb_set_profile>:
34180cc0:	ed80 0a00 	vstr	s0, [r0]
34180cc4:	b530      	push	{r4, r5, lr}
34180cc6:	680c      	ldr	r4, [r1, #0]
34180cc8:	6044      	str	r4, [r0, #4]
34180cca:	684c      	ldr	r4, [r1, #4]
34180ccc:	6084      	str	r4, [r0, #8]
34180cce:	688c      	ldr	r4, [r1, #8]
34180cd0:	60c4      	str	r4, [r0, #12]
34180cd2:	68c9      	ldr	r1, [r1, #12]
34180cd4:	f102 0424 	add.w	r4, r2, #36	@ 0x24
34180cd8:	6101      	str	r1, [r0, #16]
34180cda:	f100 0138 	add.w	r1, r0, #56	@ 0x38
34180cde:	6815      	ldr	r5, [r2, #0]
34180ce0:	320c      	adds	r2, #12
34180ce2:	6145      	str	r5, [r0, #20]
34180ce4:	f852 5c08 	ldr.w	r5, [r2, #-8]
34180ce8:	300c      	adds	r0, #12
34180cea:	60c5      	str	r5, [r0, #12]
34180cec:	f852 5c04 	ldr.w	r5, [r2, #-4]
34180cf0:	42a2      	cmp	r2, r4
34180cf2:	6105      	str	r5, [r0, #16]
34180cf4:	f853 5b04 	ldr.w	r5, [r3], #4
34180cf8:	f841 5b04 	str.w	r5, [r1], #4
34180cfc:	d1ef      	bne.n	34180cde <evision_api_awb_set_profile+0x1e>
34180cfe:	bd30      	pop	{r4, r5, pc}

34180d00 <evision_api_awb_init_profiles>:
34180d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34180d04:	ed2d 8b06 	vpush	{d8-d10}
34180d08:	460e      	mov	r6, r1
34180d0a:	eeb0 9b40 	vmov.f64	d9, d0
34180d0e:	eeb0 8b41 	vmov.f64	d8, d1
34180d12:	461d      	mov	r5, r3
34180d14:	4604      	mov	r4, r0
34180d16:	b0c7      	sub	sp, #284	@ 0x11c
34180d18:	2800      	cmp	r0, #0
34180d1a:	f000 818f 	beq.w	3418103c <evision_api_awb_init_profiles+0x33c>
34180d1e:	ed9f abcc 	vldr	d10, [pc, #816]	@ 34181050 <evision_api_awb_init_profiles+0x350>
34180d22:	ed80 ab12 	vstr	d10, [r0, #72]	@ 0x48
34180d26:	2000      	movs	r0, #0
34180d28:	49cf      	ldr	r1, [pc, #828]	@ (34181068 <evision_api_awb_init_profiles+0x368>)
34180d2a:	f04f 0800 	mov.w	r8, #0
34180d2e:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
34180d32:	e9c4 01a6 	strd	r0, r1, [r4, #664]	@ 0x298
34180d36:	e9c4 01aa 	strd	r0, r1, [r4, #680]	@ 0x2a8
34180d3a:	49cc      	ldr	r1, [pc, #816]	@ (3418106c <evision_api_awb_init_profiles+0x36c>)
34180d3c:	f8df 9360 	ldr.w	r9, [pc, #864]	@ 341810a0 <evision_api_awb_init_profiles+0x3a0>
34180d40:	f8c4 12b0 	str.w	r1, [r4, #688]	@ 0x2b0
34180d44:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
34180d48:	f8c4 12b4 	str.w	r1, [r4, #692]	@ 0x2b4
34180d4c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
34180d50:	e9c4 891a 	strd	r8, r9, [r4, #104]	@ 0x68
34180d54:	f20f 3900 	addw	r9, pc, #768	@ 0x300
34180d58:	e9d9 8900 	ldrd	r8, r9, [r9]
34180d5c:	e9c4 891c 	strd	r8, r9, [r4, #112]	@ 0x70
34180d60:	e9c4 89a4 	strd	r8, r9, [r4, #656]	@ 0x290
34180d64:	f04f 0800 	mov.w	r8, #0
34180d68:	f8c4 12b8 	str.w	r1, [r4, #696]	@ 0x2b8
34180d6c:	49c0      	ldr	r1, [pc, #768]	@ (34181070 <evision_api_awb_init_profiles+0x370>)
34180d6e:	f8df 9334 	ldr.w	r9, [pc, #820]	@ 341810a4 <evision_api_awb_init_profiles+0x3a4>
34180d72:	f8c4 12bc 	str.w	r1, [r4, #700]	@ 0x2bc
34180d76:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
34180d7a:	2300      	movs	r3, #0
34180d7c:	e9c4 89a8 	strd	r8, r9, [r4, #672]	@ 0x2a0
34180d80:	2701      	movs	r7, #1
34180d82:	f04f 0800 	mov.w	r8, #0
34180d86:	f8c4 12c0 	str.w	r1, [r4, #704]	@ 0x2c0
34180d8a:	1e71      	subs	r1, r6, #1
34180d8c:	f8df 9318 	ldr.w	r9, [pc, #792]	@ 341810a8 <evision_api_awb_init_profiles+0x3a8>
34180d90:	b288      	uxth	r0, r1
34180d92:	2804      	cmp	r0, #4
34180d94:	e9c4 89a0 	strd	r8, r9, [r4, #640]	@ 0x280
34180d98:	f20f 29c4 	addw	r9, pc, #708	@ 0x2c4
34180d9c:	e9d9 8900 	ldrd	r8, r9, [r9]
34180da0:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
34180da4:	e9c4 89a2 	strd	r8, r9, [r4, #648]	@ 0x288
34180da8:	f8a4 30e0 	strh.w	r3, [r4, #224]	@ 0xe0
34180dac:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
34180db0:	f8a4 7278 	strh.w	r7, [r4, #632]	@ 0x278
34180db4:	d914      	bls.n	34180de0 <evision_api_awb_init_profiles+0xe0>
34180db6:	2305      	movs	r3, #5
34180db8:	f44f 7180 	mov.w	r1, #256	@ 0x100
34180dbc:	4aad      	ldr	r2, [pc, #692]	@ (34181074 <evision_api_awb_init_profiles+0x374>)
34180dbe:	a806      	add	r0, sp, #24
34180dc0:	f010 ff46 	bl	34191c50 <sniprintf>
34180dc4:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34180dc8:	a806      	add	r0, sp, #24
34180dca:	4798      	blx	r3
34180dcc:	f884 7050 	strb.w	r7, [r4, #80]	@ 0x50
34180dd0:	4620      	mov	r0, r4
34180dd2:	b047      	add	sp, #284	@ 0x11c
34180dd4:	ecbd 8b06 	vpop	{d8-d10}
34180dd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34180ddc:	f7ff bec3 	b.w	34180b66 <FLXvKtIdpl>
34180de0:	ed95 7a00 	vldr	s14, [r5]
34180de4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180de8:	eeb4 0bc7 	vcmpe.f64	d0, d7
34180dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180df0:	dd12      	ble.n	34180e18 <evision_api_awb_init_profiles+0x118>
34180df2:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34180df6:	48a0      	ldr	r0, [pc, #640]	@ (34181078 <evision_api_awb_init_profiles+0x378>)
34180df8:	4798      	blx	r3
34180dfa:	ed95 7a00 	vldr	s14, [r5]
34180dfe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180e02:	ed8d 9b00 	vstr	d9, [sp]
34180e06:	ed8d 7b02 	vstr	d7, [sp, #8]
34180e0a:	4a9c      	ldr	r2, [pc, #624]	@ (3418107c <evision_api_awb_init_profiles+0x37c>)
34180e0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34180e10:	a806      	add	r0, sp, #24
34180e12:	f010 ff1d 	bl	34191c50 <sniprintf>
34180e16:	e7d5      	b.n	34180dc4 <evision_api_awb_init_profiles+0xc4>
34180e18:	f04f 0c44 	mov.w	ip, #68	@ 0x44
34180e1c:	fb0c 5806 	mla	r8, ip, r6, r5
34180e20:	ed18 7a11 	vldr	s14, [r8, #-68]	@ 0xffffffbc
34180e24:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180e28:	eeb4 1bc7 	vcmpe.f64	d1, d7
34180e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180e30:	d541      	bpl.n	34180eb6 <evision_api_awb_init_profiles+0x1b6>
34180e32:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34180e36:	4892      	ldr	r0, [pc, #584]	@ (34181080 <evision_api_awb_init_profiles+0x380>)
34180e38:	4798      	blx	r3
34180e3a:	ed98 7a00 	vldr	s14, [r8]
34180e3e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180e42:	ed8d 8b00 	vstr	d8, [sp]
34180e46:	ed8d 7b02 	vstr	d7, [sp, #8]
34180e4a:	4a8e      	ldr	r2, [pc, #568]	@ (34181084 <evision_api_awb_init_profiles+0x384>)
34180e4c:	e7de      	b.n	34180e0c <evision_api_awb_init_profiles+0x10c>
34180e4e:	fb0c f708 	mul.w	r7, ip, r8
34180e52:	eb05 0907 	add.w	r9, r5, r7
34180e56:	3744      	adds	r7, #68	@ 0x44
34180e58:	442f      	add	r7, r5
34180e5a:	ed99 7a00 	vldr	s14, [r9]
34180e5e:	edd7 7a00 	vldr	s15, [r7]
34180e62:	eeb4 7ae7 	vcmpe.f32	s14, s15
34180e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180e6a:	f108 0a01 	add.w	sl, r8, #1
34180e6e:	f100 0001 	add.w	r0, r0, #1
34180e72:	db21      	blt.n	34180eb8 <evision_api_awb_init_profiles+0x1b8>
34180e74:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34180e78:	4883      	ldr	r0, [pc, #524]	@ (34181088 <evision_api_awb_init_profiles+0x388>)
34180e7a:	4798      	blx	r3
34180e7c:	ed97 7a00 	vldr	s14, [r7]
34180e80:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180e84:	ed8d 7b04 	vstr	d7, [sp, #16]
34180e88:	f8cd a008 	str.w	sl, [sp, #8]
34180e8c:	ed99 7a00 	vldr	s14, [r9]
34180e90:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180e94:	4643      	mov	r3, r8
34180e96:	ed8d 7b00 	vstr	d7, [sp]
34180e9a:	4a7c      	ldr	r2, [pc, #496]	@ (3418108c <evision_api_awb_init_profiles+0x38c>)
34180e9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34180ea0:	a806      	add	r0, sp, #24
34180ea2:	f010 fed5 	bl	34191c50 <sniprintf>
34180ea6:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34180eaa:	a806      	add	r0, sp, #24
34180eac:	4798      	blx	r3
34180eae:	2301      	movs	r3, #1
34180eb0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
34180eb4:	e78c      	b.n	34180dd0 <evision_api_awb_init_profiles+0xd0>
34180eb6:	4618      	mov	r0, r3
34180eb8:	fa1f f880 	uxth.w	r8, r0
34180ebc:	4541      	cmp	r1, r8
34180ebe:	d8c6      	bhi.n	34180e4e <evision_api_awb_init_profiles+0x14e>
34180ec0:	2300      	movs	r3, #0
34180ec2:	f04f 0c44 	mov.w	ip, #68	@ 0x44
34180ec6:	1eb0      	subs	r0, r6, #2
34180ec8:	b29f      	uxth	r7, r3
34180eca:	42b9      	cmp	r1, r7
34180ecc:	d839      	bhi.n	34180f42 <evision_api_awb_init_profiles+0x242>
34180ece:	ed84 9b3a 	vstr	d9, [r4, #232]	@ 0xe8
34180ed2:	ed84 8b3c 	vstr	d8, [r4, #240]	@ 0xf0
34180ed6:	2000      	movs	r0, #0
34180ed8:	f8a4 60f8 	strh.w	r6, [r4, #248]	@ 0xf8
34180edc:	b283      	uxth	r3, r0
34180ede:	4299      	cmp	r1, r3
34180ee0:	f100 0001 	add.w	r0, r0, #1
34180ee4:	f200 808b 	bhi.w	34180ffe <evision_api_awb_init_profiles+0x2fe>
34180ee8:	2700      	movs	r7, #0
34180eea:	46b8      	mov	r8, r7
34180eec:	f104 0afc 	add.w	sl, r4, #252	@ 0xfc
34180ef0:	f504 7990 	add.w	r9, r4, #288	@ 0x120
34180ef4:	eb05 0b07 	add.w	fp, r5, r7
34180ef8:	eb09 0007 	add.w	r0, r9, r7
34180efc:	2244      	movs	r2, #68	@ 0x44
34180efe:	4659      	mov	r1, fp
34180f00:	f011 f849 	bl	34191f96 <memcpy>
34180f04:	f8db 3000 	ldr.w	r3, [fp]
34180f08:	f108 0801 	add.w	r8, r8, #1
34180f0c:	f84a 3b04 	str.w	r3, [sl], #4
34180f10:	fa1f f388 	uxth.w	r3, r8
34180f14:	429e      	cmp	r6, r3
34180f16:	f107 0744 	add.w	r7, r7, #68	@ 0x44
34180f1a:	d8eb      	bhi.n	34180ef4 <evision_api_awb_init_profiles+0x1f4>
34180f1c:	1e73      	subs	r3, r6, #1
34180f1e:	b29b      	uxth	r3, r3
34180f20:	2e00      	cmp	r6, #0
34180f22:	f103 0301 	add.w	r3, r3, #1
34180f26:	bf14      	ite	ne
34180f28:	461a      	movne	r2, r3
34180f2a:	2201      	moveq	r2, #1
34180f2c:	f8c4 9274 	str.w	r9, [r4, #628]	@ 0x274
34180f30:	f504 71b2 	add.w	r1, r4, #356	@ 0x164
34180f34:	3a01      	subs	r2, #1
34180f36:	d16a      	bne.n	3418100e <evision_api_awb_init_profiles+0x30e>
34180f38:	2301      	movs	r3, #1
34180f3a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
34180f3e:	7023      	strb	r3, [r4, #0]
34180f40:	e746      	b.n	34180dd0 <evision_api_awb_init_profiles+0xd0>
34180f42:	eb02 0987 	add.w	r9, r2, r7, lsl #2
34180f46:	42b8      	cmp	r0, r7
34180f48:	edd9 7a00 	vldr	s15, [r9]
34180f4c:	ea4f 0887 	mov.w	r8, r7, lsl #2
34180f50:	f107 0a01 	add.w	sl, r7, #1
34180f54:	d91e      	bls.n	34180f94 <evision_api_awb_init_profiles+0x294>
34180f56:	f108 0804 	add.w	r8, r8, #4
34180f5a:	4490      	add	r8, r2
34180f5c:	ed98 7a00 	vldr	s14, [r8]
34180f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
34180f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180f68:	d814      	bhi.n	34180f94 <evision_api_awb_init_profiles+0x294>
34180f6a:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34180f6e:	4848      	ldr	r0, [pc, #288]	@ (34181090 <evision_api_awb_init_profiles+0x390>)
34180f70:	4798      	blx	r3
34180f72:	ed98 7a00 	vldr	s14, [r8]
34180f76:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180f7a:	ed8d 7b04 	vstr	d7, [sp, #16]
34180f7e:	f8cd a008 	str.w	sl, [sp, #8]
34180f82:	ed99 7a00 	vldr	s14, [r9]
34180f86:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180f8a:	463b      	mov	r3, r7
34180f8c:	ed8d 7b00 	vstr	d7, [sp]
34180f90:	4a40      	ldr	r2, [pc, #256]	@ (34181094 <evision_api_awb_init_profiles+0x394>)
34180f92:	e783      	b.n	34180e9c <evision_api_awb_init_profiles+0x19c>
34180f94:	fb0c f807 	mul.w	r8, ip, r7
34180f98:	eb05 0a08 	add.w	sl, r5, r8
34180f9c:	ed9a 7a00 	vldr	s14, [sl]
34180fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
34180fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180fa8:	f108 0844 	add.w	r8, r8, #68	@ 0x44
34180fac:	44a8      	add	r8, r5
34180fae:	da08      	bge.n	34180fc2 <evision_api_awb_init_profiles+0x2c2>
34180fb0:	ed98 7a00 	vldr	s14, [r8]
34180fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
34180fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180fbc:	f103 0301 	add.w	r3, r3, #1
34180fc0:	d882      	bhi.n	34180ec8 <evision_api_awb_init_profiles+0x1c8>
34180fc2:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34180fc6:	4834      	ldr	r0, [pc, #208]	@ (34181098 <evision_api_awb_init_profiles+0x398>)
34180fc8:	4798      	blx	r3
34180fca:	ed98 7a00 	vldr	s14, [r8]
34180fce:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180fd2:	ed8d 7b04 	vstr	d7, [sp, #16]
34180fd6:	ed9a 7a00 	vldr	s14, [sl]
34180fda:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180fde:	ed8d 7b02 	vstr	d7, [sp, #8]
34180fe2:	ed99 7a00 	vldr	s14, [r9]
34180fe6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34180fea:	463b      	mov	r3, r7
34180fec:	ed8d 7b00 	vstr	d7, [sp]
34180ff0:	f44f 7180 	mov.w	r1, #256	@ 0x100
34180ff4:	4a29      	ldr	r2, [pc, #164]	@ (3418109c <evision_api_awb_init_profiles+0x39c>)
34180ff6:	a806      	add	r0, sp, #24
34180ff8:	f010 fe2a 	bl	34191c50 <sniprintf>
34180ffc:	e753      	b.n	34180ea6 <evision_api_awb_init_profiles+0x1a6>
34180ffe:	eb02 0783 	add.w	r7, r2, r3, lsl #2
34181002:	683f      	ldr	r7, [r7, #0]
34181004:	eb04 0383 	add.w	r3, r4, r3, lsl #2
34181008:	f8c3 7110 	str.w	r7, [r3, #272]	@ 0x110
3418100c:	e766      	b.n	34180edc <evision_api_awb_init_profiles+0x1dc>
3418100e:	f8d4 3274 	ldr.w	r3, [r4, #628]	@ 0x274
34181012:	ed91 6a00 	vldr	s12, [r1]
34181016:	ed93 7a00 	vldr	s14, [r3]
3418101a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
3418101e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34181022:	ee36 6b4a 	vsub.f64	d6, d6, d10
34181026:	ee37 7b4a 	vsub.f64	d7, d7, d10
3418102a:	eeb4 6bc7 	vcmpe.f64	d6, d7
3418102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181032:	bf48      	it	mi
34181034:	f8c4 1274 	strmi.w	r1, [r4, #628]	@ 0x274
34181038:	3144      	adds	r1, #68	@ 0x44
3418103a:	e77b      	b.n	34180f34 <evision_api_awb_init_profiles+0x234>
3418103c:	f04f 30ff 	mov.w	r0, #4294967295
34181040:	b047      	add	sp, #284	@ 0x11c
34181042:	ecbd 8b06 	vpop	{d8-d10}
34181046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3418104a:	bf00      	nop
3418104c:	f3af 8000 	nop.w
34181050:	00000000 	.word	0x00000000
34181054:	40b38800 	.word	0x40b38800
34181058:	9999999a 	.word	0x9999999a
3418105c:	3fb99999 	.word	0x3fb99999
34181060:	00000000 	.word	0x00000000
34181064:	406ea000 	.word	0x406ea000
34181068:	3ff00000 	.word	0x3ff00000
3418106c:	42480000 	.word	0x42480000
34181070:	432f0000 	.word	0x432f0000
34181074:	341943f0 	.word	0x341943f0
34181078:	34194434 	.word	0x34194434
3418107c:	341944bb 	.word	0x341944bb
34181080:	34194519 	.word	0x34194519
34181084:	341945a1 	.word	0x341945a1
34181088:	341945fe 	.word	0x341945fe
3418108c:	34194662 	.word	0x34194662
34181090:	341946ba 	.word	0x341946ba
34181094:	34194729 	.word	0x34194729
34181098:	34194793 	.word	0x34194793
3418109c:	341947ea 	.word	0x341947ea
341810a0:	bff00000 	.word	0xbff00000
341810a4:	40080000 	.word	0x40080000
341810a8:	40240000 	.word	0x40240000

341810ac <evision_api_awb_run_average>:
341810ac:	b530      	push	{r4, r5, lr}
341810ae:	4605      	mov	r5, r0
341810b0:	4614      	mov	r4, r2
341810b2:	b08d      	sub	sp, #52	@ 0x34
341810b4:	b952      	cbnz	r2, 341810cc <evision_api_awb_run_average+0x20>
341810b6:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
341810ba:	481d      	ldr	r0, [pc, #116]	@ (34181130 <evision_api_awb_run_average+0x84>)
341810bc:	4798      	blx	r3
341810be:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
341810c2:	481c      	ldr	r0, [pc, #112]	@ (34181134 <evision_api_awb_run_average+0x88>)
341810c4:	4798      	blx	r3
341810c6:	4620      	mov	r0, r4
341810c8:	b00d      	add	sp, #52	@ 0x34
341810ca:	bd30      	pop	{r4, r5, pc}
341810cc:	ed93 2b04 	vldr	d2, [r3, #16]
341810d0:	ed93 1b02 	vldr	d1, [r3, #8]
341810d4:	ed93 0b00 	vldr	d0, [r3]
341810d8:	aa0a      	add	r2, sp, #40	@ 0x28
341810da:	a908      	add	r1, sp, #32
341810dc:	a806      	add	r0, sp, #24
341810de:	f000 f82f 	bl	34181140 <fzFshUNXje>
341810e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
341810e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
341810ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
341810ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
341810f2:	2301      	movs	r3, #1
341810f4:	4298      	cmp	r0, r3
341810f6:	4604      	mov	r4, r0
341810f8:	e9cd 3300 	strd	r3, r3, [sp]
341810fc:	d1df      	bne.n	341810be <evision_api_awb_run_average+0x12>
341810fe:	4669      	mov	r1, sp
34181100:	4628      	mov	r0, r5
34181102:	f7ff fb45 	bl	34180790 <eLGgzyBnqV>
34181106:	2801      	cmp	r0, #1
34181108:	4604      	mov	r4, r0
3418110a:	d003      	beq.n	34181114 <evision_api_awb_run_average+0x68>
3418110c:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
34181110:	4809      	ldr	r0, [pc, #36]	@ (34181138 <evision_api_awb_run_average+0x8c>)
34181112:	e7d7      	b.n	341810c4 <evision_api_awb_run_average+0x18>
34181114:	f895 3060 	ldrb.w	r3, [r5, #96]	@ 0x60
34181118:	2b01      	cmp	r3, #1
3418111a:	d1d4      	bne.n	341810c6 <evision_api_awb_run_average+0x1a>
3418111c:	4628      	mov	r0, r5
3418111e:	f7ff fd22 	bl	34180b66 <FLXvKtIdpl>
34181122:	2801      	cmp	r0, #1
34181124:	4604      	mov	r4, r0
34181126:	d0ce      	beq.n	341810c6 <evision_api_awb_run_average+0x1a>
34181128:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
3418112c:	4803      	ldr	r0, [pc, #12]	@ (3418113c <evision_api_awb_run_average+0x90>)
3418112e:	e7c9      	b.n	341810c4 <evision_api_awb_run_average+0x18>
34181130:	34194870 	.word	0x34194870
34181134:	341948d1 	.word	0x341948d1
34181138:	341948fa 	.word	0x341948fa
3418113c:	3419492e 	.word	0x3419492e

34181140 <fzFshUNXje>:
34181140:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
34181144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3418114a:	d409      	bmi.n	34181160 <fzFshUNXje+0x20>
3418114c:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
34181150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181154:	d404      	bmi.n	34181160 <fzFshUNXje+0x20>
34181156:	eeb5 2bc0 	vcmpe.f64	d2, #0.0
3418115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418115e:	d50d      	bpl.n	3418117c <fzFshUNXje+0x3c>
34181160:	ed8d 2b02 	vstr	d2, [sp, #8]
34181164:	ed8d 1b00 	vstr	d1, [sp]
34181168:	ec53 2b10 	vmov	r2, r3, d0
3418116c:	4844      	ldr	r0, [pc, #272]	@ (34181280 <fzFshUNXje+0x140>)
3418116e:	f010 fcff 	bl	34191b70 <iprintf>
34181172:	f04f 30ff 	mov.w	r0, #4294967295
34181176:	b005      	add	sp, #20
34181178:	f85d fb04 	ldr.w	pc, [sp], #4
3418117c:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 34181248 <fzFshUNXje+0x108>
34181180:	eeb4 0bc7 	vcmpe.f64	d0, d7
34181184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181188:	dc09      	bgt.n	3418119e <fzFshUNXje+0x5e>
3418118a:	eeb4 1bc7 	vcmpe.f64	d1, d7
3418118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181192:	dc04      	bgt.n	3418119e <fzFshUNXje+0x5e>
34181194:	eeb4 2bc7 	vcmpe.f64	d2, d7
34181198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418119c:	dd07      	ble.n	341811ae <fzFshUNXje+0x6e>
3418119e:	ed8d 2b02 	vstr	d2, [sp, #8]
341811a2:	ed8d 1b00 	vstr	d1, [sp]
341811a6:	ec53 2b10 	vmov	r2, r3, d0
341811aa:	4836      	ldr	r0, [pc, #216]	@ (34181284 <fzFshUNXje+0x144>)
341811ac:	e7df      	b.n	3418116e <fzFshUNXje+0x2e>
341811ae:	b128      	cbz	r0, 341811bc <fzFshUNXje+0x7c>
341811b0:	b189      	cbz	r1, 341811d6 <fzFshUNXje+0x96>
341811b2:	b9b2      	cbnz	r2, 341811e2 <fzFshUNXje+0xa2>
341811b4:	4934      	ldr	r1, [pc, #208]	@ (34181288 <fzFshUNXje+0x148>)
341811b6:	4b35      	ldr	r3, [pc, #212]	@ (3418128c <fzFshUNXje+0x14c>)
341811b8:	4608      	mov	r0, r1
341811ba:	e007      	b.n	341811cc <fzFshUNXje+0x8c>
341811bc:	b171      	cbz	r1, 341811dc <fzFshUNXje+0x9c>
341811be:	4933      	ldr	r1, [pc, #204]	@ (3418128c <fzFshUNXje+0x14c>)
341811c0:	4831      	ldr	r0, [pc, #196]	@ (34181288 <fzFshUNXje+0x148>)
341811c2:	2a00      	cmp	r2, #0
341811c4:	4a30      	ldr	r2, [pc, #192]	@ (34181288 <fzFshUNXje+0x148>)
341811c6:	4b31      	ldr	r3, [pc, #196]	@ (3418128c <fzFshUNXje+0x14c>)
341811c8:	bf18      	it	ne
341811ca:	4613      	movne	r3, r2
341811cc:	4602      	mov	r2, r0
341811ce:	4830      	ldr	r0, [pc, #192]	@ (34181290 <fzFshUNXje+0x150>)
341811d0:	f010 fcce 	bl	34191b70 <iprintf>
341811d4:	e7cd      	b.n	34181172 <fzFshUNXje+0x32>
341811d6:	492c      	ldr	r1, [pc, #176]	@ (34181288 <fzFshUNXje+0x148>)
341811d8:	482c      	ldr	r0, [pc, #176]	@ (3418128c <fzFshUNXje+0x14c>)
341811da:	e7f2      	b.n	341811c2 <fzFshUNXje+0x82>
341811dc:	492b      	ldr	r1, [pc, #172]	@ (3418128c <fzFshUNXje+0x14c>)
341811de:	4608      	mov	r0, r1
341811e0:	e7ef      	b.n	341811c2 <fzFshUNXje+0x82>
341811e2:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 34181250 <fzFshUNXje+0x110>
341811e6:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 34181258 <fzFshUNXje+0x118>
341811ea:	ee21 7b07 	vmul.f64	d7, d1, d7
341811ee:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
341811f2:	eea0 7b06 	vfma.f64	d7, d0, d6
341811f6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 34181260 <fzFshUNXje+0x120>
341811fa:	eea2 7b05 	vfma.f64	d7, d2, d5
341811fe:	eea7 5b06 	vfma.f64	d5, d7, d6
34181202:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 34181268 <fzFshUNXje+0x128>
34181206:	ed80 5b00 	vstr	d5, [r0]
3418120a:	ee27 7b41 	vnmul.f64	d7, d7, d1
3418120e:	eebb 5b0a 	vmov.f64	d5, #186	@ 0xc1d00000 -26.0
34181212:	eea0 7b05 	vfma.f64	d7, d0, d5
34181216:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 34181270 <fzFshUNXje+0x130>
3418121a:	eea2 7b05 	vfma.f64	d7, d2, d5
3418121e:	ee27 7b06 	vmul.f64	d7, d7, d6
34181222:	ed81 7b00 	vstr	d7, [r1]
34181226:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 34181278 <fzFshUNXje+0x138>
3418122a:	ee27 1b41 	vnmul.f64	d1, d7, d1
3418122e:	eeb2 7b04 	vmov.f64	d7, #36	@ 0x41200000  10.0
34181232:	eea0 1b05 	vfma.f64	d1, d0, d5
34181236:	eea2 1b47 	vfms.f64	d1, d2, d7
3418123a:	ee21 1b06 	vmul.f64	d1, d1, d6
3418123e:	2001      	movs	r0, #1
34181240:	ed82 1b00 	vstr	d1, [r2]
34181244:	e797      	b.n	34181176 <fzFshUNXje+0x36>
34181246:	bf00      	nop
34181248:	00000000 	.word	0x00000000
3418124c:	406fe000 	.word	0x406fe000
34181250:	00000000 	.word	0x00000000
34181254:	4063a000 	.word	0x4063a000
34181258:	00000000 	.word	0x00000000
3418125c:	40478000 	.word	0x40478000
34181260:	00000000 	.word	0x00000000
34181264:	3f700000 	.word	0x3f700000
34181268:	00000000 	.word	0x00000000
3418126c:	40558000 	.word	0x40558000
34181270:	00000000 	.word	0x00000000
34181274:	405c0000 	.word	0x405c0000
34181278:	00000000 	.word	0x00000000
3418127c:	40598000 	.word	0x40598000
34181280:	3419496b 	.word	0x3419496b
34181284:	341949a9 	.word	0x341949a9
34181288:	34194965 	.word	0x34194965
3418128c:	34194963 	.word	0x34194963
34181290:	341949e9 	.word	0x341949e9
34181294:	00000000 	.word	0x00000000

34181298 <evision_api_st_ae_new>:
34181298:	b510      	push	{r4, lr}
3418129a:	4604      	mov	r4, r0
3418129c:	b090      	sub	sp, #64	@ 0x40
3418129e:	b160      	cbz	r0, 341812ba <evision_api_st_ae_new+0x22>
341812a0:	2300      	movs	r3, #0
341812a2:	4c07      	ldr	r4, [pc, #28]	@ (341812c0 <evision_api_st_ae_new+0x28>)
341812a4:	2140      	movs	r1, #64	@ 0x40
341812a6:	7023      	strb	r3, [r4, #0]
341812a8:	65a0      	str	r0, [r4, #88]	@ 0x58
341812aa:	4b06      	ldr	r3, [pc, #24]	@ (341812c4 <evision_api_st_ae_new+0x2c>)
341812ac:	4668      	mov	r0, sp
341812ae:	4a06      	ldr	r2, [pc, #24]	@ (341812c8 <evision_api_st_ae_new+0x30>)
341812b0:	f010 fcce 	bl	34191c50 <sniprintf>
341812b4:	4668      	mov	r0, sp
341812b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
341812b8:	4798      	blx	r3
341812ba:	4620      	mov	r0, r4
341812bc:	b010      	add	sp, #64	@ 0x40
341812be:	bd10      	pop	{r4, pc}
341812c0:	341c0430 	.word	0x341c0430
341812c4:	34196e36 	.word	0x34196e36
341812c8:	34194a33 	.word	0x34194a33

341812cc <evision_api_st_ae_delete>:
341812cc:	2800      	cmp	r0, #0
341812ce:	bf14      	ite	ne
341812d0:	2001      	movne	r0, #1
341812d2:	f04f 30ff 	moveq.w	r0, #4294967295
341812d6:	4770      	bx	lr

341812d8 <sTiPARvPaB>:
341812d8:	2238      	movs	r2, #56	@ 0x38
341812da:	230a      	movs	r3, #10
341812dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
341812e0:	2364      	movs	r3, #100	@ 0x64
341812e2:	222d      	movs	r2, #45	@ 0x2d
341812e4:	2178      	movs	r1, #120	@ 0x78
341812e6:	e9c0 3206 	strd	r3, r2, [r0, #24]
341812ea:	f240 52dc 	movw	r2, #1500	@ 0x5dc
341812ee:	b530      	push	{r4, r5, lr}
341812f0:	e9c0 1208 	strd	r1, r2, [r0, #32]
341812f4:	f241 7470 	movw	r4, #6000	@ 0x1770
341812f8:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
341812fc:	e9c0 420a 	strd	r4, r2, [r0, #40]	@ 0x28
34181300:	a50b      	add	r5, pc, #44	@ (adr r5, 34181330 <sTiPARvPaB+0x58>)
34181302:	e9d5 4500 	ldrd	r4, r5, [r5]
34181306:	2205      	movs	r2, #5
34181308:	f04f 0c00 	mov.w	ip, #0
3418130c:	6502      	str	r2, [r0, #80]	@ 0x50
3418130e:	f248 02e8 	movw	r2, #33000	@ 0x80e8
34181312:	e9c0 c210 	strd	ip, r2, [r0, #64]	@ 0x40
34181316:	2201      	movs	r2, #1
34181318:	e9c0 450c 	strd	r4, r5, [r0, #48]	@ 0x30
3418131c:	a506      	add	r5, pc, #24	@ (adr r5, 34181338 <sTiPARvPaB+0x60>)
3418131e:	e9d5 4500 	ldrd	r4, r5, [r5]
34181322:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
34181326:	e9c0 450e 	strd	r4, r5, [r0, #56]	@ 0x38
3418132a:	bd30      	pop	{r4, r5, pc}
3418132c:	f3af 8000 	nop.w
34181330:	40000000 	.word	0x40000000
34181334:	3f947ae1 	.word	0x3f947ae1
34181338:	e0000000 	.word	0xe0000000
3418133c:	3f70624d 	.word	0x3f70624d

34181340 <evision_api_st_ae_init>:
34181340:	b510      	push	{r4, lr}
34181342:	4604      	mov	r4, r0
34181344:	b120      	cbz	r0, 34181350 <evision_api_st_ae_init+0x10>
34181346:	f7ff ffc7 	bl	341812d8 <sTiPARvPaB>
3418134a:	2001      	movs	r0, #1
3418134c:	7020      	strb	r0, [r4, #0]
3418134e:	bd10      	pop	{r4, pc}
34181350:	f04f 30ff 	mov.w	r0, #4294967295
34181354:	e7fb      	b.n	3418134e <evision_api_st_ae_init+0xe>

34181356 <evision_api_st_ae_process>:
34181356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3418135a:	460e      	mov	r6, r1
3418135c:	4604      	mov	r4, r0
3418135e:	2800      	cmp	r0, #0
34181360:	f000 80e1 	beq.w	34181526 <evision_api_st_ae_process+0x1d0>
34181364:	7801      	ldrb	r1, [r0, #0]
34181366:	2901      	cmp	r1, #1
34181368:	d10b      	bne.n	34181382 <evision_api_st_ae_process+0x2c>
3418136a:	2102      	movs	r1, #2
3418136c:	7001      	strb	r1, [r0, #0]
3418136e:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
34181370:	e9c4 2601 	strd	r2, r6, [r4, #4]
34181374:	42b5      	cmp	r5, r6
34181376:	d208      	bcs.n	3418138a <evision_api_st_ae_process+0x34>
34181378:	6c61      	ldr	r1, [r4, #68]	@ 0x44
3418137a:	4291      	cmp	r1, r2
3418137c:	d905      	bls.n	3418138a <evision_api_st_ae_process+0x34>
3418137e:	60a5      	str	r5, [r4, #8]
34181380:	e04c      	b.n	3418141c <evision_api_st_ae_process+0xc6>
34181382:	2902      	cmp	r1, #2
34181384:	d0f3      	beq.n	3418136e <evision_api_st_ae_process+0x18>
34181386:	2000      	movs	r0, #0
34181388:	e049      	b.n	3418141e <evision_api_st_ae_process+0xc8>
3418138a:	f8d4 c010 	ldr.w	ip, [r4, #16]
3418138e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
34181392:	ee07 ca90 	vmov	s15, ip
34181396:	eeb8 6a67 	vcvt.f32.u32	s12, s15
3418139a:	ee07 3a90 	vmov	s15, r3
3418139e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
341813a2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
341813a6:	ee37 7b05 	vadd.f64	d7, d7, d5
341813aa:	ee86 0b07 	vdiv.f64	d0, d6, d7
341813ae:	6d21      	ldr	r1, [r4, #80]	@ 0x50
341813b0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
341813b4:	428b      	cmp	r3, r1
341813b6:	d24b      	bcs.n	34181450 <evision_api_st_ae_process+0xfa>
341813b8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
341813bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
341813c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341813c4:	d444      	bmi.n	34181450 <evision_api_st_ae_process+0xfa>
341813c6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
341813c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
341813cc:	428a      	cmp	r2, r1
341813ce:	d220      	bcs.n	34181412 <evision_api_st_ae_process+0xbc>
341813d0:	2a01      	cmp	r2, #1
341813d2:	4613      	mov	r3, r2
341813d4:	bf38      	it	cc
341813d6:	2301      	movcc	r3, #1
341813d8:	ee07 3a90 	vmov	s15, r3
341813dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
341813e0:	ee67 7a80 	vmul.f32	s15, s15, s0
341813e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
341813e8:	ee17 3a90 	vmov	r3, s15
341813ec:	428b      	cmp	r3, r1
341813ee:	bfc1      	itttt	gt
341813f0:	ee07 1a90 	vmovgt	s15, r1
341813f4:	eeb8 6ae7 	vcvtgt.f32.s32	s12, s15
341813f8:	ee07 2a90 	vmovgt	s15, r2
341813fc:	eef8 6a67 	vcvtgt.f32.u32	s13, s15
34181400:	bfc3      	ittte	gt
34181402:	eec6 7a26 	vdivgt.f32	s15, s12, s13
34181406:	460b      	movgt	r3, r1
34181408:	ee80 0a27 	vdivgt.f32	s0, s0, s15
3418140c:	eeb0 0a47 	vmovle.f32	s0, s14
34181410:	6063      	str	r3, [r4, #4]
34181412:	eeb4 0ac7 	vcmpe.f32	s0, s14
34181416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418141a:	dc02      	bgt.n	34181422 <evision_api_st_ae_process+0xcc>
3418141c:	2001      	movs	r0, #1
3418141e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34181422:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34181426:	f011 fc6b 	bl	34192d00 <log10>
3418142a:	eeb3 7b04 	vmov.f64	d7, #52	@ 0x41a00000  20.0
3418142e:	ee20 0b07 	vmul.f64	d0, d0, d7
34181432:	ed9f 7b3f 	vldr	d7, [pc, #252]	@ 34181530 <evision_api_st_ae_process+0x1da>
34181436:	ee20 0b07 	vmul.f64	d0, d0, d7
3418143a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
3418143e:	ee10 3a10 	vmov	r3, s0
34181442:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
34181444:	4433      	add	r3, r6
34181446:	4293      	cmp	r3, r2
34181448:	bfd4      	ite	le
3418144a:	60a3      	strle	r3, [r4, #8]
3418144c:	60a2      	strgt	r2, [r4, #8]
3418144e:	e7e5      	b.n	3418141c <evision_api_st_ae_process+0xc6>
34181450:	ebac 0703 	sub.w	r7, ip, r3
34181454:	69e1      	ldr	r1, [r4, #28]
34181456:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
3418145a:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
3418145e:	4288      	cmp	r0, r1
34181460:	d847      	bhi.n	341814f2 <evision_api_st_ae_process+0x19c>
34181462:	6a60      	ldr	r0, [r4, #36]	@ 0x24
34181464:	f8d4 e014 	ldr.w	lr, [r4, #20]
34181468:	69a1      	ldr	r1, [r4, #24]
3418146a:	eb0e 080c 	add.w	r8, lr, ip
3418146e:	4598      	cmp	r8, r3
34181470:	fb07 f101 	mul.w	r1, r7, r1
34181474:	d243      	bcs.n	341814fe <evision_api_st_ae_process+0x1a8>
34181476:	ee07 0a90 	vmov	s15, r0
3418147a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 34181538 <evision_api_st_ae_process+0x1e2>
3418147e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34181482:	ee67 7a87 	vmul.f32	s15, s15, s14
34181486:	ee07 1a10 	vmov	s14, r1
3418148a:	eef1 6a67 	vneg.f32	s13, s15
3418148e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34181492:	eeb4 7ae6 	vcmpe.f32	s14, s13
34181496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418149a:	d504      	bpl.n	341814a6 <evision_api_st_ae_process+0x150>
3418149c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
341814a0:	ee17 3a90 	vmov	r3, s15
341814a4:	4259      	negs	r1, r3
341814a6:	2900      	cmp	r1, #0
341814a8:	d0b8      	beq.n	3418141c <evision_api_st_ae_process+0xc6>
341814aa:	42b5      	cmp	r5, r6
341814ac:	d132      	bne.n	34181514 <evision_api_st_ae_process+0x1be>
341814ae:	6c60      	ldr	r0, [r4, #68]	@ 0x44
341814b0:	4290      	cmp	r0, r2
341814b2:	d801      	bhi.n	341814b8 <evision_api_st_ae_process+0x162>
341814b4:	2900      	cmp	r1, #0
341814b6:	da2d      	bge.n	34181514 <evision_api_st_ae_process+0x1be>
341814b8:	fb02 7707 	mla	r7, r2, r7, r7
341814bc:	ee07 2a90 	vmov	s15, r2
341814c0:	ee06 7a90 	vmov	s13, r7
341814c4:	2900      	cmp	r1, #0
341814c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
341814ca:	eeb8 6be6 	vcvt.f64.s32	d6, s13
341814ce:	da1e      	bge.n	3418150e <evision_api_st_ae_process+0x1b8>
341814d0:	ed94 5b0e 	vldr	d5, [r4, #56]	@ 0x38
341814d4:	eea5 7b06 	vfma.f64	d7, d5, d6
341814d8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
341814dc:	ee17 2a10 	vmov	r2, s14
341814e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
341814e2:	429a      	cmp	r2, r3
341814e4:	bfb8      	it	lt
341814e6:	461a      	movlt	r2, r3
341814e8:	4282      	cmp	r2, r0
341814ea:	bfd4      	ite	le
341814ec:	6062      	strle	r2, [r4, #4]
341814ee:	6060      	strgt	r0, [r4, #4]
341814f0:	e794      	b.n	3418141c <evision_api_st_ae_process+0xc6>
341814f2:	6a21      	ldr	r1, [r4, #32]
341814f4:	4288      	cmp	r0, r1
341814f6:	bf2c      	ite	cs
341814f8:	6ae0      	ldrcs	r0, [r4, #44]	@ 0x2c
341814fa:	6aa0      	ldrcc	r0, [r4, #40]	@ 0x28
341814fc:	e7b2      	b.n	34181464 <evision_api_st_ae_process+0x10e>
341814fe:	ebac 0c0e 	sub.w	ip, ip, lr
34181502:	459c      	cmp	ip, r3
34181504:	dd8a      	ble.n	3418141c <evision_api_st_ae_process+0xc6>
34181506:	4281      	cmp	r1, r0
34181508:	bfa8      	it	ge
3418150a:	4601      	movge	r1, r0
3418150c:	e7cb      	b.n	341814a6 <evision_api_st_ae_process+0x150>
3418150e:	ed94 5b0c 	vldr	d5, [r4, #48]	@ 0x30
34181512:	e7df      	b.n	341814d4 <evision_api_st_ae_process+0x17e>
34181514:	440e      	add	r6, r1
34181516:	42b5      	cmp	r5, r6
34181518:	f73f af31 	bgt.w	3418137e <evision_api_st_ae_process+0x28>
3418151c:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
3418151e:	42b5      	cmp	r5, r6
34181520:	bfa8      	it	ge
34181522:	4635      	movge	r5, r6
34181524:	e72b      	b.n	3418137e <evision_api_st_ae_process+0x28>
34181526:	f04f 30ff 	mov.w	r0, #4294967295
3418152a:	e778      	b.n	3418141e <evision_api_st_ae_process+0xc8>
3418152c:	f3af 8000 	nop.w
34181530:	00000000 	.word	0x00000000
34181534:	408f4000 	.word	0x408f4000
34181538:	3f59999a 	.word	0x3f59999a

3418153c <__aeabi_ldivmod>:
3418153c:	b97b      	cbnz	r3, 3418155e <__aeabi_ldivmod+0x22>
3418153e:	b972      	cbnz	r2, 3418155e <__aeabi_ldivmod+0x22>
34181540:	2900      	cmp	r1, #0
34181542:	bfbe      	ittt	lt
34181544:	2000      	movlt	r0, #0
34181546:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
3418154a:	e006      	blt.n	3418155a <__aeabi_ldivmod+0x1e>
3418154c:	bf08      	it	eq
3418154e:	2800      	cmpeq	r0, #0
34181550:	bf1c      	itt	ne
34181552:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
34181556:	f04f 30ff 	movne.w	r0, #4294967295
3418155a:	f000 b9fb 	b.w	34181954 <__aeabi_idiv0>
3418155e:	f1ad 0c08 	sub.w	ip, sp, #8
34181562:	e96d ce04 	strd	ip, lr, [sp, #-16]!
34181566:	2900      	cmp	r1, #0
34181568:	db09      	blt.n	3418157e <__aeabi_ldivmod+0x42>
3418156a:	2b00      	cmp	r3, #0
3418156c:	db1a      	blt.n	341815a4 <__aeabi_ldivmod+0x68>
3418156e:	f000 f84d 	bl	3418160c <__udivmoddi4>
34181572:	f8dd e004 	ldr.w	lr, [sp, #4]
34181576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
3418157a:	b004      	add	sp, #16
3418157c:	4770      	bx	lr
3418157e:	4240      	negs	r0, r0
34181580:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34181584:	2b00      	cmp	r3, #0
34181586:	db1b      	blt.n	341815c0 <__aeabi_ldivmod+0x84>
34181588:	f000 f840 	bl	3418160c <__udivmoddi4>
3418158c:	f8dd e004 	ldr.w	lr, [sp, #4]
34181590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34181594:	b004      	add	sp, #16
34181596:	4240      	negs	r0, r0
34181598:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
3418159c:	4252      	negs	r2, r2
3418159e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
341815a2:	4770      	bx	lr
341815a4:	4252      	negs	r2, r2
341815a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
341815aa:	f000 f82f 	bl	3418160c <__udivmoddi4>
341815ae:	f8dd e004 	ldr.w	lr, [sp, #4]
341815b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
341815b6:	b004      	add	sp, #16
341815b8:	4240      	negs	r0, r0
341815ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
341815be:	4770      	bx	lr
341815c0:	4252      	negs	r2, r2
341815c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
341815c6:	f000 f821 	bl	3418160c <__udivmoddi4>
341815ca:	f8dd e004 	ldr.w	lr, [sp, #4]
341815ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
341815d2:	b004      	add	sp, #16
341815d4:	4252      	negs	r2, r2
341815d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
341815da:	4770      	bx	lr

341815dc <__aeabi_uldivmod>:
341815dc:	b953      	cbnz	r3, 341815f4 <__aeabi_uldivmod+0x18>
341815de:	b94a      	cbnz	r2, 341815f4 <__aeabi_uldivmod+0x18>
341815e0:	2900      	cmp	r1, #0
341815e2:	bf08      	it	eq
341815e4:	2800      	cmpeq	r0, #0
341815e6:	bf1c      	itt	ne
341815e8:	f04f 31ff 	movne.w	r1, #4294967295
341815ec:	f04f 30ff 	movne.w	r0, #4294967295
341815f0:	f000 b9b0 	b.w	34181954 <__aeabi_idiv0>
341815f4:	f1ad 0c08 	sub.w	ip, sp, #8
341815f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
341815fc:	f000 f806 	bl	3418160c <__udivmoddi4>
34181600:	f8dd e004 	ldr.w	lr, [sp, #4]
34181604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34181608:	b004      	add	sp, #16
3418160a:	4770      	bx	lr

3418160c <__udivmoddi4>:
3418160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34181610:	9d09      	ldr	r5, [sp, #36]	@ 0x24
34181612:	4688      	mov	r8, r1
34181614:	4604      	mov	r4, r0
34181616:	468e      	mov	lr, r1
34181618:	2b00      	cmp	r3, #0
3418161a:	d14a      	bne.n	341816b2 <__udivmoddi4+0xa6>
3418161c:	428a      	cmp	r2, r1
3418161e:	4617      	mov	r7, r2
34181620:	d95f      	bls.n	341816e2 <__udivmoddi4+0xd6>
34181622:	fab2 f682 	clz	r6, r2
34181626:	b14e      	cbz	r6, 3418163c <__udivmoddi4+0x30>
34181628:	f1c6 0320 	rsb	r3, r6, #32
3418162c:	fa01 fe06 	lsl.w	lr, r1, r6
34181630:	40b7      	lsls	r7, r6
34181632:	40b4      	lsls	r4, r6
34181634:	fa20 f303 	lsr.w	r3, r0, r3
34181638:	ea43 0e0e 	orr.w	lr, r3, lr
3418163c:	ea4f 4817 	mov.w	r8, r7, lsr #16
34181640:	fa1f fc87 	uxth.w	ip, r7
34181644:	0c23      	lsrs	r3, r4, #16
34181646:	fbbe f1f8 	udiv	r1, lr, r8
3418164a:	fb08 ee11 	mls	lr, r8, r1, lr
3418164e:	fb01 f20c 	mul.w	r2, r1, ip
34181652:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
34181656:	429a      	cmp	r2, r3
34181658:	d907      	bls.n	3418166a <__udivmoddi4+0x5e>
3418165a:	18fb      	adds	r3, r7, r3
3418165c:	f101 30ff 	add.w	r0, r1, #4294967295
34181660:	d202      	bcs.n	34181668 <__udivmoddi4+0x5c>
34181662:	429a      	cmp	r2, r3
34181664:	f200 8154 	bhi.w	34181910 <__udivmoddi4+0x304>
34181668:	4601      	mov	r1, r0
3418166a:	1a9b      	subs	r3, r3, r2
3418166c:	b2a2      	uxth	r2, r4
3418166e:	fbb3 f0f8 	udiv	r0, r3, r8
34181672:	fb08 3310 	mls	r3, r8, r0, r3
34181676:	fb00 fc0c 	mul.w	ip, r0, ip
3418167a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3418167e:	4594      	cmp	ip, r2
34181680:	d90b      	bls.n	3418169a <__udivmoddi4+0x8e>
34181682:	18ba      	adds	r2, r7, r2
34181684:	f100 33ff 	add.w	r3, r0, #4294967295
34181688:	bf2c      	ite	cs
3418168a:	2401      	movcs	r4, #1
3418168c:	2400      	movcc	r4, #0
3418168e:	4594      	cmp	ip, r2
34181690:	d902      	bls.n	34181698 <__udivmoddi4+0x8c>
34181692:	2c00      	cmp	r4, #0
34181694:	f000 813f 	beq.w	34181916 <__udivmoddi4+0x30a>
34181698:	4618      	mov	r0, r3
3418169a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
3418169e:	eba2 020c 	sub.w	r2, r2, ip
341816a2:	2100      	movs	r1, #0
341816a4:	b11d      	cbz	r5, 341816ae <__udivmoddi4+0xa2>
341816a6:	40f2      	lsrs	r2, r6
341816a8:	2300      	movs	r3, #0
341816aa:	e9c5 2300 	strd	r2, r3, [r5]
341816ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
341816b2:	428b      	cmp	r3, r1
341816b4:	d905      	bls.n	341816c2 <__udivmoddi4+0xb6>
341816b6:	b10d      	cbz	r5, 341816bc <__udivmoddi4+0xb0>
341816b8:	e9c5 0100 	strd	r0, r1, [r5]
341816bc:	2100      	movs	r1, #0
341816be:	4608      	mov	r0, r1
341816c0:	e7f5      	b.n	341816ae <__udivmoddi4+0xa2>
341816c2:	fab3 f183 	clz	r1, r3
341816c6:	2900      	cmp	r1, #0
341816c8:	d14e      	bne.n	34181768 <__udivmoddi4+0x15c>
341816ca:	4543      	cmp	r3, r8
341816cc:	f0c0 8112 	bcc.w	341818f4 <__udivmoddi4+0x2e8>
341816d0:	4282      	cmp	r2, r0
341816d2:	f240 810f 	bls.w	341818f4 <__udivmoddi4+0x2e8>
341816d6:	4608      	mov	r0, r1
341816d8:	2d00      	cmp	r5, #0
341816da:	d0e8      	beq.n	341816ae <__udivmoddi4+0xa2>
341816dc:	e9c5 4e00 	strd	r4, lr, [r5]
341816e0:	e7e5      	b.n	341816ae <__udivmoddi4+0xa2>
341816e2:	2a00      	cmp	r2, #0
341816e4:	f000 80ac 	beq.w	34181840 <__udivmoddi4+0x234>
341816e8:	fab2 f682 	clz	r6, r2
341816ec:	2e00      	cmp	r6, #0
341816ee:	f040 80bb 	bne.w	34181868 <__udivmoddi4+0x25c>
341816f2:	1a8b      	subs	r3, r1, r2
341816f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
341816f8:	b2bc      	uxth	r4, r7
341816fa:	2101      	movs	r1, #1
341816fc:	0c02      	lsrs	r2, r0, #16
341816fe:	b280      	uxth	r0, r0
34181700:	fbb3 fcfe 	udiv	ip, r3, lr
34181704:	fb0e 331c 	mls	r3, lr, ip, r3
34181708:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
3418170c:	fb04 f20c 	mul.w	r2, r4, ip
34181710:	429a      	cmp	r2, r3
34181712:	d90e      	bls.n	34181732 <__udivmoddi4+0x126>
34181714:	18fb      	adds	r3, r7, r3
34181716:	f10c 38ff 	add.w	r8, ip, #4294967295
3418171a:	bf2c      	ite	cs
3418171c:	f04f 0901 	movcs.w	r9, #1
34181720:	f04f 0900 	movcc.w	r9, #0
34181724:	429a      	cmp	r2, r3
34181726:	d903      	bls.n	34181730 <__udivmoddi4+0x124>
34181728:	f1b9 0f00 	cmp.w	r9, #0
3418172c:	f000 80ec 	beq.w	34181908 <__udivmoddi4+0x2fc>
34181730:	46c4      	mov	ip, r8
34181732:	1a9b      	subs	r3, r3, r2
34181734:	fbb3 f8fe 	udiv	r8, r3, lr
34181738:	fb0e 3318 	mls	r3, lr, r8, r3
3418173c:	fb04 f408 	mul.w	r4, r4, r8
34181740:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34181744:	4294      	cmp	r4, r2
34181746:	d90b      	bls.n	34181760 <__udivmoddi4+0x154>
34181748:	18ba      	adds	r2, r7, r2
3418174a:	f108 33ff 	add.w	r3, r8, #4294967295
3418174e:	bf2c      	ite	cs
34181750:	2001      	movcs	r0, #1
34181752:	2000      	movcc	r0, #0
34181754:	4294      	cmp	r4, r2
34181756:	d902      	bls.n	3418175e <__udivmoddi4+0x152>
34181758:	2800      	cmp	r0, #0
3418175a:	f000 80d1 	beq.w	34181900 <__udivmoddi4+0x2f4>
3418175e:	4698      	mov	r8, r3
34181760:	1b12      	subs	r2, r2, r4
34181762:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
34181766:	e79d      	b.n	341816a4 <__udivmoddi4+0x98>
34181768:	f1c1 0620 	rsb	r6, r1, #32
3418176c:	408b      	lsls	r3, r1
3418176e:	fa08 f401 	lsl.w	r4, r8, r1
34181772:	fa00 f901 	lsl.w	r9, r0, r1
34181776:	fa22 f706 	lsr.w	r7, r2, r6
3418177a:	fa28 f806 	lsr.w	r8, r8, r6
3418177e:	408a      	lsls	r2, r1
34181780:	431f      	orrs	r7, r3
34181782:	fa20 f306 	lsr.w	r3, r0, r6
34181786:	0c38      	lsrs	r0, r7, #16
34181788:	4323      	orrs	r3, r4
3418178a:	fa1f fc87 	uxth.w	ip, r7
3418178e:	0c1c      	lsrs	r4, r3, #16
34181790:	fbb8 fef0 	udiv	lr, r8, r0
34181794:	fb00 881e 	mls	r8, r0, lr, r8
34181798:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
3418179c:	fb0e f80c 	mul.w	r8, lr, ip
341817a0:	45a0      	cmp	r8, r4
341817a2:	d90e      	bls.n	341817c2 <__udivmoddi4+0x1b6>
341817a4:	193c      	adds	r4, r7, r4
341817a6:	f10e 3aff 	add.w	sl, lr, #4294967295
341817aa:	bf2c      	ite	cs
341817ac:	f04f 0b01 	movcs.w	fp, #1
341817b0:	f04f 0b00 	movcc.w	fp, #0
341817b4:	45a0      	cmp	r8, r4
341817b6:	d903      	bls.n	341817c0 <__udivmoddi4+0x1b4>
341817b8:	f1bb 0f00 	cmp.w	fp, #0
341817bc:	f000 80b8 	beq.w	34181930 <__udivmoddi4+0x324>
341817c0:	46d6      	mov	lr, sl
341817c2:	eba4 0408 	sub.w	r4, r4, r8
341817c6:	fa1f f883 	uxth.w	r8, r3
341817ca:	fbb4 f3f0 	udiv	r3, r4, r0
341817ce:	fb00 4413 	mls	r4, r0, r3, r4
341817d2:	fb03 fc0c 	mul.w	ip, r3, ip
341817d6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
341817da:	45a4      	cmp	ip, r4
341817dc:	d90e      	bls.n	341817fc <__udivmoddi4+0x1f0>
341817de:	193c      	adds	r4, r7, r4
341817e0:	f103 30ff 	add.w	r0, r3, #4294967295
341817e4:	bf2c      	ite	cs
341817e6:	f04f 0801 	movcs.w	r8, #1
341817ea:	f04f 0800 	movcc.w	r8, #0
341817ee:	45a4      	cmp	ip, r4
341817f0:	d903      	bls.n	341817fa <__udivmoddi4+0x1ee>
341817f2:	f1b8 0f00 	cmp.w	r8, #0
341817f6:	f000 809f 	beq.w	34181938 <__udivmoddi4+0x32c>
341817fa:	4603      	mov	r3, r0
341817fc:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
34181800:	eba4 040c 	sub.w	r4, r4, ip
34181804:	fba0 ec02 	umull	lr, ip, r0, r2
34181808:	4564      	cmp	r4, ip
3418180a:	4673      	mov	r3, lr
3418180c:	46e0      	mov	r8, ip
3418180e:	d302      	bcc.n	34181816 <__udivmoddi4+0x20a>
34181810:	d107      	bne.n	34181822 <__udivmoddi4+0x216>
34181812:	45f1      	cmp	r9, lr
34181814:	d205      	bcs.n	34181822 <__udivmoddi4+0x216>
34181816:	ebbe 0302 	subs.w	r3, lr, r2
3418181a:	eb6c 0c07 	sbc.w	ip, ip, r7
3418181e:	3801      	subs	r0, #1
34181820:	46e0      	mov	r8, ip
34181822:	b15d      	cbz	r5, 3418183c <__udivmoddi4+0x230>
34181824:	ebb9 0203 	subs.w	r2, r9, r3
34181828:	eb64 0408 	sbc.w	r4, r4, r8
3418182c:	fa04 f606 	lsl.w	r6, r4, r6
34181830:	fa22 f301 	lsr.w	r3, r2, r1
34181834:	40cc      	lsrs	r4, r1
34181836:	431e      	orrs	r6, r3
34181838:	e9c5 6400 	strd	r6, r4, [r5]
3418183c:	2100      	movs	r1, #0
3418183e:	e736      	b.n	341816ae <__udivmoddi4+0xa2>
34181840:	fbb1 fcf2 	udiv	ip, r1, r2
34181844:	0c01      	lsrs	r1, r0, #16
34181846:	4614      	mov	r4, r2
34181848:	b280      	uxth	r0, r0
3418184a:	4696      	mov	lr, r2
3418184c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34181850:	2620      	movs	r6, #32
34181852:	4690      	mov	r8, r2
34181854:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34181858:	4610      	mov	r0, r2
3418185a:	fbb1 f1f2 	udiv	r1, r1, r2
3418185e:	eba3 0308 	sub.w	r3, r3, r8
34181862:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34181866:	e74b      	b.n	34181700 <__udivmoddi4+0xf4>
34181868:	40b7      	lsls	r7, r6
3418186a:	f1c6 0320 	rsb	r3, r6, #32
3418186e:	fa01 f206 	lsl.w	r2, r1, r6
34181872:	fa21 f803 	lsr.w	r8, r1, r3
34181876:	ea4f 4e17 	mov.w	lr, r7, lsr #16
3418187a:	fa20 f303 	lsr.w	r3, r0, r3
3418187e:	b2bc      	uxth	r4, r7
34181880:	40b0      	lsls	r0, r6
34181882:	4313      	orrs	r3, r2
34181884:	0c02      	lsrs	r2, r0, #16
34181886:	0c19      	lsrs	r1, r3, #16
34181888:	b280      	uxth	r0, r0
3418188a:	fbb8 f9fe 	udiv	r9, r8, lr
3418188e:	fb0e 8819 	mls	r8, lr, r9, r8
34181892:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34181896:	fb09 f804 	mul.w	r8, r9, r4
3418189a:	4588      	cmp	r8, r1
3418189c:	d951      	bls.n	34181942 <__udivmoddi4+0x336>
3418189e:	1879      	adds	r1, r7, r1
341818a0:	f109 3cff 	add.w	ip, r9, #4294967295
341818a4:	bf2c      	ite	cs
341818a6:	f04f 0a01 	movcs.w	sl, #1
341818aa:	f04f 0a00 	movcc.w	sl, #0
341818ae:	4588      	cmp	r8, r1
341818b0:	d902      	bls.n	341818b8 <__udivmoddi4+0x2ac>
341818b2:	f1ba 0f00 	cmp.w	sl, #0
341818b6:	d031      	beq.n	3418191c <__udivmoddi4+0x310>
341818b8:	eba1 0108 	sub.w	r1, r1, r8
341818bc:	fbb1 f9fe 	udiv	r9, r1, lr
341818c0:	fb09 f804 	mul.w	r8, r9, r4
341818c4:	fb0e 1119 	mls	r1, lr, r9, r1
341818c8:	b29b      	uxth	r3, r3
341818ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341818ce:	4543      	cmp	r3, r8
341818d0:	d235      	bcs.n	3418193e <__udivmoddi4+0x332>
341818d2:	18fb      	adds	r3, r7, r3
341818d4:	f109 31ff 	add.w	r1, r9, #4294967295
341818d8:	bf2c      	ite	cs
341818da:	f04f 0a01 	movcs.w	sl, #1
341818de:	f04f 0a00 	movcc.w	sl, #0
341818e2:	4543      	cmp	r3, r8
341818e4:	d2bb      	bcs.n	3418185e <__udivmoddi4+0x252>
341818e6:	f1ba 0f00 	cmp.w	sl, #0
341818ea:	d1b8      	bne.n	3418185e <__udivmoddi4+0x252>
341818ec:	f1a9 0102 	sub.w	r1, r9, #2
341818f0:	443b      	add	r3, r7
341818f2:	e7b4      	b.n	3418185e <__udivmoddi4+0x252>
341818f4:	1a84      	subs	r4, r0, r2
341818f6:	eb68 0203 	sbc.w	r2, r8, r3
341818fa:	2001      	movs	r0, #1
341818fc:	4696      	mov	lr, r2
341818fe:	e6eb      	b.n	341816d8 <__udivmoddi4+0xcc>
34181900:	443a      	add	r2, r7
34181902:	f1a8 0802 	sub.w	r8, r8, #2
34181906:	e72b      	b.n	34181760 <__udivmoddi4+0x154>
34181908:	f1ac 0c02 	sub.w	ip, ip, #2
3418190c:	443b      	add	r3, r7
3418190e:	e710      	b.n	34181732 <__udivmoddi4+0x126>
34181910:	3902      	subs	r1, #2
34181912:	443b      	add	r3, r7
34181914:	e6a9      	b.n	3418166a <__udivmoddi4+0x5e>
34181916:	443a      	add	r2, r7
34181918:	3802      	subs	r0, #2
3418191a:	e6be      	b.n	3418169a <__udivmoddi4+0x8e>
3418191c:	eba7 0808 	sub.w	r8, r7, r8
34181920:	f1a9 0c02 	sub.w	ip, r9, #2
34181924:	4441      	add	r1, r8
34181926:	fbb1 f9fe 	udiv	r9, r1, lr
3418192a:	fb09 f804 	mul.w	r8, r9, r4
3418192e:	e7c9      	b.n	341818c4 <__udivmoddi4+0x2b8>
34181930:	f1ae 0e02 	sub.w	lr, lr, #2
34181934:	443c      	add	r4, r7
34181936:	e744      	b.n	341817c2 <__udivmoddi4+0x1b6>
34181938:	3b02      	subs	r3, #2
3418193a:	443c      	add	r4, r7
3418193c:	e75e      	b.n	341817fc <__udivmoddi4+0x1f0>
3418193e:	4649      	mov	r1, r9
34181940:	e78d      	b.n	3418185e <__udivmoddi4+0x252>
34181942:	eba1 0108 	sub.w	r1, r1, r8
34181946:	46cc      	mov	ip, r9
34181948:	fbb1 f9fe 	udiv	r9, r1, lr
3418194c:	fb09 f804 	mul.w	r8, r9, r4
34181950:	e7b8      	b.n	341818c4 <__udivmoddi4+0x2b8>
34181952:	bf00      	nop

34181954 <__aeabi_idiv0>:
34181954:	4770      	bx	lr
34181956:	bf00      	nop

34181958 <LL_AHB4_GRP1_EnableClock>:
  *         @arg @ref LL_AHB4_GRP1_PERIPH_PWR
  *         @arg @ref LL_AHB4_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
34181958:	b480      	push	{r7}
3418195a:	b085      	sub	sp, #20
3418195c:	af00      	add	r7, sp, #0
3418195e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34181960:	4a07      	ldr	r2, [pc, #28]	@ (34181980 <LL_AHB4_GRP1_EnableClock+0x28>)
34181962:	687b      	ldr	r3, [r7, #4]
34181964:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
34181968:	4b05      	ldr	r3, [pc, #20]	@ (34181980 <LL_AHB4_GRP1_EnableClock+0x28>)
3418196a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3418196e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181970:	68fb      	ldr	r3, [r7, #12]
}
34181972:	bf00      	nop
34181974:	3714      	adds	r7, #20
34181976:	46bd      	mov	sp, r7
34181978:	f85d 7b04 	ldr.w	r7, [sp], #4
3418197c:	4770      	bx	lr
3418197e:	bf00      	nop
34181980:	56028000 	.word	0x56028000

34181984 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
34181984:	b580      	push	{r7, lr}
34181986:	b088      	sub	sp, #32
34181988:	af00      	add	r7, sp, #0
3418198a:	4603      	mov	r3, r0
3418198c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
3418198e:	2300      	movs	r3, #0
34181990:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  switch(Led)
34181992:	79fb      	ldrb	r3, [r7, #7]
34181994:	2b00      	cmp	r3, #0
34181996:	d002      	beq.n	3418199e <BSP_LED_Init+0x1a>
34181998:	2b01      	cmp	r3, #1
3418199a:	d007      	beq.n	341819ac <BSP_LED_Init+0x28>
3418199c:	e00a      	b.n	341819b4 <BSP_LED_Init+0x30>
  {
    case LED1:
      HAL_PWREx_EnableVddIO2();
3418199e:	f006 fac7 	bl	34187f30 <HAL_PWREx_EnableVddIO2>
      LED1_GPIO_CLK_ENABLE();
341819a2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
341819a6:	f7ff ffd7 	bl	34181958 <LL_AHB4_GRP1_EnableClock>
      break;
341819aa:	e007      	b.n	341819bc <BSP_LED_Init+0x38>

    case LED2:

      LED2_GPIO_CLK_ENABLE();
341819ac:	2040      	movs	r0, #64	@ 0x40
341819ae:	f7ff ffd3 	bl	34181958 <LL_AHB4_GRP1_EnableClock>
      break;
341819b2:	e003      	b.n	341819bc <BSP_LED_Init+0x38>

    default:
      ret = BSP_ERROR_WRONG_PARAM;
341819b4:	f06f 0301 	mvn.w	r3, #1
341819b8:	61fb      	str	r3, [r7, #28]
      break;
341819ba:	bf00      	nop
  }

  if (ret == BSP_ERROR_NONE)
341819bc:	69fb      	ldr	r3, [r7, #28]
341819be:	2b00      	cmp	r3, #0
341819c0:	d118      	bne.n	341819f4 <BSP_LED_Init+0x70>
  {
    /* configure the GPIO_LED pin */
    gpio_init_structure.Pin = LED_PIN [Led];
341819c2:	79fb      	ldrb	r3, [r7, #7]
341819c4:	4a0e      	ldr	r2, [pc, #56]	@ (34181a00 <BSP_LED_Init+0x7c>)
341819c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
341819ca:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
341819cc:	2301      	movs	r3, #1
341819ce:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
341819d0:	2300      	movs	r3, #0
341819d2:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
341819d4:	2303      	movs	r3, #3
341819d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
341819d8:	79fb      	ldrb	r3, [r7, #7]
341819da:	4a0a      	ldr	r2, [pc, #40]	@ (34181a04 <BSP_LED_Init+0x80>)
341819dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
341819e0:	f107 0208 	add.w	r2, r7, #8
341819e4:	4611      	mov	r1, r2
341819e6:	4618      	mov	r0, r3
341819e8:	f003 ff8e 	bl	34185908 <HAL_GPIO_Init>

    /* By default, turn off LED */
    BSP_LED_Off(Led);
341819ec:	79fb      	ldrb	r3, [r7, #7]
341819ee:	4618      	mov	r0, r3
341819f0:	f000 f80a 	bl	34181a08 <BSP_LED_Off>
  }

  return ret;
341819f4:	69fb      	ldr	r3, [r7, #28]
}
341819f6:	4618      	mov	r0, r3
341819f8:	3720      	adds	r7, #32
341819fa:	46bd      	mov	sp, r7
341819fc:	bd80      	pop	{r7, pc}
341819fe:	bf00      	nop
34181a00:	34193e58 	.word	0x34193e58
34181a04:	341c0000 	.word	0x341c0000

34181a08 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
34181a08:	b580      	push	{r7, lr}
34181a0a:	b082      	sub	sp, #8
34181a0c:	af00      	add	r7, sp, #0
34181a0e:	4603      	mov	r3, r0
34181a10:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
34181a12:	79fb      	ldrb	r3, [r7, #7]
34181a14:	2b00      	cmp	r3, #0
34181a16:	d10d      	bne.n	34181a34 <BSP_LED_Off+0x2c>
  {
    /* LED1 High active */
    HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
34181a18:	79fb      	ldrb	r3, [r7, #7]
34181a1a:	4a0f      	ldr	r2, [pc, #60]	@ (34181a58 <BSP_LED_Off+0x50>)
34181a1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
34181a20:	79fb      	ldrb	r3, [r7, #7]
34181a22:	4a0e      	ldr	r2, [pc, #56]	@ (34181a5c <BSP_LED_Off+0x54>)
34181a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34181a28:	b29b      	uxth	r3, r3
34181a2a:	2200      	movs	r2, #0
34181a2c:	4619      	mov	r1, r3
34181a2e:	f004 fa5d 	bl	34185eec <HAL_GPIO_WritePin>
  }else
  {
    /* LED2 Low active */
    HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
  }
}
34181a32:	e00c      	b.n	34181a4e <BSP_LED_Off+0x46>
    HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
34181a34:	79fb      	ldrb	r3, [r7, #7]
34181a36:	4a08      	ldr	r2, [pc, #32]	@ (34181a58 <BSP_LED_Off+0x50>)
34181a38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
34181a3c:	79fb      	ldrb	r3, [r7, #7]
34181a3e:	4a07      	ldr	r2, [pc, #28]	@ (34181a5c <BSP_LED_Off+0x54>)
34181a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34181a44:	b29b      	uxth	r3, r3
34181a46:	2201      	movs	r2, #1
34181a48:	4619      	mov	r1, r3
34181a4a:	f004 fa4f 	bl	34185eec <HAL_GPIO_WritePin>
}
34181a4e:	bf00      	nop
34181a50:	3708      	adds	r7, #8
34181a52:	46bd      	mov	sp, r7
34181a54:	bd80      	pop	{r7, pc}
34181a56:	bf00      	nop
34181a58:	341c0000 	.word	0x341c0000
34181a5c:	34193e58 	.word	0x34193e58

34181a60 <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
34181a60:	b580      	push	{r7, lr}
34181a62:	b082      	sub	sp, #8
34181a64:	af00      	add	r7, sp, #0
34181a66:	4603      	mov	r3, r0
34181a68:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
34181a6a:	79fb      	ldrb	r3, [r7, #7]
34181a6c:	4a07      	ldr	r2, [pc, #28]	@ (34181a8c <BSP_LED_Toggle+0x2c>)
34181a6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
34181a72:	79fb      	ldrb	r3, [r7, #7]
34181a74:	4906      	ldr	r1, [pc, #24]	@ (34181a90 <BSP_LED_Toggle+0x30>)
34181a76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
34181a7a:	b29b      	uxth	r3, r3
34181a7c:	4619      	mov	r1, r3
34181a7e:	4610      	mov	r0, r2
34181a80:	f004 fa4c 	bl	34185f1c <HAL_GPIO_TogglePin>
}
34181a84:	bf00      	nop
34181a86:	3708      	adds	r7, #8
34181a88:	46bd      	mov	sp, r7
34181a8a:	bd80      	pop	{r7, pc}
34181a8c:	341c0000 	.word	0x341c0000
34181a90:	34193e58 	.word	0x34193e58

34181a94 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
34181a94:	b580      	push	{r7, lr}
34181a96:	b082      	sub	sp, #8
34181a98:	af00      	add	r7, sp, #0
34181a9a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
34181a9c:	4b09      	ldr	r3, [pc, #36]	@ (34181ac4 <__io_putchar+0x30>)
34181a9e:	781b      	ldrb	r3, [r3, #0]
34181aa0:	461a      	mov	r2, r3
34181aa2:	2394      	movs	r3, #148	@ 0x94
34181aa4:	fb02 f303 	mul.w	r3, r2, r3
34181aa8:	4a07      	ldr	r2, [pc, #28]	@ (34181ac8 <__io_putchar+0x34>)
34181aaa:	1898      	adds	r0, r3, r2
34181aac:	1d39      	adds	r1, r7, #4
34181aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34181ab2:	2201      	movs	r2, #1
34181ab4:	f00b fa5c 	bl	3418cf70 <HAL_UART_Transmit>
  return ch;
34181ab8:	687b      	ldr	r3, [r7, #4]
}
34181aba:	4618      	mov	r0, r3
34181abc:	3708      	adds	r7, #8
34181abe:	46bd      	mov	sp, r7
34181ac0:	bd80      	pop	{r7, pc}
34181ac2:	bf00      	nop
34181ac4:	341c05b8 	.word	0x341c05b8
34181ac8:	341c0490 	.word	0x341c0490

34181acc <LL_AHB4_GRP1_EnableClock>:
{
34181acc:	b480      	push	{r7}
34181ace:	b085      	sub	sp, #20
34181ad0:	af00      	add	r7, sp, #0
34181ad2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34181ad4:	4a07      	ldr	r2, [pc, #28]	@ (34181af4 <LL_AHB4_GRP1_EnableClock+0x28>)
34181ad6:	687b      	ldr	r3, [r7, #4]
34181ad8:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34181adc:	4b05      	ldr	r3, [pc, #20]	@ (34181af4 <LL_AHB4_GRP1_EnableClock+0x28>)
34181ade:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34181ae2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181ae4:	68fb      	ldr	r3, [r7, #12]
}
34181ae6:	bf00      	nop
34181ae8:	3714      	adds	r7, #20
34181aea:	46bd      	mov	sp, r7
34181aec:	f85d 7b04 	ldr.w	r7, [sp], #4
34181af0:	4770      	bx	lr
34181af2:	bf00      	nop
34181af4:	56028000 	.word	0x56028000

34181af8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART8
  *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
34181af8:	b480      	push	{r7}
34181afa:	b085      	sub	sp, #20
34181afc:	af00      	add	r7, sp, #0
34181afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB1ENSR1, Periphs);
34181b00:	4a07      	ldr	r2, [pc, #28]	@ (34181b20 <LL_APB1_GRP1_EnableClock+0x28>)
34181b02:	687b      	ldr	r3, [r7, #4]
34181b04:	f8c2 3a64 	str.w	r3, [r2, #2660]	@ 0xa64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB1ENR1);
34181b08:	4b05      	ldr	r3, [pc, #20]	@ (34181b20 <LL_APB1_GRP1_EnableClock+0x28>)
34181b0a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
34181b0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181b10:	68fb      	ldr	r3, [r7, #12]
}
34181b12:	bf00      	nop
34181b14:	3714      	adds	r7, #20
34181b16:	46bd      	mov	sp, r7
34181b18:	f85d 7b04 	ldr.w	r7, [sp], #4
34181b1c:	4770      	bx	lr
34181b1e:	bf00      	nop
34181b20:	56028000 	.word	0x56028000

34181b24 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART7
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART8
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
34181b24:	b480      	push	{r7}
34181b26:	b083      	sub	sp, #12
34181b28:	af00      	add	r7, sp, #0
34181b2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1ENCR1, Periphs);
34181b2c:	4b06      	ldr	r3, [pc, #24]	@ (34181b48 <LL_APB1_GRP1_DisableClock+0x24>)
34181b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181b32:	461a      	mov	r2, r3
34181b34:	687b      	ldr	r3, [r7, #4]
34181b36:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264
}
34181b3a:	bf00      	nop
34181b3c:	370c      	adds	r7, #12
34181b3e:	46bd      	mov	sp, r7
34181b40:	f85d 7b04 	ldr.w	r7, [sp], #4
34181b44:	4770      	bx	lr
34181b46:	bf00      	nop
34181b48:	56028000 	.word	0x56028000

34181b4c <LL_APB1_GRP1_ForceReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART7
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART8
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
34181b4c:	b480      	push	{r7}
34181b4e:	b083      	sub	sp, #12
34181b50:	af00      	add	r7, sp, #0
34181b52:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1RSTSR1, Periphs);
34181b54:	4a04      	ldr	r2, [pc, #16]	@ (34181b68 <LL_APB1_GRP1_ForceReset+0x1c>)
34181b56:	687b      	ldr	r3, [r7, #4]
34181b58:	f8c2 3a24 	str.w	r3, [r2, #2596]	@ 0xa24
}
34181b5c:	bf00      	nop
34181b5e:	370c      	adds	r7, #12
34181b60:	46bd      	mov	sp, r7
34181b62:	f85d 7b04 	ldr.w	r7, [sp], #4
34181b66:	4770      	bx	lr
34181b68:	56028000 	.word	0x56028000

34181b6c <LL_APB1_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART7
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART8
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
34181b6c:	b480      	push	{r7}
34181b6e:	b083      	sub	sp, #12
34181b70:	af00      	add	r7, sp, #0
34181b72:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1RSTCR1, Periphs);
34181b74:	4b06      	ldr	r3, [pc, #24]	@ (34181b90 <LL_APB1_GRP1_ReleaseReset+0x24>)
34181b76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181b7a:	461a      	mov	r2, r3
34181b7c:	687b      	ldr	r3, [r7, #4]
34181b7e:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
}
34181b82:	bf00      	nop
34181b84:	370c      	adds	r7, #12
34181b86:	46bd      	mov	sp, r7
34181b88:	f85d 7b04 	ldr.w	r7, [sp], #4
34181b8c:	4770      	bx	lr
34181b8e:	bf00      	nop
34181b90:	56028000 	.word	0x56028000

34181b94 <BSP_I2C1_Init>:
/**
  * @brief  Initializes I2C1 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
34181b94:	b580      	push	{r7, lr}
34181b96:	b082      	sub	sp, #8
34181b98:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
34181b9a:	2300      	movs	r3, #0
34181b9c:	607b      	str	r3, [r7, #4]

  hbus_i2c1.Instance = BUS_I2C1;
34181b9e:	4b16      	ldr	r3, [pc, #88]	@ (34181bf8 <BSP_I2C1_Init+0x64>)
34181ba0:	4a16      	ldr	r2, [pc, #88]	@ (34181bfc <BSP_I2C1_Init+0x68>)
34181ba2:	601a      	str	r2, [r3, #0]

  if (I2c1InitCounter == 0U)
34181ba4:	4b16      	ldr	r3, [pc, #88]	@ (34181c00 <BSP_I2C1_Init+0x6c>)
34181ba6:	681b      	ldr	r3, [r3, #0]
34181ba8:	2b00      	cmp	r3, #0
34181baa:	d11f      	bne.n	34181bec <BSP_I2C1_Init+0x58>
  {
    I2c1InitCounter++;
34181bac:	4b14      	ldr	r3, [pc, #80]	@ (34181c00 <BSP_I2C1_Init+0x6c>)
34181bae:	681b      	ldr	r3, [r3, #0]
34181bb0:	3301      	adds	r3, #1
34181bb2:	4a13      	ldr	r2, [pc, #76]	@ (34181c00 <BSP_I2C1_Init+0x6c>)
34181bb4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
34181bb6:	4810      	ldr	r0, [pc, #64]	@ (34181bf8 <BSP_I2C1_Init+0x64>)
34181bb8:	f004 fcd6 	bl	34186568 <HAL_I2C_GetState>
34181bbc:	4603      	mov	r3, r0
34181bbe:	2b00      	cmp	r3, #0
34181bc0:	d114      	bne.n	34181bec <BSP_I2C1_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C1_MspInit(&hbus_i2c1);
34181bc2:	480d      	ldr	r0, [pc, #52]	@ (34181bf8 <BSP_I2C1_Init+0x64>)
34181bc4:	f000 f8e2 	bl	34181d8c <I2C1_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
34181bc8:	f007 fb5a 	bl	34189280 <HAL_RCC_GetPCLK1Freq>
34181bcc:	4603      	mov	r3, r0
34181bce:	490d      	ldr	r1, [pc, #52]	@ (34181c04 <BSP_I2C1_Init+0x70>)
34181bd0:	4618      	mov	r0, r3
34181bd2:	f000 f991 	bl	34181ef8 <I2C_GetTiming>
34181bd6:	4603      	mov	r3, r0
34181bd8:	4619      	mov	r1, r3
34181bda:	4807      	ldr	r0, [pc, #28]	@ (34181bf8 <BSP_I2C1_Init+0x64>)
34181bdc:	f000 f838 	bl	34181c50 <MX_I2C1_Init>
34181be0:	4603      	mov	r3, r0
34181be2:	2b00      	cmp	r3, #0
34181be4:	d002      	beq.n	34181bec <BSP_I2C1_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
34181be6:	f06f 0307 	mvn.w	r3, #7
34181bea:	607b      	str	r3, [r7, #4]
      }
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 1) */
    }
  }

  return ret;
34181bec:	687b      	ldr	r3, [r7, #4]
}
34181bee:	4618      	mov	r0, r3
34181bf0:	3708      	adds	r7, #8
34181bf2:	46bd      	mov	sp, r7
34181bf4:	bd80      	pop	{r7, pc}
34181bf6:	bf00      	nop
34181bf8:	341c0fc4 	.word	0x341c0fc4
34181bfc:	50005400 	.word	0x50005400
34181c00:	341c05bc 	.word	0x341c05bc
34181c04:	000186a0 	.word	0x000186a0

34181c08 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitializes I2C1 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
34181c08:	b580      	push	{r7, lr}
34181c0a:	b082      	sub	sp, #8
34181c0c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
34181c0e:	2300      	movs	r3, #0
34181c10:	607b      	str	r3, [r7, #4]

  I2c1InitCounter--;
34181c12:	4b0d      	ldr	r3, [pc, #52]	@ (34181c48 <BSP_I2C1_DeInit+0x40>)
34181c14:	681b      	ldr	r3, [r3, #0]
34181c16:	3b01      	subs	r3, #1
34181c18:	4a0b      	ldr	r2, [pc, #44]	@ (34181c48 <BSP_I2C1_DeInit+0x40>)
34181c1a:	6013      	str	r3, [r2, #0]

  if (I2c1InitCounter == 0U)
34181c1c:	4b0a      	ldr	r3, [pc, #40]	@ (34181c48 <BSP_I2C1_DeInit+0x40>)
34181c1e:	681b      	ldr	r3, [r3, #0]
34181c20:	2b00      	cmp	r3, #0
34181c22:	d10b      	bne.n	34181c3c <BSP_I2C1_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C1_MspDeInit(&hbus_i2c1);
34181c24:	4809      	ldr	r0, [pc, #36]	@ (34181c4c <BSP_I2C1_DeInit+0x44>)
34181c26:	f000 f8f3 	bl	34181e10 <I2C1_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
34181c2a:	4808      	ldr	r0, [pc, #32]	@ (34181c4c <BSP_I2C1_DeInit+0x44>)
34181c2c:	f004 fa2b 	bl	34186086 <HAL_I2C_DeInit>
34181c30:	4603      	mov	r3, r0
34181c32:	2b00      	cmp	r3, #0
34181c34:	d002      	beq.n	34181c3c <BSP_I2C1_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
34181c36:	f06f 0307 	mvn.w	r3, #7
34181c3a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
34181c3c:	687b      	ldr	r3, [r7, #4]
}
34181c3e:	4618      	mov	r0, r3
34181c40:	3708      	adds	r7, #8
34181c42:	46bd      	mov	sp, r7
34181c44:	bd80      	pop	{r7, pc}
34181c46:	bf00      	nop
34181c48:	341c05bc 	.word	0x341c05bc
34181c4c:	341c0fc4 	.word	0x341c0fc4

34181c50 <MX_I2C1_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
34181c50:	b580      	push	{r7, lr}
34181c52:	b084      	sub	sp, #16
34181c54:	af00      	add	r7, sp, #0
34181c56:	6078      	str	r0, [r7, #4]
34181c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
34181c5a:	2300      	movs	r3, #0
34181c5c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
34181c5e:	687b      	ldr	r3, [r7, #4]
34181c60:	683a      	ldr	r2, [r7, #0]
34181c62:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
34181c64:	687b      	ldr	r3, [r7, #4]
34181c66:	2200      	movs	r2, #0
34181c68:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
34181c6a:	687b      	ldr	r3, [r7, #4]
34181c6c:	2201      	movs	r2, #1
34181c6e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
34181c70:	687b      	ldr	r3, [r7, #4]
34181c72:	2200      	movs	r2, #0
34181c74:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
34181c76:	687b      	ldr	r3, [r7, #4]
34181c78:	2200      	movs	r2, #0
34181c7a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
34181c7c:	687b      	ldr	r3, [r7, #4]
34181c7e:	2200      	movs	r2, #0
34181c80:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
34181c82:	687b      	ldr	r3, [r7, #4]
34181c84:	2200      	movs	r2, #0
34181c86:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
34181c88:	687b      	ldr	r3, [r7, #4]
34181c8a:	2200      	movs	r2, #0
34181c8c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
34181c8e:	6878      	ldr	r0, [r7, #4]
34181c90:	f004 f95e 	bl	34185f50 <HAL_I2C_Init>
34181c94:	4603      	mov	r3, r0
34181c96:	2b00      	cmp	r3, #0
34181c98:	d002      	beq.n	34181ca0 <MX_I2C1_Init+0x50>
  {
    status = HAL_ERROR;
34181c9a:	2301      	movs	r3, #1
34181c9c:	73fb      	strb	r3, [r7, #15]
34181c9e:	e014      	b.n	34181cca <MX_I2C1_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
34181ca0:	2300      	movs	r3, #0
34181ca2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
34181ca4:	68b9      	ldr	r1, [r7, #8]
34181ca6:	6878      	ldr	r0, [r7, #4]
34181ca8:	f004 ff3a 	bl	34186b20 <HAL_I2CEx_ConfigAnalogFilter>
34181cac:	4603      	mov	r3, r0
34181cae:	2b00      	cmp	r3, #0
34181cb0:	d002      	beq.n	34181cb8 <MX_I2C1_Init+0x68>
    {
      status = HAL_ERROR;
34181cb2:	2301      	movs	r3, #1
34181cb4:	73fb      	strb	r3, [r7, #15]
34181cb6:	e008      	b.n	34181cca <MX_I2C1_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
34181cb8:	2100      	movs	r1, #0
34181cba:	6878      	ldr	r0, [r7, #4]
34181cbc:	f004 ff7b 	bl	34186bb6 <HAL_I2CEx_ConfigDigitalFilter>
34181cc0:	4603      	mov	r3, r0
34181cc2:	2b00      	cmp	r3, #0
34181cc4:	d001      	beq.n	34181cca <MX_I2C1_Init+0x7a>
      {
        status = HAL_ERROR;
34181cc6:	2301      	movs	r3, #1
34181cc8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
34181cca:	7bfb      	ldrb	r3, [r7, #15]
}
34181ccc:	4618      	mov	r0, r3
34181cce:	3710      	adds	r7, #16
34181cd0:	46bd      	mov	sp, r7
34181cd2:	bd80      	pop	{r7, pc}

34181cd4 <BSP_I2C1_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
34181cd4:	b580      	push	{r7, lr}
34181cd6:	b088      	sub	sp, #32
34181cd8:	af02      	add	r7, sp, #8
34181cda:	60ba      	str	r2, [r7, #8]
34181cdc:	461a      	mov	r2, r3
34181cde:	4603      	mov	r3, r0
34181ce0:	81fb      	strh	r3, [r7, #14]
34181ce2:	460b      	mov	r3, r1
34181ce4:	81bb      	strh	r3, [r7, #12]
34181ce6:	4613      	mov	r3, r2
34181ce8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
34181cea:	89b9      	ldrh	r1, [r7, #12]
34181cec:	89f8      	ldrh	r0, [r7, #14]
34181cee:	88fb      	ldrh	r3, [r7, #6]
34181cf0:	9300      	str	r3, [sp, #0]
34181cf2:	68bb      	ldr	r3, [r7, #8]
34181cf4:	2202      	movs	r2, #2
34181cf6:	f000 f8ab 	bl	34181e50 <I2C1_WriteReg>
34181cfa:	4603      	mov	r3, r0
34181cfc:	2b00      	cmp	r3, #0
34181cfe:	d102      	bne.n	34181d06 <BSP_I2C1_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
34181d00:	2300      	movs	r3, #0
34181d02:	617b      	str	r3, [r7, #20]
34181d04:	e00c      	b.n	34181d20 <BSP_I2C1_WriteReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
34181d06:	4809      	ldr	r0, [pc, #36]	@ (34181d2c <BSP_I2C1_WriteReg16+0x58>)
34181d08:	f004 fc3c 	bl	34186584 <HAL_I2C_GetError>
34181d0c:	4603      	mov	r3, r0
34181d0e:	2b04      	cmp	r3, #4
34181d10:	d103      	bne.n	34181d1a <BSP_I2C1_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
34181d12:	f06f 0365 	mvn.w	r3, #101	@ 0x65
34181d16:	617b      	str	r3, [r7, #20]
34181d18:	e002      	b.n	34181d20 <BSP_I2C1_WriteReg16+0x4c>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
34181d1a:	f06f 0303 	mvn.w	r3, #3
34181d1e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */
  return ret;
34181d20:	697b      	ldr	r3, [r7, #20]
}
34181d22:	4618      	mov	r0, r3
34181d24:	3718      	adds	r7, #24
34181d26:	46bd      	mov	sp, r7
34181d28:	bd80      	pop	{r7, pc}
34181d2a:	bf00      	nop
34181d2c:	341c0fc4 	.word	0x341c0fc4

34181d30 <BSP_I2C1_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
34181d30:	b580      	push	{r7, lr}
34181d32:	b088      	sub	sp, #32
34181d34:	af02      	add	r7, sp, #8
34181d36:	60ba      	str	r2, [r7, #8]
34181d38:	461a      	mov	r2, r3
34181d3a:	4603      	mov	r3, r0
34181d3c:	81fb      	strh	r3, [r7, #14]
34181d3e:	460b      	mov	r3, r1
34181d40:	81bb      	strh	r3, [r7, #12]
34181d42:	4613      	mov	r3, r2
34181d44:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
34181d46:	89b9      	ldrh	r1, [r7, #12]
34181d48:	89f8      	ldrh	r0, [r7, #14]
34181d4a:	88fb      	ldrh	r3, [r7, #6]
34181d4c:	9300      	str	r3, [sp, #0]
34181d4e:	68bb      	ldr	r3, [r7, #8]
34181d50:	2202      	movs	r2, #2
34181d52:	f000 f8a3 	bl	34181e9c <I2C1_ReadReg>
34181d56:	4603      	mov	r3, r0
34181d58:	2b00      	cmp	r3, #0
34181d5a:	d102      	bne.n	34181d62 <BSP_I2C1_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
34181d5c:	2300      	movs	r3, #0
34181d5e:	617b      	str	r3, [r7, #20]
34181d60:	e00c      	b.n	34181d7c <BSP_I2C1_ReadReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
34181d62:	4809      	ldr	r0, [pc, #36]	@ (34181d88 <BSP_I2C1_ReadReg16+0x58>)
34181d64:	f004 fc0e 	bl	34186584 <HAL_I2C_GetError>
34181d68:	4603      	mov	r3, r0
34181d6a:	2b04      	cmp	r3, #4
34181d6c:	d103      	bne.n	34181d76 <BSP_I2C1_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
34181d6e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
34181d72:	617b      	str	r3, [r7, #20]
34181d74:	e002      	b.n	34181d7c <BSP_I2C1_ReadReg16+0x4c>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
34181d76:	f06f 0303 	mvn.w	r3, #3
34181d7a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */
  return ret;
34181d7c:	697b      	ldr	r3, [r7, #20]
}
34181d7e:	4618      	mov	r0, r3
34181d80:	3718      	adds	r7, #24
34181d82:	46bd      	mov	sp, r7
34181d84:	bd80      	pop	{r7, pc}
34181d86:	bf00      	nop
34181d88:	341c0fc4 	.word	0x341c0fc4

34181d8c <I2C1_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *phi2c)
{
34181d8c:	b580      	push	{r7, lr}
34181d8e:	b088      	sub	sp, #32
34181d90:	af00      	add	r7, sp, #0
34181d92:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Enable PWR for I2C1 pins */
  HAL_PWREx_EnableVddIO4();
34181d94:	f006 f8dc 	bl	34187f50 <HAL_PWREx_EnableVddIO4>

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
34181d98:	2080      	movs	r0, #128	@ 0x80
34181d9a:	f7ff fe97 	bl	34181acc <LL_AHB4_GRP1_EnableClock>
  /* Enable SDA GPIO clock */
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
34181d9e:	2004      	movs	r0, #4
34181da0:	f7ff fe94 	bl	34181acc <LL_AHB4_GRP1_EnableClock>

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SCL_PIN;
34181da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
34181da8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
34181daa:	2312      	movs	r3, #18
34181dac:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
34181dae:	2300      	movs	r3, #0
34181db0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
34181db2:	2302      	movs	r3, #2
34181db4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
34181db6:	2304      	movs	r3, #4
34181db8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
34181dba:	f107 030c 	add.w	r3, r7, #12
34181dbe:	4619      	mov	r1, r3
34181dc0:	4811      	ldr	r0, [pc, #68]	@ (34181e08 <I2C1_MspInit+0x7c>)
34181dc2:	f003 fda1 	bl	34185908 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SDA_PIN;
34181dc6:	2302      	movs	r3, #2
34181dc8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
34181dca:	2312      	movs	r3, #18
34181dcc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
34181dce:	2300      	movs	r3, #0
34181dd0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
34181dd2:	2302      	movs	r3, #2
34181dd4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
34181dd6:	2304      	movs	r3, #4
34181dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
34181dda:	f107 030c 	add.w	r3, r7, #12
34181dde:	4619      	mov	r1, r3
34181de0:	480a      	ldr	r0, [pc, #40]	@ (34181e0c <I2C1_MspInit+0x80>)
34181de2:	f003 fd91 	bl	34185908 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C1_CLK_ENABLE();
34181de6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34181dea:	f7ff fe85 	bl	34181af8 <LL_APB1_GRP1_EnableClock>

  /* Force the I2C peripheral clock reset */
  BUS_I2C1_FORCE_RESET();
34181dee:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34181df2:	f7ff feab 	bl	34181b4c <LL_APB1_GRP1_ForceReset>

  /* Release the I2C peripheral clock reset */
  BUS_I2C1_RELEASE_RESET();
34181df6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34181dfa:	f7ff feb7 	bl	34181b6c <LL_APB1_GRP1_ReleaseReset>
}
34181dfe:	bf00      	nop
34181e00:	3720      	adds	r7, #32
34181e02:	46bd      	mov	sp, r7
34181e04:	bd80      	pop	{r7, pc}
34181e06:	bf00      	nop
34181e08:	56021c00 	.word	0x56021c00
34181e0c:	56020800 	.word	0x56020800

34181e10 <I2C1_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *phi2c)
{
34181e10:	b580      	push	{r7, lr}
34181e12:	b088      	sub	sp, #32
34181e14:	af00      	add	r7, sp, #0
34181e16:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C1_SCL_PIN;
34181e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
34181e1c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin );
34181e1e:	68fb      	ldr	r3, [r7, #12]
34181e20:	4619      	mov	r1, r3
34181e22:	4809      	ldr	r0, [pc, #36]	@ (34181e48 <I2C1_MspDeInit+0x38>)
34181e24:	f003 ff22 	bl	34185c6c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_PIN;
34181e28:	2302      	movs	r3, #2
34181e2a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
34181e2c:	68fb      	ldr	r3, [r7, #12]
34181e2e:	4619      	mov	r1, r3
34181e30:	4806      	ldr	r0, [pc, #24]	@ (34181e4c <I2C1_MspDeInit+0x3c>)
34181e32:	f003 ff1b 	bl	34185c6c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
34181e36:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34181e3a:	f7ff fe73 	bl	34181b24 <LL_APB1_GRP1_DisableClock>
}
34181e3e:	bf00      	nop
34181e40:	3720      	adds	r7, #32
34181e42:	46bd      	mov	sp, r7
34181e44:	bd80      	pop	{r7, pc}
34181e46:	bf00      	nop
34181e48:	56021c00 	.word	0x56021c00
34181e4c:	56020800 	.word	0x56020800

34181e50 <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
34181e50:	b580      	push	{r7, lr}
34181e52:	b088      	sub	sp, #32
34181e54:	af04      	add	r7, sp, #16
34181e56:	607b      	str	r3, [r7, #4]
34181e58:	4603      	mov	r3, r0
34181e5a:	81fb      	strh	r3, [r7, #14]
34181e5c:	460b      	mov	r3, r1
34181e5e:	81bb      	strh	r3, [r7, #12]
34181e60:	4613      	mov	r3, r2
34181e62:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
34181e64:	8978      	ldrh	r0, [r7, #10]
34181e66:	89ba      	ldrh	r2, [r7, #12]
34181e68:	89f9      	ldrh	r1, [r7, #14]
34181e6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34181e6e:	9302      	str	r3, [sp, #8]
34181e70:	8b3b      	ldrh	r3, [r7, #24]
34181e72:	9301      	str	r3, [sp, #4]
34181e74:	687b      	ldr	r3, [r7, #4]
34181e76:	9300      	str	r3, [sp, #0]
34181e78:	4603      	mov	r3, r0
34181e7a:	4807      	ldr	r0, [pc, #28]	@ (34181e98 <I2C1_WriteReg+0x48>)
34181e7c:	f004 f946 	bl	3418610c <HAL_I2C_Mem_Write>
34181e80:	4603      	mov	r3, r0
34181e82:	2b00      	cmp	r3, #0
34181e84:	d101      	bne.n	34181e8a <I2C1_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
34181e86:	2300      	movs	r3, #0
34181e88:	e001      	b.n	34181e8e <I2C1_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
34181e8a:	f06f 0307 	mvn.w	r3, #7
}
34181e8e:	4618      	mov	r0, r3
34181e90:	3710      	adds	r7, #16
34181e92:	46bd      	mov	sp, r7
34181e94:	bd80      	pop	{r7, pc}
34181e96:	bf00      	nop
34181e98:	341c0fc4 	.word	0x341c0fc4

34181e9c <I2C1_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
34181e9c:	b580      	push	{r7, lr}
34181e9e:	b088      	sub	sp, #32
34181ea0:	af04      	add	r7, sp, #16
34181ea2:	607b      	str	r3, [r7, #4]
34181ea4:	4603      	mov	r3, r0
34181ea6:	81fb      	strh	r3, [r7, #14]
34181ea8:	460b      	mov	r3, r1
34181eaa:	81bb      	strh	r3, [r7, #12]
34181eac:	4613      	mov	r3, r2
34181eae:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
34181eb0:	8978      	ldrh	r0, [r7, #10]
34181eb2:	89ba      	ldrh	r2, [r7, #12]
34181eb4:	89f9      	ldrh	r1, [r7, #14]
34181eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34181eba:	9302      	str	r3, [sp, #8]
34181ebc:	8b3b      	ldrh	r3, [r7, #24]
34181ebe:	9301      	str	r3, [sp, #4]
34181ec0:	687b      	ldr	r3, [r7, #4]
34181ec2:	9300      	str	r3, [sp, #0]
34181ec4:	4603      	mov	r3, r0
34181ec6:	4807      	ldr	r0, [pc, #28]	@ (34181ee4 <I2C1_ReadReg+0x48>)
34181ec8:	f004 fa34 	bl	34186334 <HAL_I2C_Mem_Read>
34181ecc:	4603      	mov	r3, r0
34181ece:	2b00      	cmp	r3, #0
34181ed0:	d101      	bne.n	34181ed6 <I2C1_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
34181ed2:	2300      	movs	r3, #0
34181ed4:	e001      	b.n	34181eda <I2C1_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
34181ed6:	f06f 0307 	mvn.w	r3, #7
}
34181eda:	4618      	mov	r0, r3
34181edc:	3710      	adds	r7, #16
34181ede:	46bd      	mov	sp, r7
34181ee0:	bd80      	pop	{r7, pc}
34181ee2:	bf00      	nop
34181ee4:	341c0fc4 	.word	0x341c0fc4

34181ee8 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
34181ee8:	b580      	push	{r7, lr}
34181eea:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
34181eec:	f000 fda6 	bl	34182a3c <HAL_GetTick>
34181ef0:	4603      	mov	r3, r0
}
34181ef2:	4618      	mov	r0, r3
34181ef4:	bd80      	pop	{r7, pc}
	...

34181ef8 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
34181ef8:	b580      	push	{r7, lr}
34181efa:	b086      	sub	sp, #24
34181efc:	af00      	add	r7, sp, #0
34181efe:	6078      	str	r0, [r7, #4]
34181f00:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
34181f02:	2300      	movs	r3, #0
34181f04:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
34181f06:	687b      	ldr	r3, [r7, #4]
34181f08:	2b00      	cmp	r3, #0
34181f0a:	d06b      	beq.n	34181fe4 <I2C_GetTiming+0xec>
34181f0c:	683b      	ldr	r3, [r7, #0]
34181f0e:	2b00      	cmp	r3, #0
34181f10:	d068      	beq.n	34181fe4 <I2C_GetTiming+0xec>
  {
    for (speed = 0; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS; speed++)
34181f12:	2300      	movs	r3, #0
34181f14:	613b      	str	r3, [r7, #16]
34181f16:	e060      	b.n	34181fda <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
34181f18:	4a35      	ldr	r2, [pc, #212]	@ (34181ff0 <I2C_GetTiming+0xf8>)
34181f1a:	693b      	ldr	r3, [r7, #16]
34181f1c:	212c      	movs	r1, #44	@ 0x2c
34181f1e:	fb01 f303 	mul.w	r3, r1, r3
34181f22:	4413      	add	r3, r2
34181f24:	3304      	adds	r3, #4
34181f26:	681b      	ldr	r3, [r3, #0]
34181f28:	683a      	ldr	r2, [r7, #0]
34181f2a:	429a      	cmp	r2, r3
34181f2c:	d352      	bcc.n	34181fd4 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
34181f2e:	4a30      	ldr	r2, [pc, #192]	@ (34181ff0 <I2C_GetTiming+0xf8>)
34181f30:	693b      	ldr	r3, [r7, #16]
34181f32:	212c      	movs	r1, #44	@ 0x2c
34181f34:	fb01 f303 	mul.w	r3, r1, r3
34181f38:	4413      	add	r3, r2
34181f3a:	3308      	adds	r3, #8
34181f3c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
34181f3e:	683a      	ldr	r2, [r7, #0]
34181f40:	429a      	cmp	r2, r3
34181f42:	d847      	bhi.n	34181fd4 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
34181f44:	6939      	ldr	r1, [r7, #16]
34181f46:	6878      	ldr	r0, [r7, #4]
34181f48:	f000 f856 	bl	34181ff8 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
34181f4c:	6939      	ldr	r1, [r7, #16]
34181f4e:	6878      	ldr	r0, [r7, #4]
34181f50:	f000 f940 	bl	341821d4 <I2C_Compute_SCLL_SCLH>
34181f54:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
34181f56:	68fb      	ldr	r3, [r7, #12]
34181f58:	2b7f      	cmp	r3, #127	@ 0x7f
34181f5a:	d842      	bhi.n	34181fe2 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
34181f5c:	4925      	ldr	r1, [pc, #148]	@ (34181ff4 <I2C_GetTiming+0xfc>)
34181f5e:	68fa      	ldr	r2, [r7, #12]
34181f60:	4613      	mov	r3, r2
34181f62:	009b      	lsls	r3, r3, #2
34181f64:	4413      	add	r3, r2
34181f66:	009b      	lsls	r3, r3, #2
34181f68:	440b      	add	r3, r1
34181f6a:	681b      	ldr	r3, [r3, #0]
34181f6c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
34181f6e:	4821      	ldr	r0, [pc, #132]	@ (34181ff4 <I2C_GetTiming+0xfc>)
34181f70:	68fa      	ldr	r2, [r7, #12]
34181f72:	4613      	mov	r3, r2
34181f74:	009b      	lsls	r3, r3, #2
34181f76:	4413      	add	r3, r2
34181f78:	009b      	lsls	r3, r3, #2
34181f7a:	4403      	add	r3, r0
34181f7c:	3304      	adds	r3, #4
34181f7e:	681b      	ldr	r3, [r3, #0]
34181f80:	051b      	lsls	r3, r3, #20
34181f82:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
34181f86:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
34181f88:	481a      	ldr	r0, [pc, #104]	@ (34181ff4 <I2C_GetTiming+0xfc>)
34181f8a:	68fa      	ldr	r2, [r7, #12]
34181f8c:	4613      	mov	r3, r2
34181f8e:	009b      	lsls	r3, r3, #2
34181f90:	4413      	add	r3, r2
34181f92:	009b      	lsls	r3, r3, #2
34181f94:	4403      	add	r3, r0
34181f96:	3308      	adds	r3, #8
34181f98:	681b      	ldr	r3, [r3, #0]
34181f9a:	041b      	lsls	r3, r3, #16
34181f9c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
34181fa0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
34181fa2:	4814      	ldr	r0, [pc, #80]	@ (34181ff4 <I2C_GetTiming+0xfc>)
34181fa4:	68fa      	ldr	r2, [r7, #12]
34181fa6:	4613      	mov	r3, r2
34181fa8:	009b      	lsls	r3, r3, #2
34181faa:	4413      	add	r3, r2
34181fac:	009b      	lsls	r3, r3, #2
34181fae:	4403      	add	r3, r0
34181fb0:	330c      	adds	r3, #12
34181fb2:	681b      	ldr	r3, [r3, #0]
34181fb4:	021b      	lsls	r3, r3, #8
34181fb6:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
34181fb8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
34181fba:	480e      	ldr	r0, [pc, #56]	@ (34181ff4 <I2C_GetTiming+0xfc>)
34181fbc:	68fa      	ldr	r2, [r7, #12]
34181fbe:	4613      	mov	r3, r2
34181fc0:	009b      	lsls	r3, r3, #2
34181fc2:	4413      	add	r3, r2
34181fc4:	009b      	lsls	r3, r3, #2
34181fc6:	4403      	add	r3, r0
34181fc8:	3310      	adds	r3, #16
34181fca:	681b      	ldr	r3, [r3, #0]
34181fcc:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
34181fce:	430b      	orrs	r3, r1
34181fd0:	617b      	str	r3, [r7, #20]
        }
        break;
34181fd2:	e006      	b.n	34181fe2 <I2C_GetTiming+0xea>
    for (speed = 0; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS; speed++)
34181fd4:	693b      	ldr	r3, [r7, #16]
34181fd6:	3301      	adds	r3, #1
34181fd8:	613b      	str	r3, [r7, #16]
34181fda:	693b      	ldr	r3, [r7, #16]
34181fdc:	2b02      	cmp	r3, #2
34181fde:	d99b      	bls.n	34181f18 <I2C_GetTiming+0x20>
34181fe0:	e000      	b.n	34181fe4 <I2C_GetTiming+0xec>
        break;
34181fe2:	bf00      	nop
      }
    }
  }

  return ret;
34181fe4:	697b      	ldr	r3, [r7, #20]
}
34181fe6:	4618      	mov	r0, r3
34181fe8:	3718      	adds	r7, #24
34181fea:	46bd      	mov	sp, r7
34181fec:	bd80      	pop	{r7, pc}
34181fee:	bf00      	nop
34181ff0:	34193e60 	.word	0x34193e60
34181ff4:	341c05c0 	.word	0x341c05c0

34181ff8 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
34181ff8:	b480      	push	{r7}
34181ffa:	b08f      	sub	sp, #60	@ 0x3c
34181ffc:	af00      	add	r7, sp, #0
34181ffe:	6078      	str	r0, [r7, #4]
34182000:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
34182002:	2310      	movs	r3, #16
34182004:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
34182006:	687b      	ldr	r3, [r7, #4]
34182008:	085a      	lsrs	r2, r3, #1
3418200a:	4b6e      	ldr	r3, [pc, #440]	@ (341821c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
3418200c:	4413      	add	r3, r2
3418200e:	687a      	ldr	r2, [r7, #4]
34182010:	fbb3 f3f2 	udiv	r3, r3, r2
34182014:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
34182016:	2332      	movs	r3, #50	@ 0x32
34182018:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
3418201a:	f44f 7382 	mov.w	r3, #260	@ 0x104
3418201e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / tPRESC
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / tPRESC */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
34182020:	4a69      	ldr	r2, [pc, #420]	@ (341821c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34182022:	683b      	ldr	r3, [r7, #0]
34182024:	212c      	movs	r1, #44	@ 0x2c
34182026:	fb01 f303 	mul.w	r3, r1, r3
3418202a:	4413      	add	r3, r2
3418202c:	3324      	adds	r3, #36	@ 0x24
3418202e:	681b      	ldr	r3, [r3, #0]
34182030:	4618      	mov	r0, r3
34182032:	4a65      	ldr	r2, [pc, #404]	@ (341821c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34182034:	683b      	ldr	r3, [r7, #0]
34182036:	212c      	movs	r1, #44	@ 0x2c
34182038:	fb01 f303 	mul.w	r3, r1, r3
3418203c:	4413      	add	r3, r2
3418203e:	330c      	adds	r3, #12
34182040:	681b      	ldr	r3, [r3, #0]
34182042:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
34182044:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
34182046:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
34182048:	495f      	ldr	r1, [pc, #380]	@ (341821c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
3418204a:	683b      	ldr	r3, [r7, #0]
3418204c:	202c      	movs	r0, #44	@ 0x2c
3418204e:	fb00 f303 	mul.w	r3, r0, r3
34182052:	440b      	add	r3, r1
34182054:	3328      	adds	r3, #40	@ 0x28
34182056:	681b      	ldr	r3, [r3, #0]
34182058:	3303      	adds	r3, #3
3418205a:	69f9      	ldr	r1, [r7, #28]
3418205c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
34182060:	1ad3      	subs	r3, r2, r3
34182062:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
34182064:	4a58      	ldr	r2, [pc, #352]	@ (341821c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34182066:	683b      	ldr	r3, [r7, #0]
34182068:	212c      	movs	r1, #44	@ 0x2c
3418206a:	fb01 f303 	mul.w	r3, r1, r3
3418206e:	4413      	add	r3, r2
34182070:	3310      	adds	r3, #16
34182072:	681b      	ldr	r3, [r3, #0]
34182074:	4618      	mov	r0, r3
34182076:	4a54      	ldr	r2, [pc, #336]	@ (341821c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34182078:	683b      	ldr	r3, [r7, #0]
3418207a:	212c      	movs	r1, #44	@ 0x2c
3418207c:	fb01 f303 	mul.w	r3, r1, r3
34182080:	4413      	add	r3, r2
34182082:	3320      	adds	r3, #32
34182084:	681b      	ldr	r3, [r3, #0]
34182086:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
34182088:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
3418208a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
3418208c:	494e      	ldr	r1, [pc, #312]	@ (341821c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
3418208e:	683b      	ldr	r3, [r7, #0]
34182090:	202c      	movs	r0, #44	@ 0x2c
34182092:	fb00 f303 	mul.w	r3, r0, r3
34182096:	440b      	add	r3, r1
34182098:	3328      	adds	r3, #40	@ 0x28
3418209a:	681b      	ldr	r3, [r3, #0]
3418209c:	3304      	adds	r3, #4
3418209e:	69f9      	ldr	r1, [r7, #28]
341820a0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
341820a4:	1ad3      	subs	r3, r2, r3
341820a6:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
341820a8:	4a47      	ldr	r2, [pc, #284]	@ (341821c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
341820aa:	683b      	ldr	r3, [r7, #0]
341820ac:	212c      	movs	r1, #44	@ 0x2c
341820ae:	fb01 f303 	mul.w	r3, r1, r3
341820b2:	4413      	add	r3, r2
341820b4:	3320      	adds	r3, #32
341820b6:	681b      	ldr	r3, [r3, #0]
341820b8:	4618      	mov	r0, r3
341820ba:	4a43      	ldr	r2, [pc, #268]	@ (341821c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
341820bc:	683b      	ldr	r3, [r7, #0]
341820be:	212c      	movs	r1, #44	@ 0x2c
341820c0:	fb01 f303 	mul.w	r3, r1, r3
341820c4:	4413      	add	r3, r2
341820c6:	3314      	adds	r3, #20
341820c8:	681b      	ldr	r3, [r3, #0]
341820ca:	4403      	add	r3, r0
341820cc:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
341820ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341820d0:	2b00      	cmp	r3, #0
341820d2:	dc01      	bgt.n	341820d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
341820d4:	2300      	movs	r3, #0
341820d6:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
341820d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341820da:	2b00      	cmp	r3, #0
341820dc:	dc01      	bgt.n	341820e2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
341820de:	2300      	movs	r3, #0
341820e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
341820e2:	2300      	movs	r3, #0
341820e4:	62bb      	str	r3, [r7, #40]	@ 0x28
341820e6:	e062      	b.n	341821ae <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
341820e8:	2300      	movs	r3, #0
341820ea:	627b      	str	r3, [r7, #36]	@ 0x24
341820ec:	e059      	b.n	341821a2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
341820ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341820f0:	3301      	adds	r3, #1
341820f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341820f4:	3201      	adds	r2, #1
341820f6:	fb03 f202 	mul.w	r2, r3, r2
341820fa:	69fb      	ldr	r3, [r7, #28]
341820fc:	fb02 f303 	mul.w	r3, r2, r3
34182100:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
34182102:	693b      	ldr	r3, [r7, #16]
34182104:	68fa      	ldr	r2, [r7, #12]
34182106:	429a      	cmp	r2, r3
34182108:	d348      	bcc.n	3418219c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
3418210a:	2300      	movs	r3, #0
3418210c:	623b      	str	r3, [r7, #32]
3418210e:	e042      	b.n	34182196 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
34182110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34182112:	3301      	adds	r3, #1
34182114:	6a3a      	ldr	r2, [r7, #32]
34182116:	fb03 f202 	mul.w	r2, r3, r2
3418211a:	69fb      	ldr	r3, [r7, #28]
3418211c:	fb02 f303 	mul.w	r3, r2, r3
34182120:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
34182122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34182124:	68ba      	ldr	r2, [r7, #8]
34182126:	429a      	cmp	r2, r3
34182128:	d332      	bcc.n	34182190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
3418212a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418212c:	68ba      	ldr	r2, [r7, #8]
3418212e:	429a      	cmp	r2, r3
34182130:	d82e      	bhi.n	34182190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
34182132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34182134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34182136:	429a      	cmp	r2, r3
34182138:	d02a      	beq.n	34182190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
3418213a:	4b24      	ldr	r3, [pc, #144]	@ (341821cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
3418213c:	681a      	ldr	r2, [r3, #0]
3418213e:	4924      	ldr	r1, [pc, #144]	@ (341821d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
34182140:	4613      	mov	r3, r2
34182142:	009b      	lsls	r3, r3, #2
34182144:	4413      	add	r3, r2
34182146:	009b      	lsls	r3, r3, #2
34182148:	440b      	add	r3, r1
3418214a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418214c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
3418214e:	4b1f      	ldr	r3, [pc, #124]	@ (341821cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
34182150:	681a      	ldr	r2, [r3, #0]
34182152:	491f      	ldr	r1, [pc, #124]	@ (341821d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
34182154:	4613      	mov	r3, r2
34182156:	009b      	lsls	r3, r3, #2
34182158:	4413      	add	r3, r2
3418215a:	009b      	lsls	r3, r3, #2
3418215c:	440b      	add	r3, r1
3418215e:	3304      	adds	r3, #4
34182160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
34182162:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
34182164:	4b19      	ldr	r3, [pc, #100]	@ (341821cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
34182166:	681a      	ldr	r2, [r3, #0]
34182168:	4919      	ldr	r1, [pc, #100]	@ (341821d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
3418216a:	4613      	mov	r3, r2
3418216c:	009b      	lsls	r3, r3, #2
3418216e:	4413      	add	r3, r2
34182170:	009b      	lsls	r3, r3, #2
34182172:	440b      	add	r3, r1
34182174:	3308      	adds	r3, #8
34182176:	6a3a      	ldr	r2, [r7, #32]
34182178:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
3418217a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418217c:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
3418217e:	4b13      	ldr	r3, [pc, #76]	@ (341821cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
34182180:	681b      	ldr	r3, [r3, #0]
34182182:	3301      	adds	r3, #1
34182184:	4a11      	ldr	r2, [pc, #68]	@ (341821cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
34182186:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
34182188:	4b10      	ldr	r3, [pc, #64]	@ (341821cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
3418218a:	681b      	ldr	r3, [r3, #0]
3418218c:	2b7f      	cmp	r3, #127	@ 0x7f
3418218e:	d812      	bhi.n	341821b6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
34182190:	6a3b      	ldr	r3, [r7, #32]
34182192:	3301      	adds	r3, #1
34182194:	623b      	str	r3, [r7, #32]
34182196:	6a3b      	ldr	r3, [r7, #32]
34182198:	2b0f      	cmp	r3, #15
3418219a:	d9b9      	bls.n	34182110 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
3418219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418219e:	3301      	adds	r3, #1
341821a0:	627b      	str	r3, [r7, #36]	@ 0x24
341821a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341821a4:	2b0f      	cmp	r3, #15
341821a6:	d9a2      	bls.n	341820ee <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
341821a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341821aa:	3301      	adds	r3, #1
341821ac:	62bb      	str	r3, [r7, #40]	@ 0x28
341821ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341821b0:	2b0f      	cmp	r3, #15
341821b2:	d999      	bls.n	341820e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
341821b4:	e000      	b.n	341821b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
341821b6:	bf00      	nop
          }
        }
      }
    }
  }
}
341821b8:	373c      	adds	r7, #60	@ 0x3c
341821ba:	46bd      	mov	sp, r7
341821bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341821c0:	4770      	bx	lr
341821c2:	bf00      	nop
341821c4:	3b9aca00 	.word	0x3b9aca00
341821c8:	34193e60 	.word	0x34193e60
341821cc:	341c0fc0 	.word	0x341c0fc0
341821d0:	341c05c0 	.word	0x341c05c0

341821d4 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
341821d4:	b480      	push	{r7}
341821d6:	b093      	sub	sp, #76	@ 0x4c
341821d8:	af00      	add	r7, sp, #0
341821da:	6078      	str	r0, [r7, #4]
341821dc:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
341821de:	f04f 33ff 	mov.w	r3, #4294967295
341821e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
341821e4:	687b      	ldr	r3, [r7, #4]
341821e6:	085a      	lsrs	r2, r3, #1
341821e8:	4b7a      	ldr	r3, [pc, #488]	@ (341823d4 <I2C_Compute_SCLL_SCLH+0x200>)
341821ea:	4413      	add	r3, r2
341821ec:	687a      	ldr	r2, [r7, #4]
341821ee:	fbb3 f3f2 	udiv	r3, r3, r2
341821f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
341821f4:	4a78      	ldr	r2, [pc, #480]	@ (341823d8 <I2C_Compute_SCLL_SCLH+0x204>)
341821f6:	683b      	ldr	r3, [r7, #0]
341821f8:	212c      	movs	r1, #44	@ 0x2c
341821fa:	fb01 f303 	mul.w	r3, r1, r3
341821fe:	4413      	add	r3, r2
34182200:	681b      	ldr	r3, [r3, #0]
34182202:	085a      	lsrs	r2, r3, #1
34182204:	4b73      	ldr	r3, [pc, #460]	@ (341823d4 <I2C_Compute_SCLL_SCLH+0x200>)
34182206:	4413      	add	r3, r2
34182208:	4973      	ldr	r1, [pc, #460]	@ (341823d8 <I2C_Compute_SCLL_SCLH+0x204>)
3418220a:	683a      	ldr	r2, [r7, #0]
3418220c:	202c      	movs	r0, #44	@ 0x2c
3418220e:	fb00 f202 	mul.w	r2, r0, r2
34182212:	440a      	add	r2, r1
34182214:	6812      	ldr	r2, [r2, #0]
34182216:	fbb3 f3f2 	udiv	r3, r3, r2
3418221a:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
3418221c:	2332      	movs	r3, #50	@ 0x32
3418221e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
34182220:	4a6d      	ldr	r2, [pc, #436]	@ (341823d8 <I2C_Compute_SCLL_SCLH+0x204>)
34182222:	683b      	ldr	r3, [r7, #0]
34182224:	212c      	movs	r1, #44	@ 0x2c
34182226:	fb01 f303 	mul.w	r3, r1, r3
3418222a:	4413      	add	r3, r2
3418222c:	3328      	adds	r3, #40	@ 0x28
3418222e:	681a      	ldr	r2, [r3, #0]
34182230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34182232:	fb02 f303 	mul.w	r3, r2, r3
34182236:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
34182238:	4a67      	ldr	r2, [pc, #412]	@ (341823d8 <I2C_Compute_SCLL_SCLH+0x204>)
3418223a:	683b      	ldr	r3, [r7, #0]
3418223c:	212c      	movs	r1, #44	@ 0x2c
3418223e:	fb01 f303 	mul.w	r3, r1, r3
34182242:	4413      	add	r3, r2
34182244:	3304      	adds	r3, #4
34182246:	681b      	ldr	r3, [r3, #0]
34182248:	4a62      	ldr	r2, [pc, #392]	@ (341823d4 <I2C_Compute_SCLL_SCLH+0x200>)
3418224a:	fbb2 f3f3 	udiv	r3, r2, r3
3418224e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
34182250:	4a61      	ldr	r2, [pc, #388]	@ (341823d8 <I2C_Compute_SCLL_SCLH+0x204>)
34182252:	683b      	ldr	r3, [r7, #0]
34182254:	212c      	movs	r1, #44	@ 0x2c
34182256:	fb01 f303 	mul.w	r3, r1, r3
3418225a:	4413      	add	r3, r2
3418225c:	3308      	adds	r3, #8
3418225e:	681b      	ldr	r3, [r3, #0]
34182260:	4a5c      	ldr	r2, [pc, #368]	@ (341823d4 <I2C_Compute_SCLL_SCLH+0x200>)
34182262:	fbb2 f3f3 	udiv	r3, r2, r3
34182266:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
34182268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418226a:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3418226c:	2300      	movs	r3, #0
3418226e:	637b      	str	r3, [r7, #52]	@ 0x34
34182270:	e0a3      	b.n	341823ba <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
34182272:	495a      	ldr	r1, [pc, #360]	@ (341823dc <I2C_Compute_SCLL_SCLH+0x208>)
34182274:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
34182276:	4613      	mov	r3, r2
34182278:	009b      	lsls	r3, r3, #2
3418227a:	4413      	add	r3, r2
3418227c:	009b      	lsls	r3, r3, #2
3418227e:	440b      	add	r3, r1
34182280:	681b      	ldr	r3, [r3, #0]
34182282:	1c5a      	adds	r2, r3, #1
34182284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34182286:	fb02 f303 	mul.w	r3, r2, r3
3418228a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
3418228c:	2300      	movs	r3, #0
3418228e:	63fb      	str	r3, [r7, #60]	@ 0x3c
34182290:	e08c      	b.n	341823ac <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
34182292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
34182294:	6a3b      	ldr	r3, [r7, #32]
34182296:	441a      	add	r2, r3
34182298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418229a:	3301      	adds	r3, #1
3418229c:	6979      	ldr	r1, [r7, #20]
3418229e:	fb03 f101 	mul.w	r1, r3, r1
341822a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341822a4:	005b      	lsls	r3, r3, #1
341822a6:	440b      	add	r3, r1
341822a8:	4413      	add	r3, r2
341822aa:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
341822ac:	4a4a      	ldr	r2, [pc, #296]	@ (341823d8 <I2C_Compute_SCLL_SCLH+0x204>)
341822ae:	683b      	ldr	r3, [r7, #0]
341822b0:	212c      	movs	r1, #44	@ 0x2c
341822b2:	fb01 f303 	mul.w	r3, r1, r3
341822b6:	4413      	add	r3, r2
341822b8:	3318      	adds	r3, #24
341822ba:	681b      	ldr	r3, [r3, #0]
341822bc:	693a      	ldr	r2, [r7, #16]
341822be:	429a      	cmp	r2, r3
341822c0:	d971      	bls.n	341823a6 <I2C_Compute_SCLL_SCLH+0x1d2>
341822c2:	693a      	ldr	r2, [r7, #16]
341822c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341822c6:	1ad2      	subs	r2, r2, r3
341822c8:	6a3b      	ldr	r3, [r7, #32]
341822ca:	1ad3      	subs	r3, r2, r3
341822cc:	089b      	lsrs	r3, r3, #2
341822ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
341822d0:	429a      	cmp	r2, r3
341822d2:	d268      	bcs.n	341823a6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
341822d4:	2300      	movs	r3, #0
341822d6:	63bb      	str	r3, [r7, #56]	@ 0x38
341822d8:	e062      	b.n	341823a0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
341822da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
341822dc:	6a3b      	ldr	r3, [r7, #32]
341822de:	441a      	add	r2, r3
341822e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
341822e2:	3301      	adds	r3, #1
341822e4:	6979      	ldr	r1, [r7, #20]
341822e6:	fb03 f101 	mul.w	r1, r3, r1
341822ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341822ec:	005b      	lsls	r3, r3, #1
341822ee:	440b      	add	r3, r1
341822f0:	4413      	add	r3, r2
341822f2:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
341822f4:	693a      	ldr	r2, [r7, #16]
341822f6:	68fb      	ldr	r3, [r7, #12]
341822f8:	441a      	add	r2, r3
341822fa:	4937      	ldr	r1, [pc, #220]	@ (341823d8 <I2C_Compute_SCLL_SCLH+0x204>)
341822fc:	683b      	ldr	r3, [r7, #0]
341822fe:	202c      	movs	r0, #44	@ 0x2c
34182300:	fb00 f303 	mul.w	r3, r0, r3
34182304:	440b      	add	r3, r1
34182306:	3320      	adds	r3, #32
34182308:	681b      	ldr	r3, [r3, #0]
3418230a:	441a      	add	r2, r3
3418230c:	4932      	ldr	r1, [pc, #200]	@ (341823d8 <I2C_Compute_SCLL_SCLH+0x204>)
3418230e:	683b      	ldr	r3, [r7, #0]
34182310:	202c      	movs	r0, #44	@ 0x2c
34182312:	fb00 f303 	mul.w	r3, r0, r3
34182316:	440b      	add	r3, r1
34182318:	3324      	adds	r3, #36	@ 0x24
3418231a:	681b      	ldr	r3, [r3, #0]
3418231c:	4413      	add	r3, r2
3418231e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
34182320:	68ba      	ldr	r2, [r7, #8]
34182322:	69bb      	ldr	r3, [r7, #24]
34182324:	429a      	cmp	r2, r3
34182326:	d338      	bcc.n	3418239a <I2C_Compute_SCLL_SCLH+0x1c6>
34182328:	68ba      	ldr	r2, [r7, #8]
3418232a:	69fb      	ldr	r3, [r7, #28]
3418232c:	429a      	cmp	r2, r3
3418232e:	d834      	bhi.n	3418239a <I2C_Compute_SCLL_SCLH+0x1c6>
34182330:	4a29      	ldr	r2, [pc, #164]	@ (341823d8 <I2C_Compute_SCLL_SCLH+0x204>)
34182332:	683b      	ldr	r3, [r7, #0]
34182334:	212c      	movs	r1, #44	@ 0x2c
34182336:	fb01 f303 	mul.w	r3, r1, r3
3418233a:	4413      	add	r3, r2
3418233c:	331c      	adds	r3, #28
3418233e:	681b      	ldr	r3, [r3, #0]
34182340:	68fa      	ldr	r2, [r7, #12]
34182342:	429a      	cmp	r2, r3
34182344:	d329      	bcc.n	3418239a <I2C_Compute_SCLL_SCLH+0x1c6>
34182346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34182348:	68fb      	ldr	r3, [r7, #12]
3418234a:	429a      	cmp	r2, r3
3418234c:	d225      	bcs.n	3418239a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
3418234e:	68ba      	ldr	r2, [r7, #8]
34182350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34182352:	1ad3      	subs	r3, r2, r3
34182354:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
34182356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34182358:	2b00      	cmp	r3, #0
3418235a:	da02      	bge.n	34182362 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
3418235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418235e:	425b      	negs	r3, r3
34182360:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
34182362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34182364:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
34182366:	429a      	cmp	r2, r3
34182368:	d917      	bls.n	3418239a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
3418236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418236c:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
3418236e:	491b      	ldr	r1, [pc, #108]	@ (341823dc <I2C_Compute_SCLL_SCLH+0x208>)
34182370:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
34182372:	4613      	mov	r3, r2
34182374:	009b      	lsls	r3, r3, #2
34182376:	4413      	add	r3, r2
34182378:	009b      	lsls	r3, r3, #2
3418237a:	440b      	add	r3, r1
3418237c:	3310      	adds	r3, #16
3418237e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
34182380:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
34182382:	4916      	ldr	r1, [pc, #88]	@ (341823dc <I2C_Compute_SCLL_SCLH+0x208>)
34182384:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
34182386:	4613      	mov	r3, r2
34182388:	009b      	lsls	r3, r3, #2
3418238a:	4413      	add	r3, r2
3418238c:	009b      	lsls	r3, r3, #2
3418238e:	440b      	add	r3, r1
34182390:	330c      	adds	r3, #12
34182392:	6bba      	ldr	r2, [r7, #56]	@ 0x38
34182394:	601a      	str	r2, [r3, #0]
              ret = count;
34182396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34182398:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
3418239a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418239c:	3301      	adds	r3, #1
3418239e:	63bb      	str	r3, [r7, #56]	@ 0x38
341823a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
341823a2:	2bff      	cmp	r3, #255	@ 0xff
341823a4:	d999      	bls.n	341822da <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
341823a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
341823a8:	3301      	adds	r3, #1
341823aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
341823ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
341823ae:	2bff      	cmp	r3, #255	@ 0xff
341823b0:	f67f af6f 	bls.w	34182292 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
341823b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
341823b6:	3301      	adds	r3, #1
341823b8:	637b      	str	r3, [r7, #52]	@ 0x34
341823ba:	4b09      	ldr	r3, [pc, #36]	@ (341823e0 <I2C_Compute_SCLL_SCLH+0x20c>)
341823bc:	681b      	ldr	r3, [r3, #0]
341823be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
341823c0:	429a      	cmp	r2, r3
341823c2:	f4ff af56 	bcc.w	34182272 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
341823c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
341823c8:	4618      	mov	r0, r3
341823ca:	374c      	adds	r7, #76	@ 0x4c
341823cc:	46bd      	mov	sp, r7
341823ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341823d2:	4770      	bx	lr
341823d4:	3b9aca00 	.word	0x3b9aca00
341823d8:	34193e60 	.word	0x34193e60
341823dc:	341c05c0 	.word	0x341c05c0
341823e0:	341c0fc0 	.word	0x341c0fc0

341823e4 <IMX335_WriteTable>:

/** @defgroup IMX335_Private_Functions Private Functions
  * @{
  */
static int32_t IMX335_WriteTable(IMX335_Object_t *pObj, const struct regval *regs, uint32_t size)
{
341823e4:	b580      	push	{r7, lr}
341823e6:	b086      	sub	sp, #24
341823e8:	af00      	add	r7, sp, #0
341823ea:	60f8      	str	r0, [r7, #12]
341823ec:	60b9      	str	r1, [r7, #8]
341823ee:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = IMX335_OK;
341823f0:	2300      	movs	r3, #0
341823f2:	613b      	str	r3, [r7, #16]

  /* Set registers */
  for(index=0; index<size ; index++)
341823f4:	2300      	movs	r3, #0
341823f6:	617b      	str	r3, [r7, #20]
341823f8:	e01c      	b.n	34182434 <IMX335_WriteTable+0x50>
  {
    if(ret != IMX335_ERROR)
341823fa:	693b      	ldr	r3, [r7, #16]
341823fc:	f1b3 3fff 	cmp.w	r3, #4294967295
34182400:	d015      	beq.n	3418242e <IMX335_WriteTable+0x4a>
    {
      if(imx335_write_reg(&pObj->Ctx, regs[index].addr, (uint8_t *)&(regs[index].val), 1) != IMX335_OK)
34182402:	68fb      	ldr	r3, [r7, #12]
34182404:	f103 0018 	add.w	r0, r3, #24
34182408:	697b      	ldr	r3, [r7, #20]
3418240a:	009b      	lsls	r3, r3, #2
3418240c:	68ba      	ldr	r2, [r7, #8]
3418240e:	4413      	add	r3, r2
34182410:	8819      	ldrh	r1, [r3, #0]
34182412:	697b      	ldr	r3, [r7, #20]
34182414:	009b      	lsls	r3, r3, #2
34182416:	68ba      	ldr	r2, [r7, #8]
34182418:	4413      	add	r3, r2
3418241a:	1c9a      	adds	r2, r3, #2
3418241c:	2301      	movs	r3, #1
3418241e:	f000 fa98 	bl	34182952 <imx335_write_reg>
34182422:	4603      	mov	r3, r0
34182424:	2b00      	cmp	r3, #0
34182426:	d002      	beq.n	3418242e <IMX335_WriteTable+0x4a>
      {
        ret = IMX335_ERROR;
34182428:	f04f 33ff 	mov.w	r3, #4294967295
3418242c:	613b      	str	r3, [r7, #16]
  for(index=0; index<size ; index++)
3418242e:	697b      	ldr	r3, [r7, #20]
34182430:	3301      	adds	r3, #1
34182432:	617b      	str	r3, [r7, #20]
34182434:	697a      	ldr	r2, [r7, #20]
34182436:	687b      	ldr	r3, [r7, #4]
34182438:	429a      	cmp	r2, r3
3418243a:	d3de      	bcc.n	341823fa <IMX335_WriteTable+0x16>
      }
    }
  }
  return ret;
3418243c:	693b      	ldr	r3, [r7, #16]
}
3418243e:	4618      	mov	r0, r3
34182440:	3718      	adds	r7, #24
34182442:	46bd      	mov	sp, r7
34182444:	bd80      	pop	{r7, pc}

34182446 <IMX335_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval IMX335_OK
  */
static int32_t IMX335_Delay(IMX335_Object_t *pObj, uint32_t Delay)
{
34182446:	b580      	push	{r7, lr}
34182448:	b084      	sub	sp, #16
3418244a:	af00      	add	r7, sp, #0
3418244c:	6078      	str	r0, [r7, #4]
3418244e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
34182450:	687b      	ldr	r3, [r7, #4]
34182452:	695b      	ldr	r3, [r3, #20]
34182454:	4798      	blx	r3
34182456:	4603      	mov	r3, r0
34182458:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
3418245a:	bf00      	nop
3418245c:	687b      	ldr	r3, [r7, #4]
3418245e:	695b      	ldr	r3, [r3, #20]
34182460:	4798      	blx	r3
34182462:	4603      	mov	r3, r0
34182464:	461a      	mov	r2, r3
34182466:	68fb      	ldr	r3, [r7, #12]
34182468:	1ad3      	subs	r3, r2, r3
3418246a:	683a      	ldr	r2, [r7, #0]
3418246c:	429a      	cmp	r2, r3
3418246e:	d8f5      	bhi.n	3418245c <IMX335_Delay+0x16>
  {
  }
  return IMX335_OK;
34182470:	2300      	movs	r3, #0
}
34182472:	4618      	mov	r0, r3
34182474:	3710      	adds	r7, #16
34182476:	46bd      	mov	sp, r7
34182478:	bd80      	pop	{r7, pc}

3418247a <IMX335_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t IMX335_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
3418247a:	b590      	push	{r4, r7, lr}
3418247c:	b087      	sub	sp, #28
3418247e:	af00      	add	r7, sp, #0
34182480:	60f8      	str	r0, [r7, #12]
34182482:	607a      	str	r2, [r7, #4]
34182484:	461a      	mov	r2, r3
34182486:	460b      	mov	r3, r1
34182488:	817b      	strh	r3, [r7, #10]
3418248a:	4613      	mov	r3, r2
3418248c:	813b      	strh	r3, [r7, #8]
  IMX335_Object_t *pObj = (IMX335_Object_t *)handle;
3418248e:	68fb      	ldr	r3, [r7, #12]
34182490:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
34182492:	697b      	ldr	r3, [r7, #20]
34182494:	691c      	ldr	r4, [r3, #16]
34182496:	697b      	ldr	r3, [r7, #20]
34182498:	8918      	ldrh	r0, [r3, #8]
3418249a:	893b      	ldrh	r3, [r7, #8]
3418249c:	8979      	ldrh	r1, [r7, #10]
3418249e:	687a      	ldr	r2, [r7, #4]
341824a0:	47a0      	blx	r4
341824a2:	4603      	mov	r3, r0
}
341824a4:	4618      	mov	r0, r3
341824a6:	371c      	adds	r7, #28
341824a8:	46bd      	mov	sp, r7
341824aa:	bd90      	pop	{r4, r7, pc}

341824ac <IMX335_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t IMX335_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
341824ac:	b590      	push	{r4, r7, lr}
341824ae:	b087      	sub	sp, #28
341824b0:	af00      	add	r7, sp, #0
341824b2:	60f8      	str	r0, [r7, #12]
341824b4:	607a      	str	r2, [r7, #4]
341824b6:	461a      	mov	r2, r3
341824b8:	460b      	mov	r3, r1
341824ba:	817b      	strh	r3, [r7, #10]
341824bc:	4613      	mov	r3, r2
341824be:	813b      	strh	r3, [r7, #8]
  IMX335_Object_t *pObj = (IMX335_Object_t *)handle;
341824c0:	68fb      	ldr	r3, [r7, #12]
341824c2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
341824c4:	697b      	ldr	r3, [r7, #20]
341824c6:	68dc      	ldr	r4, [r3, #12]
341824c8:	697b      	ldr	r3, [r7, #20]
341824ca:	8918      	ldrh	r0, [r3, #8]
341824cc:	893b      	ldrh	r3, [r7, #8]
341824ce:	8979      	ldrh	r1, [r7, #10]
341824d0:	687a      	ldr	r2, [r7, #4]
341824d2:	47a0      	blx	r4
341824d4:	4603      	mov	r3, r0
}
341824d6:	4618      	mov	r0, r3
341824d8:	371c      	adds	r7, #28
341824da:	46bd      	mov	sp, r7
341824dc:	bd90      	pop	{r4, r7, pc}
	...

341824e0 <IMX335_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t IMX335_RegisterBusIO(IMX335_Object_t *pObj, IMX335_IO_t *pIO)
{
341824e0:	b580      	push	{r7, lr}
341824e2:	b084      	sub	sp, #16
341824e4:	af00      	add	r7, sp, #0
341824e6:	6078      	str	r0, [r7, #4]
341824e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
341824ea:	687b      	ldr	r3, [r7, #4]
341824ec:	2b00      	cmp	r3, #0
341824ee:	d103      	bne.n	341824f8 <IMX335_RegisterBusIO+0x18>
  {
    ret = IMX335_ERROR;
341824f0:	f04f 33ff 	mov.w	r3, #4294967295
341824f4:	60fb      	str	r3, [r7, #12]
341824f6:	e02c      	b.n	34182552 <IMX335_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
341824f8:	683b      	ldr	r3, [r7, #0]
341824fa:	681a      	ldr	r2, [r3, #0]
341824fc:	687b      	ldr	r3, [r7, #4]
341824fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
34182500:	683b      	ldr	r3, [r7, #0]
34182502:	685a      	ldr	r2, [r3, #4]
34182504:	687b      	ldr	r3, [r7, #4]
34182506:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
34182508:	683b      	ldr	r3, [r7, #0]
3418250a:	891a      	ldrh	r2, [r3, #8]
3418250c:	687b      	ldr	r3, [r7, #4]
3418250e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
34182510:	683b      	ldr	r3, [r7, #0]
34182512:	68da      	ldr	r2, [r3, #12]
34182514:	687b      	ldr	r3, [r7, #4]
34182516:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
34182518:	683b      	ldr	r3, [r7, #0]
3418251a:	691a      	ldr	r2, [r3, #16]
3418251c:	687b      	ldr	r3, [r7, #4]
3418251e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
34182520:	683b      	ldr	r3, [r7, #0]
34182522:	695a      	ldr	r2, [r3, #20]
34182524:	687b      	ldr	r3, [r7, #4]
34182526:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = IMX335_ReadRegWrap;
34182528:	687b      	ldr	r3, [r7, #4]
3418252a:	4a0c      	ldr	r2, [pc, #48]	@ (3418255c <IMX335_RegisterBusIO+0x7c>)
3418252c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = IMX335_WriteRegWrap;
3418252e:	687b      	ldr	r3, [r7, #4]
34182530:	4a0b      	ldr	r2, [pc, #44]	@ (34182560 <IMX335_RegisterBusIO+0x80>)
34182532:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
34182534:	687b      	ldr	r3, [r7, #4]
34182536:	687a      	ldr	r2, [r7, #4]
34182538:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
3418253a:	687b      	ldr	r3, [r7, #4]
3418253c:	681b      	ldr	r3, [r3, #0]
3418253e:	2b00      	cmp	r3, #0
34182540:	d004      	beq.n	3418254c <IMX335_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
34182542:	687b      	ldr	r3, [r7, #4]
34182544:	681b      	ldr	r3, [r3, #0]
34182546:	4798      	blx	r3
34182548:	60f8      	str	r0, [r7, #12]
3418254a:	e002      	b.n	34182552 <IMX335_RegisterBusIO+0x72>
    }
    else
    {
      ret = IMX335_ERROR;
3418254c:	f04f 33ff 	mov.w	r3, #4294967295
34182550:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
34182552:	68fb      	ldr	r3, [r7, #12]
}
34182554:	4618      	mov	r0, r3
34182556:	3710      	adds	r7, #16
34182558:	46bd      	mov	sp, r7
3418255a:	bd80      	pop	{r7, pc}
3418255c:	3418247b 	.word	0x3418247b
34182560:	341824ad 	.word	0x341824ad

34182564 <IMX335_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t IMX335_Init(IMX335_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
34182564:	b580      	push	{r7, lr}
34182566:	b086      	sub	sp, #24
34182568:	af00      	add	r7, sp, #0
3418256a:	60f8      	str	r0, [r7, #12]
3418256c:	60b9      	str	r1, [r7, #8]
3418256e:	607a      	str	r2, [r7, #4]
  int32_t ret = IMX335_OK;
34182570:	2300      	movs	r3, #0
34182572:	617b      	str	r3, [r7, #20]
  uint8_t tmp;

  if(pObj->IsInitialized == 0U)
34182574:	68fb      	ldr	r3, [r7, #12]
34182576:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
3418257a:	2b00      	cmp	r3, #0
3418257c:	d13d      	bne.n	341825fa <IMX335_Init+0x96>
  {
    switch (Resolution)
3418257e:	68bb      	ldr	r3, [r7, #8]
34182580:	2b06      	cmp	r3, #6
34182582:	d10b      	bne.n	3418259c <IMX335_Init+0x38>
    {
      case IMX335_R2592_1944:
        if(IMX335_WriteTable(pObj, res_2592_1944_regs, ARRAY_SIZE(res_2592_1944_regs)) != IMX335_OK)
34182584:	2254      	movs	r2, #84	@ 0x54
34182586:	491f      	ldr	r1, [pc, #124]	@ (34182604 <IMX335_Init+0xa0>)
34182588:	68f8      	ldr	r0, [r7, #12]
3418258a:	f7ff ff2b 	bl	341823e4 <IMX335_WriteTable>
3418258e:	4603      	mov	r3, r0
34182590:	2b00      	cmp	r3, #0
34182592:	d007      	beq.n	341825a4 <IMX335_Init+0x40>
        {
          ret = IMX335_ERROR;
34182594:	f04f 33ff 	mov.w	r3, #4294967295
34182598:	617b      	str	r3, [r7, #20]
        }
        break;
3418259a:	e003      	b.n	341825a4 <IMX335_Init+0x40>
      /* Add new resolution here */
      default:
        /* Resolution not supported */
        ret = IMX335_ERROR;
3418259c:	f04f 33ff 	mov.w	r3, #4294967295
341825a0:	617b      	str	r3, [r7, #20]
341825a2:	e000      	b.n	341825a6 <IMX335_Init+0x42>
        break;
341825a4:	bf00      	nop
    }

    if(!ret)
341825a6:	697b      	ldr	r3, [r7, #20]
341825a8:	2b00      	cmp	r3, #0
341825aa:	d126      	bne.n	341825fa <IMX335_Init+0x96>
    {
      if(IMX335_WriteTable(pObj, mode_2l_10b_regs, ARRAY_SIZE(mode_2l_10b_regs)) != IMX335_OK)
341825ac:	2205      	movs	r2, #5
341825ae:	4916      	ldr	r1, [pc, #88]	@ (34182608 <IMX335_Init+0xa4>)
341825b0:	68f8      	ldr	r0, [r7, #12]
341825b2:	f7ff ff17 	bl	341823e4 <IMX335_WriteTable>
341825b6:	4603      	mov	r3, r0
341825b8:	2b00      	cmp	r3, #0
341825ba:	d003      	beq.n	341825c4 <IMX335_Init+0x60>
      {
        ret = IMX335_ERROR;
341825bc:	f04f 33ff 	mov.w	r3, #4294967295
341825c0:	617b      	str	r3, [r7, #20]
341825c2:	e01a      	b.n	341825fa <IMX335_Init+0x96>
      }
      else
      {
        /* Start streaming */
        tmp = IMX335_MODE_STREAMING;
341825c4:	2300      	movs	r3, #0
341825c6:	74fb      	strb	r3, [r7, #19]
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_MODE_SELECT, &tmp, 1) != IMX335_OK)
341825c8:	68fb      	ldr	r3, [r7, #12]
341825ca:	f103 0018 	add.w	r0, r3, #24
341825ce:	f107 0213 	add.w	r2, r7, #19
341825d2:	2301      	movs	r3, #1
341825d4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
341825d8:	f000 f9bb 	bl	34182952 <imx335_write_reg>
341825dc:	4603      	mov	r3, r0
341825de:	2b00      	cmp	r3, #0
341825e0:	d003      	beq.n	341825ea <IMX335_Init+0x86>
        {
          ret = IMX335_ERROR;
341825e2:	f04f 33ff 	mov.w	r3, #4294967295
341825e6:	617b      	str	r3, [r7, #20]
341825e8:	e007      	b.n	341825fa <IMX335_Init+0x96>
        }
        else
        {
          IMX335_Delay(pObj, 20);
341825ea:	2114      	movs	r1, #20
341825ec:	68f8      	ldr	r0, [r7, #12]
341825ee:	f7ff ff2a 	bl	34182446 <IMX335_Delay>
          pObj->IsInitialized = 1U;
341825f2:	68fb      	ldr	r3, [r7, #12]
341825f4:	2201      	movs	r2, #1
341825f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }
      }
    }
  }

  return ret;
341825fa:	697b      	ldr	r3, [r7, #20]
}
341825fc:	4618      	mov	r0, r3
341825fe:	3718      	adds	r7, #24
34182600:	46bd      	mov	sp, r7
34182602:	bd80      	pop	{r7, pc}
34182604:	34193ee4 	.word	0x34193ee4
34182608:	34194034 	.word	0x34194034

3418260c <IMX335_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t IMX335_ReadID(IMX335_Object_t *pObj, uint32_t *Id)
{
3418260c:	b580      	push	{r7, lr}
3418260e:	b084      	sub	sp, #16
34182610:	af00      	add	r7, sp, #0
34182612:	6078      	str	r0, [r7, #4]
34182614:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
34182616:	687b      	ldr	r3, [r7, #4]
34182618:	681b      	ldr	r3, [r3, #0]
3418261a:	4798      	blx	r3

  if(imx335_read_reg(&pObj->Ctx, IMX335_REG_ID, &tmp, 1)!= IMX335_OK)
3418261c:	687b      	ldr	r3, [r7, #4]
3418261e:	f103 0018 	add.w	r0, r3, #24
34182622:	f107 020b 	add.w	r2, r7, #11
34182626:	2301      	movs	r3, #1
34182628:	f643 1112 	movw	r1, #14610	@ 0x3912
3418262c:	f000 f97a 	bl	34182924 <imx335_read_reg>
34182630:	4603      	mov	r3, r0
34182632:	2b00      	cmp	r3, #0
34182634:	d003      	beq.n	3418263e <IMX335_ReadID+0x32>
  {
    ret = IMX335_ERROR;
34182636:	f04f 33ff 	mov.w	r3, #4294967295
3418263a:	60fb      	str	r3, [r7, #12]
3418263c:	e005      	b.n	3418264a <IMX335_ReadID+0x3e>
  }
  else
  {
    *Id = tmp;
3418263e:	7afb      	ldrb	r3, [r7, #11]
34182640:	461a      	mov	r2, r3
34182642:	683b      	ldr	r3, [r7, #0]
34182644:	601a      	str	r2, [r3, #0]
    ret = IMX335_OK;
34182646:	2300      	movs	r3, #0
34182648:	60fb      	str	r3, [r7, #12]
  }

  /* Component status */
  return ret;
3418264a:	68fb      	ldr	r3, [r7, #12]
}
3418264c:	4618      	mov	r0, r3
3418264e:	3710      	adds	r7, #16
34182650:	46bd      	mov	sp, r7
34182652:	bd80      	pop	{r7, pc}

34182654 <IMX335_GetSensorInfo>:
  * @param  pObj   pointer to component object
  * @param  Info   pointer to sensor info
  * @retval Component status
  */
int32_t IMX335_GetSensorInfo(IMX335_Object_t *pObj, IMX335_SensorInfo_t *Info)
{
34182654:	b480      	push	{r7}
34182656:	b083      	sub	sp, #12
34182658:	af00      	add	r7, sp, #0
3418265a:	6078      	str	r0, [r7, #4]
3418265c:	6039      	str	r1, [r7, #0]
  if ((!pObj) || (Info == NULL))
3418265e:	687b      	ldr	r3, [r7, #4]
34182660:	2b00      	cmp	r3, #0
34182662:	d002      	beq.n	3418266a <IMX335_GetSensorInfo+0x16>
34182664:	683b      	ldr	r3, [r7, #0]
34182666:	2b00      	cmp	r3, #0
34182668:	d102      	bne.n	34182670 <IMX335_GetSensorInfo+0x1c>
  {
    return IMX335_ERROR;
3418266a:	f04f 33ff 	mov.w	r3, #4294967295
3418266e:	e025      	b.n	341826bc <IMX335_GetSensorInfo+0x68>
  }

  if (sizeof(Info->name) >= strlen(IMX335_NAME) + 1)
  {
    strcpy(Info->name, IMX335_NAME);
34182670:	683b      	ldr	r3, [r7, #0]
34182672:	4a15      	ldr	r2, [pc, #84]	@ (341826c8 <IMX335_GetSensorInfo+0x74>)
34182674:	6810      	ldr	r0, [r2, #0]
34182676:	6018      	str	r0, [r3, #0]
34182678:	8891      	ldrh	r1, [r2, #4]
3418267a:	7992      	ldrb	r2, [r2, #6]
3418267c:	8099      	strh	r1, [r3, #4]
3418267e:	719a      	strb	r2, [r3, #6]
  else
  {
    return IMX335_ERROR;
  }

  Info->bayer_pattern = IMX335_BAYER_PATTERN;
34182680:	683b      	ldr	r3, [r7, #0]
34182682:	2200      	movs	r2, #0
34182684:	f883 2020 	strb.w	r2, [r3, #32]
  Info->color_depth = IMX335_COLOR_DEPTH;
34182688:	683b      	ldr	r3, [r7, #0]
3418268a:	220a      	movs	r2, #10
3418268c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  Info->width = IMX335_WIDTH;
34182690:	683b      	ldr	r3, [r7, #0]
34182692:	f44f 6222 	mov.w	r2, #2592	@ 0xa20
34182696:	625a      	str	r2, [r3, #36]	@ 0x24
  Info->height = IMX335_HEIGHT;
34182698:	683b      	ldr	r3, [r7, #0]
3418269a:	f44f 62f3 	mov.w	r2, #1944	@ 0x798
3418269e:	629a      	str	r2, [r3, #40]	@ 0x28
  Info->gain_min = IMX335_GAIN_MIN;
341826a0:	683b      	ldr	r3, [r7, #0]
341826a2:	2200      	movs	r2, #0
341826a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  Info->gain_max = IMX335_GAIN_MAX;
341826a6:	683b      	ldr	r3, [r7, #0]
341826a8:	4a08      	ldr	r2, [pc, #32]	@ (341826cc <IMX335_GetSensorInfo+0x78>)
341826aa:	631a      	str	r2, [r3, #48]	@ 0x30
  Info->exposure_min = IMX335_EXPOSURE_MIN;
341826ac:	683b      	ldr	r3, [r7, #0]
341826ae:	2200      	movs	r2, #0
341826b0:	635a      	str	r2, [r3, #52]	@ 0x34
  Info->exposure_max = IMX335_EXPOSURE_MAX;
341826b2:	683b      	ldr	r3, [r7, #0]
341826b4:	f248 12f2 	movw	r2, #33266	@ 0x81f2
341826b8:	639a      	str	r2, [r3, #56]	@ 0x38

  return IMX335_OK;
341826ba:	2300      	movs	r3, #0
}
341826bc:	4618      	mov	r0, r3
341826be:	370c      	adds	r7, #12
341826c0:	46bd      	mov	sp, r7
341826c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341826c6:	4770      	bx	lr
341826c8:	34193a28 	.word	0x34193a28
341826cc:	00011940 	.word	0x00011940

341826d0 <IMX335_SetGain>:
  * @param  pObj  pointer to component object
  * @param  Gain Gain in mdB
  * @retval Component status
  */
int32_t IMX335_SetGain(IMX335_Object_t *pObj, int32_t gain)
{
341826d0:	b580      	push	{r7, lr}
341826d2:	b084      	sub	sp, #16
341826d4:	af00      	add	r7, sp, #0
341826d6:	6078      	str	r0, [r7, #4]
341826d8:	6039      	str	r1, [r7, #0]
  int32_t ret = IMX335_OK;
341826da:	2300      	movs	r3, #0
341826dc:	60fb      	str	r3, [r7, #12]
  uint8_t hold;

  if ((gain > IMX335_GAIN_MAX) || (gain < IMX335_GAIN_MIN))
341826de:	683b      	ldr	r3, [r7, #0]
341826e0:	4a25      	ldr	r2, [pc, #148]	@ (34182778 <IMX335_SetGain+0xa8>)
341826e2:	4293      	cmp	r3, r2
341826e4:	dc02      	bgt.n	341826ec <IMX335_SetGain+0x1c>
341826e6:	683b      	ldr	r3, [r7, #0]
341826e8:	2b00      	cmp	r3, #0
341826ea:	da03      	bge.n	341826f4 <IMX335_SetGain+0x24>
  {
    ret = IMX335_ERROR;
341826ec:	f04f 33ff 	mov.w	r3, #4294967295
341826f0:	60fb      	str	r3, [r7, #12]
341826f2:	e03c      	b.n	3418276e <IMX335_SetGain+0x9e>
  }
  else
  {
    /* Convert to IMX335 gain unit (0.3 dB = 300 mdB) */
    gain /= IMX335_GAIN_UNIT_MDB;
341826f4:	683b      	ldr	r3, [r7, #0]
341826f6:	4a21      	ldr	r2, [pc, #132]	@ (3418277c <IMX335_SetGain+0xac>)
341826f8:	fb82 1203 	smull	r1, r2, r2, r3
341826fc:	1152      	asrs	r2, r2, #5
341826fe:	17db      	asrs	r3, r3, #31
34182700:	1ad3      	subs	r3, r2, r3
34182702:	603b      	str	r3, [r7, #0]

    hold = 1;
34182704:	2301      	movs	r3, #1
34182706:	72fb      	strb	r3, [r7, #11]
    if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34182708:	687b      	ldr	r3, [r7, #4]
3418270a:	f103 0018 	add.w	r0, r3, #24
3418270e:	f107 020b 	add.w	r2, r7, #11
34182712:	2301      	movs	r3, #1
34182714:	f243 0101 	movw	r1, #12289	@ 0x3001
34182718:	f000 f91b 	bl	34182952 <imx335_write_reg>
3418271c:	4603      	mov	r3, r0
3418271e:	2b00      	cmp	r3, #0
34182720:	d003      	beq.n	3418272a <IMX335_SetGain+0x5a>
    {
      ret = IMX335_ERROR;
34182722:	f04f 33ff 	mov.w	r3, #4294967295
34182726:	60fb      	str	r3, [r7, #12]
34182728:	e021      	b.n	3418276e <IMX335_SetGain+0x9e>
    }
    else
    {
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_GAIN, (uint8_t *)&gain, 2) != IMX335_OK)
3418272a:	687b      	ldr	r3, [r7, #4]
3418272c:	f103 0018 	add.w	r0, r3, #24
34182730:	463a      	mov	r2, r7
34182732:	2302      	movs	r3, #2
34182734:	f243 01e8 	movw	r1, #12520	@ 0x30e8
34182738:	f000 f90b 	bl	34182952 <imx335_write_reg>
3418273c:	4603      	mov	r3, r0
3418273e:	2b00      	cmp	r3, #0
34182740:	d003      	beq.n	3418274a <IMX335_SetGain+0x7a>
      {
        ret = IMX335_ERROR;
34182742:	f04f 33ff 	mov.w	r3, #4294967295
34182746:	60fb      	str	r3, [r7, #12]
34182748:	e011      	b.n	3418276e <IMX335_SetGain+0x9e>
      }
      else
      {
        hold = 0;
3418274a:	2300      	movs	r3, #0
3418274c:	72fb      	strb	r3, [r7, #11]
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
3418274e:	687b      	ldr	r3, [r7, #4]
34182750:	f103 0018 	add.w	r0, r3, #24
34182754:	f107 020b 	add.w	r2, r7, #11
34182758:	2301      	movs	r3, #1
3418275a:	f243 0101 	movw	r1, #12289	@ 0x3001
3418275e:	f000 f8f8 	bl	34182952 <imx335_write_reg>
34182762:	4603      	mov	r3, r0
34182764:	2b00      	cmp	r3, #0
34182766:	d002      	beq.n	3418276e <IMX335_SetGain+0x9e>
        {
          ret = IMX335_ERROR;
34182768:	f04f 33ff 	mov.w	r3, #4294967295
3418276c:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

return ret;
3418276e:	68fb      	ldr	r3, [r7, #12]
}
34182770:	4618      	mov	r0, r3
34182772:	3710      	adds	r7, #16
34182774:	46bd      	mov	sp, r7
34182776:	bd80      	pop	{r7, pc}
34182778:	00011940 	.word	0x00011940
3418277c:	1b4e81b5 	.word	0x1b4e81b5

34182780 <IMX335_SetExposure>:
  * @param  pObj  pointer to component object
  * @param  Exposure Exposure in micro seconds
  * @retval Component status
  */
int32_t IMX335_SetExposure(IMX335_Object_t *pObj, int32_t exposure)
{
34182780:	b580      	push	{r7, lr}
34182782:	b086      	sub	sp, #24
34182784:	af00      	add	r7, sp, #0
34182786:	6078      	str	r0, [r7, #4]
34182788:	6039      	str	r1, [r7, #0]
  int32_t ret = IMX335_OK;
3418278a:	2300      	movs	r3, #0
3418278c:	617b      	str	r3, [r7, #20]
  uint32_t vmax, shutter;
  uint8_t hold;


  if (imx335_read_reg(&pObj->Ctx, IMX335_REG_VMAX, (uint8_t *)&vmax, 4) != IMX335_OK)
3418278e:	687b      	ldr	r3, [r7, #4]
34182790:	f103 0018 	add.w	r0, r3, #24
34182794:	f107 0210 	add.w	r2, r7, #16
34182798:	2304      	movs	r3, #4
3418279a:	f243 0130 	movw	r1, #12336	@ 0x3030
3418279e:	f000 f8c1 	bl	34182924 <imx335_read_reg>
341827a2:	4603      	mov	r3, r0
341827a4:	2b00      	cmp	r3, #0
341827a6:	d003      	beq.n	341827b0 <IMX335_SetExposure+0x30>
  {
    ret = IMX335_ERROR;
341827a8:	f04f 33ff 	mov.w	r3, #4294967295
341827ac:	617b      	str	r3, [r7, #20]
341827ae:	e047      	b.n	34182840 <IMX335_SetExposure+0xc0>
  }
  else
  {
    shutter = ( vmax - (exposure /((uint32_t) IMX335_1H_PERIOD_USEC)));
341827b0:	6939      	ldr	r1, [r7, #16]
341827b2:	683a      	ldr	r2, [r7, #0]
341827b4:	4b25      	ldr	r3, [pc, #148]	@ (3418284c <IMX335_SetExposure+0xcc>)
341827b6:	fba3 0302 	umull	r0, r3, r3, r2
341827ba:	1ad2      	subs	r2, r2, r3
341827bc:	0852      	lsrs	r2, r2, #1
341827be:	4413      	add	r3, r2
341827c0:	089b      	lsrs	r3, r3, #2
341827c2:	1acb      	subs	r3, r1, r3
341827c4:	60fb      	str	r3, [r7, #12]

    if (shutter < IMX335_SHUTTER_MIN)
341827c6:	68fb      	ldr	r3, [r7, #12]
341827c8:	2b08      	cmp	r3, #8
341827ca:	d803      	bhi.n	341827d4 <IMX335_SetExposure+0x54>
    {
      ret = IMX335_ERROR;
341827cc:	f04f 33ff 	mov.w	r3, #4294967295
341827d0:	617b      	str	r3, [r7, #20]
341827d2:	e035      	b.n	34182840 <IMX335_SetExposure+0xc0>
    }
    else
    {
      hold = 1;
341827d4:	2301      	movs	r3, #1
341827d6:	72fb      	strb	r3, [r7, #11]
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
341827d8:	687b      	ldr	r3, [r7, #4]
341827da:	f103 0018 	add.w	r0, r3, #24
341827de:	f107 020b 	add.w	r2, r7, #11
341827e2:	2301      	movs	r3, #1
341827e4:	f243 0101 	movw	r1, #12289	@ 0x3001
341827e8:	f000 f8b3 	bl	34182952 <imx335_write_reg>
341827ec:	4603      	mov	r3, r0
341827ee:	2b00      	cmp	r3, #0
341827f0:	d003      	beq.n	341827fa <IMX335_SetExposure+0x7a>
      {
        ret = IMX335_ERROR;
341827f2:	f04f 33ff 	mov.w	r3, #4294967295
341827f6:	617b      	str	r3, [r7, #20]
341827f8:	e022      	b.n	34182840 <IMX335_SetExposure+0xc0>
      }
      else
      {
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_SHUTTER, (uint8_t *)&shutter, 3) != IMX335_OK)
341827fa:	687b      	ldr	r3, [r7, #4]
341827fc:	f103 0018 	add.w	r0, r3, #24
34182800:	f107 020c 	add.w	r2, r7, #12
34182804:	2303      	movs	r3, #3
34182806:	f243 0158 	movw	r1, #12376	@ 0x3058
3418280a:	f000 f8a2 	bl	34182952 <imx335_write_reg>
3418280e:	4603      	mov	r3, r0
34182810:	2b00      	cmp	r3, #0
34182812:	d003      	beq.n	3418281c <IMX335_SetExposure+0x9c>
        {
          ret = IMX335_ERROR;
34182814:	f04f 33ff 	mov.w	r3, #4294967295
34182818:	617b      	str	r3, [r7, #20]
3418281a:	e011      	b.n	34182840 <IMX335_SetExposure+0xc0>
        }
        else
        {
          hold = 0;
3418281c:	2300      	movs	r3, #0
3418281e:	72fb      	strb	r3, [r7, #11]
          if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34182820:	687b      	ldr	r3, [r7, #4]
34182822:	f103 0018 	add.w	r0, r3, #24
34182826:	f107 020b 	add.w	r2, r7, #11
3418282a:	2301      	movs	r3, #1
3418282c:	f243 0101 	movw	r1, #12289	@ 0x3001
34182830:	f000 f88f 	bl	34182952 <imx335_write_reg>
34182834:	4603      	mov	r3, r0
34182836:	2b00      	cmp	r3, #0
34182838:	d002      	beq.n	34182840 <IMX335_SetExposure+0xc0>
          {
            ret = IMX335_ERROR;
3418283a:	f04f 33ff 	mov.w	r3, #4294967295
3418283e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
34182840:	697b      	ldr	r3, [r7, #20]
}
34182842:	4618      	mov	r0, r3
34182844:	3718      	adds	r7, #24
34182846:	46bd      	mov	sp, r7
34182848:	bd80      	pop	{r7, pc}
3418284a:	bf00      	nop
3418284c:	24924925 	.word	0x24924925

34182850 <IMX335_SetFrequency>:
  * @param  pObj  pointer to component object
  * @param  frequency in Mhz
  * @retval Component status
  */
int32_t IMX335_SetFrequency(IMX335_Object_t *pObj, int32_t frequency)
{
34182850:	b580      	push	{r7, lr}
34182852:	b084      	sub	sp, #16
34182854:	af00      	add	r7, sp, #0
34182856:	6078      	str	r0, [r7, #4]
34182858:	6039      	str	r1, [r7, #0]
  uint32_t ret = IMX335_OK;
3418285a:	2300      	movs	r3, #0
3418285c:	60fb      	str	r3, [r7, #12]

  switch (frequency)
3418285e:	683b      	ldr	r3, [r7, #0]
34182860:	3b01      	subs	r3, #1
34182862:	2b03      	cmp	r3, #3
34182864:	d83a      	bhi.n	341828dc <IMX335_SetFrequency+0x8c>
34182866:	a201      	add	r2, pc, #4	@ (adr r2, 3418286c <IMX335_SetFrequency+0x1c>)
34182868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418286c:	341828c5 	.word	0x341828c5
34182870:	341828ad 	.word	0x341828ad
34182874:	34182895 	.word	0x34182895
34182878:	3418287d 	.word	0x3418287d
  {
    case IMX335_INCK_74MHZ:
      if(IMX335_WriteTable(pObj, inck_74Mhz_regs, ARRAY_SIZE(inck_74Mhz_regs)) != IMX335_OK)
3418287c:	2207      	movs	r2, #7
3418287e:	4924      	ldr	r1, [pc, #144]	@ (34182910 <IMX335_SetFrequency+0xc0>)
34182880:	6878      	ldr	r0, [r7, #4]
34182882:	f7ff fdaf 	bl	341823e4 <IMX335_WriteTable>
34182886:	4603      	mov	r3, r0
34182888:	2b00      	cmp	r3, #0
3418288a:	d033      	beq.n	341828f4 <IMX335_SetFrequency+0xa4>
      {
        ret = IMX335_ERROR;
3418288c:	f04f 33ff 	mov.w	r3, #4294967295
34182890:	60fb      	str	r3, [r7, #12]
      }
      break;
34182892:	e02f      	b.n	341828f4 <IMX335_SetFrequency+0xa4>
    case IMX335_INCK_27MHZ:
      if(IMX335_WriteTable(pObj, inck_27Mhz_regs, ARRAY_SIZE(inck_27Mhz_regs)) != IMX335_OK)
34182894:	2207      	movs	r2, #7
34182896:	491f      	ldr	r1, [pc, #124]	@ (34182914 <IMX335_SetFrequency+0xc4>)
34182898:	6878      	ldr	r0, [r7, #4]
3418289a:	f7ff fda3 	bl	341823e4 <IMX335_WriteTable>
3418289e:	4603      	mov	r3, r0
341828a0:	2b00      	cmp	r3, #0
341828a2:	d029      	beq.n	341828f8 <IMX335_SetFrequency+0xa8>
      {
        ret = IMX335_ERROR;
341828a4:	f04f 33ff 	mov.w	r3, #4294967295
341828a8:	60fb      	str	r3, [r7, #12]
      }
      break;
341828aa:	e025      	b.n	341828f8 <IMX335_SetFrequency+0xa8>
    case IMX335_INCK_24MHZ:
      if(IMX335_WriteTable(pObj, inck_24Mhz_regs, ARRAY_SIZE(inck_24Mhz_regs)) != IMX335_OK)
341828ac:	2207      	movs	r2, #7
341828ae:	491a      	ldr	r1, [pc, #104]	@ (34182918 <IMX335_SetFrequency+0xc8>)
341828b0:	6878      	ldr	r0, [r7, #4]
341828b2:	f7ff fd97 	bl	341823e4 <IMX335_WriteTable>
341828b6:	4603      	mov	r3, r0
341828b8:	2b00      	cmp	r3, #0
341828ba:	d01f      	beq.n	341828fc <IMX335_SetFrequency+0xac>
      {
        ret = IMX335_ERROR;
341828bc:	f04f 33ff 	mov.w	r3, #4294967295
341828c0:	60fb      	str	r3, [r7, #12]
      }
      break;
341828c2:	e01b      	b.n	341828fc <IMX335_SetFrequency+0xac>
    case IMX335_INCK_18MHZ:
      if(IMX335_WriteTable(pObj, inck_18Mhz_regs, ARRAY_SIZE(inck_18Mhz_regs)) != IMX335_OK)
341828c4:	2207      	movs	r2, #7
341828c6:	4915      	ldr	r1, [pc, #84]	@ (3418291c <IMX335_SetFrequency+0xcc>)
341828c8:	6878      	ldr	r0, [r7, #4]
341828ca:	f7ff fd8b 	bl	341823e4 <IMX335_WriteTable>
341828ce:	4603      	mov	r3, r0
341828d0:	2b00      	cmp	r3, #0
341828d2:	d015      	beq.n	34182900 <IMX335_SetFrequency+0xb0>
      {
        ret = IMX335_ERROR;
341828d4:	f04f 33ff 	mov.w	r3, #4294967295
341828d8:	60fb      	str	r3, [r7, #12]
      }
      break;
341828da:	e011      	b.n	34182900 <IMX335_SetFrequency+0xb0>
    default:
      /* IMX335_INCK_6MHZ */
      if(IMX335_WriteTable(pObj, inck_6Mhz_regs, ARRAY_SIZE(inck_6Mhz_regs)) != IMX335_OK)
341828dc:	2207      	movs	r2, #7
341828de:	4910      	ldr	r1, [pc, #64]	@ (34182920 <IMX335_SetFrequency+0xd0>)
341828e0:	6878      	ldr	r0, [r7, #4]
341828e2:	f7ff fd7f 	bl	341823e4 <IMX335_WriteTable>
341828e6:	4603      	mov	r3, r0
341828e8:	2b00      	cmp	r3, #0
341828ea:	d00b      	beq.n	34182904 <IMX335_SetFrequency+0xb4>
      {
        ret = IMX335_ERROR;
341828ec:	f04f 33ff 	mov.w	r3, #4294967295
341828f0:	60fb      	str	r3, [r7, #12]
      }
      break;
341828f2:	e007      	b.n	34182904 <IMX335_SetFrequency+0xb4>
      break;
341828f4:	bf00      	nop
341828f6:	e006      	b.n	34182906 <IMX335_SetFrequency+0xb6>
      break;
341828f8:	bf00      	nop
341828fa:	e004      	b.n	34182906 <IMX335_SetFrequency+0xb6>
      break;
341828fc:	bf00      	nop
341828fe:	e002      	b.n	34182906 <IMX335_SetFrequency+0xb6>
      break;
34182900:	bf00      	nop
34182902:	e000      	b.n	34182906 <IMX335_SetFrequency+0xb6>
      break;
34182904:	bf00      	nop
  };

  return ret;
34182906:	68fb      	ldr	r3, [r7, #12]
}
34182908:	4618      	mov	r0, r3
3418290a:	3710      	adds	r7, #16
3418290c:	46bd      	mov	sp, r7
3418290e:	bd80      	pop	{r7, pc}
34182910:	34194048 	.word	0x34194048
34182914:	34194064 	.word	0x34194064
34182918:	34194080 	.word	0x34194080
3418291c:	3419409c 	.word	0x3419409c
34182920:	341940b8 	.word	0x341940b8

34182924 <imx335_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t imx335_read_reg(imx335_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
34182924:	b590      	push	{r4, r7, lr}
34182926:	b085      	sub	sp, #20
34182928:	af00      	add	r7, sp, #0
3418292a:	60f8      	str	r0, [r7, #12]
3418292c:	607a      	str	r2, [r7, #4]
3418292e:	461a      	mov	r2, r3
34182930:	460b      	mov	r3, r1
34182932:	817b      	strh	r3, [r7, #10]
34182934:	4613      	mov	r3, r2
34182936:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
34182938:	68fb      	ldr	r3, [r7, #12]
3418293a:	685c      	ldr	r4, [r3, #4]
3418293c:	68fb      	ldr	r3, [r7, #12]
3418293e:	6898      	ldr	r0, [r3, #8]
34182940:	893b      	ldrh	r3, [r7, #8]
34182942:	8979      	ldrh	r1, [r7, #10]
34182944:	687a      	ldr	r2, [r7, #4]
34182946:	47a0      	blx	r4
34182948:	4603      	mov	r3, r0
}
3418294a:	4618      	mov	r0, r3
3418294c:	3714      	adds	r7, #20
3418294e:	46bd      	mov	sp, r7
34182950:	bd90      	pop	{r4, r7, pc}

34182952 <imx335_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t imx335_write_reg(imx335_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
34182952:	b590      	push	{r4, r7, lr}
34182954:	b085      	sub	sp, #20
34182956:	af00      	add	r7, sp, #0
34182958:	60f8      	str	r0, [r7, #12]
3418295a:	607a      	str	r2, [r7, #4]
3418295c:	461a      	mov	r2, r3
3418295e:	460b      	mov	r3, r1
34182960:	817b      	strh	r3, [r7, #10]
34182962:	4613      	mov	r3, r2
34182964:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
34182966:	68fb      	ldr	r3, [r7, #12]
34182968:	681c      	ldr	r4, [r3, #0]
3418296a:	68fb      	ldr	r3, [r7, #12]
3418296c:	6898      	ldr	r0, [r3, #8]
3418296e:	893b      	ldrh	r3, [r7, #8]
34182970:	8979      	ldrh	r1, [r7, #10]
34182972:	687a      	ldr	r2, [r7, #4]
34182974:	47a0      	blx	r4
34182976:	4603      	mov	r3, r0
}
34182978:	4618      	mov	r0, r3
3418297a:	3714      	adds	r7, #20
3418297c:	46bd      	mov	sp, r7
3418297e:	bd90      	pop	{r4, r7, pc}

34182980 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
34182980:	b580      	push	{r7, lr}
34182982:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34182984:	2003      	movs	r0, #3
34182986:	f000 f959 	bl	34182c3c <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
3418298a:	f00e fe41 	bl	34191610 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
3418298e:	200f      	movs	r0, #15
34182990:	f000 f80a 	bl	341829a8 <HAL_InitTick>
34182994:	4603      	mov	r3, r0
34182996:	2b00      	cmp	r3, #0
34182998:	d001      	beq.n	3418299e <HAL_Init+0x1e>
  {
    return HAL_ERROR;
3418299a:	2301      	movs	r3, #1
3418299c:	e002      	b.n	341829a4 <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
3418299e:	f00e fa01 	bl	34190da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
341829a2:	2300      	movs	r3, #0
}
341829a4:	4618      	mov	r0, r3
341829a6:	bd80      	pop	{r7, pc}

341829a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
341829a8:	b580      	push	{r7, lr}
341829aa:	b082      	sub	sp, #8
341829ac:	af00      	add	r7, sp, #0
341829ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
341829b0:	4b15      	ldr	r3, [pc, #84]	@ (34182a08 <HAL_InitTick+0x60>)
341829b2:	781b      	ldrb	r3, [r3, #0]
341829b4:	2b00      	cmp	r3, #0
341829b6:	d101      	bne.n	341829bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
341829b8:	2301      	movs	r3, #1
341829ba:	e021      	b.n	34182a00 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
341829bc:	4b13      	ldr	r3, [pc, #76]	@ (34182a0c <HAL_InitTick+0x64>)
341829be:	681a      	ldr	r2, [r3, #0]
341829c0:	4b11      	ldr	r3, [pc, #68]	@ (34182a08 <HAL_InitTick+0x60>)
341829c2:	781b      	ldrb	r3, [r3, #0]
341829c4:	4619      	mov	r1, r3
341829c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
341829ca:	fbb3 f3f1 	udiv	r3, r3, r1
341829ce:	fbb2 f3f3 	udiv	r3, r2, r3
341829d2:	4618      	mov	r0, r3
341829d4:	f000 f968 	bl	34182ca8 <HAL_SYSTICK_Config>
341829d8:	4603      	mov	r3, r0
341829da:	2b00      	cmp	r3, #0
341829dc:	d001      	beq.n	341829e2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
341829de:	2301      	movs	r3, #1
341829e0:	e00e      	b.n	34182a00 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
341829e2:	687b      	ldr	r3, [r7, #4]
341829e4:	2b0f      	cmp	r3, #15
341829e6:	d80a      	bhi.n	341829fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
341829e8:	2200      	movs	r2, #0
341829ea:	6879      	ldr	r1, [r7, #4]
341829ec:	f04f 30ff 	mov.w	r0, #4294967295
341829f0:	f000 f92f 	bl	34182c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
341829f4:	4a06      	ldr	r2, [pc, #24]	@ (34182a10 <HAL_InitTick+0x68>)
341829f6:	687b      	ldr	r3, [r7, #4]
341829f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
341829fa:	2300      	movs	r3, #0
341829fc:	e000      	b.n	34182a00 <HAL_InitTick+0x58>
    return HAL_ERROR;
341829fe:	2301      	movs	r3, #1
}
34182a00:	4618      	mov	r0, r3
34182a02:	3708      	adds	r7, #8
34182a04:	46bd      	mov	sp, r7
34182a06:	bd80      	pop	{r7, pc}
34182a08:	341c000c 	.word	0x341c000c
34182a0c:	341c00dc 	.word	0x341c00dc
34182a10:	341c0008 	.word	0x341c0008

34182a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
34182a14:	b480      	push	{r7}
34182a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
34182a18:	4b06      	ldr	r3, [pc, #24]	@ (34182a34 <HAL_IncTick+0x20>)
34182a1a:	781b      	ldrb	r3, [r3, #0]
34182a1c:	461a      	mov	r2, r3
34182a1e:	4b06      	ldr	r3, [pc, #24]	@ (34182a38 <HAL_IncTick+0x24>)
34182a20:	681b      	ldr	r3, [r3, #0]
34182a22:	4413      	add	r3, r2
34182a24:	4a04      	ldr	r2, [pc, #16]	@ (34182a38 <HAL_IncTick+0x24>)
34182a26:	6013      	str	r3, [r2, #0]
}
34182a28:	bf00      	nop
34182a2a:	46bd      	mov	sp, r7
34182a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182a30:	4770      	bx	lr
34182a32:	bf00      	nop
34182a34:	341c000c 	.word	0x341c000c
34182a38:	341c1018 	.word	0x341c1018

34182a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
34182a3c:	b480      	push	{r7}
34182a3e:	af00      	add	r7, sp, #0
  return uwTick;
34182a40:	4b03      	ldr	r3, [pc, #12]	@ (34182a50 <HAL_GetTick+0x14>)
34182a42:	681b      	ldr	r3, [r3, #0]
}
34182a44:	4618      	mov	r0, r3
34182a46:	46bd      	mov	sp, r7
34182a48:	f85d 7b04 	ldr.w	r7, [sp], #4
34182a4c:	4770      	bx	lr
34182a4e:	bf00      	nop
34182a50:	341c1018 	.word	0x341c1018

34182a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34182a54:	b580      	push	{r7, lr}
34182a56:	b084      	sub	sp, #16
34182a58:	af00      	add	r7, sp, #0
34182a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
34182a5c:	f7ff ffee 	bl	34182a3c <HAL_GetTick>
34182a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
34182a62:	687b      	ldr	r3, [r7, #4]
34182a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
34182a66:	68fb      	ldr	r3, [r7, #12]
34182a68:	f1b3 3fff 	cmp.w	r3, #4294967295
34182a6c:	d005      	beq.n	34182a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
34182a6e:	4b0a      	ldr	r3, [pc, #40]	@ (34182a98 <HAL_Delay+0x44>)
34182a70:	781b      	ldrb	r3, [r3, #0]
34182a72:	461a      	mov	r2, r3
34182a74:	68fb      	ldr	r3, [r7, #12]
34182a76:	4413      	add	r3, r2
34182a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
34182a7a:	bf00      	nop
34182a7c:	f7ff ffde 	bl	34182a3c <HAL_GetTick>
34182a80:	4602      	mov	r2, r0
34182a82:	68bb      	ldr	r3, [r7, #8]
34182a84:	1ad3      	subs	r3, r2, r3
34182a86:	68fa      	ldr	r2, [r7, #12]
34182a88:	429a      	cmp	r2, r3
34182a8a:	d8f7      	bhi.n	34182a7c <HAL_Delay+0x28>
  {
  }
}
34182a8c:	bf00      	nop
34182a8e:	bf00      	nop
34182a90:	3710      	adds	r7, #16
34182a92:	46bd      	mov	sp, r7
34182a94:	bd80      	pop	{r7, pc}
34182a96:	bf00      	nop
34182a98:	341c000c 	.word	0x341c000c

34182a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34182a9c:	b480      	push	{r7}
34182a9e:	b085      	sub	sp, #20
34182aa0:	af00      	add	r7, sp, #0
34182aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
34182aa4:	687b      	ldr	r3, [r7, #4]
34182aa6:	f003 0307 	and.w	r3, r3, #7
34182aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34182aac:	4b0c      	ldr	r3, [pc, #48]	@ (34182ae0 <__NVIC_SetPriorityGrouping+0x44>)
34182aae:	68db      	ldr	r3, [r3, #12]
34182ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34182ab2:	68ba      	ldr	r2, [r7, #8]
34182ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
34182ab8:	4013      	ands	r3, r2
34182aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34182abc:	68fb      	ldr	r3, [r7, #12]
34182abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34182ac0:	68bb      	ldr	r3, [r7, #8]
34182ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
34182ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34182ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34182acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
34182ace:	4a04      	ldr	r2, [pc, #16]	@ (34182ae0 <__NVIC_SetPriorityGrouping+0x44>)
34182ad0:	68bb      	ldr	r3, [r7, #8]
34182ad2:	60d3      	str	r3, [r2, #12]
}
34182ad4:	bf00      	nop
34182ad6:	3714      	adds	r7, #20
34182ad8:	46bd      	mov	sp, r7
34182ada:	f85d 7b04 	ldr.w	r7, [sp], #4
34182ade:	4770      	bx	lr
34182ae0:	e000ed00 	.word	0xe000ed00

34182ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
34182ae4:	b480      	push	{r7}
34182ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34182ae8:	4b04      	ldr	r3, [pc, #16]	@ (34182afc <__NVIC_GetPriorityGrouping+0x18>)
34182aea:	68db      	ldr	r3, [r3, #12]
34182aec:	0a1b      	lsrs	r3, r3, #8
34182aee:	f003 0307 	and.w	r3, r3, #7
}
34182af2:	4618      	mov	r0, r3
34182af4:	46bd      	mov	sp, r7
34182af6:	f85d 7b04 	ldr.w	r7, [sp], #4
34182afa:	4770      	bx	lr
34182afc:	e000ed00 	.word	0xe000ed00

34182b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
34182b00:	b480      	push	{r7}
34182b02:	b083      	sub	sp, #12
34182b04:	af00      	add	r7, sp, #0
34182b06:	4603      	mov	r3, r0
34182b08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34182b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34182b0e:	2b00      	cmp	r3, #0
34182b10:	db0b      	blt.n	34182b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34182b12:	88fb      	ldrh	r3, [r7, #6]
34182b14:	f003 021f 	and.w	r2, r3, #31
34182b18:	4907      	ldr	r1, [pc, #28]	@ (34182b38 <__NVIC_EnableIRQ+0x38>)
34182b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34182b1e:	095b      	lsrs	r3, r3, #5
34182b20:	2001      	movs	r0, #1
34182b22:	fa00 f202 	lsl.w	r2, r0, r2
34182b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
34182b2a:	bf00      	nop
34182b2c:	370c      	adds	r7, #12
34182b2e:	46bd      	mov	sp, r7
34182b30:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b34:	4770      	bx	lr
34182b36:	bf00      	nop
34182b38:	e000e100 	.word	0xe000e100

34182b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
34182b3c:	b480      	push	{r7}
34182b3e:	b083      	sub	sp, #12
34182b40:	af00      	add	r7, sp, #0
34182b42:	4603      	mov	r3, r0
34182b44:	6039      	str	r1, [r7, #0]
34182b46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34182b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34182b4c:	2b00      	cmp	r3, #0
34182b4e:	db0a      	blt.n	34182b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34182b50:	683b      	ldr	r3, [r7, #0]
34182b52:	b2da      	uxtb	r2, r3
34182b54:	490c      	ldr	r1, [pc, #48]	@ (34182b88 <__NVIC_SetPriority+0x4c>)
34182b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34182b5a:	0112      	lsls	r2, r2, #4
34182b5c:	b2d2      	uxtb	r2, r2
34182b5e:	440b      	add	r3, r1
34182b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
34182b64:	e00a      	b.n	34182b7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34182b66:	683b      	ldr	r3, [r7, #0]
34182b68:	b2da      	uxtb	r2, r3
34182b6a:	4908      	ldr	r1, [pc, #32]	@ (34182b8c <__NVIC_SetPriority+0x50>)
34182b6c:	88fb      	ldrh	r3, [r7, #6]
34182b6e:	f003 030f 	and.w	r3, r3, #15
34182b72:	3b04      	subs	r3, #4
34182b74:	0112      	lsls	r2, r2, #4
34182b76:	b2d2      	uxtb	r2, r2
34182b78:	440b      	add	r3, r1
34182b7a:	761a      	strb	r2, [r3, #24]
}
34182b7c:	bf00      	nop
34182b7e:	370c      	adds	r7, #12
34182b80:	46bd      	mov	sp, r7
34182b82:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b86:	4770      	bx	lr
34182b88:	e000e100 	.word	0xe000e100
34182b8c:	e000ed00 	.word	0xe000ed00

34182b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
34182b90:	b480      	push	{r7}
34182b92:	b089      	sub	sp, #36	@ 0x24
34182b94:	af00      	add	r7, sp, #0
34182b96:	60f8      	str	r0, [r7, #12]
34182b98:	60b9      	str	r1, [r7, #8]
34182b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
34182b9c:	68fb      	ldr	r3, [r7, #12]
34182b9e:	f003 0307 	and.w	r3, r3, #7
34182ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34182ba4:	69fb      	ldr	r3, [r7, #28]
34182ba6:	f1c3 0307 	rsb	r3, r3, #7
34182baa:	2b04      	cmp	r3, #4
34182bac:	bf28      	it	cs
34182bae:	2304      	movcs	r3, #4
34182bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34182bb2:	69fb      	ldr	r3, [r7, #28]
34182bb4:	3304      	adds	r3, #4
34182bb6:	2b06      	cmp	r3, #6
34182bb8:	d902      	bls.n	34182bc0 <NVIC_EncodePriority+0x30>
34182bba:	69fb      	ldr	r3, [r7, #28]
34182bbc:	3b03      	subs	r3, #3
34182bbe:	e000      	b.n	34182bc2 <NVIC_EncodePriority+0x32>
34182bc0:	2300      	movs	r3, #0
34182bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34182bc4:	f04f 32ff 	mov.w	r2, #4294967295
34182bc8:	69bb      	ldr	r3, [r7, #24]
34182bca:	fa02 f303 	lsl.w	r3, r2, r3
34182bce:	43da      	mvns	r2, r3
34182bd0:	68bb      	ldr	r3, [r7, #8]
34182bd2:	401a      	ands	r2, r3
34182bd4:	697b      	ldr	r3, [r7, #20]
34182bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34182bd8:	f04f 31ff 	mov.w	r1, #4294967295
34182bdc:	697b      	ldr	r3, [r7, #20]
34182bde:	fa01 f303 	lsl.w	r3, r1, r3
34182be2:	43d9      	mvns	r1, r3
34182be4:	687b      	ldr	r3, [r7, #4]
34182be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34182be8:	4313      	orrs	r3, r2
         );
}
34182bea:	4618      	mov	r0, r3
34182bec:	3724      	adds	r7, #36	@ 0x24
34182bee:	46bd      	mov	sp, r7
34182bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
34182bf4:	4770      	bx	lr
	...

34182bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
34182bf8:	b580      	push	{r7, lr}
34182bfa:	b082      	sub	sp, #8
34182bfc:	af00      	add	r7, sp, #0
34182bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34182c00:	687b      	ldr	r3, [r7, #4]
34182c02:	3b01      	subs	r3, #1
34182c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34182c08:	d301      	bcc.n	34182c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
34182c0a:	2301      	movs	r3, #1
34182c0c:	e00f      	b.n	34182c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34182c0e:	4a0a      	ldr	r2, [pc, #40]	@ (34182c38 <SysTick_Config+0x40>)
34182c10:	687b      	ldr	r3, [r7, #4]
34182c12:	3b01      	subs	r3, #1
34182c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
34182c16:	210f      	movs	r1, #15
34182c18:	f04f 30ff 	mov.w	r0, #4294967295
34182c1c:	f7ff ff8e 	bl	34182b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34182c20:	4b05      	ldr	r3, [pc, #20]	@ (34182c38 <SysTick_Config+0x40>)
34182c22:	2200      	movs	r2, #0
34182c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34182c26:	4b04      	ldr	r3, [pc, #16]	@ (34182c38 <SysTick_Config+0x40>)
34182c28:	2207      	movs	r2, #7
34182c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34182c2c:	2300      	movs	r3, #0
}
34182c2e:	4618      	mov	r0, r3
34182c30:	3708      	adds	r7, #8
34182c32:	46bd      	mov	sp, r7
34182c34:	bd80      	pop	{r7, pc}
34182c36:	bf00      	nop
34182c38:	e000e010 	.word	0xe000e010

34182c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34182c3c:	b580      	push	{r7, lr}
34182c3e:	b082      	sub	sp, #8
34182c40:	af00      	add	r7, sp, #0
34182c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
34182c44:	6878      	ldr	r0, [r7, #4]
34182c46:	f7ff ff29 	bl	34182a9c <__NVIC_SetPriorityGrouping>
}
34182c4a:	bf00      	nop
34182c4c:	3708      	adds	r7, #8
34182c4e:	46bd      	mov	sp, r7
34182c50:	bd80      	pop	{r7, pc}

34182c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
34182c52:	b580      	push	{r7, lr}
34182c54:	b086      	sub	sp, #24
34182c56:	af00      	add	r7, sp, #0
34182c58:	4603      	mov	r3, r0
34182c5a:	60b9      	str	r1, [r7, #8]
34182c5c:	607a      	str	r2, [r7, #4]
34182c5e:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
34182c60:	f7ff ff40 	bl	34182ae4 <__NVIC_GetPriorityGrouping>
34182c64:	4603      	mov	r3, r0
34182c66:	f003 0307 	and.w	r3, r3, #7
34182c6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
34182c6c:	687a      	ldr	r2, [r7, #4]
34182c6e:	68b9      	ldr	r1, [r7, #8]
34182c70:	6978      	ldr	r0, [r7, #20]
34182c72:	f7ff ff8d 	bl	34182b90 <NVIC_EncodePriority>
34182c76:	4602      	mov	r2, r0
34182c78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34182c7c:	4611      	mov	r1, r2
34182c7e:	4618      	mov	r0, r3
34182c80:	f7ff ff5c 	bl	34182b3c <__NVIC_SetPriority>
}
34182c84:	bf00      	nop
34182c86:	3718      	adds	r7, #24
34182c88:	46bd      	mov	sp, r7
34182c8a:	bd80      	pop	{r7, pc}

34182c8c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32n6xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
34182c8c:	b580      	push	{r7, lr}
34182c8e:	b082      	sub	sp, #8
34182c90:	af00      	add	r7, sp, #0
34182c92:	4603      	mov	r3, r0
34182c94:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
34182c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34182c9a:	4618      	mov	r0, r3
34182c9c:	f7ff ff30 	bl	34182b00 <__NVIC_EnableIRQ>
}
34182ca0:	bf00      	nop
34182ca2:	3708      	adds	r7, #8
34182ca4:	46bd      	mov	sp, r7
34182ca6:	bd80      	pop	{r7, pc}

34182ca8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
34182ca8:	b580      	push	{r7, lr}
34182caa:	b082      	sub	sp, #8
34182cac:	af00      	add	r7, sp, #0
34182cae:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
34182cb0:	6878      	ldr	r0, [r7, #4]
34182cb2:	f7ff ffa1 	bl	34182bf8 <SysTick_Config>
34182cb6:	4603      	mov	r3, r0
}
34182cb8:	4618      	mov	r0, r3
34182cba:	3708      	adds	r7, #8
34182cbc:	46bd      	mov	sp, r7
34182cbe:	bd80      	pop	{r7, pc}

34182cc0 <HAL_DCMIPP_Init>:
  * @brief  Initialize the selected HAL DCMIPP handle and associate a DCMIPP peripheral instance.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_Init(DCMIPP_HandleTypeDef *hdcmipp)
{
34182cc0:	b580      	push	{r7, lr}
34182cc2:	b084      	sub	sp, #16
34182cc4:	af00      	add	r7, sp, #0
34182cc6:	6078      	str	r0, [r7, #4]
  uint32_t pipe_index;

  /* Check pointer validity */
  if (hdcmipp == NULL)
34182cc8:	687b      	ldr	r3, [r7, #4]
34182cca:	2b00      	cmp	r3, #0
34182ccc:	d101      	bne.n	34182cd2 <HAL_DCMIPP_Init+0x12>
  {
    return HAL_ERROR;
34182cce:	2301      	movs	r3, #1
34182cd0:	e020      	b.n	34182d14 <HAL_DCMIPP_Init+0x54>
  }

  /* Check function parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));

  if (hdcmipp->State == HAL_DCMIPP_STATE_RESET)
34182cd2:	687b      	ldr	r3, [r7, #4]
34182cd4:	791b      	ldrb	r3, [r3, #4]
34182cd6:	b2db      	uxtb	r3, r3
34182cd8:	2b00      	cmp	r3, #0
34182cda:	d102      	bne.n	34182ce2 <HAL_DCMIPP_Init+0x22>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmipp->MspInitCallback(hdcmipp);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMIPP_MspInit(hdcmipp);
34182cdc:	6878      	ldr	r0, [r7, #4]
34182cde:	f00e f869 	bl	34190db4 <HAL_DCMIPP_MspInit>
#endif /* (USE_HAL_DCMIPP_REGISTER_CALLBACKS) */
  }

  /* Change the DCMIPP state */
  hdcmipp->State = HAL_DCMIPP_STATE_BUSY;
34182ce2:	687b      	ldr	r3, [r7, #4]
34182ce4:	2203      	movs	r2, #3
34182ce6:	711a      	strb	r2, [r3, #4]

  /* Reset DCMIPP Pipe state */
  for (pipe_index = 0U; pipe_index < DCMIPP_NUM_OF_PIPES; pipe_index++)
34182ce8:	2300      	movs	r3, #0
34182cea:	60fb      	str	r3, [r7, #12]
34182cec:	e008      	b.n	34182d00 <HAL_DCMIPP_Init+0x40>
  {
    hdcmipp->PipeState[pipe_index] = HAL_DCMIPP_PIPE_STATE_RESET;
34182cee:	687a      	ldr	r2, [r7, #4]
34182cf0:	68fb      	ldr	r3, [r7, #12]
34182cf2:	4413      	add	r3, r2
34182cf4:	3305      	adds	r3, #5
34182cf6:	2200      	movs	r2, #0
34182cf8:	701a      	strb	r2, [r3, #0]
  for (pipe_index = 0U; pipe_index < DCMIPP_NUM_OF_PIPES; pipe_index++)
34182cfa:	68fb      	ldr	r3, [r7, #12]
34182cfc:	3301      	adds	r3, #1
34182cfe:	60fb      	str	r3, [r7, #12]
34182d00:	68fb      	ldr	r3, [r7, #12]
34182d02:	2b02      	cmp	r3, #2
34182d04:	d9f3      	bls.n	34182cee <HAL_DCMIPP_Init+0x2e>
  }

  /* Update error code */
  hdcmipp->ErrorCode = HAL_DCMIPP_ERROR_NONE;
34182d06:	687b      	ldr	r3, [r7, #4]
34182d08:	2200      	movs	r2, #0
34182d0a:	609a      	str	r2, [r3, #8]

  /* Update the DCMIPP state*/
  hdcmipp->State = HAL_DCMIPP_STATE_INIT;
34182d0c:	687b      	ldr	r3, [r7, #4]
34182d0e:	2201      	movs	r2, #1
34182d10:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
34182d12:	2300      	movs	r3, #0
}
34182d14:	4618      	mov	r0, r3
34182d16:	3710      	adds	r7, #16
34182d18:	46bd      	mov	sp, r7
34182d1a:	bd80      	pop	{r7, pc}

34182d1c <HAL_DCMIPP_CSI_SetConfig>:
  *                     configuration information for DCMIPP.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_SetConfig(const DCMIPP_HandleTypeDef *hdcmipp,
                                           const DCMIPP_CSI_ConfTypeDef *pCSI_Config)
{
34182d1c:	b580      	push	{r7, lr}
34182d1e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
34182d22:	af00      	add	r7, sp, #0
34182d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182d28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
34182d2c:	6018      	str	r0, [r3, #0]
34182d2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182d32:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182d36:	6019      	str	r1, [r3, #0]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
34182d38:	4ba8      	ldr	r3, [pc, #672]	@ (34182fdc <HAL_DCMIPP_CSI_SetConfig+0x2c0>)
34182d3a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

  const SNPS_FreqsTypeDef SNPS_Freqs[63] =
34182d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182d42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
34182d46:	4aa6      	ldr	r2, [pc, #664]	@ (34182fe0 <HAL_DCMIPP_CSI_SetConfig+0x2c4>)
34182d48:	4618      	mov	r0, r3
34182d4a:	4611      	mov	r1, r2
34182d4c:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
34182d50:	461a      	mov	r2, r3
34182d52:	f00f f920 	bl	34191f96 <memcpy>
    { 0x48U, 451U },  /* HAL_CSI_BT_2450 */
    { 0x49U, 460U },  /* HAL_CSI_BT_2500 */
  };

  /* Check parameters */
  if ((hdcmipp == NULL) || (pCSI_Config == NULL))
34182d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182d5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
34182d5e:	681b      	ldr	r3, [r3, #0]
34182d60:	2b00      	cmp	r3, #0
34182d62:	d006      	beq.n	34182d72 <HAL_DCMIPP_CSI_SetConfig+0x56>
34182d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182d68:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182d6c:	681b      	ldr	r3, [r3, #0]
34182d6e:	2b00      	cmp	r3, #0
34182d70:	d101      	bne.n	34182d76 <HAL_DCMIPP_CSI_SetConfig+0x5a>
  {
    return HAL_ERROR;
34182d72:	2301      	movs	r3, #1
34182d74:	e12c      	b.n	34182fd0 <HAL_DCMIPP_CSI_SetConfig+0x2b4>
  assert_param(IS_DCMIPP_NUMBER_OF_LANES(pCSI_Config->NumberOfLanes));
  assert_param(IS_DCMIPP_CSI_DATA_LANE_MAPPING(pCSI_Config->DataLaneMapping));
  assert_param(IS_DCMIPP_CSI_DATA_PHY_BITRATE(pCSI_Config->PHYBitrate));

  /* Ensure the CSI is disabled */
  CLEAR_BIT(csi_instance->CR, CSI_CR_CSIEN);
34182d76:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182d7a:	681b      	ldr	r3, [r3, #0]
34182d7c:	f023 0201 	bic.w	r2, r3, #1
34182d80:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182d84:	601a      	str	r2, [r3, #0]

  /* Configure the Lane Merger */
  if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_PHYSICAL_DATA_LANES)
34182d86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182d8a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182d8e:	681b      	ldr	r3, [r3, #0]
34182d90:	685b      	ldr	r3, [r3, #4]
34182d92:	2b01      	cmp	r3, #1
34182d94:	d10b      	bne.n	34182dae <HAL_DCMIPP_CSI_SetConfig+0x92>
  {
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE0 << CSI_LMCFGR_DL0MAP_Pos) | \
34182d96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182d9a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182d9e:	681b      	ldr	r3, [r3, #0]
34182da0:	681b      	ldr	r3, [r3, #0]
34182da2:	f443 1204 	orr.w	r2, r3, #2162688	@ 0x210000
34182da6:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182daa:	671a      	str	r2, [r3, #112]	@ 0x70
34182dac:	e015      	b.n	34182dda <HAL_DCMIPP_CSI_SetConfig+0xbe>
              (DCMIPP_CSI_DATA_LANE1 << CSI_LMCFGR_DL1MAP_Pos));
  }
  else if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_INVERTED_DATA_LANES)
34182dae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182db2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182db6:	681b      	ldr	r3, [r3, #0]
34182db8:	685b      	ldr	r3, [r3, #4]
34182dba:	2b02      	cmp	r3, #2
34182dbc:	d10b      	bne.n	34182dd6 <HAL_DCMIPP_CSI_SetConfig+0xba>
  {
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE1 << CSI_LMCFGR_DL0MAP_Pos) | \
34182dbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182dc2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182dc6:	681b      	ldr	r3, [r3, #0]
34182dc8:	681b      	ldr	r3, [r3, #0]
34182dca:	f443 1290 	orr.w	r2, r3, #1179648	@ 0x120000
34182dce:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182dd2:	671a      	str	r2, [r3, #112]	@ 0x70
34182dd4:	e001      	b.n	34182dda <HAL_DCMIPP_CSI_SetConfig+0xbe>
              (DCMIPP_CSI_DATA_LANE0 << CSI_LMCFGR_DL1MAP_Pos));
  }
  else
  {
    return HAL_ERROR;
34182dd6:	2301      	movs	r3, #1
34182dd8:	e0fa      	b.n	34182fd0 <HAL_DCMIPP_CSI_SetConfig+0x2b4>
  }

  /* Enable the CSI */
  SET_BIT(csi_instance->CR, CSI_CR_CSIEN);
34182dda:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182dde:	681b      	ldr	r3, [r3, #0]
34182de0:	f043 0201 	orr.w	r2, r3, #1
34182de4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182de8:	601a      	str	r2, [r3, #0]

  /* Enable some interrupts, not related to virtual channels - all error cases */
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO |  DCMIPP_CSI_IT_SYNCERR | \
34182dea:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34182df2:	f043 43b0 	orr.w	r3, r3, #1476395008	@ 0x58000000
34182df6:	f443 1304 	orr.w	r3, r3, #2162688	@ 0x210000
34182dfa:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34182dfe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                             DCMIPP_CSI_IT_SPKTERR | DCMIPP_CSI_IT_IDERR | \
                             DCMIPP_CSI_IT_SPKT);

  /* Enable D-PHY Interrupts */
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
34182e02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182e06:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182e0a:	681b      	ldr	r3, [r3, #0]
34182e0c:	681b      	ldr	r3, [r3, #0]
34182e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34182e12:	d11d      	bne.n	34182e50 <HAL_DCMIPP_CSI_SetConfig+0x134>
  {
    if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_PHYSICAL_DATA_LANES)
34182e14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182e18:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182e1c:	681b      	ldr	r3, [r3, #0]
34182e1e:	685b      	ldr	r3, [r3, #4]
34182e20:	2b01      	cmp	r3, #1
34182e22:	d10a      	bne.n	34182e3a <HAL_DCMIPP_CSI_SetConfig+0x11e>
    {
      __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0 | DCMIPP_CSI_IT_ESOTSYNCDL0 |
34182e24:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34182e2c:	f043 021f 	orr.w	r2, r3, #31
34182e30:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
34182e38:	e016      	b.n	34182e68 <HAL_DCMIPP_CSI_SetConfig+0x14c>
                                      DCMIPP_CSI_IT_EESCDL0 | DCMIPP_CSI_IT_ESYNCESCDL0 |
                                      DCMIPP_CSI_IT_ECTRLDL0);
    }
    else
    {
      __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
34182e3a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34182e42:	f443 52f8 	orr.w	r2, r3, #7936	@ 0x1f00
34182e46:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
34182e4e:	e00b      	b.n	34182e68 <HAL_DCMIPP_CSI_SetConfig+0x14c>
                                      DCMIPP_CSI_IT_ECTRLDL1);
    }
  }
  else
  {
    __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
34182e50:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34182e58:	f443 53f8 	orr.w	r3, r3, #7936	@ 0x1f00
34182e5c:	f043 031f 	orr.w	r3, r3, #31
34182e60:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34182e64:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                    DCMIPP_CSI_IT_ECTRLDL0);
  }

  /* Start D-PHY Configuration */
  /* Stop the D-PHY */
  CLEAR_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
34182e68:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182e70:	681b      	ldr	r3, [r3, #0]
34182e72:	f023 0302 	bic.w	r3, r3, #2
34182e76:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34182e7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34182e7e:	6013      	str	r3, [r2, #0]

  /* Get the D-PHY enabledb but with all lanes disabled */
  CLEAR_REG(csi_instance-> PCR);
34182e80:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182e84:	2200      	movs	r2, #0
34182e86:	605a      	str	r2, [r3, #4]

  /* Set the testclk (clock enable) on during 15ns */
  SET_BIT(csi_instance->PTCR0, CSI_PTCR0_TCKEN);
34182e88:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182e90:	691b      	ldr	r3, [r3, #16]
34182e92:	f043 0301 	orr.w	r3, r3, #1
34182e96:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34182e9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34182e9e:	6113      	str	r3, [r2, #16]

  HAL_Delay(1);
34182ea0:	2001      	movs	r0, #1
34182ea2:	f7ff fdd7 	bl	34182a54 <HAL_Delay>

  CLEAR_REG(csi_instance->PTCR0);
34182ea6:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182eae:	461a      	mov	r2, r3
34182eb0:	2300      	movs	r3, #0
34182eb2:	6113      	str	r3, [r2, #16]

  /* Set hsfreqrange */
  MODIFY_REG(csi_instance->PFCR, CSI_PFCR_HSFR, (0x28U << CSI_PFCR_CCFR_Pos) |
34182eb4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182ebc:	689b      	ldr	r3, [r3, #8]
34182ebe:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
34182ec2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182ec6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182eca:	681b      	ldr	r3, [r3, #0]
34182ecc:	6899      	ldr	r1, [r3, #8]
34182ece:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182ed2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
34182ed6:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
34182eda:	021b      	lsls	r3, r3, #8
34182edc:	4313      	orrs	r3, r2
34182ede:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
34182ee2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34182ee6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34182eea:	6093      	str	r3, [r2, #8]
             (SNPS_Freqs[pCSI_Config->PHYBitrate].hsfreqrange << CSI_PFCR_HSFR_Pos));

  /* set reg @08 deskew_polarity_rw 1'b1 */
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0x08, 0x38);
34182eec:	2338      	movs	r3, #56	@ 0x38
34182eee:	2208      	movs	r2, #8
34182ef0:	2100      	movs	r1, #0
34182ef2:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
34182ef6:	f002 fb05 	bl	34185504 <DCMIPP_CSI_WritePHYReg>

  /* set reg @0xE4 counter_for_des_en_config_if_rx 0x10 + DLL prog EN */
  /* This is because 13<= cfgclkfreqrange[5:0]<=38 */
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe4, 0x11);
34182efa:	2311      	movs	r3, #17
34182efc:	22e4      	movs	r2, #228	@ 0xe4
34182efe:	2100      	movs	r1, #0
34182f00:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
34182f04:	f002 fafe 	bl	34185504 <DCMIPP_CSI_WritePHYReg>

  /* set reg @0xe3 & reg @0xe2 value DLL target oscilation freq */
  /* Based on the table page 77, osc_freq_target */
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target >> 8);
34182f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182f0c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182f10:	681b      	ldr	r3, [r3, #0]
34182f12:	689b      	ldr	r3, [r3, #8]
34182f14:	f507 7202 	add.w	r2, r7, #520	@ 0x208
34182f18:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
34182f1c:	00db      	lsls	r3, r3, #3
34182f1e:	4413      	add	r3, r2
34182f20:	685b      	ldr	r3, [r3, #4]
34182f22:	0a1b      	lsrs	r3, r3, #8
34182f24:	22e3      	movs	r2, #227	@ 0xe3
34182f26:	2100      	movs	r1, #0
34182f28:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
34182f2c:	f002 faea 	bl	34185504 <DCMIPP_CSI_WritePHYReg>
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target & 0xFFU);
34182f30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182f34:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182f38:	681b      	ldr	r3, [r3, #0]
34182f3a:	689b      	ldr	r3, [r3, #8]
34182f3c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
34182f40:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
34182f44:	00db      	lsls	r3, r3, #3
34182f46:	4413      	add	r3, r2
34182f48:	685b      	ldr	r3, [r3, #4]
34182f4a:	b2db      	uxtb	r3, r3
34182f4c:	22e3      	movs	r2, #227	@ 0xe3
34182f4e:	2100      	movs	r1, #0
34182f50:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
34182f54:	f002 fad6 	bl	34185504 <DCMIPP_CSI_WritePHYReg>

  /* set basedir_0 to RX DLD 0 RX, 1 TX. Synopsys 1 RX 0 TX  + freq range */
  WRITE_REG(csi_instance-> PFCR, (0x28U << CSI_PFCR_CCFR_Pos) |
34182f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182f5c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182f60:	681b      	ldr	r3, [r3, #0]
34182f62:	689a      	ldr	r2, [r3, #8]
34182f64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182f68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
34182f6c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
34182f70:	021b      	lsls	r3, r3, #8
34182f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34182f76:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
34182f7a:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34182f7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34182f82:	6093      	str	r3, [r2, #8]
            (SNPS_Freqs[pCSI_Config->PHYBitrate].hsfreqrange << CSI_PFCR_HSFR_Pos) | CSI_PFCR_DLD);

  /* Enable the D-PHY_RX lane(s) etc */
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
34182f84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34182f88:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34182f8c:	681b      	ldr	r3, [r3, #0]
34182f8e:	681b      	ldr	r3, [r3, #0]
34182f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34182f94:	d104      	bne.n	34182fa0 <HAL_DCMIPP_CSI_SetConfig+0x284>
  {
    WRITE_REG(csi_instance->PCR, CSI_PCR_DL0EN | CSI_PCR_CLEN | CSI_PCR_PWRDOWN);
34182f96:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182f9a:	2207      	movs	r2, #7
34182f9c:	605a      	str	r2, [r3, #4]
34182f9e:	e003      	b.n	34182fa8 <HAL_DCMIPP_CSI_SetConfig+0x28c>
  }
  else
  {
    WRITE_REG(csi_instance->PCR, CSI_PCR_DL0EN | CSI_PCR_DL1EN | CSI_PCR_CLEN | CSI_PCR_PWRDOWN);
34182fa0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182fa4:	220f      	movs	r2, #15
34182fa6:	605a      	str	r2, [r3, #4]
  }


  /* Enable PHY, out of reset */
  SET_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
34182fa8:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182fb0:	681b      	ldr	r3, [r3, #0]
34182fb2:	f043 0302 	orr.w	r3, r3, #2
34182fb6:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34182fba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34182fbe:	6013      	str	r3, [r2, #0]

  /* Remove the force */
  CLEAR_REG(csi_instance->PMCR);
34182fc0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34182fc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182fc8:	461a      	mov	r2, r3
34182fca:	2300      	movs	r3, #0
34182fcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
34182fce:	2300      	movs	r3, #0

}
34182fd0:	4618      	mov	r0, r3
34182fd2:	f507 7702 	add.w	r7, r7, #520	@ 0x208
34182fd6:	46bd      	mov	sp, r7
34182fd8:	bd80      	pop	{r7, pc}
34182fda:	bf00      	nop
34182fdc:	58006000 	.word	0x58006000
34182fe0:	34193a30 	.word	0x34193a30

34182fe4 <HAL_DCMIPP_CSI_PIPE_SetConfig>:
  *                         the CSI Pipe configuration information for DCMIPP.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_PIPE_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                const DCMIPP_CSI_PIPE_ConfTypeDef *pCSI_PipeConfig)
{
34182fe4:	b480      	push	{r7}
34182fe6:	b087      	sub	sp, #28
34182fe8:	af00      	add	r7, sp, #0
34182fea:	60f8      	str	r0, [r7, #12]
34182fec:	60b9      	str	r1, [r7, #8]
34182fee:	607a      	str	r2, [r7, #4]
  uint32_t pxfscr_reg = 0;
34182ff0:	2300      	movs	r3, #0
34182ff2:	617b      	str	r3, [r7, #20]
  HAL_DCMIPP_StateTypeDef state;

  /* Check the DCMIPP peripheral handle parameter and pCSI_Config parameter */
  if ((hdcmipp == NULL) || (pCSI_PipeConfig == NULL))
34182ff4:	68fb      	ldr	r3, [r7, #12]
34182ff6:	2b00      	cmp	r3, #0
34182ff8:	d002      	beq.n	34183000 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c>
34182ffa:	687b      	ldr	r3, [r7, #4]
34182ffc:	2b00      	cmp	r3, #0
34182ffe:	d101      	bne.n	34183004 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x20>
  {
    return HAL_ERROR;
34183000:	2301      	movs	r3, #1
34183002:	e087      	b.n	34183114 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x130>
  /* Check the parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));

  if (Pipe != DCMIPP_PIPE2)
34183004:	68bb      	ldr	r3, [r7, #8]
34183006:	2b02      	cmp	r3, #2
34183008:	d003      	beq.n	34183012 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2e>
  {
    assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));

    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
3418300a:	687b      	ldr	r3, [r7, #4]
3418300c:	681b      	ldr	r3, [r3, #0]
3418300e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  if (pCSI_PipeConfig->DataTypeMode != DCMIPP_DTMODE_ALL)
  {
    assert_param(IS_DCMIPP_DATA_TYPE(pCSI_PipeConfig->DataTypeIDA));
  }

  state = hdcmipp->State;
34183012:	68fb      	ldr	r3, [r7, #12]
34183014:	791b      	ldrb	r3, [r3, #4]
34183016:	74fb      	strb	r3, [r7, #19]
  if ((state == HAL_DCMIPP_STATE_INIT) || (state == HAL_DCMIPP_STATE_READY))
34183018:	7cfb      	ldrb	r3, [r7, #19]
3418301a:	2b01      	cmp	r3, #1
3418301c:	d002      	beq.n	34183024 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x40>
3418301e:	7cfb      	ldrb	r3, [r7, #19]
34183020:	2b02      	cmp	r3, #2
34183022:	d173      	bne.n	3418310c <HAL_DCMIPP_CSI_PIPE_SetConfig+0x128>
  {
    if (((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL) || \
34183024:	687b      	ldr	r3, [r7, #4]
34183026:	681b      	ldr	r3, [r3, #0]
34183028:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418302c:	d004      	beq.n	34183038 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x54>
         (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB)) && (Pipe != DCMIPP_PIPE0))
3418302e:	687b      	ldr	r3, [r7, #4]
34183030:	681b      	ldr	r3, [r3, #0]
    if (((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL) || \
34183032:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34183036:	d104      	bne.n	34183042 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x5e>
         (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB)) && (Pipe != DCMIPP_PIPE0))
34183038:	68bb      	ldr	r3, [r7, #8]
3418303a:	2b00      	cmp	r3, #0
3418303c:	d001      	beq.n	34183042 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x5e>
    {
      return HAL_ERROR;
3418303e:	2301      	movs	r3, #1
34183040:	e068      	b.n	34183114 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x130>
    }

    /* Add Data Type Mode for the selected Pipe except Pipe2 */
    if (Pipe != DCMIPP_PIPE2)
34183042:	68bb      	ldr	r3, [r7, #8]
34183044:	2b02      	cmp	r3, #2
34183046:	d004      	beq.n	34183052 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x6e>
    {
      pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeMode);
34183048:	687b      	ldr	r3, [r7, #4]
3418304a:	681b      	ldr	r3, [r3, #0]
3418304c:	697a      	ldr	r2, [r7, #20]
3418304e:	4313      	orrs	r3, r2
34183050:	617b      	str	r3, [r7, #20]
    }

    if (pCSI_PipeConfig->DataTypeMode != DCMIPP_DTMODE_ALL)
34183052:	687b      	ldr	r3, [r7, #4]
34183054:	681b      	ldr	r3, [r3, #0]
34183056:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418305a:	d004      	beq.n	34183066 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x82>
    {
      /* Add Data Type IDA for the selected Pipe */
      pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDA << DCMIPP_P0FSCR_DTIDA_Pos);
3418305c:	687b      	ldr	r3, [r7, #4]
3418305e:	685b      	ldr	r3, [r3, #4]
34183060:	697a      	ldr	r2, [r7, #20]
34183062:	4313      	orrs	r3, r2
34183064:	617b      	str	r3, [r7, #20]
    }

    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
34183066:	687b      	ldr	r3, [r7, #4]
34183068:	681b      	ldr	r3, [r3, #0]
3418306a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418306e:	d004      	beq.n	3418307a <HAL_DCMIPP_CSI_PIPE_SetConfig+0x96>
        || (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB))
34183070:	687b      	ldr	r3, [r7, #4]
34183072:	681b      	ldr	r3, [r3, #0]
34183074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34183078:	d108      	bne.n	3418308c <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa8>
    {
      if (Pipe != DCMIPP_PIPE2)
3418307a:	68bb      	ldr	r3, [r7, #8]
3418307c:	2b02      	cmp	r3, #2
3418307e:	d005      	beq.n	3418308c <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa8>
      {
        /* Add Data Type IDB for the selected Pipe except Pipe2 */
        pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDB << DCMIPP_P0FSCR_DTIDB_Pos);
34183080:	687b      	ldr	r3, [r7, #4]
34183082:	689b      	ldr	r3, [r3, #8]
34183084:	021b      	lsls	r3, r3, #8
34183086:	697a      	ldr	r2, [r7, #20]
34183088:	4313      	orrs	r3, r2
3418308a:	617b      	str	r3, [r7, #20]
      }
    }

    if (Pipe == DCMIPP_PIPE0)
3418308c:	68bb      	ldr	r3, [r7, #8]
3418308e:	2b00      	cmp	r3, #0
34183090:	d10c      	bne.n	341830ac <HAL_DCMIPP_CSI_PIPE_SetConfig+0xc8>
    {
      MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_DTMODE | DCMIPP_P0FSCR_DTIDA |
34183092:	68fb      	ldr	r3, [r7, #12]
34183094:	681b      	ldr	r3, [r3, #0]
34183096:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
3418309a:	4b21      	ldr	r3, [pc, #132]	@ (34183120 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x13c>)
3418309c:	4013      	ands	r3, r2
3418309e:	68fa      	ldr	r2, [r7, #12]
341830a0:	6812      	ldr	r2, [r2, #0]
341830a2:	6979      	ldr	r1, [r7, #20]
341830a4:	430b      	orrs	r3, r1
341830a6:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
341830aa:	e01b      	b.n	341830e4 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x100>
                 DCMIPP_P0FSCR_DTIDB, pxfscr_reg);
    }
    else if (Pipe == DCMIPP_PIPE1)
341830ac:	68bb      	ldr	r3, [r7, #8]
341830ae:	2b01      	cmp	r3, #1
341830b0:	d10c      	bne.n	341830cc <HAL_DCMIPP_CSI_PIPE_SetConfig+0xe8>
    {
      MODIFY_REG(hdcmipp->Instance->P1FSCR, (DCMIPP_P1FSCR_DTIDA | DCMIPP_P1FSCR_DTIDB |
341830b2:	68fb      	ldr	r3, [r7, #12]
341830b4:	681b      	ldr	r3, [r3, #0]
341830b6:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
341830ba:	4b19      	ldr	r3, [pc, #100]	@ (34183120 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x13c>)
341830bc:	4013      	ands	r3, r2
341830be:	68fa      	ldr	r2, [r7, #12]
341830c0:	6812      	ldr	r2, [r2, #0]
341830c2:	6979      	ldr	r1, [r7, #20]
341830c4:	430b      	orrs	r3, r1
341830c6:	f8c2 3804 	str.w	r3, [r2, #2052]	@ 0x804
341830ca:	e00b      	b.n	341830e4 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x100>
                                             DCMIPP_P1FSCR_DTMODE), pxfscr_reg);
    }
    else
    {
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_DTIDA, pxfscr_reg);
341830cc:	68fb      	ldr	r3, [r7, #12]
341830ce:	681b      	ldr	r3, [r3, #0]
341830d0:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
341830d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
341830d8:	68fb      	ldr	r3, [r7, #12]
341830da:	681b      	ldr	r3, [r3, #0]
341830dc:	697a      	ldr	r2, [r7, #20]
341830de:	430a      	orrs	r2, r1
341830e0:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
    }

    /* Disable Parallel interface */
    CLEAR_BIT(hdcmipp->Instance->PRCR, DCMIPP_PRCR_ENABLE);
341830e4:	68fb      	ldr	r3, [r7, #12]
341830e6:	681b      	ldr	r3, [r3, #0]
341830e8:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
341830ec:	68fb      	ldr	r3, [r7, #12]
341830ee:	681b      	ldr	r3, [r3, #0]
341830f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
341830f4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Set CSI Input Selection  */
    SET_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
341830f8:	68fb      	ldr	r3, [r7, #12]
341830fa:	681b      	ldr	r3, [r3, #0]
341830fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
34183100:	68fb      	ldr	r3, [r7, #12]
34183102:	681b      	ldr	r3, [r3, #0]
34183104:	f042 0201 	orr.w	r2, r2, #1
34183108:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  }

  /* Update the DCMIPP state */
  hdcmipp->State = HAL_DCMIPP_STATE_READY;
3418310c:	68fb      	ldr	r3, [r7, #12]
3418310e:	2202      	movs	r2, #2
34183110:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
34183112:	2300      	movs	r3, #0
}
34183114:	4618      	mov	r0, r3
34183116:	371c      	adds	r7, #28
34183118:	46bd      	mov	sp, r7
3418311a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418311e:	4770      	bx	lr
34183120:	fffcc0c0 	.word	0xfffcc0c0

34183124 <HAL_DCMIPP_CSI_SetVCConfig>:
  * @param  DataTypeFormat Specifies the Data Type Format, can be a value from @ref DCMIPP_CSI_DataTypeFormat.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_SetVCConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel,
                                             uint32_t DataTypeFormat)
{
34183124:	b480      	push	{r7}
34183126:	b087      	sub	sp, #28
34183128:	af00      	add	r7, sp, #0
3418312a:	60f8      	str	r0, [r7, #12]
3418312c:	60b9      	str	r1, [r7, #8]
3418312e:	607a      	str	r2, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
34183130:	4b1c      	ldr	r3, [pc, #112]	@ (341831a4 <HAL_DCMIPP_CSI_SetVCConfig+0x80>)
34183132:	617b      	str	r3, [r7, #20]

  assert_param(IS_DCMIPP_VCID(VirtualChannel));
  assert_param(IS_DCMIPP_CSI_DATA_TYPE_FORMAT(DataTypeFormat));

  /* Check pointer and input values validity */
  if (hdcmipp == NULL)
34183134:	68fb      	ldr	r3, [r7, #12]
34183136:	2b00      	cmp	r3, #0
34183138:	d101      	bne.n	3418313e <HAL_DCMIPP_CSI_SetVCConfig+0x1a>
  {
    return HAL_ERROR;
3418313a:	2301      	movs	r3, #1
3418313c:	e02c      	b.n	34183198 <HAL_DCMIPP_CSI_SetVCConfig+0x74>
  }

  /* Set the common format for all data type for the selected virtual channel */
  switch (VirtualChannel)
3418313e:	68bb      	ldr	r3, [r7, #8]
34183140:	2b03      	cmp	r3, #3
34183142:	d827      	bhi.n	34183194 <HAL_DCMIPP_CSI_SetVCConfig+0x70>
34183144:	a201      	add	r2, pc, #4	@ (adr r2, 3418314c <HAL_DCMIPP_CSI_SetVCConfig+0x28>)
34183146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418314a:	bf00      	nop
3418314c:	3418315d 	.word	0x3418315d
34183150:	3418316b 	.word	0x3418316b
34183154:	34183179 	.word	0x34183179
34183158:	34183187 	.word	0x34183187
  {
    case DCMIPP_VIRTUAL_CHANNEL0:
    {
      WRITE_REG(csi_instance->VC0CFGR1, (DataTypeFormat << CSI_VC0CFGR1_CDTFT_Pos) | CSI_VC0CFGR1_ALLDT);
3418315c:	687b      	ldr	r3, [r7, #4]
3418315e:	021b      	lsls	r3, r3, #8
34183160:	f043 0201 	orr.w	r2, r3, #1
34183164:	697b      	ldr	r3, [r7, #20]
34183166:	611a      	str	r2, [r3, #16]
      break;
34183168:	e015      	b.n	34183196 <HAL_DCMIPP_CSI_SetVCConfig+0x72>
    }
    case DCMIPP_VIRTUAL_CHANNEL1:
    {
      WRITE_REG(csi_instance->VC1CFGR1, (DataTypeFormat << CSI_VC1CFGR1_CDTFT_Pos) | CSI_VC1CFGR1_ALLDT);
3418316a:	687b      	ldr	r3, [r7, #4]
3418316c:	021b      	lsls	r3, r3, #8
3418316e:	f043 0201 	orr.w	r2, r3, #1
34183172:	697b      	ldr	r3, [r7, #20]
34183174:	621a      	str	r2, [r3, #32]
      break;
34183176:	e00e      	b.n	34183196 <HAL_DCMIPP_CSI_SetVCConfig+0x72>
    }
    case DCMIPP_VIRTUAL_CHANNEL2:
    {
      WRITE_REG(csi_instance->VC2CFGR1, (DataTypeFormat << CSI_VC2CFGR1_CDTFT_Pos) | CSI_VC2CFGR1_ALLDT);
34183178:	687b      	ldr	r3, [r7, #4]
3418317a:	021b      	lsls	r3, r3, #8
3418317c:	f043 0201 	orr.w	r2, r3, #1
34183180:	697b      	ldr	r3, [r7, #20]
34183182:	631a      	str	r2, [r3, #48]	@ 0x30
      break;
34183184:	e007      	b.n	34183196 <HAL_DCMIPP_CSI_SetVCConfig+0x72>
    }
    case DCMIPP_VIRTUAL_CHANNEL3:
    {
      WRITE_REG(csi_instance->VC3CFGR1, (DataTypeFormat << CSI_VC3CFGR1_CDTFT_Pos) | CSI_VC3CFGR1_ALLDT);
34183186:	687b      	ldr	r3, [r7, #4]
34183188:	021b      	lsls	r3, r3, #8
3418318a:	f043 0201 	orr.w	r2, r3, #1
3418318e:	697b      	ldr	r3, [r7, #20]
34183190:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
34183192:	e000      	b.n	34183196 <HAL_DCMIPP_CSI_SetVCConfig+0x72>
    }
    default:
      break;
34183194:	bf00      	nop
  }

  return HAL_OK;
34183196:	2300      	movs	r3, #0
}
34183198:	4618      	mov	r0, r3
3418319a:	371c      	adds	r7, #28
3418319c:	46bd      	mov	sp, r7
3418319e:	f85d 7b04 	ldr.w	r7, [sp], #4
341831a2:	4770      	bx	lr
341831a4:	58006000 	.word	0x58006000

341831a8 <HAL_DCMIPP_PIPE_SetConfig>:
  * @param  pPipeConfig pointer to pipe configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                            const DCMIPP_PipeConfTypeDef *pPipeConfig)
{
341831a8:	b580      	push	{r7, lr}
341831aa:	b086      	sub	sp, #24
341831ac:	af00      	add	r7, sp, #0
341831ae:	60f8      	str	r0, [r7, #12]
341831b0:	60b9      	str	r1, [r7, #8]
341831b2:	607a      	str	r2, [r7, #4]
  HAL_DCMIPP_PipeStateTypeDef pipe_state;

  /* Check the DCMIPP peripheral handle parameter and pPipeConfig parameter */
  if ((hdcmipp == NULL) || (pPipeConfig == NULL))
341831b4:	68fb      	ldr	r3, [r7, #12]
341831b6:	2b00      	cmp	r3, #0
341831b8:	d002      	beq.n	341831c0 <HAL_DCMIPP_PIPE_SetConfig+0x18>
341831ba:	687b      	ldr	r3, [r7, #4]
341831bc:	2b00      	cmp	r3, #0
341831be:	d101      	bne.n	341831c4 <HAL_DCMIPP_PIPE_SetConfig+0x1c>
  {
    return HAL_ERROR;
341831c0:	2301      	movs	r3, #1
341831c2:	e02f      	b.n	34183224 <HAL_DCMIPP_PIPE_SetConfig+0x7c>
  {
    assert_param(IS_DCMIPP_PIXEL_PACKER_FORMAT(pPipeConfig->PixelPackerFormat));
    assert_param(IS_DCMIPP_PIXEL_PIPE_PITCH(pPipeConfig->PixelPipePitch));
  }

  if ((Pipe == DCMIPP_PIPE2) && ((pPipeConfig->PixelPackerFormat) > DCMIPP_PIXEL_PACKER_FORMAT_YUV422_1))
341831c4:	68bb      	ldr	r3, [r7, #8]
341831c6:	2b02      	cmp	r3, #2
341831c8:	d105      	bne.n	341831d6 <HAL_DCMIPP_PIPE_SetConfig+0x2e>
341831ca:	687b      	ldr	r3, [r7, #4]
341831cc:	689b      	ldr	r3, [r3, #8]
341831ce:	2b06      	cmp	r3, #6
341831d0:	d901      	bls.n	341831d6 <HAL_DCMIPP_PIPE_SetConfig+0x2e>
  {
    return HAL_ERROR;
341831d2:	2301      	movs	r3, #1
341831d4:	e026      	b.n	34183224 <HAL_DCMIPP_PIPE_SetConfig+0x7c>
  }
  /* Get Pipe State */
  pipe_state = hdcmipp->PipeState[Pipe];
341831d6:	68fa      	ldr	r2, [r7, #12]
341831d8:	68bb      	ldr	r3, [r7, #8]
341831da:	4413      	add	r3, r2
341831dc:	3305      	adds	r3, #5
341831de:	781b      	ldrb	r3, [r3, #0]
341831e0:	75fb      	strb	r3, [r7, #23]

  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
341831e2:	68fb      	ldr	r3, [r7, #12]
341831e4:	791b      	ldrb	r3, [r3, #4]
341831e6:	b2db      	uxtb	r3, r3
341831e8:	2b02      	cmp	r3, #2
341831ea:	d11a      	bne.n	34183222 <HAL_DCMIPP_PIPE_SetConfig+0x7a>
  {
    if ((pipe_state == HAL_DCMIPP_PIPE_STATE_RESET) || (pipe_state == HAL_DCMIPP_PIPE_STATE_ERROR))
341831ec:	7dfb      	ldrb	r3, [r7, #23]
341831ee:	2b00      	cmp	r3, #0
341831f0:	d002      	beq.n	341831f8 <HAL_DCMIPP_PIPE_SetConfig+0x50>
341831f2:	7dfb      	ldrb	r3, [r7, #23]
341831f4:	2b04      	cmp	r3, #4
341831f6:	d112      	bne.n	3418321e <HAL_DCMIPP_PIPE_SetConfig+0x76>
    {
      /* Update the DCMIPP PIPE state */
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
341831f8:	68fa      	ldr	r2, [r7, #12]
341831fa:	68bb      	ldr	r3, [r7, #8]
341831fc:	4413      	add	r3, r2
341831fe:	3305      	adds	r3, #5
34183200:	2202      	movs	r2, #2
34183202:	701a      	strb	r2, [r3, #0]

      /* Initialize the DCMIPP Pipe registers */
      Pipe_Config(hdcmipp, Pipe, pPipeConfig);
34183204:	687a      	ldr	r2, [r7, #4]
34183206:	68b9      	ldr	r1, [r7, #8]
34183208:	68f8      	ldr	r0, [r7, #12]
3418320a:	f002 f8dc 	bl	341853c6 <Pipe_Config>

      /* Update the DCMIPP pipe state */
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_READY;
3418320e:	68fa      	ldr	r2, [r7, #12]
34183210:	68bb      	ldr	r3, [r7, #8]
34183212:	4413      	add	r3, r2
34183214:	3305      	adds	r3, #5
34183216:	2201      	movs	r2, #1
34183218:	701a      	strb	r2, [r3, #0]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
3418321a:	2300      	movs	r3, #0
3418321c:	e002      	b.n	34183224 <HAL_DCMIPP_PIPE_SetConfig+0x7c>
      return HAL_ERROR;
3418321e:	2301      	movs	r3, #1
34183220:	e000      	b.n	34183224 <HAL_DCMIPP_PIPE_SetConfig+0x7c>
    return HAL_ERROR;
34183222:	2301      	movs	r3, #1
}
34183224:	4618      	mov	r0, r3
34183226:	3718      	adds	r7, #24
34183228:	46bd      	mov	sp, r7
3418322a:	bd80      	pop	{r7, pc}

3418322c <HAL_DCMIPP_CSI_PIPE_Start>:
  * @param  CaptureMode    DCMIPP capture mode for the pipe can be a value from @ref DCMIPP_Capture_Mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_PIPE_Start(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t VirtualChannel,
                                            uint32_t DstAddress, uint32_t CaptureMode)
{
3418322c:	b580      	push	{r7, lr}
3418322e:	b086      	sub	sp, #24
34183230:	af00      	add	r7, sp, #0
34183232:	60f8      	str	r0, [r7, #12]
34183234:	60b9      	str	r1, [r7, #8]
34183236:	607a      	str	r2, [r7, #4]
34183238:	603b      	str	r3, [r7, #0]
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
  assert_param(IS_DCMIPP_CAPTURE_MODE(CaptureMode));

  /* Check pointer validity */
  if ((hdcmipp == NULL) || ((DstAddress & 0xFU) != 0U))
3418323a:	68fb      	ldr	r3, [r7, #12]
3418323c:	2b00      	cmp	r3, #0
3418323e:	d004      	beq.n	3418324a <HAL_DCMIPP_CSI_PIPE_Start+0x1e>
34183240:	683b      	ldr	r3, [r7, #0]
34183242:	f003 030f 	and.w	r3, r3, #15
34183246:	2b00      	cmp	r3, #0
34183248:	d001      	beq.n	3418324e <HAL_DCMIPP_CSI_PIPE_Start+0x22>
  {
    return HAL_ERROR;
3418324a:	2301      	movs	r3, #1
3418324c:	e028      	b.n	341832a0 <HAL_DCMIPP_CSI_PIPE_Start+0x74>
  }

  mode = READ_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
3418324e:	68fb      	ldr	r3, [r7, #12]
34183250:	681b      	ldr	r3, [r3, #0]
34183252:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
34183256:	f003 0301 	and.w	r3, r3, #1
3418325a:	617b      	str	r3, [r7, #20]
  if ((hdcmipp->PipeState[Pipe] != HAL_DCMIPP_PIPE_STATE_READY) || (mode != DCMIPP_SERIAL_MODE))
3418325c:	68fa      	ldr	r2, [r7, #12]
3418325e:	68bb      	ldr	r3, [r7, #8]
34183260:	4413      	add	r3, r2
34183262:	3305      	adds	r3, #5
34183264:	781b      	ldrb	r3, [r3, #0]
34183266:	b2db      	uxtb	r3, r3
34183268:	2b01      	cmp	r3, #1
3418326a:	d102      	bne.n	34183272 <HAL_DCMIPP_CSI_PIPE_Start+0x46>
3418326c:	697b      	ldr	r3, [r7, #20]
3418326e:	2b01      	cmp	r3, #1
34183270:	d001      	beq.n	34183276 <HAL_DCMIPP_CSI_PIPE_Start+0x4a>
  {
    return HAL_ERROR;
34183272:	2301      	movs	r3, #1
34183274:	e014      	b.n	341832a0 <HAL_DCMIPP_CSI_PIPE_Start+0x74>
  }

  /* Set Virtual Channel for the selected Pipe */
  if (DCMIPP_CSI_SetVCConfig(hdcmipp, Pipe, VirtualChannel) != HAL_OK)
34183276:	687a      	ldr	r2, [r7, #4]
34183278:	68b9      	ldr	r1, [r7, #8]
3418327a:	68f8      	ldr	r0, [r7, #12]
3418327c:	f002 faaa 	bl	341857d4 <DCMIPP_CSI_SetVCConfig>
34183280:	4603      	mov	r3, r0
34183282:	2b00      	cmp	r3, #0
34183284:	d001      	beq.n	3418328a <HAL_DCMIPP_CSI_PIPE_Start+0x5e>
  {
    return HAL_ERROR;
34183286:	2301      	movs	r3, #1
34183288:	e00a      	b.n	341832a0 <HAL_DCMIPP_CSI_PIPE_Start+0x74>
  }

  /* Set Capture Mode and Destination address for the selected pipe */
  DCMIPP_SetConfig(hdcmipp, Pipe, DstAddress, CaptureMode);
3418328a:	6a3b      	ldr	r3, [r7, #32]
3418328c:	683a      	ldr	r2, [r7, #0]
3418328e:	68b9      	ldr	r1, [r7, #8]
34183290:	68f8      	ldr	r0, [r7, #12]
34183292:	f002 f9d1 	bl	34185638 <DCMIPP_SetConfig>

  /* Enable Capture for the selected Pipe */
  DCMIPP_EnableCapture(hdcmipp, Pipe);
34183296:	68b9      	ldr	r1, [r7, #8]
34183298:	68f8      	ldr	r0, [r7, #12]
3418329a:	f002 fa45 	bl	34185728 <DCMIPP_EnableCapture>

  return HAL_OK;
3418329e:	2300      	movs	r3, #0
}
341832a0:	4618      	mov	r0, r3
341832a2:	3718      	adds	r7, #24
341832a4:	46bd      	mov	sp, r7
341832a6:	bd80      	pop	{r7, pc}

341832a8 <HAL_DCMIPP_IRQHandler>:
  * @brief  Handles DCMIPP interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
341832a8:	b580      	push	{r7, lr}
341832aa:	b084      	sub	sp, #16
341832ac:	af00      	add	r7, sp, #0
341832ae:	6078      	str	r0, [r7, #4]
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
341832b0:	687b      	ldr	r3, [r7, #4]
341832b2:	681b      	ldr	r3, [r3, #0]
341832b4:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
341832b8:	60fb      	str	r3, [r7, #12]
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
341832ba:	687b      	ldr	r3, [r7, #4]
341832bc:	681b      	ldr	r3, [r3, #0]
341832be:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
341832c2:	60bb      	str	r3, [r7, #8]

  /* ========================= PIPE0 INTERRUPTS ==================== */
  /* Limit error on the PIPE0 ********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
341832c4:	68fb      	ldr	r3, [r7, #12]
341832c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
341832ca:	2b00      	cmp	r3, #0
341832cc:	d01e      	beq.n	3418330c <HAL_DCMIPP_IRQHandler+0x64>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
341832ce:	68bb      	ldr	r3, [r7, #8]
341832d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
341832d4:	2b00      	cmp	r3, #0
341832d6:	d019      	beq.n	3418330c <HAL_DCMIPP_IRQHandler+0x64>
    {
      /* Disable Limit error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
341832d8:	687b      	ldr	r3, [r7, #4]
341832da:	681b      	ldr	r3, [r3, #0]
341832dc:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
341832e0:	687b      	ldr	r3, [r7, #4]
341832e2:	681b      	ldr	r3, [r3, #0]
341832e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
341832e8:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
341832ec:	687b      	ldr	r3, [r7, #4]
341832ee:	689b      	ldr	r3, [r3, #8]
341832f0:	f043 0204 	orr.w	r2, r3, #4
341832f4:	687b      	ldr	r3, [r7, #4]
341832f6:	609a      	str	r2, [r3, #8]

      /* Clear the Limit error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
341832f8:	687b      	ldr	r3, [r7, #4]
341832fa:	681b      	ldr	r3, [r3, #0]
341832fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34183300:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LIMIT Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
34183304:	2100      	movs	r1, #0
34183306:	6878      	ldr	r0, [r7, #4]
34183308:	f000 fe67 	bl	34183fda <HAL_DCMIPP_PIPE_LimitEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
3418330c:	68fb      	ldr	r3, [r7, #12]
3418330e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34183312:	2b00      	cmp	r3, #0
34183314:	d00e      	beq.n	34183334 <HAL_DCMIPP_IRQHandler+0x8c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
34183316:	68bb      	ldr	r3, [r7, #8]
34183318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418331c:	2b00      	cmp	r3, #0
3418331e:	d009      	beq.n	34183334 <HAL_DCMIPP_IRQHandler+0x8c>
    {
      /* Clear the VSYNC flag for pipe0 */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
34183320:	687b      	ldr	r3, [r7, #4]
34183322:	681b      	ldr	r3, [r3, #0]
34183324:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34183328:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
3418332c:	2100      	movs	r1, #0
3418332e:	6878      	ldr	r0, [r7, #4]
34183330:	f00d fc30 	bl	34190b94 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* FRAME interrupt management ****************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
34183334:	68fb      	ldr	r3, [r7, #12]
34183336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418333a:	2b00      	cmp	r3, #0
3418333c:	d023      	beq.n	34183386 <HAL_DCMIPP_IRQHandler+0xde>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
3418333e:	68bb      	ldr	r3, [r7, #8]
34183340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34183344:	2b00      	cmp	r3, #0
34183346:	d01e      	beq.n	34183386 <HAL_DCMIPP_IRQHandler+0xde>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34183348:	687b      	ldr	r3, [r7, #4]
3418334a:	681b      	ldr	r3, [r3, #0]
3418334c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34183350:	f003 0304 	and.w	r3, r3, #4
34183354:	2b04      	cmp	r3, #4
34183356:	d10c      	bne.n	34183372 <HAL_DCMIPP_IRQHandler+0xca>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
34183358:	687b      	ldr	r3, [r7, #4]
3418335a:	681b      	ldr	r3, [r3, #0]
3418335c:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34183360:	687b      	ldr	r3, [r7, #4]
34183362:	681b      	ldr	r3, [r3, #0]
34183364:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
34183368:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
3418336c:	687b      	ldr	r3, [r7, #4]
3418336e:	2201      	movs	r2, #1
34183370:	715a      	strb	r2, [r3, #5]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
34183372:	687b      	ldr	r3, [r7, #4]
34183374:	681b      	ldr	r3, [r3, #0]
34183376:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418337a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
3418337e:	2100      	movs	r1, #0
34183380:	6878      	ldr	r0, [r7, #4]
34183382:	f00d fbf5 	bl	34190b70 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* LINE interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
34183386:	68fb      	ldr	r3, [r7, #12]
34183388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418338c:	2b00      	cmp	r3, #0
3418338e:	d00e      	beq.n	341833ae <HAL_DCMIPP_IRQHandler+0x106>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
34183390:	68bb      	ldr	r3, [r7, #8]
34183392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34183396:	2b00      	cmp	r3, #0
34183398:	d009      	beq.n	341833ae <HAL_DCMIPP_IRQHandler+0x106>
    {
      /* Clear the LINE flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
3418339a:	687b      	ldr	r3, [r7, #4]
3418339c:	681b      	ldr	r3, [r3, #0]
3418339e:	f44f 7280 	mov.w	r2, #256	@ 0x100
341833a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LINE Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
341833a6:	2100      	movs	r1, #0
341833a8:	6878      	ldr	r0, [r7, #4]
341833aa:	f000 fe0b 	bl	34183fc4 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error interrupt for Pipe0 ***************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
341833ae:	68fb      	ldr	r3, [r7, #12]
341833b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
341833b4:	2b00      	cmp	r3, #0
341833b6:	d021      	beq.n	341833fc <HAL_DCMIPP_IRQHandler+0x154>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
341833b8:	68bb      	ldr	r3, [r7, #8]
341833ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
341833be:	2b00      	cmp	r3, #0
341833c0:	d01c      	beq.n	341833fc <HAL_DCMIPP_IRQHandler+0x154>
    {
      /* Disable Overrun Error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
341833c2:	687b      	ldr	r3, [r7, #4]
341833c4:	681b      	ldr	r3, [r3, #0]
341833c6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
341833ca:	687b      	ldr	r3, [r7, #4]
341833cc:	681b      	ldr	r3, [r3, #0]
341833ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
341833d2:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
341833d6:	687b      	ldr	r3, [r7, #4]
341833d8:	689b      	ldr	r3, [r3, #8]
341833da:	f043 0208 	orr.w	r2, r3, #8
341833de:	687b      	ldr	r3, [r7, #4]
341833e0:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
341833e2:	687b      	ldr	r3, [r7, #4]
341833e4:	681b      	ldr	r3, [r3, #0]
341833e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
341833ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP Pipe state */
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
341833ee:	687b      	ldr	r3, [r7, #4]
341833f0:	2204      	movs	r2, #4
341833f2:	715a      	strb	r2, [r3, #5]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
341833f4:	2100      	movs	r1, #0
341833f6:	6878      	ldr	r0, [r7, #4]
341833f8:	f000 fdfa 	bl	34183ff0 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE1 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
341833fc:	68fb      	ldr	r3, [r7, #12]
341833fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34183402:	2b00      	cmp	r3, #0
34183404:	d00e      	beq.n	34183424 <HAL_DCMIPP_IRQHandler+0x17c>
  {
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34183406:	68bb      	ldr	r3, [r7, #8]
34183408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418340c:	2b00      	cmp	r3, #0
3418340e:	d009      	beq.n	34183424 <HAL_DCMIPP_IRQHandler+0x17c>
    {
      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34183410:	687b      	ldr	r3, [r7, #4]
34183412:	681b      	ldr	r3, [r3, #0]
34183414:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34183418:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
3418341c:	2101      	movs	r1, #1
3418341e:	6878      	ldr	r0, [r7, #4]
34183420:	f000 fdd0 	bl	34183fc4 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
34183424:	68fb      	ldr	r3, [r7, #12]
34183426:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3418342a:	2b00      	cmp	r3, #0
3418342c:	d00e      	beq.n	3418344c <HAL_DCMIPP_IRQHandler+0x1a4>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
3418342e:	68bb      	ldr	r3, [r7, #8]
34183430:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34183434:	2b00      	cmp	r3, #0
34183436:	d009      	beq.n	3418344c <HAL_DCMIPP_IRQHandler+0x1a4>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
34183438:	687b      	ldr	r3, [r7, #4]
3418343a:	681b      	ldr	r3, [r3, #0]
3418343c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34183440:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34183444:	2101      	movs	r1, #1
34183446:	6878      	ldr	r0, [r7, #4]
34183448:	f00d fba4 	bl	34190b94 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
3418344c:	68fb      	ldr	r3, [r7, #12]
3418344e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34183452:	2b00      	cmp	r3, #0
34183454:	d023      	beq.n	3418349e <HAL_DCMIPP_IRQHandler+0x1f6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
34183456:	68bb      	ldr	r3, [r7, #8]
34183458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418345c:	2b00      	cmp	r3, #0
3418345e:	d01e      	beq.n	3418349e <HAL_DCMIPP_IRQHandler+0x1f6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34183460:	687b      	ldr	r3, [r7, #4]
34183462:	681b      	ldr	r3, [r3, #0]
34183464:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
34183468:	f003 0304 	and.w	r3, r3, #4
3418346c:	2b04      	cmp	r3, #4
3418346e:	d10c      	bne.n	3418348a <HAL_DCMIPP_IRQHandler+0x1e2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
34183470:	687b      	ldr	r3, [r7, #4]
34183472:	681b      	ldr	r3, [r3, #0]
34183474:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34183478:	687b      	ldr	r3, [r7, #4]
3418347a:	681b      	ldr	r3, [r3, #0]
3418347c:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
34183480:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
34183484:	687b      	ldr	r3, [r7, #4]
34183486:	2201      	movs	r2, #1
34183488:	719a      	strb	r2, [r3, #6]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
3418348a:	687b      	ldr	r3, [r7, #4]
3418348c:	681b      	ldr	r3, [r3, #0]
3418348e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
34183492:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
34183496:	2101      	movs	r1, #1
34183498:	6878      	ldr	r0, [r7, #4]
3418349a:	f00d fb69 	bl	34190b70 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error on the PIPE1 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
3418349e:	68fb      	ldr	r3, [r7, #12]
341834a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
341834a4:	2b00      	cmp	r3, #0
341834a6:	d021      	beq.n	341834ec <HAL_DCMIPP_IRQHandler+0x244>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
341834a8:	68bb      	ldr	r3, [r7, #8]
341834aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
341834ae:	2b00      	cmp	r3, #0
341834b0:	d01c      	beq.n	341834ec <HAL_DCMIPP_IRQHandler+0x244>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
341834b2:	687b      	ldr	r3, [r7, #4]
341834b4:	681b      	ldr	r3, [r3, #0]
341834b6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
341834ba:	687b      	ldr	r3, [r7, #4]
341834bc:	681b      	ldr	r3, [r3, #0]
341834be:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
341834c2:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
341834c6:	687b      	ldr	r3, [r7, #4]
341834c8:	689b      	ldr	r3, [r3, #8]
341834ca:	f043 0210 	orr.w	r2, r3, #16
341834ce:	687b      	ldr	r3, [r7, #4]
341834d0:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
341834d2:	687b      	ldr	r3, [r7, #4]
341834d4:	681b      	ldr	r3, [r3, #0]
341834d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
341834da:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
341834de:	687b      	ldr	r3, [r7, #4]
341834e0:	2204      	movs	r2, #4
341834e2:	719a      	strb	r2, [r3, #6]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
341834e4:	2101      	movs	r1, #1
341834e6:	6878      	ldr	r0, [r7, #4]
341834e8:	f000 fd82 	bl	34183ff0 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE2 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
341834ec:	68fb      	ldr	r3, [r7, #12]
341834ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
341834f2:	2b00      	cmp	r3, #0
341834f4:	d00e      	beq.n	34183514 <HAL_DCMIPP_IRQHandler+0x26c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
341834f6:	68bb      	ldr	r3, [r7, #8]
341834f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
341834fc:	2b00      	cmp	r3, #0
341834fe:	d009      	beq.n	34183514 <HAL_DCMIPP_IRQHandler+0x26c>
    {
      /* Clear the End of Line flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34183500:	687b      	ldr	r3, [r7, #4]
34183502:	681b      	ldr	r3, [r3, #0]
34183504:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34183508:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
3418350c:	2102      	movs	r1, #2
3418350e:	6878      	ldr	r0, [r7, #4]
34183510:	f000 fd58 	bl	34183fc4 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
34183514:	68fb      	ldr	r3, [r7, #12]
34183516:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
3418351a:	2b00      	cmp	r3, #0
3418351c:	d00e      	beq.n	3418353c <HAL_DCMIPP_IRQHandler+0x294>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
3418351e:	68bb      	ldr	r3, [r7, #8]
34183520:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34183524:	2b00      	cmp	r3, #0
34183526:	d009      	beq.n	3418353c <HAL_DCMIPP_IRQHandler+0x294>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34183528:	687b      	ldr	r3, [r7, #4]
3418352a:	681b      	ldr	r3, [r3, #0]
3418352c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34183530:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34183534:	2102      	movs	r1, #2
34183536:	6878      	ldr	r0, [r7, #4]
34183538:	f00d fb2c 	bl	34190b94 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
3418353c:	68fb      	ldr	r3, [r7, #12]
3418353e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34183542:	2b00      	cmp	r3, #0
34183544:	d023      	beq.n	3418358e <HAL_DCMIPP_IRQHandler+0x2e6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34183546:	68bb      	ldr	r3, [r7, #8]
34183548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
3418354c:	2b00      	cmp	r3, #0
3418354e:	d01e      	beq.n	3418358e <HAL_DCMIPP_IRQHandler+0x2e6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34183550:	687b      	ldr	r3, [r7, #4]
34183552:	681b      	ldr	r3, [r3, #0]
34183554:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
34183558:	f003 0304 	and.w	r3, r3, #4
3418355c:	2b04      	cmp	r3, #4
3418355e:	d10c      	bne.n	3418357a <HAL_DCMIPP_IRQHandler+0x2d2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
34183560:	687b      	ldr	r3, [r7, #4]
34183562:	681b      	ldr	r3, [r3, #0]
34183564:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34183568:	687b      	ldr	r3, [r7, #4]
3418356a:	681b      	ldr	r3, [r3, #0]
3418356c:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
34183570:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
34183574:	687b      	ldr	r3, [r7, #4]
34183576:	2201      	movs	r2, #1
34183578:	71da      	strb	r2, [r3, #7]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
3418357a:	687b      	ldr	r3, [r7, #4]
3418357c:	681b      	ldr	r3, [r3, #0]
3418357e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34183582:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34183586:	2102      	movs	r1, #2
34183588:	6878      	ldr	r0, [r7, #4]
3418358a:	f00d faf1 	bl	34190b70 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
  /* Overrun error on the PIPE2 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
3418358e:	68fb      	ldr	r3, [r7, #12]
34183590:	2b00      	cmp	r3, #0
34183592:	da1f      	bge.n	341835d4 <HAL_DCMIPP_IRQHandler+0x32c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
34183594:	68bb      	ldr	r3, [r7, #8]
34183596:	2b00      	cmp	r3, #0
34183598:	da1c      	bge.n	341835d4 <HAL_DCMIPP_IRQHandler+0x32c>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
3418359a:	687b      	ldr	r3, [r7, #4]
3418359c:	681b      	ldr	r3, [r3, #0]
3418359e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
341835a2:	687b      	ldr	r3, [r7, #4]
341835a4:	681b      	ldr	r3, [r3, #0]
341835a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
341835aa:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
341835ae:	687b      	ldr	r3, [r7, #4]
341835b0:	689b      	ldr	r3, [r3, #8]
341835b2:	f043 0220 	orr.w	r2, r3, #32
341835b6:	687b      	ldr	r3, [r7, #4]
341835b8:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
341835ba:	687b      	ldr	r3, [r7, #4]
341835bc:	681b      	ldr	r3, [r3, #0]
341835be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
341835c2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
341835c6:	687b      	ldr	r3, [r7, #4]
341835c8:	2204      	movs	r2, #4
341835ca:	71da      	strb	r2, [r3, #7]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
341835cc:	2102      	movs	r1, #2
341835ce:	6878      	ldr	r0, [r7, #4]
341835d0:	f000 fd0e 	bl	34183ff0 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization Error Interrupt on the parallel interface  **************/
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
341835d4:	68fb      	ldr	r3, [r7, #12]
341835d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341835da:	2b00      	cmp	r3, #0
341835dc:	d01f      	beq.n	3418361e <HAL_DCMIPP_IRQHandler+0x376>
  {
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
341835de:	68bb      	ldr	r3, [r7, #8]
341835e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341835e4:	2b00      	cmp	r3, #0
341835e6:	d01a      	beq.n	3418361e <HAL_DCMIPP_IRQHandler+0x376>
    {
      /* Disable Synchronization error interrupt on parallel interface */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
341835e8:	687b      	ldr	r3, [r7, #4]
341835ea:	681b      	ldr	r3, [r3, #0]
341835ec:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
341835f0:	687b      	ldr	r3, [r7, #4]
341835f2:	681b      	ldr	r3, [r3, #0]
341835f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
341835f8:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
341835fc:	687b      	ldr	r3, [r7, #4]
341835fe:	689b      	ldr	r3, [r3, #8]
34183600:	f043 0202 	orr.w	r2, r3, #2
34183604:	687b      	ldr	r3, [r7, #4]
34183606:	609a      	str	r2, [r3, #8]

      /* Clear the synchronization error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
34183608:	687b      	ldr	r3, [r7, #4]
3418360a:	681b      	ldr	r3, [r3, #0]
3418360c:	2240      	movs	r2, #64	@ 0x40
3418360e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34183612:	687b      	ldr	r3, [r7, #4]
34183614:	2204      	movs	r2, #4
34183616:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34183618:	6878      	ldr	r0, [r7, #4]
3418361a:	f000 fcf4 	bl	34184006 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* IPPLUG AXI transfer Error Interrupt     *********************************/
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
3418361e:	68fb      	ldr	r3, [r7, #12]
34183620:	f003 0320 	and.w	r3, r3, #32
34183624:	2b00      	cmp	r3, #0
34183626:	d01f      	beq.n	34183668 <HAL_DCMIPP_IRQHandler+0x3c0>
  {
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
34183628:	68bb      	ldr	r3, [r7, #8]
3418362a:	f003 0320 	and.w	r3, r3, #32
3418362e:	2b00      	cmp	r3, #0
34183630:	d01a      	beq.n	34183668 <HAL_DCMIPP_IRQHandler+0x3c0>
    {
      /* Disable IPPLUG AXI transfer Error Interrupt */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
34183632:	687b      	ldr	r3, [r7, #4]
34183634:	681b      	ldr	r3, [r3, #0]
34183636:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3418363a:	687b      	ldr	r3, [r7, #4]
3418363c:	681b      	ldr	r3, [r3, #0]
3418363e:	f022 0220 	bic.w	r2, r2, #32
34183642:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
34183646:	687b      	ldr	r3, [r7, #4]
34183648:	689b      	ldr	r3, [r3, #8]
3418364a:	f043 0201 	orr.w	r2, r3, #1
3418364e:	687b      	ldr	r3, [r7, #4]
34183650:	609a      	str	r2, [r3, #8]

      /* Clear the AXI transfer error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
34183652:	687b      	ldr	r3, [r7, #4]
34183654:	681b      	ldr	r3, [r3, #0]
34183656:	2220      	movs	r2, #32
34183658:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3418365c:	687b      	ldr	r3, [r7, #4]
3418365e:	2204      	movs	r2, #4
34183660:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34183662:	6878      	ldr	r0, [r7, #4]
34183664:	f000 fccf 	bl	34184006 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
34183668:	bf00      	nop
3418366a:	3710      	adds	r7, #16
3418366c:	46bd      	mov	sp, r7
3418366e:	bd80      	pop	{r7, pc}

34183670 <HAL_DCMIPP_CSI_IRQHandler>:
  * @brief  Handles DCMIPP CSI interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_CSI_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
34183670:	b580      	push	{r7, lr}
34183672:	b088      	sub	sp, #32
34183674:	af00      	add	r7, sp, #0
34183676:	6078      	str	r0, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
34183678:	4bb1      	ldr	r3, [pc, #708]	@ (34183940 <HAL_DCMIPP_CSI_IRQHandler+0x2d0>)
3418367a:	61fb      	str	r3, [r7, #28]

  /* Read the SR0 register once */
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
3418367c:	69fb      	ldr	r3, [r7, #28]
3418367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34183682:	61bb      	str	r3, [r7, #24]
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
34183684:	69fb      	ldr	r3, [r7, #28]
34183686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418368a:	617b      	str	r3, [r7, #20]

  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
3418368c:	69fb      	ldr	r3, [r7, #28]
3418368e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183692:	613b      	str	r3, [r7, #16]
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
34183694:	69fb      	ldr	r3, [r7, #28]
34183696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3418369a:	60fb      	str	r3, [r7, #12]

  /* Clock changer FIFO full event */
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
3418369c:	69bb      	ldr	r3, [r7, #24]
3418369e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
341836a2:	2b00      	cmp	r3, #0
341836a4:	d014      	beq.n	341836d0 <HAL_DCMIPP_CSI_IRQHandler+0x60>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
341836a6:	693b      	ldr	r3, [r7, #16]
341836a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
341836ac:	2b00      	cmp	r3, #0
341836ae:	d00f      	beq.n	341836d0 <HAL_DCMIPP_CSI_IRQHandler+0x60>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
341836b0:	69fb      	ldr	r3, [r7, #28]
341836b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341836b6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
341836ba:	69fb      	ldr	r3, [r7, #28]
341836bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
341836c0:	69fb      	ldr	r3, [r7, #28]
341836c2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
341836c6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ClockChangerFifoFullEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
341836ca:	6878      	ldr	r0, [r7, #4]
341836cc:	f000 fcb0 	bl	34184030 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  }

  /*###############################
     Byte/Line Counter Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
341836d0:	69bb      	ldr	r3, [r7, #24]
341836d2:	f003 0308 	and.w	r3, r3, #8
341836d6:	2b00      	cmp	r3, #0
341836d8:	d01c      	beq.n	34183714 <HAL_DCMIPP_CSI_IRQHandler+0xa4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
341836da:	693b      	ldr	r3, [r7, #16]
341836dc:	f003 0308 	and.w	r3, r3, #8
341836e0:	2b00      	cmp	r3, #0
341836e2:	d017      	beq.n	34183714 <HAL_DCMIPP_CSI_IRQHandler+0xa4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341836e4:	687b      	ldr	r3, [r7, #4]
341836e6:	681b      	ldr	r3, [r3, #0]
341836e8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341836ec:	f003 0304 	and.w	r3, r3, #4
341836f0:	2b04      	cmp	r3, #4
341836f2:	d107      	bne.n	34183704 <HAL_DCMIPP_CSI_IRQHandler+0x94>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
341836f4:	69fb      	ldr	r3, [r7, #28]
341836f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341836fa:	f023 0208 	bic.w	r2, r3, #8
341836fe:	69fb      	ldr	r3, [r7, #28]
34183700:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
34183704:	69fb      	ldr	r3, [r7, #28]
34183706:	2208      	movs	r2, #8
34183708:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
3418370c:	2103      	movs	r1, #3
3418370e:	6878      	ldr	r0, [r7, #4]
34183710:	f000 fcc3 	bl	3418409a <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
34183714:	69bb      	ldr	r3, [r7, #24]
34183716:	f003 0304 	and.w	r3, r3, #4
3418371a:	2b00      	cmp	r3, #0
3418371c:	d01c      	beq.n	34183758 <HAL_DCMIPP_CSI_IRQHandler+0xe8>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
3418371e:	693b      	ldr	r3, [r7, #16]
34183720:	f003 0304 	and.w	r3, r3, #4
34183724:	2b00      	cmp	r3, #0
34183726:	d017      	beq.n	34183758 <HAL_DCMIPP_CSI_IRQHandler+0xe8>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34183728:	687b      	ldr	r3, [r7, #4]
3418372a:	681b      	ldr	r3, [r3, #0]
3418372c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34183730:	f003 0304 	and.w	r3, r3, #4
34183734:	2b04      	cmp	r3, #4
34183736:	d107      	bne.n	34183748 <HAL_DCMIPP_CSI_IRQHandler+0xd8>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
34183738:	69fb      	ldr	r3, [r7, #28]
3418373a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418373e:	f023 0204 	bic.w	r2, r3, #4
34183742:	69fb      	ldr	r3, [r7, #28]
34183744:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
34183748:	69fb      	ldr	r3, [r7, #28]
3418374a:	2204      	movs	r2, #4
3418374c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34183750:	2102      	movs	r1, #2
34183752:	6878      	ldr	r0, [r7, #4]
34183754:	f000 fca1 	bl	3418409a <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
34183758:	69bb      	ldr	r3, [r7, #24]
3418375a:	f003 0302 	and.w	r3, r3, #2
3418375e:	2b00      	cmp	r3, #0
34183760:	d01c      	beq.n	3418379c <HAL_DCMIPP_CSI_IRQHandler+0x12c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
34183762:	693b      	ldr	r3, [r7, #16]
34183764:	f003 0302 	and.w	r3, r3, #2
34183768:	2b00      	cmp	r3, #0
3418376a:	d017      	beq.n	3418379c <HAL_DCMIPP_CSI_IRQHandler+0x12c>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3418376c:	687b      	ldr	r3, [r7, #4]
3418376e:	681b      	ldr	r3, [r3, #0]
34183770:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34183774:	f003 0304 	and.w	r3, r3, #4
34183778:	2b04      	cmp	r3, #4
3418377a:	d107      	bne.n	3418378c <HAL_DCMIPP_CSI_IRQHandler+0x11c>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
3418377c:	69fb      	ldr	r3, [r7, #28]
3418377e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183782:	f023 0202 	bic.w	r2, r3, #2
34183786:	69fb      	ldr	r3, [r7, #28]
34183788:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
3418378c:	69fb      	ldr	r3, [r7, #28]
3418378e:	2202      	movs	r2, #2
34183790:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34183794:	2101      	movs	r1, #1
34183796:	6878      	ldr	r0, [r7, #4]
34183798:	f000 fc7f 	bl	3418409a <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
3418379c:	69bb      	ldr	r3, [r7, #24]
3418379e:	f003 0301 	and.w	r3, r3, #1
341837a2:	2b00      	cmp	r3, #0
341837a4:	d01c      	beq.n	341837e0 <HAL_DCMIPP_CSI_IRQHandler+0x170>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
341837a6:	693b      	ldr	r3, [r7, #16]
341837a8:	f003 0301 	and.w	r3, r3, #1
341837ac:	2b00      	cmp	r3, #0
341837ae:	d017      	beq.n	341837e0 <HAL_DCMIPP_CSI_IRQHandler+0x170>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341837b0:	687b      	ldr	r3, [r7, #4]
341837b2:	681b      	ldr	r3, [r3, #0]
341837b4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341837b8:	f003 0304 	and.w	r3, r3, #4
341837bc:	2b04      	cmp	r3, #4
341837be:	d107      	bne.n	341837d0 <HAL_DCMIPP_CSI_IRQHandler+0x160>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
341837c0:	69fb      	ldr	r3, [r7, #28]
341837c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341837c6:	f023 0201 	bic.w	r2, r3, #1
341837ca:	69fb      	ldr	r3, [r7, #28]
341837cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
341837d0:	69fb      	ldr	r3, [r7, #28]
341837d2:	2201      	movs	r2, #1
341837d4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
341837d8:	2100      	movs	r1, #0
341837da:	6878      	ldr	r0, [r7, #4]
341837dc:	f000 fc5d 	bl	3418409a <HAL_DCMIPP_CSI_LineByteEventCallback>
  }

  /*###############################
            End Of Frame
    ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
341837e0:	69bb      	ldr	r3, [r7, #24]
341837e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
341837e6:	2b00      	cmp	r3, #0
341837e8:	d01d      	beq.n	34183826 <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
341837ea:	693b      	ldr	r3, [r7, #16]
341837ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
341837f0:	2b00      	cmp	r3, #0
341837f2:	d018      	beq.n	34183826 <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341837f4:	687b      	ldr	r3, [r7, #4]
341837f6:	681b      	ldr	r3, [r3, #0]
341837f8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341837fc:	f003 0304 	and.w	r3, r3, #4
34183800:	2b04      	cmp	r3, #4
34183802:	d107      	bne.n	34183814 <HAL_DCMIPP_CSI_IRQHandler+0x1a4>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
34183804:	69fb      	ldr	r3, [r7, #28]
34183806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418380a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
3418380e:	69fb      	ldr	r3, [r7, #28]
34183810:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
34183814:	69fb      	ldr	r3, [r7, #28]
34183816:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3418381a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
3418381e:	2103      	movs	r1, #3
34183820:	6878      	ldr	r0, [r7, #4]
34183822:	f000 fc19 	bl	34184058 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
34183826:	69bb      	ldr	r3, [r7, #24]
34183828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3418382c:	2b00      	cmp	r3, #0
3418382e:	d01d      	beq.n	3418386c <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
34183830:	693b      	ldr	r3, [r7, #16]
34183832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34183836:	2b00      	cmp	r3, #0
34183838:	d018      	beq.n	3418386c <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3418383a:	687b      	ldr	r3, [r7, #4]
3418383c:	681b      	ldr	r3, [r3, #0]
3418383e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34183842:	f003 0304 	and.w	r3, r3, #4
34183846:	2b04      	cmp	r3, #4
34183848:	d107      	bne.n	3418385a <HAL_DCMIPP_CSI_IRQHandler+0x1ea>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
3418384a:	69fb      	ldr	r3, [r7, #28]
3418384c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183850:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
34183854:	69fb      	ldr	r3, [r7, #28]
34183856:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
3418385a:	69fb      	ldr	r3, [r7, #28]
3418385c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34183860:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34183864:	2102      	movs	r1, #2
34183866:	6878      	ldr	r0, [r7, #4]
34183868:	f000 fbf6 	bl	34184058 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
3418386c:	69bb      	ldr	r3, [r7, #24]
3418386e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34183872:	2b00      	cmp	r3, #0
34183874:	d01d      	beq.n	341838b2 <HAL_DCMIPP_CSI_IRQHandler+0x242>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
34183876:	693b      	ldr	r3, [r7, #16]
34183878:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3418387c:	2b00      	cmp	r3, #0
3418387e:	d018      	beq.n	341838b2 <HAL_DCMIPP_CSI_IRQHandler+0x242>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34183880:	687b      	ldr	r3, [r7, #4]
34183882:	681b      	ldr	r3, [r3, #0]
34183884:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34183888:	f003 0304 	and.w	r3, r3, #4
3418388c:	2b04      	cmp	r3, #4
3418388e:	d107      	bne.n	341838a0 <HAL_DCMIPP_CSI_IRQHandler+0x230>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
34183890:	69fb      	ldr	r3, [r7, #28]
34183892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183896:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
3418389a:	69fb      	ldr	r3, [r7, #28]
3418389c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
341838a0:	69fb      	ldr	r3, [r7, #28]
341838a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
341838a6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
341838aa:	2101      	movs	r1, #1
341838ac:	6878      	ldr	r0, [r7, #4]
341838ae:	f000 fbd3 	bl	34184058 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
341838b2:	69bb      	ldr	r3, [r7, #24]
341838b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
341838b8:	2b00      	cmp	r3, #0
341838ba:	d01d      	beq.n	341838f8 <HAL_DCMIPP_CSI_IRQHandler+0x288>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
341838bc:	693b      	ldr	r3, [r7, #16]
341838be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
341838c2:	2b00      	cmp	r3, #0
341838c4:	d018      	beq.n	341838f8 <HAL_DCMIPP_CSI_IRQHandler+0x288>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341838c6:	687b      	ldr	r3, [r7, #4]
341838c8:	681b      	ldr	r3, [r3, #0]
341838ca:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341838ce:	f003 0304 	and.w	r3, r3, #4
341838d2:	2b04      	cmp	r3, #4
341838d4:	d107      	bne.n	341838e6 <HAL_DCMIPP_CSI_IRQHandler+0x276>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
341838d6:	69fb      	ldr	r3, [r7, #28]
341838d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341838dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
341838e0:	69fb      	ldr	r3, [r7, #28]
341838e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
341838e6:	69fb      	ldr	r3, [r7, #28]
341838e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
341838ec:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_CSIREGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
341838f0:	2100      	movs	r1, #0
341838f2:	6878      	ldr	r0, [r7, #4]
341838f4:	f000 fbb0 	bl	34184058 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  }

  /*###############################
           Start Of Frame
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
341838f8:	69bb      	ldr	r3, [r7, #24]
341838fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341838fe:	2b00      	cmp	r3, #0
34183900:	d020      	beq.n	34183944 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
34183902:	693b      	ldr	r3, [r7, #16]
34183904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34183908:	2b00      	cmp	r3, #0
3418390a:	d01b      	beq.n	34183944 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3418390c:	687b      	ldr	r3, [r7, #4]
3418390e:	681b      	ldr	r3, [r3, #0]
34183910:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34183914:	f003 0304 	and.w	r3, r3, #4
34183918:	2b04      	cmp	r3, #4
3418391a:	d107      	bne.n	3418392c <HAL_DCMIPP_CSI_IRQHandler+0x2bc>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
3418391c:	69fb      	ldr	r3, [r7, #28]
3418391e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183922:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
34183926:	69fb      	ldr	r3, [r7, #28]
34183928:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
3418392c:	69fb      	ldr	r3, [r7, #28]
3418392e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34183932:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34183936:	2103      	movs	r1, #3
34183938:	6878      	ldr	r0, [r7, #4]
3418393a:	f000 fb98 	bl	3418406e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
3418393e:	e001      	b.n	34183944 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
34183940:	58006000 	.word	0x58006000
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
34183944:	69bb      	ldr	r3, [r7, #24]
34183946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418394a:	2b00      	cmp	r3, #0
3418394c:	d01d      	beq.n	3418398a <HAL_DCMIPP_CSI_IRQHandler+0x31a>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
3418394e:	693b      	ldr	r3, [r7, #16]
34183950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34183954:	2b00      	cmp	r3, #0
34183956:	d018      	beq.n	3418398a <HAL_DCMIPP_CSI_IRQHandler+0x31a>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34183958:	687b      	ldr	r3, [r7, #4]
3418395a:	681b      	ldr	r3, [r3, #0]
3418395c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34183960:	f003 0304 	and.w	r3, r3, #4
34183964:	2b04      	cmp	r3, #4
34183966:	d107      	bne.n	34183978 <HAL_DCMIPP_CSI_IRQHandler+0x308>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34183968:	69fb      	ldr	r3, [r7, #28]
3418396a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418396e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34183972:	69fb      	ldr	r3, [r7, #28]
34183974:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34183978:	69fb      	ldr	r3, [r7, #28]
3418397a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3418397e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34183982:	2102      	movs	r1, #2
34183984:	6878      	ldr	r0, [r7, #4]
34183986:	f000 fb72 	bl	3418406e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
3418398a:	69bb      	ldr	r3, [r7, #24]
3418398c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34183990:	2b00      	cmp	r3, #0
34183992:	d01d      	beq.n	341839d0 <HAL_DCMIPP_CSI_IRQHandler+0x360>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34183994:	693b      	ldr	r3, [r7, #16]
34183996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418399a:	2b00      	cmp	r3, #0
3418399c:	d018      	beq.n	341839d0 <HAL_DCMIPP_CSI_IRQHandler+0x360>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3418399e:	687b      	ldr	r3, [r7, #4]
341839a0:	681b      	ldr	r3, [r3, #0]
341839a2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341839a6:	f003 0304 	and.w	r3, r3, #4
341839aa:	2b04      	cmp	r3, #4
341839ac:	d107      	bne.n	341839be <HAL_DCMIPP_CSI_IRQHandler+0x34e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
341839ae:	69fb      	ldr	r3, [r7, #28]
341839b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341839b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
341839b8:	69fb      	ldr	r3, [r7, #28]
341839ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
341839be:	69fb      	ldr	r3, [r7, #28]
341839c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
341839c4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
341839c8:	2101      	movs	r1, #1
341839ca:	6878      	ldr	r0, [r7, #4]
341839cc:	f000 fb4f 	bl	3418406e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
341839d0:	69bb      	ldr	r3, [r7, #24]
341839d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341839d6:	2b00      	cmp	r3, #0
341839d8:	d01d      	beq.n	34183a16 <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
341839da:	693b      	ldr	r3, [r7, #16]
341839dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341839e0:	2b00      	cmp	r3, #0
341839e2:	d018      	beq.n	34183a16 <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341839e4:	687b      	ldr	r3, [r7, #4]
341839e6:	681b      	ldr	r3, [r3, #0]
341839e8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341839ec:	f003 0304 	and.w	r3, r3, #4
341839f0:	2b04      	cmp	r3, #4
341839f2:	d107      	bne.n	34183a04 <HAL_DCMIPP_CSI_IRQHandler+0x394>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
341839f4:	69fb      	ldr	r3, [r7, #28]
341839f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341839fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
341839fe:	69fb      	ldr	r3, [r7, #28]
34183a00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34183a04:	69fb      	ldr	r3, [r7, #28]
34183a06:	f44f 7280 	mov.w	r2, #256	@ 0x100
34183a0a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34183a0e:	2100      	movs	r1, #0
34183a10:	6878      	ldr	r0, [r7, #4]
34183a12:	f000 fb2c 	bl	3418406e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  }

  /*###############################
           Timer Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
34183a16:	69bb      	ldr	r3, [r7, #24]
34183a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34183a1c:	2b00      	cmp	r3, #0
34183a1e:	d01c      	beq.n	34183a5a <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34183a20:	693b      	ldr	r3, [r7, #16]
34183a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34183a26:	2b00      	cmp	r3, #0
34183a28:	d017      	beq.n	34183a5a <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34183a2a:	687b      	ldr	r3, [r7, #4]
34183a2c:	681b      	ldr	r3, [r3, #0]
34183a2e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34183a32:	f003 0304 	and.w	r3, r3, #4
34183a36:	2b04      	cmp	r3, #4
34183a38:	d107      	bne.n	34183a4a <HAL_DCMIPP_CSI_IRQHandler+0x3da>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
34183a3a:	69fb      	ldr	r3, [r7, #28]
34183a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183a40:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
34183a44:	69fb      	ldr	r3, [r7, #28]
34183a46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34183a4a:	69fb      	ldr	r3, [r7, #28]
34183a4c:	2280      	movs	r2, #128	@ 0x80
34183a4e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34183a52:	2103      	movs	r1, #3
34183a54:	6878      	ldr	r0, [r7, #4]
34183a56:	f000 fb15 	bl	34184084 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
34183a5a:	69bb      	ldr	r3, [r7, #24]
34183a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34183a60:	2b00      	cmp	r3, #0
34183a62:	d01c      	beq.n	34183a9e <HAL_DCMIPP_CSI_IRQHandler+0x42e>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34183a64:	693b      	ldr	r3, [r7, #16]
34183a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34183a6a:	2b00      	cmp	r3, #0
34183a6c:	d017      	beq.n	34183a9e <HAL_DCMIPP_CSI_IRQHandler+0x42e>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34183a6e:	687b      	ldr	r3, [r7, #4]
34183a70:	681b      	ldr	r3, [r3, #0]
34183a72:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34183a76:	f003 0304 	and.w	r3, r3, #4
34183a7a:	2b04      	cmp	r3, #4
34183a7c:	d107      	bne.n	34183a8e <HAL_DCMIPP_CSI_IRQHandler+0x41e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34183a7e:	69fb      	ldr	r3, [r7, #28]
34183a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183a84:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
34183a88:	69fb      	ldr	r3, [r7, #28]
34183a8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
34183a8e:	69fb      	ldr	r3, [r7, #28]
34183a90:	2240      	movs	r2, #64	@ 0x40
34183a92:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34183a96:	2102      	movs	r1, #2
34183a98:	6878      	ldr	r0, [r7, #4]
34183a9a:	f000 faf3 	bl	34184084 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34183a9e:	69bb      	ldr	r3, [r7, #24]
34183aa0:	f003 0320 	and.w	r3, r3, #32
34183aa4:	2b00      	cmp	r3, #0
34183aa6:	d01c      	beq.n	34183ae2 <HAL_DCMIPP_CSI_IRQHandler+0x472>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34183aa8:	693b      	ldr	r3, [r7, #16]
34183aaa:	f003 0320 	and.w	r3, r3, #32
34183aae:	2b00      	cmp	r3, #0
34183ab0:	d017      	beq.n	34183ae2 <HAL_DCMIPP_CSI_IRQHandler+0x472>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34183ab2:	687b      	ldr	r3, [r7, #4]
34183ab4:	681b      	ldr	r3, [r3, #0]
34183ab6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34183aba:	f003 0304 	and.w	r3, r3, #4
34183abe:	2b04      	cmp	r3, #4
34183ac0:	d107      	bne.n	34183ad2 <HAL_DCMIPP_CSI_IRQHandler+0x462>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34183ac2:	69fb      	ldr	r3, [r7, #28]
34183ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183ac8:	f023 0220 	bic.w	r2, r3, #32
34183acc:	69fb      	ldr	r3, [r7, #28]
34183ace:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
34183ad2:	69fb      	ldr	r3, [r7, #28]
34183ad4:	2220      	movs	r2, #32
34183ad6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34183ada:	2101      	movs	r1, #1
34183adc:	6878      	ldr	r0, [r7, #4]
34183ade:	f000 fad1 	bl	34184084 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34183ae2:	69bb      	ldr	r3, [r7, #24]
34183ae4:	f003 0310 	and.w	r3, r3, #16
34183ae8:	2b00      	cmp	r3, #0
34183aea:	d01c      	beq.n	34183b26 <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34183aec:	693b      	ldr	r3, [r7, #16]
34183aee:	f003 0310 	and.w	r3, r3, #16
34183af2:	2b00      	cmp	r3, #0
34183af4:	d017      	beq.n	34183b26 <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34183af6:	687b      	ldr	r3, [r7, #4]
34183af8:	681b      	ldr	r3, [r3, #0]
34183afa:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34183afe:	f003 0304 	and.w	r3, r3, #4
34183b02:	2b04      	cmp	r3, #4
34183b04:	d107      	bne.n	34183b16 <HAL_DCMIPP_CSI_IRQHandler+0x4a6>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
34183b06:	69fb      	ldr	r3, [r7, #28]
34183b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183b0c:	f023 0210 	bic.w	r2, r3, #16
34183b10:	69fb      	ldr	r3, [r7, #28]
34183b12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
34183b16:	69fb      	ldr	r3, [r7, #28]
34183b18:	2210      	movs	r2, #16
34183b1a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34183b1e:	2100      	movs	r1, #0
34183b20:	6878      	ldr	r0, [r7, #4]
34183b22:	f000 faaf 	bl	34184084 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization error  */
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
34183b26:	69bb      	ldr	r3, [r7, #24]
34183b28:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34183b2c:	2b00      	cmp	r3, #0
34183b2e:	d01a      	beq.n	34183b66 <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34183b30:	693b      	ldr	r3, [r7, #16]
34183b32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34183b36:	2b00      	cmp	r3, #0
34183b38:	d015      	beq.n	34183b66 <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34183b3a:	69fb      	ldr	r3, [r7, #28]
34183b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183b40:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34183b44:	69fb      	ldr	r3, [r7, #28]
34183b46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34183b4a:	69fb      	ldr	r3, [r7, #28]
34183b4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34183b50:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
34183b54:	687b      	ldr	r3, [r7, #4]
34183b56:	689b      	ldr	r3, [r3, #8]
34183b58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
34183b5c:	687b      	ldr	r3, [r7, #4]
34183b5e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34183b60:	6878      	ldr	r0, [r7, #4]
34183b62:	f000 fa50 	bl	34184006 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
34183b66:	69bb      	ldr	r3, [r7, #24]
34183b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34183b6c:	2b00      	cmp	r3, #0
34183b6e:	d01a      	beq.n	34183ba6 <HAL_DCMIPP_CSI_IRQHandler+0x536>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
34183b70:	693b      	ldr	r3, [r7, #16]
34183b72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34183b76:	2b00      	cmp	r3, #0
34183b78:	d015      	beq.n	34183ba6 <HAL_DCMIPP_CSI_IRQHandler+0x536>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34183b7a:	69fb      	ldr	r3, [r7, #28]
34183b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183b80:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
34183b84:	69fb      	ldr	r3, [r7, #28]
34183b86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
34183b8a:	69fb      	ldr	r3, [r7, #28]
34183b8c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34183b90:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34183b94:	687b      	ldr	r3, [r7, #4]
34183b96:	689b      	ldr	r3, [r3, #8]
34183b98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
34183b9c:	687b      	ldr	r3, [r7, #4]
34183b9e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34183ba0:	6878      	ldr	r0, [r7, #4]
34183ba2:	f000 fa30 	bl	34184006 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
34183ba6:	69bb      	ldr	r3, [r7, #24]
34183ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34183bac:	2b00      	cmp	r3, #0
34183bae:	d01a      	beq.n	34183be6 <HAL_DCMIPP_CSI_IRQHandler+0x576>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34183bb0:	693b      	ldr	r3, [r7, #16]
34183bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34183bb6:	2b00      	cmp	r3, #0
34183bb8:	d015      	beq.n	34183be6 <HAL_DCMIPP_CSI_IRQHandler+0x576>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34183bba:	69fb      	ldr	r3, [r7, #28]
34183bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183bc0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
34183bc4:	69fb      	ldr	r3, [r7, #28]
34183bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34183bca:	69fb      	ldr	r3, [r7, #28]
34183bcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34183bd0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34183bd4:	687b      	ldr	r3, [r7, #4]
34183bd6:	689b      	ldr	r3, [r3, #8]
34183bd8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
34183bdc:	687b      	ldr	r3, [r7, #4]
34183bde:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34183be0:	6878      	ldr	r0, [r7, #4]
34183be2:	f000 fa10 	bl	34184006 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34183be6:	69bb      	ldr	r3, [r7, #24]
34183be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34183bec:	2b00      	cmp	r3, #0
34183bee:	d01a      	beq.n	34183c26 <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34183bf0:	693b      	ldr	r3, [r7, #16]
34183bf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34183bf6:	2b00      	cmp	r3, #0
34183bf8:	d015      	beq.n	34183c26 <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34183bfa:	69fb      	ldr	r3, [r7, #28]
34183bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183c00:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34183c04:	69fb      	ldr	r3, [r7, #28]
34183c06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34183c0a:	69fb      	ldr	r3, [r7, #28]
34183c0c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34183c10:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34183c14:	687b      	ldr	r3, [r7, #4]
34183c16:	689b      	ldr	r3, [r3, #8]
34183c18:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
34183c1c:	687b      	ldr	r3, [r7, #4]
34183c1e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34183c20:	6878      	ldr	r0, [r7, #4]
34183c22:	f000 f9f0 	bl	34184006 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34183c26:	69bb      	ldr	r3, [r7, #24]
34183c28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34183c2c:	2b00      	cmp	r3, #0
34183c2e:	d01a      	beq.n	34183c66 <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34183c30:	693b      	ldr	r3, [r7, #16]
34183c32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34183c36:	2b00      	cmp	r3, #0
34183c38:	d015      	beq.n	34183c66 <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34183c3a:	69fb      	ldr	r3, [r7, #28]
34183c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183c40:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
34183c44:	69fb      	ldr	r3, [r7, #28]
34183c46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34183c4a:	69fb      	ldr	r3, [r7, #28]
34183c4c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34183c50:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34183c54:	687b      	ldr	r3, [r7, #4]
34183c56:	689b      	ldr	r3, [r3, #8]
34183c58:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
34183c5c:	687b      	ldr	r3, [r7, #4]
34183c5e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34183c60:	6878      	ldr	r0, [r7, #4]
34183c62:	f000 f9d0 	bl	34184006 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34183c66:	69bb      	ldr	r3, [r7, #24]
34183c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34183c6c:	2b00      	cmp	r3, #0
34183c6e:	d01a      	beq.n	34183ca6 <HAL_DCMIPP_CSI_IRQHandler+0x636>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
34183c70:	693b      	ldr	r3, [r7, #16]
34183c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34183c76:	2b00      	cmp	r3, #0
34183c78:	d015      	beq.n	34183ca6 <HAL_DCMIPP_CSI_IRQHandler+0x636>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34183c7a:	69fb      	ldr	r3, [r7, #28]
34183c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183c80:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
34183c84:	69fb      	ldr	r3, [r7, #28]
34183c86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34183c8a:	69fb      	ldr	r3, [r7, #28]
34183c8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34183c90:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34183c94:	687b      	ldr	r3, [r7, #4]
34183c96:	689b      	ldr	r3, [r3, #8]
34183c98:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
34183c9c:	687b      	ldr	r3, [r7, #4]
34183c9e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34183ca0:	6878      	ldr	r0, [r7, #4]
34183ca2:	f000 f9b0 	bl	34184006 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
34183ca6:	69bb      	ldr	r3, [r7, #24]
34183ca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34183cac:	2b00      	cmp	r3, #0
34183cae:	d01a      	beq.n	34183ce6 <HAL_DCMIPP_CSI_IRQHandler+0x676>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34183cb0:	693b      	ldr	r3, [r7, #16]
34183cb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34183cb6:	2b00      	cmp	r3, #0
34183cb8:	d015      	beq.n	34183ce6 <HAL_DCMIPP_CSI_IRQHandler+0x676>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34183cba:	69fb      	ldr	r3, [r7, #28]
34183cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183cc0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34183cc4:	69fb      	ldr	r3, [r7, #28]
34183cc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34183cca:	69fb      	ldr	r3, [r7, #28]
34183ccc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34183cd0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
34183cd4:	687b      	ldr	r3, [r7, #4]
34183cd6:	689b      	ldr	r3, [r3, #8]
34183cd8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
34183cdc:	687b      	ldr	r3, [r7, #4]
34183cde:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34183ce0:	6878      	ldr	r0, [r7, #4]
34183ce2:	f000 f990 	bl	34184006 <HAL_DCMIPP_ErrorCallback>
    }
  }

  /* Lane 0 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
34183ce6:	697b      	ldr	r3, [r7, #20]
34183ce8:	f003 0301 	and.w	r3, r3, #1
34183cec:	2b00      	cmp	r3, #0
34183cee:	d01d      	beq.n	34183d2c <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34183cf0:	68fb      	ldr	r3, [r7, #12]
34183cf2:	f003 0301 	and.w	r3, r3, #1
34183cf6:	2b00      	cmp	r3, #0
34183cf8:	d018      	beq.n	34183d2c <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34183cfa:	69fb      	ldr	r3, [r7, #28]
34183cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183d00:	f023 0201 	bic.w	r2, r3, #1
34183d04:	69fb      	ldr	r3, [r7, #28]
34183d06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34183d0a:	69fb      	ldr	r3, [r7, #28]
34183d0c:	2201      	movs	r2, #1
34183d0e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34183d12:	687b      	ldr	r3, [r7, #4]
34183d14:	689b      	ldr	r3, [r3, #8]
34183d16:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
34183d1a:	687b      	ldr	r3, [r7, #4]
34183d1c:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34183d1e:	687b      	ldr	r3, [r7, #4]
34183d20:	2204      	movs	r2, #4
34183d22:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34183d24:	2101      	movs	r1, #1
34183d26:	6878      	ldr	r0, [r7, #4]
34183d28:	f000 f977 	bl	3418401a <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34183d2c:	697b      	ldr	r3, [r7, #20]
34183d2e:	f003 0302 	and.w	r3, r3, #2
34183d32:	2b00      	cmp	r3, #0
34183d34:	d01d      	beq.n	34183d72 <HAL_DCMIPP_CSI_IRQHandler+0x702>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
34183d36:	68fb      	ldr	r3, [r7, #12]
34183d38:	f003 0302 	and.w	r3, r3, #2
34183d3c:	2b00      	cmp	r3, #0
34183d3e:	d018      	beq.n	34183d72 <HAL_DCMIPP_CSI_IRQHandler+0x702>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34183d40:	69fb      	ldr	r3, [r7, #28]
34183d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183d46:	f023 0202 	bic.w	r2, r3, #2
34183d4a:	69fb      	ldr	r3, [r7, #28]
34183d4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34183d50:	69fb      	ldr	r3, [r7, #28]
34183d52:	2202      	movs	r2, #2
34183d54:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34183d58:	687b      	ldr	r3, [r7, #4]
34183d5a:	689b      	ldr	r3, [r3, #8]
34183d5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
34183d60:	687b      	ldr	r3, [r7, #4]
34183d62:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34183d64:	687b      	ldr	r3, [r7, #4]
34183d66:	2204      	movs	r2, #4
34183d68:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34183d6a:	2101      	movs	r1, #1
34183d6c:	6878      	ldr	r0, [r7, #4]
34183d6e:	f000 f954 	bl	3418401a <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
34183d72:	697b      	ldr	r3, [r7, #20]
34183d74:	f003 0304 	and.w	r3, r3, #4
34183d78:	2b00      	cmp	r3, #0
34183d7a:	d01a      	beq.n	34183db2 <HAL_DCMIPP_CSI_IRQHandler+0x742>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34183d7c:	68fb      	ldr	r3, [r7, #12]
34183d7e:	f003 0304 	and.w	r3, r3, #4
34183d82:	2b00      	cmp	r3, #0
34183d84:	d015      	beq.n	34183db2 <HAL_DCMIPP_CSI_IRQHandler+0x742>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34183d86:	69fb      	ldr	r3, [r7, #28]
34183d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183d8c:	f023 0204 	bic.w	r2, r3, #4
34183d90:	69fb      	ldr	r3, [r7, #28]
34183d92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
34183d96:	69fb      	ldr	r3, [r7, #28]
34183d98:	2204      	movs	r2, #4
34183d9a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34183d9e:	687b      	ldr	r3, [r7, #4]
34183da0:	689b      	ldr	r3, [r3, #8]
34183da2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
34183da6:	687b      	ldr	r3, [r7, #4]
34183da8:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34183daa:	2101      	movs	r1, #1
34183dac:	6878      	ldr	r0, [r7, #4]
34183dae:	f000 f934 	bl	3418401a <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34183db2:	697b      	ldr	r3, [r7, #20]
34183db4:	f003 0308 	and.w	r3, r3, #8
34183db8:	2b00      	cmp	r3, #0
34183dba:	d01a      	beq.n	34183df2 <HAL_DCMIPP_CSI_IRQHandler+0x782>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34183dbc:	68fb      	ldr	r3, [r7, #12]
34183dbe:	f003 0308 	and.w	r3, r3, #8
34183dc2:	2b00      	cmp	r3, #0
34183dc4:	d015      	beq.n	34183df2 <HAL_DCMIPP_CSI_IRQHandler+0x782>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34183dc6:	69fb      	ldr	r3, [r7, #28]
34183dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183dcc:	f023 0208 	bic.w	r2, r3, #8
34183dd0:	69fb      	ldr	r3, [r7, #28]
34183dd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
34183dd6:	69fb      	ldr	r3, [r7, #28]
34183dd8:	2208      	movs	r2, #8
34183dda:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34183dde:	687b      	ldr	r3, [r7, #4]
34183de0:	689b      	ldr	r3, [r3, #8]
34183de2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
34183de6:	687b      	ldr	r3, [r7, #4]
34183de8:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34183dea:	2101      	movs	r1, #1
34183dec:	6878      	ldr	r0, [r7, #4]
34183dee:	f000 f914 	bl	3418401a <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
34183df2:	697b      	ldr	r3, [r7, #20]
34183df4:	f003 0310 	and.w	r3, r3, #16
34183df8:	2b00      	cmp	r3, #0
34183dfa:	d01a      	beq.n	34183e32 <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34183dfc:	68fb      	ldr	r3, [r7, #12]
34183dfe:	f003 0310 	and.w	r3, r3, #16
34183e02:	2b00      	cmp	r3, #0
34183e04:	d015      	beq.n	34183e32 <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34183e06:	69fb      	ldr	r3, [r7, #28]
34183e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183e0c:	f023 0210 	bic.w	r2, r3, #16
34183e10:	69fb      	ldr	r3, [r7, #28]
34183e12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
34183e16:	69fb      	ldr	r3, [r7, #28]
34183e18:	2210      	movs	r2, #16
34183e1a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34183e1e:	687b      	ldr	r3, [r7, #4]
34183e20:	689b      	ldr	r3, [r3, #8]
34183e22:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
34183e26:	687b      	ldr	r3, [r7, #4]
34183e28:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34183e2a:	2101      	movs	r1, #1
34183e2c:	6878      	ldr	r0, [r7, #4]
34183e2e:	f000 f8f4 	bl	3418401a <HAL_DCMIPP_CSI_LineErrorCallback>
    }
  }

  /* Lane 1 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
34183e32:	697b      	ldr	r3, [r7, #20]
34183e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34183e38:	2b00      	cmp	r3, #0
34183e3a:	d01e      	beq.n	34183e7a <HAL_DCMIPP_CSI_IRQHandler+0x80a>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
34183e3c:	68fb      	ldr	r3, [r7, #12]
34183e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34183e42:	2b00      	cmp	r3, #0
34183e44:	d019      	beq.n	34183e7a <HAL_DCMIPP_CSI_IRQHandler+0x80a>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34183e46:	69fb      	ldr	r3, [r7, #28]
34183e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183e4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34183e50:	69fb      	ldr	r3, [r7, #28]
34183e52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
34183e56:	69fb      	ldr	r3, [r7, #28]
34183e58:	f44f 7280 	mov.w	r2, #256	@ 0x100
34183e5c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34183e60:	687b      	ldr	r3, [r7, #4]
34183e62:	689b      	ldr	r3, [r3, #8]
34183e64:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
34183e68:	687b      	ldr	r3, [r7, #4]
34183e6a:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34183e6c:	687b      	ldr	r3, [r7, #4]
34183e6e:	2204      	movs	r2, #4
34183e70:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34183e72:	2102      	movs	r1, #2
34183e74:	6878      	ldr	r0, [r7, #4]
34183e76:	f000 f8d0 	bl	3418401a <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
34183e7a:	697b      	ldr	r3, [r7, #20]
34183e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34183e80:	2b00      	cmp	r3, #0
34183e82:	d01e      	beq.n	34183ec2 <HAL_DCMIPP_CSI_IRQHandler+0x852>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
34183e84:	68fb      	ldr	r3, [r7, #12]
34183e86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34183e8a:	2b00      	cmp	r3, #0
34183e8c:	d019      	beq.n	34183ec2 <HAL_DCMIPP_CSI_IRQHandler+0x852>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34183e8e:	69fb      	ldr	r3, [r7, #28]
34183e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183e94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34183e98:	69fb      	ldr	r3, [r7, #28]
34183e9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34183e9e:	69fb      	ldr	r3, [r7, #28]
34183ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
34183ea4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34183ea8:	687b      	ldr	r3, [r7, #4]
34183eaa:	689b      	ldr	r3, [r3, #8]
34183eac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
34183eb0:	687b      	ldr	r3, [r7, #4]
34183eb2:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34183eb4:	687b      	ldr	r3, [r7, #4]
34183eb6:	2204      	movs	r2, #4
34183eb8:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34183eba:	2102      	movs	r1, #2
34183ebc:	6878      	ldr	r0, [r7, #4]
34183ebe:	f000 f8ac 	bl	3418401a <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34183ec2:	697b      	ldr	r3, [r7, #20]
34183ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34183ec8:	2b00      	cmp	r3, #0
34183eca:	d01b      	beq.n	34183f04 <HAL_DCMIPP_CSI_IRQHandler+0x894>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34183ecc:	68fb      	ldr	r3, [r7, #12]
34183ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34183ed2:	2b00      	cmp	r3, #0
34183ed4:	d016      	beq.n	34183f04 <HAL_DCMIPP_CSI_IRQHandler+0x894>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34183ed6:	69fb      	ldr	r3, [r7, #28]
34183ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183edc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34183ee0:	69fb      	ldr	r3, [r7, #28]
34183ee2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
34183ee6:	69fb      	ldr	r3, [r7, #28]
34183ee8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34183eec:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34183ef0:	687b      	ldr	r3, [r7, #4]
34183ef2:	689b      	ldr	r3, [r3, #8]
34183ef4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
34183ef8:	687b      	ldr	r3, [r7, #4]
34183efa:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34183efc:	2102      	movs	r1, #2
34183efe:	6878      	ldr	r0, [r7, #4]
34183f00:	f000 f88b 	bl	3418401a <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
34183f04:	697b      	ldr	r3, [r7, #20]
34183f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34183f0a:	2b00      	cmp	r3, #0
34183f0c:	d01b      	beq.n	34183f46 <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34183f0e:	68fb      	ldr	r3, [r7, #12]
34183f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34183f14:	2b00      	cmp	r3, #0
34183f16:	d016      	beq.n	34183f46 <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34183f18:	69fb      	ldr	r3, [r7, #28]
34183f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183f1e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
34183f22:	69fb      	ldr	r3, [r7, #28]
34183f24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
34183f28:	69fb      	ldr	r3, [r7, #28]
34183f2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34183f2e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34183f32:	687b      	ldr	r3, [r7, #4]
34183f34:	689b      	ldr	r3, [r3, #8]
34183f36:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
34183f3a:	687b      	ldr	r3, [r7, #4]
34183f3c:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34183f3e:	2102      	movs	r1, #2
34183f40:	6878      	ldr	r0, [r7, #4]
34183f42:	f000 f86a 	bl	3418401a <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34183f46:	697b      	ldr	r3, [r7, #20]
34183f48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34183f4c:	2b00      	cmp	r3, #0
34183f4e:	d01b      	beq.n	34183f88 <HAL_DCMIPP_CSI_IRQHandler+0x918>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34183f50:	68fb      	ldr	r3, [r7, #12]
34183f52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34183f56:	2b00      	cmp	r3, #0
34183f58:	d016      	beq.n	34183f88 <HAL_DCMIPP_CSI_IRQHandler+0x918>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34183f5a:	69fb      	ldr	r3, [r7, #28]
34183f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183f60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
34183f64:	69fb      	ldr	r3, [r7, #28]
34183f66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34183f6a:	69fb      	ldr	r3, [r7, #28]
34183f6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34183f70:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34183f74:	687b      	ldr	r3, [r7, #4]
34183f76:	689b      	ldr	r3, [r3, #8]
34183f78:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
34183f7c:	687b      	ldr	r3, [r7, #4]
34183f7e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34183f80:	2102      	movs	r1, #2
34183f82:	6878      	ldr	r0, [r7, #4]
34183f84:	f000 f849 	bl	3418401a <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
34183f88:	69bb      	ldr	r3, [r7, #24]
34183f8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34183f8e:	2b00      	cmp	r3, #0
34183f90:	d014      	beq.n	34183fbc <HAL_DCMIPP_CSI_IRQHandler+0x94c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
34183f92:	693b      	ldr	r3, [r7, #16]
34183f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34183f98:	2b00      	cmp	r3, #0
34183f9a:	d00f      	beq.n	34183fbc <HAL_DCMIPP_CSI_IRQHandler+0x94c>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
34183f9c:	69fb      	ldr	r3, [r7, #28]
34183f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183fa2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
34183fa6:	69fb      	ldr	r3, [r7, #28]
34183fa8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
34183fac:	69fb      	ldr	r3, [r7, #28]
34183fae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34183fb2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ShortPacketDetectionEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
34183fb6:	6878      	ldr	r0, [r7, #4]
34183fb8:	f000 f844 	bl	34184044 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
34183fbc:	bf00      	nop
34183fbe:	3720      	adds	r7, #32
34183fc0:	46bd      	mov	sp, r7
34183fc2:	bd80      	pop	{r7, pc}

34183fc4 <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34183fc4:	b480      	push	{r7}
34183fc6:	b083      	sub	sp, #12
34183fc8:	af00      	add	r7, sp, #0
34183fca:	6078      	str	r0, [r7, #4]
34183fcc:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LineEventMainPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34183fce:	bf00      	nop
34183fd0:	370c      	adds	r7, #12
34183fd2:	46bd      	mov	sp, r7
34183fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
34183fd8:	4770      	bx	lr

34183fda <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34183fda:	b480      	push	{r7}
34183fdc:	b083      	sub	sp, #12
34183fde:	af00      	add	r7, sp, #0
34183fe0:	6078      	str	r0, [r7, #4]
34183fe2:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LimitEventDumpPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34183fe4:	bf00      	nop
34183fe6:	370c      	adds	r7, #12
34183fe8:	46bd      	mov	sp, r7
34183fea:	f85d 7b04 	ldr.w	r7, [sp], #4
34183fee:	4770      	bx	lr

34183ff0 <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34183ff0:	b480      	push	{r7}
34183ff2:	b083      	sub	sp, #12
34183ff4:	af00      	add	r7, sp, #0
34183ff6:	6078      	str	r0, [r7, #4]
34183ff8:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_SyncErrorEventCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34183ffa:	bf00      	nop
34183ffc:	370c      	adds	r7, #12
34183ffe:	46bd      	mov	sp, r7
34184000:	f85d 7b04 	ldr.w	r7, [sp], #4
34184004:	4770      	bx	lr

34184006 <HAL_DCMIPP_ErrorCallback>:
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34184006:	b480      	push	{r7}
34184008:	b083      	sub	sp, #12
3418400a:	af00      	add	r7, sp, #0
3418400c:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_ErrorCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmipp);
}
3418400e:	bf00      	nop
34184010:	370c      	adds	r7, #12
34184012:	46bd      	mov	sp, r7
34184014:	f85d 7b04 	ldr.w	r7, [sp], #4
34184018:	4770      	bx	lr

3418401a <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
{
3418401a:	b480      	push	{r7}
3418401c:	b083      	sub	sp, #12
3418401e:	af00      	add	r7, sp, #0
34184020:	6078      	str	r0, [r7, #4]
34184022:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_LineErrorCallback could be implemented in the user file
   */
  UNUSED(DataLane);
  UNUSED(hdcmipp);
}
34184024:	bf00      	nop
34184026:	370c      	adds	r7, #12
34184028:	46bd      	mov	sp, r7
3418402a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418402e:	4770      	bx	lr

34184030 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34184030:	b480      	push	{r7}
34184032:	b083      	sub	sp, #12
34184034:	af00      	add	r7, sp, #0
34184036:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
34184038:	bf00      	nop
3418403a:	370c      	adds	r7, #12
3418403c:	46bd      	mov	sp, r7
3418403e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184042:	4770      	bx	lr

34184044 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34184044:	b480      	push	{r7}
34184046:	b083      	sub	sp, #12
34184048:	af00      	add	r7, sp, #0
3418404a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
3418404c:	bf00      	nop
3418404e:	370c      	adds	r7, #12
34184050:	46bd      	mov	sp, r7
34184052:	f85d 7b04 	ldr.w	r7, [sp], #4
34184056:	4770      	bx	lr

34184058 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
34184058:	b480      	push	{r7}
3418405a:	b083      	sub	sp, #12
3418405c:	af00      	add	r7, sp, #0
3418405e:	6078      	str	r0, [r7, #4]
34184060:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_EndOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
34184062:	bf00      	nop
34184064:	370c      	adds	r7, #12
34184066:	46bd      	mov	sp, r7
34184068:	f85d 7b04 	ldr.w	r7, [sp], #4
3418406c:	4770      	bx	lr

3418406e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
3418406e:	b480      	push	{r7}
34184070:	b083      	sub	sp, #12
34184072:	af00      	add	r7, sp, #0
34184074:	6078      	str	r0, [r7, #4]
34184076:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_StartOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
34184078:	bf00      	nop
3418407a:	370c      	adds	r7, #12
3418407c:	46bd      	mov	sp, r7
3418407e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184082:	4770      	bx	lr

34184084 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
{
34184084:	b480      	push	{r7}
34184086:	b083      	sub	sp, #12
34184088:	af00      	add	r7, sp, #0
3418408a:	6078      	str	r0, [r7, #4]
3418408c:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_TimerCounterEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(Timer);
}
3418408e:	bf00      	nop
34184090:	370c      	adds	r7, #12
34184092:	46bd      	mov	sp, r7
34184094:	f85d 7b04 	ldr.w	r7, [sp], #4
34184098:	4770      	bx	lr

3418409a <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
{
3418409a:	b480      	push	{r7}
3418409c:	b083      	sub	sp, #12
3418409e:	af00      	add	r7, sp, #0
341840a0:	6078      	str	r0, [r7, #4]
341840a2:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
          the HAL_DCMIPP_CSI_LineByteEventCallback could be implemented in the user file
  */
  UNUSED(hdcmipp);
  UNUSED(Counter);
}
341840a4:	bf00      	nop
341840a6:	370c      	adds	r7, #12
341840a8:	46bd      	mov	sp, r7
341840aa:	f85d 7b04 	ldr.w	r7, [sp], #4
341840ae:	4770      	bx	lr

341840b0 <HAL_DCMIPP_PIPE_SetISPDecimationConfig>:
  * @param  pDecConfig pointer to DCMIPP_DecimationConfTypeDef structure that contains the decimation information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPDecimationConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                         const DCMIPP_DecimationConfTypeDef *pDecConfig)
{
341840b0:	b480      	push	{r7}
341840b2:	b085      	sub	sp, #20
341840b4:	af00      	add	r7, sp, #0
341840b6:	60f8      	str	r0, [r7, #12]
341840b8:	60b9      	str	r1, [r7, #8]
341840ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_VRATIO(pDecConfig->VRatio));
  assert_param(IS_DCMIPP_HRATIO(pDecConfig->HRatio));

  /* Check handle validity */
  if ((hdcmipp == NULL) || (pDecConfig == NULL))
341840bc:	68fb      	ldr	r3, [r7, #12]
341840be:	2b00      	cmp	r3, #0
341840c0:	d002      	beq.n	341840c8 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x18>
341840c2:	687b      	ldr	r3, [r7, #4]
341840c4:	2b00      	cmp	r3, #0
341840c6:	d101      	bne.n	341840cc <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x1c>
  {
    return HAL_ERROR;
341840c8:	2301      	movs	r3, #1
341840ca:	e01c      	b.n	34184106 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x56>
  }

  /* Set Decimation Type , Vertical and Horizontal Ratio */
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
341840cc:	68fb      	ldr	r3, [r7, #12]
341840ce:	791b      	ldrb	r3, [r3, #4]
341840d0:	b2db      	uxtb	r3, r3
341840d2:	2b02      	cmp	r3, #2
341840d4:	d116      	bne.n	34184104 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x54>
  {
    if (Pipe == DCMIPP_PIPE1)
341840d6:	68bb      	ldr	r3, [r7, #8]
341840d8:	2b01      	cmp	r3, #1
341840da:	d111      	bne.n	34184100 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x50>
    {
      MODIFY_REG(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_VDEC | DCMIPP_P1DECR_HDEC,
341840dc:	68fb      	ldr	r3, [r7, #12]
341840de:	681b      	ldr	r3, [r3, #0]
341840e0:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
341840e4:	f023 011e 	bic.w	r1, r3, #30
341840e8:	687b      	ldr	r3, [r7, #4]
341840ea:	681a      	ldr	r2, [r3, #0]
341840ec:	687b      	ldr	r3, [r7, #4]
341840ee:	685b      	ldr	r3, [r3, #4]
341840f0:	431a      	orrs	r2, r3
341840f2:	68fb      	ldr	r3, [r7, #12]
341840f4:	681b      	ldr	r3, [r3, #0]
341840f6:	430a      	orrs	r2, r1
341840f8:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  {
    return HAL_ERROR;
  }


  return HAL_OK;
341840fc:	2300      	movs	r3, #0
341840fe:	e002      	b.n	34184106 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x56>
      return HAL_ERROR;
34184100:	2301      	movs	r3, #1
34184102:	e000      	b.n	34184106 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x56>
    return HAL_ERROR;
34184104:	2301      	movs	r3, #1
}
34184106:	4618      	mov	r0, r3
34184108:	3714      	adds	r7, #20
3418410a:	46bd      	mov	sp, r7
3418410c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184110:	4770      	bx	lr

34184112 <HAL_DCMIPP_PIPE_EnableISPDecimation>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPDecimation(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184112:	b480      	push	{r7}
34184114:	b083      	sub	sp, #12
34184116:	af00      	add	r7, sp, #0
34184118:	6078      	str	r0, [r7, #4]
3418411a:	6039      	str	r1, [r7, #0]
  assert_param(IS_DCMIPP_PIPE(Pipe));

  /* Check handle validity */
  if (hdcmipp == NULL)
3418411c:	687b      	ldr	r3, [r7, #4]
3418411e:	2b00      	cmp	r3, #0
34184120:	d101      	bne.n	34184126 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x14>
  {
    return HAL_ERROR;
34184122:	2301      	movs	r3, #1
34184124:	e00f      	b.n	34184146 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x34>
  }

  /* Enable decimation */
  if (Pipe == DCMIPP_PIPE1)
34184126:	683b      	ldr	r3, [r7, #0]
34184128:	2b01      	cmp	r3, #1
3418412a:	d10b      	bne.n	34184144 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_ENABLE);
3418412c:	687b      	ldr	r3, [r7, #4]
3418412e:	681b      	ldr	r3, [r3, #0]
34184130:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
34184134:	687b      	ldr	r3, [r7, #4]
34184136:	681b      	ldr	r3, [r3, #0]
34184138:	f042 0201 	orr.w	r2, r2, #1
3418413c:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184140:	2300      	movs	r3, #0
34184142:	e000      	b.n	34184146 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x34>
    return HAL_ERROR;
34184144:	2301      	movs	r3, #1
}
34184146:	4618      	mov	r0, r3
34184148:	370c      	adds	r7, #12
3418414a:	46bd      	mov	sp, r7
3418414c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184150:	4770      	bx	lr

34184152 <HAL_DCMIPP_PIPE_SetDownsizeConfig>:
  * @param  pDownsizeConfig pointer to the DCMIPP_DownsizeTypeDef structure that contains Downsize information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetDownsizeConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                    const DCMIPP_DownsizeTypeDef *pDownsizeConfig)
{
34184152:	b480      	push	{r7}
34184154:	b085      	sub	sp, #20
34184156:	af00      	add	r7, sp, #0
34184158:	60f8      	str	r0, [r7, #12]
3418415a:	60b9      	str	r1, [r7, #8]
3418415c:	607a      	str	r2, [r7, #4]
  /* Check handle validity */
  if ((hdcmipp == NULL) || (pDownsizeConfig == NULL))
3418415e:	68fb      	ldr	r3, [r7, #12]
34184160:	2b00      	cmp	r3, #0
34184162:	d002      	beq.n	3418416a <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x18>
34184164:	687b      	ldr	r3, [r7, #4]
34184166:	2b00      	cmp	r3, #0
34184168:	d101      	bne.n	3418416e <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x1c>
  {
    return HAL_ERROR;
3418416a:	2301      	movs	r3, #1
3418416c:	e069      	b.n	34184242 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xf0>
  assert_param(IS_DCMIPP_DOWSIZE_RATIO(pDownsizeConfig->HRatio));
  assert_param(IS_DCMIPP_DOWSIZE_RATIO(pDownsizeConfig->VRatio));
  assert_param(IS_DCMIPP_DOWSIZE_SIZE(pDownsizeConfig->HSize));
  assert_param(IS_DCMIPP_DOWSIZE_SIZE(pDownsizeConfig->VSize));

  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
3418416e:	68fb      	ldr	r3, [r7, #12]
34184170:	791b      	ldrb	r3, [r3, #4]
34184172:	b2db      	uxtb	r3, r3
34184174:	2b02      	cmp	r3, #2
34184176:	d161      	bne.n	3418423c <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xea>
  {
    if (Pipe == DCMIPP_PIPE1)
34184178:	68bb      	ldr	r3, [r7, #8]
3418417a:	2b01      	cmp	r3, #1
3418417c:	d12c      	bne.n	341841d8 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x86>
    {
      /* Set Vertical and Horizontal division */
      MODIFY_REG(hdcmipp->Instance->P1DSCR, (DCMIPP_P1DSCR_HDIV | DCMIPP_P1DSCR_VDIV),
3418417e:	68fb      	ldr	r3, [r7, #12]
34184180:	681b      	ldr	r3, [r3, #0]
34184182:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
34184186:	f003 21fc 	and.w	r1, r3, #4227922944	@ 0xfc00fc00
3418418a:	687b      	ldr	r3, [r7, #4]
3418418c:	695a      	ldr	r2, [r3, #20]
3418418e:	687b      	ldr	r3, [r7, #4]
34184190:	691b      	ldr	r3, [r3, #16]
34184192:	041b      	lsls	r3, r3, #16
34184194:	431a      	orrs	r2, r3
34184196:	68fb      	ldr	r3, [r7, #12]
34184198:	681b      	ldr	r3, [r3, #0]
3418419a:	430a      	orrs	r2, r1
3418419c:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
                 ((pDownsizeConfig->HDivFactor << DCMIPP_P1DSCR_HDIV_Pos) | \
                  (pDownsizeConfig->VDivFactor << DCMIPP_P1DSCR_VDIV_Pos)));

      /* Set Vertical and Horizontal Ratio */
      WRITE_REG(hdcmipp->Instance->P1DSRTIOR, (pDownsizeConfig->HRatio << DCMIPP_P1DSRTIOR_HRATIO_Pos) | \
341841a0:	687b      	ldr	r3, [r7, #4]
341841a2:	68d9      	ldr	r1, [r3, #12]
341841a4:	687b      	ldr	r3, [r7, #4]
341841a6:	689b      	ldr	r3, [r3, #8]
341841a8:	041a      	lsls	r2, r3, #16
341841aa:	68fb      	ldr	r3, [r7, #12]
341841ac:	681b      	ldr	r3, [r3, #0]
341841ae:	430a      	orrs	r2, r1
341841b0:	f8c3 2914 	str.w	r2, [r3, #2324]	@ 0x914
                (pDownsizeConfig->VRatio << DCMIPP_P1DSRTIOR_VRATIO_Pos));

      /* Set Downsize Destination size */
      MODIFY_REG(hdcmipp->Instance->P1DSSZR, DCMIPP_P1DSSZR_HSIZE | DCMIPP_P1DSSZR_VSIZE,
341841b4:	68fb      	ldr	r3, [r7, #12]
341841b6:	681b      	ldr	r3, [r3, #0]
341841b8:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
341841bc:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
341841c0:	687b      	ldr	r3, [r7, #4]
341841c2:	685a      	ldr	r2, [r3, #4]
341841c4:	687b      	ldr	r3, [r7, #4]
341841c6:	681b      	ldr	r3, [r3, #0]
341841c8:	041b      	lsls	r3, r3, #16
341841ca:	431a      	orrs	r2, r3
341841cc:	68fb      	ldr	r3, [r7, #12]
341841ce:	681b      	ldr	r3, [r3, #0]
341841d0:	430a      	orrs	r2, r1
341841d2:	f8c3 2918 	str.w	r2, [r3, #2328]	@ 0x918
341841d6:	e033      	b.n	34184240 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xee>
                 (pDownsizeConfig->HSize << DCMIPP_P1DSSZR_HSIZE_Pos) | \
                 (pDownsizeConfig->VSize << DCMIPP_P1DSSZR_VSIZE_Pos));
    }
    else if (Pipe == DCMIPP_PIPE2)
341841d8:	68bb      	ldr	r3, [r7, #8]
341841da:	2b02      	cmp	r3, #2
341841dc:	d12c      	bne.n	34184238 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xe6>
    {
      /* Set Vertical and Horizontal division */
      MODIFY_REG(hdcmipp->Instance->P2DSCR, DCMIPP_P2DSCR_HDIV | DCMIPP_P2DSCR_VDIV,
341841de:	68fb      	ldr	r3, [r7, #12]
341841e0:	681b      	ldr	r3, [r3, #0]
341841e2:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	@ 0xd10
341841e6:	f003 21fc 	and.w	r1, r3, #4227922944	@ 0xfc00fc00
341841ea:	687b      	ldr	r3, [r7, #4]
341841ec:	695a      	ldr	r2, [r3, #20]
341841ee:	687b      	ldr	r3, [r7, #4]
341841f0:	691b      	ldr	r3, [r3, #16]
341841f2:	041b      	lsls	r3, r3, #16
341841f4:	431a      	orrs	r2, r3
341841f6:	68fb      	ldr	r3, [r7, #12]
341841f8:	681b      	ldr	r3, [r3, #0]
341841fa:	430a      	orrs	r2, r1
341841fc:	f8c3 2d10 	str.w	r2, [r3, #3344]	@ 0xd10
                 (pDownsizeConfig->HDivFactor << DCMIPP_P2DSCR_HDIV_Pos) | \
                 (pDownsizeConfig->VDivFactor << DCMIPP_P2DSCR_VDIV_Pos));

      /* Set Vertical and Horizontal Ratio */
      WRITE_REG(hdcmipp->Instance->P2DSRTIOR, (pDownsizeConfig->HRatio << DCMIPP_P2DSRTIOR_HRATIO_Pos) | \
34184200:	687b      	ldr	r3, [r7, #4]
34184202:	68d9      	ldr	r1, [r3, #12]
34184204:	687b      	ldr	r3, [r7, #4]
34184206:	689b      	ldr	r3, [r3, #8]
34184208:	041a      	lsls	r2, r3, #16
3418420a:	68fb      	ldr	r3, [r7, #12]
3418420c:	681b      	ldr	r3, [r3, #0]
3418420e:	430a      	orrs	r2, r1
34184210:	f8c3 2d14 	str.w	r2, [r3, #3348]	@ 0xd14
                (pDownsizeConfig->VRatio << DCMIPP_P2DSRTIOR_VRATIO_Pos));

      /* Set Downsize Destination size */
      MODIFY_REG(hdcmipp->Instance->P2DSSZR, DCMIPP_P2DSSZR_HSIZE | DCMIPP_P2DSSZR_VSIZE,
34184214:	68fb      	ldr	r3, [r7, #12]
34184216:	681b      	ldr	r3, [r3, #0]
34184218:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	@ 0xd18
3418421c:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
34184220:	687b      	ldr	r3, [r7, #4]
34184222:	685a      	ldr	r2, [r3, #4]
34184224:	687b      	ldr	r3, [r7, #4]
34184226:	681b      	ldr	r3, [r3, #0]
34184228:	041b      	lsls	r3, r3, #16
3418422a:	431a      	orrs	r2, r3
3418422c:	68fb      	ldr	r3, [r7, #12]
3418422e:	681b      	ldr	r3, [r3, #0]
34184230:	430a      	orrs	r2, r1
34184232:	f8c3 2d18 	str.w	r2, [r3, #3352]	@ 0xd18
34184236:	e003      	b.n	34184240 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xee>
                 (pDownsizeConfig->HSize << DCMIPP_P2DSSZR_HSIZE_Pos) | \
                 (pDownsizeConfig->VSize << DCMIPP_P2DSSZR_VSIZE_Pos));
    }
    else
    {
      return HAL_ERROR;
34184238:	2301      	movs	r3, #1
3418423a:	e002      	b.n	34184242 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xf0>
    }
  }
  else
  {
    return HAL_ERROR;
3418423c:	2301      	movs	r3, #1
3418423e:	e000      	b.n	34184242 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xf0>
  }

  return HAL_OK;
34184240:	2300      	movs	r3, #0
}
34184242:	4618      	mov	r0, r3
34184244:	3714      	adds	r7, #20
34184246:	46bd      	mov	sp, r7
34184248:	f85d 7b04 	ldr.w	r7, [sp], #4
3418424c:	4770      	bx	lr

3418424e <HAL_DCMIPP_PIPE_EnableDownsize>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableDownsize(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3418424e:	b480      	push	{r7}
34184250:	b083      	sub	sp, #12
34184252:	af00      	add	r7, sp, #0
34184254:	6078      	str	r0, [r7, #4]
34184256:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34184258:	687b      	ldr	r3, [r7, #4]
3418425a:	2b00      	cmp	r3, #0
3418425c:	d101      	bne.n	34184262 <HAL_DCMIPP_PIPE_EnableDownsize+0x14>
  {
    return HAL_ERROR;
3418425e:	2301      	movs	r3, #1
34184260:	e01e      	b.n	341842a0 <HAL_DCMIPP_PIPE_EnableDownsize+0x52>
  }

  /* Check Parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184262:	683b      	ldr	r3, [r7, #0]
34184264:	2b01      	cmp	r3, #1
34184266:	d10a      	bne.n	3418427e <HAL_DCMIPP_PIPE_EnableDownsize+0x30>
  {
    SET_BIT(hdcmipp->Instance->P1DSCR, DCMIPP_P1DSCR_ENABLE);
34184268:	687b      	ldr	r3, [r7, #4]
3418426a:	681b      	ldr	r3, [r3, #0]
3418426c:	f8d3 2910 	ldr.w	r2, [r3, #2320]	@ 0x910
34184270:	687b      	ldr	r3, [r7, #4]
34184272:	681b      	ldr	r3, [r3, #0]
34184274:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34184278:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
3418427c:	e00f      	b.n	3418429e <HAL_DCMIPP_PIPE_EnableDownsize+0x50>
  }
  else if (Pipe == DCMIPP_PIPE2)
3418427e:	683b      	ldr	r3, [r7, #0]
34184280:	2b02      	cmp	r3, #2
34184282:	d10a      	bne.n	3418429a <HAL_DCMIPP_PIPE_EnableDownsize+0x4c>
  {
    SET_BIT(hdcmipp->Instance->P2DSCR, DCMIPP_P2DSCR_ENABLE);
34184284:	687b      	ldr	r3, [r7, #4]
34184286:	681b      	ldr	r3, [r3, #0]
34184288:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	@ 0xd10
3418428c:	687b      	ldr	r3, [r7, #4]
3418428e:	681b      	ldr	r3, [r3, #0]
34184290:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34184294:	f8c3 2d10 	str.w	r2, [r3, #3344]	@ 0xd10
34184298:	e001      	b.n	3418429e <HAL_DCMIPP_PIPE_EnableDownsize+0x50>
  }
  else
  {
    return HAL_ERROR;
3418429a:	2301      	movs	r3, #1
3418429c:	e000      	b.n	341842a0 <HAL_DCMIPP_PIPE_EnableDownsize+0x52>
  }

  return HAL_OK;
3418429e:	2300      	movs	r3, #0
}
341842a0:	4618      	mov	r0, r3
341842a2:	370c      	adds	r7, #12
341842a4:	46bd      	mov	sp, r7
341842a6:	f85d 7b04 	ldr.w	r7, [sp], #4
341842aa:	4770      	bx	lr

341842ac <HAL_DCMIPP_PIPE_EnableGammaConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableGammaConversion(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341842ac:	b480      	push	{r7}
341842ae:	b083      	sub	sp, #12
341842b0:	af00      	add	r7, sp, #0
341842b2:	6078      	str	r0, [r7, #4]
341842b4:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
341842b6:	687b      	ldr	r3, [r7, #4]
341842b8:	2b00      	cmp	r3, #0
341842ba:	d101      	bne.n	341842c0 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x14>
  {
    return HAL_ERROR;
341842bc:	2301      	movs	r3, #1
341842be:	e01e      	b.n	341842fe <HAL_DCMIPP_PIPE_EnableGammaConversion+0x52>
  }

  /* Check Parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
341842c0:	683b      	ldr	r3, [r7, #0]
341842c2:	2b01      	cmp	r3, #1
341842c4:	d10a      	bne.n	341842dc <HAL_DCMIPP_PIPE_EnableGammaConversion+0x30>
  {
    SET_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE);
341842c6:	687b      	ldr	r3, [r7, #4]
341842c8:	681b      	ldr	r3, [r3, #0]
341842ca:	f8d3 2970 	ldr.w	r2, [r3, #2416]	@ 0x970
341842ce:	687b      	ldr	r3, [r7, #4]
341842d0:	681b      	ldr	r3, [r3, #0]
341842d2:	f042 0201 	orr.w	r2, r2, #1
341842d6:	f8c3 2970 	str.w	r2, [r3, #2416]	@ 0x970
341842da:	e00f      	b.n	341842fc <HAL_DCMIPP_PIPE_EnableGammaConversion+0x50>
  }
  else if (Pipe == DCMIPP_PIPE2)
341842dc:	683b      	ldr	r3, [r7, #0]
341842de:	2b02      	cmp	r3, #2
341842e0:	d10a      	bne.n	341842f8 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x4c>
  {
    SET_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE);
341842e2:	687b      	ldr	r3, [r7, #4]
341842e4:	681b      	ldr	r3, [r3, #0]
341842e6:	f8d3 2d70 	ldr.w	r2, [r3, #3440]	@ 0xd70
341842ea:	687b      	ldr	r3, [r7, #4]
341842ec:	681b      	ldr	r3, [r3, #0]
341842ee:	f042 0201 	orr.w	r2, r2, #1
341842f2:	f8c3 2d70 	str.w	r2, [r3, #3440]	@ 0xd70
341842f6:	e001      	b.n	341842fc <HAL_DCMIPP_PIPE_EnableGammaConversion+0x50>
  }
  else
  {
    return HAL_ERROR;
341842f8:	2301      	movs	r3, #1
341842fa:	e000      	b.n	341842fe <HAL_DCMIPP_PIPE_EnableGammaConversion+0x52>
  }

  return HAL_OK;
341842fc:	2300      	movs	r3, #0
}
341842fe:	4618      	mov	r0, r3
34184300:	370c      	adds	r7, #12
34184302:	46bd      	mov	sp, r7
34184304:	f85d 7b04 	ldr.w	r7, [sp], #4
34184308:	4770      	bx	lr

3418430a <HAL_DCMIPP_PIPE_DisableGammaConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableGammaConversion(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3418430a:	b480      	push	{r7}
3418430c:	b083      	sub	sp, #12
3418430e:	af00      	add	r7, sp, #0
34184310:	6078      	str	r0, [r7, #4]
34184312:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34184314:	687b      	ldr	r3, [r7, #4]
34184316:	2b00      	cmp	r3, #0
34184318:	d101      	bne.n	3418431e <HAL_DCMIPP_PIPE_DisableGammaConversion+0x14>
  {
    return HAL_ERROR;
3418431a:	2301      	movs	r3, #1
3418431c:	e01e      	b.n	3418435c <HAL_DCMIPP_PIPE_DisableGammaConversion+0x52>
  }

  /* Check Parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
3418431e:	683b      	ldr	r3, [r7, #0]
34184320:	2b01      	cmp	r3, #1
34184322:	d10a      	bne.n	3418433a <HAL_DCMIPP_PIPE_DisableGammaConversion+0x30>
  {
    CLEAR_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE);
34184324:	687b      	ldr	r3, [r7, #4]
34184326:	681b      	ldr	r3, [r3, #0]
34184328:	f8d3 2970 	ldr.w	r2, [r3, #2416]	@ 0x970
3418432c:	687b      	ldr	r3, [r7, #4]
3418432e:	681b      	ldr	r3, [r3, #0]
34184330:	f022 0201 	bic.w	r2, r2, #1
34184334:	f8c3 2970 	str.w	r2, [r3, #2416]	@ 0x970
34184338:	e00f      	b.n	3418435a <HAL_DCMIPP_PIPE_DisableGammaConversion+0x50>
  }
  else if (Pipe == DCMIPP_PIPE2)
3418433a:	683b      	ldr	r3, [r7, #0]
3418433c:	2b02      	cmp	r3, #2
3418433e:	d10a      	bne.n	34184356 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x4c>
  {
    CLEAR_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE);
34184340:	687b      	ldr	r3, [r7, #4]
34184342:	681b      	ldr	r3, [r3, #0]
34184344:	f8d3 2d70 	ldr.w	r2, [r3, #3440]	@ 0xd70
34184348:	687b      	ldr	r3, [r7, #4]
3418434a:	681b      	ldr	r3, [r3, #0]
3418434c:	f022 0201 	bic.w	r2, r2, #1
34184350:	f8c3 2d70 	str.w	r2, [r3, #3440]	@ 0xd70
34184354:	e001      	b.n	3418435a <HAL_DCMIPP_PIPE_DisableGammaConversion+0x50>
  }
  else
  {
    return HAL_ERROR;
34184356:	2301      	movs	r3, #1
34184358:	e000      	b.n	3418435c <HAL_DCMIPP_PIPE_DisableGammaConversion+0x52>
  }

  return HAL_OK;
3418435a:	2300      	movs	r3, #0
}
3418435c:	4618      	mov	r0, r3
3418435e:	370c      	adds	r7, #12
34184360:	46bd      	mov	sp, r7
34184362:	f85d 7b04 	ldr.w	r7, [sp], #4
34184366:	4770      	bx	lr

34184368 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledGammaConversion(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184368:	b480      	push	{r7}
3418436a:	b083      	sub	sp, #12
3418436c:	af00      	add	r7, sp, #0
3418436e:	6078      	str	r0, [r7, #4]
34184370:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184372:	683b      	ldr	r3, [r7, #0]
34184374:	2b01      	cmp	r3, #1
34184376:	d10b      	bne.n	34184390 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x28>
  {
    return ((READ_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE) == DCMIPP_P1GMCR_ENABLE) ? 1U : 0U);
34184378:	687b      	ldr	r3, [r7, #4]
3418437a:	681b      	ldr	r3, [r3, #0]
3418437c:	f8d3 3970 	ldr.w	r3, [r3, #2416]	@ 0x970
34184380:	f003 0301 	and.w	r3, r3, #1
34184384:	2b01      	cmp	r3, #1
34184386:	d101      	bne.n	3418438c <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x24>
34184388:	2301      	movs	r3, #1
3418438a:	e011      	b.n	341843b0 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x48>
3418438c:	2300      	movs	r3, #0
3418438e:	e00f      	b.n	341843b0 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x48>
  }
  else if (Pipe == DCMIPP_PIPE2)
34184390:	683b      	ldr	r3, [r7, #0]
34184392:	2b02      	cmp	r3, #2
34184394:	d10b      	bne.n	341843ae <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x46>
  {
    return ((READ_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE) == DCMIPP_P2GMCR_ENABLE) ? 1U : 0U);
34184396:	687b      	ldr	r3, [r7, #4]
34184398:	681b      	ldr	r3, [r3, #0]
3418439a:	f8d3 3d70 	ldr.w	r3, [r3, #3440]	@ 0xd70
3418439e:	f003 0301 	and.w	r3, r3, #1
341843a2:	2b01      	cmp	r3, #1
341843a4:	d101      	bne.n	341843aa <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x42>
341843a6:	2301      	movs	r3, #1
341843a8:	e002      	b.n	341843b0 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x48>
341843aa:	2300      	movs	r3, #0
341843ac:	e000      	b.n	341843b0 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x48>
  }
  else
  {
    /* State Disabled */
    return 0;
341843ae:	2300      	movs	r3, #0
  }
}
341843b0:	4618      	mov	r0, r3
341843b2:	370c      	adds	r7, #12
341843b4:	46bd      	mov	sp, r7
341843b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341843ba:	4770      	bx	lr

341843bc <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig>:
  *         information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                           const DCMIPP_RawBayer2RGBConfTypeDef *pRawBayer2RGBConfig)
{
341843bc:	b480      	push	{r7}
341843be:	b087      	sub	sp, #28
341843c0:	af00      	add	r7, sp, #0
341843c2:	60f8      	str	r0, [r7, #12]
341843c4:	60b9      	str	r1, [r7, #8]
341843c6:	607a      	str	r2, [r7, #4]
  uint32_t p1dmcr_reg;

  /* Check handles validity */
  if ((hdcmipp == NULL) || (pRawBayer2RGBConfig == NULL))
341843c8:	68fb      	ldr	r3, [r7, #12]
341843ca:	2b00      	cmp	r3, #0
341843cc:	d002      	beq.n	341843d4 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x18>
341843ce:	687b      	ldr	r3, [r7, #4]
341843d0:	2b00      	cmp	r3, #0
341843d2:	d101      	bne.n	341843d8 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1c>
  {
    return HAL_ERROR;
341843d4:	2301      	movs	r3, #1
341843d6:	e024      	b.n	34184422 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x66>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->PeakStrength));
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->VLineStrength));
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->HLineStrength));
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->EdgeStrength));

  if (Pipe == DCMIPP_PIPE1)
341843d8:	68bb      	ldr	r3, [r7, #8]
341843da:	2b01      	cmp	r3, #1
341843dc:	d120      	bne.n	34184420 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x64>
  {

    p1dmcr_reg = ((pRawBayer2RGBConfig->RawBayerType)                               | \
341843de:	687b      	ldr	r3, [r7, #4]
341843e0:	689a      	ldr	r2, [r3, #8]
                  (pRawBayer2RGBConfig->PeakStrength << DCMIPP_P1DMCR_PEAK_Pos)     | \
341843e2:	687b      	ldr	r3, [r7, #4]
341843e4:	68db      	ldr	r3, [r3, #12]
341843e6:	041b      	lsls	r3, r3, #16
    p1dmcr_reg = ((pRawBayer2RGBConfig->RawBayerType)                               | \
341843e8:	431a      	orrs	r2, r3
                  (pRawBayer2RGBConfig->EdgeStrength << DCMIPP_P1DMCR_EDGE_Pos)     | \
341843ea:	687b      	ldr	r3, [r7, #4]
341843ec:	691b      	ldr	r3, [r3, #16]
341843ee:	071b      	lsls	r3, r3, #28
                  (pRawBayer2RGBConfig->PeakStrength << DCMIPP_P1DMCR_PEAK_Pos)     | \
341843f0:	431a      	orrs	r2, r3
                  (pRawBayer2RGBConfig->VLineStrength << DCMIPP_P1DMCR_LINEV_Pos)   | \
341843f2:	687b      	ldr	r3, [r7, #4]
341843f4:	681b      	ldr	r3, [r3, #0]
341843f6:	051b      	lsls	r3, r3, #20
                  (pRawBayer2RGBConfig->EdgeStrength << DCMIPP_P1DMCR_EDGE_Pos)     | \
341843f8:	431a      	orrs	r2, r3
                  (pRawBayer2RGBConfig->HLineStrength << DCMIPP_P1DMCR_LINEH_Pos));
341843fa:	687b      	ldr	r3, [r7, #4]
341843fc:	685b      	ldr	r3, [r3, #4]
341843fe:	061b      	lsls	r3, r3, #24
    p1dmcr_reg = ((pRawBayer2RGBConfig->RawBayerType)                               | \
34184400:	4313      	orrs	r3, r2
34184402:	617b      	str	r3, [r7, #20]


    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
34184404:	68fb      	ldr	r3, [r7, #12]
34184406:	681b      	ldr	r3, [r3, #0]
34184408:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
3418440c:	4b08      	ldr	r3, [pc, #32]	@ (34184430 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x74>)
3418440e:	4013      	ands	r3, r2
34184410:	68fa      	ldr	r2, [r7, #12]
34184412:	6812      	ldr	r2, [r2, #0]
34184414:	6979      	ldr	r1, [r7, #20]
34184416:	430b      	orrs	r3, r1
34184418:	f8c2 3870 	str.w	r3, [r2, #2160]	@ 0x870
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
3418441c:	2300      	movs	r3, #0
3418441e:	e000      	b.n	34184422 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x66>
    return HAL_ERROR;
34184420:	2301      	movs	r3, #1
}
34184422:	4618      	mov	r0, r3
34184424:	371c      	adds	r7, #28
34184426:	46bd      	mov	sp, r7
34184428:	f85d 7b04 	ldr.w	r7, [sp], #4
3418442c:	4770      	bx	lr
3418442e:	bf00      	nop
34184430:	8888fff9 	.word	0x8888fff9

34184434 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184434:	b480      	push	{r7}
34184436:	b083      	sub	sp, #12
34184438:	af00      	add	r7, sp, #0
3418443a:	6078      	str	r0, [r7, #4]
3418443c:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
3418443e:	687b      	ldr	r3, [r7, #4]
34184440:	2b00      	cmp	r3, #0
34184442:	d101      	bne.n	34184448 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x14>
  {
    return HAL_ERROR;
34184444:	2301      	movs	r3, #1
34184446:	e00f      	b.n	34184468 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184448:	683b      	ldr	r3, [r7, #0]
3418444a:	2b01      	cmp	r3, #1
3418444c:	d10b      	bne.n	34184466 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
3418444e:	687b      	ldr	r3, [r7, #4]
34184450:	681b      	ldr	r3, [r3, #0]
34184452:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
34184456:	687b      	ldr	r3, [r7, #4]
34184458:	681b      	ldr	r3, [r3, #0]
3418445a:	f042 0201 	orr.w	r2, r2, #1
3418445e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184462:	2300      	movs	r3, #0
34184464:	e000      	b.n	34184468 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x34>
    return HAL_ERROR;
34184466:	2301      	movs	r3, #1
}
34184468:	4618      	mov	r0, r3
3418446a:	370c      	adds	r7, #12
3418446c:	46bd      	mov	sp, r7
3418446e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184472:	4770      	bx	lr

34184474 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184474:	b480      	push	{r7}
34184476:	b083      	sub	sp, #12
34184478:	af00      	add	r7, sp, #0
3418447a:	6078      	str	r0, [r7, #4]
3418447c:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
3418447e:	687b      	ldr	r3, [r7, #4]
34184480:	2b00      	cmp	r3, #0
34184482:	d101      	bne.n	34184488 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x14>
  {
    return HAL_ERROR;
34184484:	2301      	movs	r3, #1
34184486:	e00f      	b.n	341844a8 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184488:	683b      	ldr	r3, [r7, #0]
3418448a:	2b01      	cmp	r3, #1
3418448c:	d10b      	bne.n	341844a6 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
3418448e:	687b      	ldr	r3, [r7, #4]
34184490:	681b      	ldr	r3, [r3, #0]
34184492:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
34184496:	687b      	ldr	r3, [r7, #4]
34184498:	681b      	ldr	r3, [r3, #0]
3418449a:	f022 0201 	bic.w	r2, r2, #1
3418449e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341844a2:	2300      	movs	r3, #0
341844a4:	e000      	b.n	341844a8 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x34>
    return HAL_ERROR;
341844a6:	2301      	movs	r3, #1
}
341844a8:	4618      	mov	r0, r3
341844aa:	370c      	adds	r7, #12
341844ac:	46bd      	mov	sp, r7
341844ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341844b2:	4770      	bx	lr

341844b4 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig>:
  * @param  NbLastLines  number of valid image line to keep after the skipped first lines
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                               uint32_t NbFirstLines, uint32_t NbLastLines)
{
341844b4:	b480      	push	{r7}
341844b6:	b087      	sub	sp, #28
341844b8:	af00      	add	r7, sp, #0
341844ba:	60f8      	str	r0, [r7, #12]
341844bc:	60b9      	str	r1, [r7, #8]
341844be:	607a      	str	r2, [r7, #4]
341844c0:	603b      	str	r3, [r7, #0]
  uint32_t p1srcr_reg;

  /* Check handles validity */
  if (hdcmipp == NULL)
341844c2:	68fb      	ldr	r3, [r7, #12]
341844c4:	2b00      	cmp	r3, #0
341844c6:	d101      	bne.n	341844cc <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x18>
  {
    return HAL_ERROR;
341844c8:	2301      	movs	r3, #1
341844ca:	e018      	b.n	341844fe <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x4a>
  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_NB_FIRST_LINES(NbFirstLines));
  assert_param(IS_DCMIPP_NB_LAST_LINES(NbLastLines));

  if (Pipe == DCMIPP_PIPE1)
341844cc:	68bb      	ldr	r3, [r7, #8]
341844ce:	2b01      	cmp	r3, #1
341844d0:	d114      	bne.n	341844fc <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x48>
  {
    p1srcr_reg = ((NbFirstLines << DCMIPP_P1SRCR_FIRSTLINEDEL_Pos) | (NbLastLines << DCMIPP_P1SRCR_LASTLINE_Pos));
341844d2:	687b      	ldr	r3, [r7, #4]
341844d4:	031b      	lsls	r3, r3, #12
341844d6:	683a      	ldr	r2, [r7, #0]
341844d8:	4313      	orrs	r3, r2
341844da:	617b      	str	r3, [r7, #20]

    MODIFY_REG(hdcmipp->Instance->P1SRCR, (DCMIPP_P1SRCR_FIRSTLINEDEL | DCMIPP_P1SRCR_LASTLINE), p1srcr_reg);
341844dc:	68fb      	ldr	r3, [r7, #12]
341844de:	681b      	ldr	r3, [r3, #0]
341844e0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
341844e4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
341844e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
341844ec:	68fa      	ldr	r2, [r7, #12]
341844ee:	6812      	ldr	r2, [r2, #0]
341844f0:	6979      	ldr	r1, [r7, #20]
341844f2:	430b      	orrs	r3, r1
341844f4:	f8c2 3820 	str.w	r3, [r2, #2080]	@ 0x820
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341844f8:	2300      	movs	r3, #0
341844fa:	e000      	b.n	341844fe <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x4a>
    return HAL_ERROR;
341844fc:	2301      	movs	r3, #1
}
341844fe:	4618      	mov	r0, r3
34184500:	371c      	adds	r7, #28
34184502:	46bd      	mov	sp, r7
34184504:	f85d 7b04 	ldr.w	r7, [sp], #4
34184508:	4770      	bx	lr

3418450a <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPRemovalStatistic(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3418450a:	b480      	push	{r7}
3418450c:	b083      	sub	sp, #12
3418450e:	af00      	add	r7, sp, #0
34184510:	6078      	str	r0, [r7, #4]
34184512:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34184514:	687b      	ldr	r3, [r7, #4]
34184516:	2b00      	cmp	r3, #0
34184518:	d101      	bne.n	3418451e <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x14>
  {
    return HAL_ERROR;
3418451a:	2301      	movs	r3, #1
3418451c:	e00f      	b.n	3418453e <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x34>
  }

  if (Pipe == DCMIPP_PIPE1)
3418451e:	683b      	ldr	r3, [r7, #0]
34184520:	2b01      	cmp	r3, #1
34184522:	d10b      	bne.n	3418453c <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
34184524:	687b      	ldr	r3, [r7, #4]
34184526:	681b      	ldr	r3, [r3, #0]
34184528:	f8d3 2820 	ldr.w	r2, [r3, #2080]	@ 0x820
3418452c:	687b      	ldr	r3, [r7, #4]
3418452e:	681b      	ldr	r3, [r3, #0]
34184530:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34184534:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184538:	2300      	movs	r3, #0
3418453a:	e000      	b.n	3418453e <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x34>
    return HAL_ERROR;
3418453c:	2301      	movs	r3, #1
}
3418453e:	4618      	mov	r0, r3
34184540:	370c      	adds	r7, #12
34184542:	46bd      	mov	sp, r7
34184544:	f85d 7b04 	ldr.w	r7, [sp], #4
34184548:	4770      	bx	lr

3418454a <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPRemovalStatistic(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3418454a:	b480      	push	{r7}
3418454c:	b083      	sub	sp, #12
3418454e:	af00      	add	r7, sp, #0
34184550:	6078      	str	r0, [r7, #4]
34184552:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34184554:	687b      	ldr	r3, [r7, #4]
34184556:	2b00      	cmp	r3, #0
34184558:	d101      	bne.n	3418455e <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x14>
  {
    return HAL_ERROR;
3418455a:	2301      	movs	r3, #1
3418455c:	e00f      	b.n	3418457e <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x34>
  }

  if (Pipe == DCMIPP_PIPE1)
3418455e:	683b      	ldr	r3, [r7, #0]
34184560:	2b01      	cmp	r3, #1
34184562:	d10b      	bne.n	3418457c <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
34184564:	687b      	ldr	r3, [r7, #4]
34184566:	681b      	ldr	r3, [r3, #0]
34184568:	f8d3 2820 	ldr.w	r2, [r3, #2080]	@ 0x820
3418456c:	687b      	ldr	r3, [r7, #4]
3418456e:	681b      	ldr	r3, [r3, #0]
34184570:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34184574:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184578:	2300      	movs	r3, #0
3418457a:	e000      	b.n	3418457e <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x34>
    return HAL_ERROR;
3418457c:	2301      	movs	r3, #1
}
3418457e:	4618      	mov	r0, r3
34184580:	370c      	adds	r7, #12
34184582:	46bd      	mov	sp, r7
34184584:	f85d 7b04 	ldr.w	r7, [sp], #4
34184588:	4770      	bx	lr

3418458a <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig>:
  * @param  Strength Specifies the removal strength, can be a value from @ref DCMIPP_Bad_Pixel_Removal_Strength
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                              uint32_t Strength)
{
3418458a:	b480      	push	{r7}
3418458c:	b085      	sub	sp, #20
3418458e:	af00      	add	r7, sp, #0
34184590:	60f8      	str	r0, [r7, #12]
34184592:	60b9      	str	r1, [r7, #8]
34184594:	607a      	str	r2, [r7, #4]
  /* Check handles validity */
  if (hdcmipp == NULL)
34184596:	68fb      	ldr	r3, [r7, #12]
34184598:	2b00      	cmp	r3, #0
3418459a:	d101      	bne.n	341845a0 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x16>
  {
    return HAL_ERROR;
3418459c:	2301      	movs	r3, #1
3418459e:	e012      	b.n	341845c6 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x3c>

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_BAD_PXL_REMOVAL_STRENGTH(Strength));

  if (Pipe == DCMIPP_PIPE1)
341845a0:	68bb      	ldr	r3, [r7, #8]
341845a2:	2b01      	cmp	r3, #1
341845a4:	d10e      	bne.n	341845c4 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x3a>
  {
    MODIFY_REG(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_STRENGTH, Strength << DCMIPP_P1BPRCR_STRENGTH_Pos);
341845a6:	68fb      	ldr	r3, [r7, #12]
341845a8:	681b      	ldr	r3, [r3, #0]
341845aa:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
341845ae:	f023 010e 	bic.w	r1, r3, #14
341845b2:	687b      	ldr	r3, [r7, #4]
341845b4:	005a      	lsls	r2, r3, #1
341845b6:	68fb      	ldr	r3, [r7, #12]
341845b8:	681b      	ldr	r3, [r3, #0]
341845ba:	430a      	orrs	r2, r1
341845bc:	f8c3 2824 	str.w	r2, [r3, #2084]	@ 0x824
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341845c0:	2300      	movs	r3, #0
341845c2:	e000      	b.n	341845c6 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x3c>
    return HAL_ERROR;
341845c4:	2301      	movs	r3, #1
}
341845c6:	4618      	mov	r0, r3
341845c8:	3714      	adds	r7, #20
341845ca:	46bd      	mov	sp, r7
341845cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341845d0:	4770      	bx	lr

341845d2 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341845d2:	b480      	push	{r7}
341845d4:	b083      	sub	sp, #12
341845d6:	af00      	add	r7, sp, #0
341845d8:	6078      	str	r0, [r7, #4]
341845da:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
341845dc:	687b      	ldr	r3, [r7, #4]
341845de:	2b00      	cmp	r3, #0
341845e0:	d101      	bne.n	341845e6 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x14>
  {
    return HAL_ERROR;
341845e2:	2301      	movs	r3, #1
341845e4:	e00f      	b.n	34184606 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
341845e6:	683b      	ldr	r3, [r7, #0]
341845e8:	2b01      	cmp	r3, #1
341845ea:	d10b      	bne.n	34184604 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
341845ec:	687b      	ldr	r3, [r7, #4]
341845ee:	681b      	ldr	r3, [r3, #0]
341845f0:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
341845f4:	687b      	ldr	r3, [r7, #4]
341845f6:	681b      	ldr	r3, [r3, #0]
341845f8:	f042 0201 	orr.w	r2, r2, #1
341845fc:	f8c3 2824 	str.w	r2, [r3, #2084]	@ 0x824
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184600:	2300      	movs	r3, #0
34184602:	e000      	b.n	34184606 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x34>
    return HAL_ERROR;
34184604:	2301      	movs	r3, #1
}
34184606:	4618      	mov	r0, r3
34184608:	370c      	adds	r7, #12
3418460a:	46bd      	mov	sp, r7
3418460c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184610:	4770      	bx	lr

34184612 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184612:	b480      	push	{r7}
34184614:	b083      	sub	sp, #12
34184616:	af00      	add	r7, sp, #0
34184618:	6078      	str	r0, [r7, #4]
3418461a:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
3418461c:	687b      	ldr	r3, [r7, #4]
3418461e:	2b00      	cmp	r3, #0
34184620:	d101      	bne.n	34184626 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x14>
  {
    return HAL_ERROR;
34184622:	2301      	movs	r3, #1
34184624:	e00f      	b.n	34184646 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184626:	683b      	ldr	r3, [r7, #0]
34184628:	2b01      	cmp	r3, #1
3418462a:	d10b      	bne.n	34184644 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
3418462c:	687b      	ldr	r3, [r7, #4]
3418462e:	681b      	ldr	r3, [r3, #0]
34184630:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
34184634:	687b      	ldr	r3, [r7, #4]
34184636:	681b      	ldr	r3, [r3, #0]
34184638:	f022 0201 	bic.w	r2, r2, #1
3418463c:	f8c3 2824 	str.w	r2, [r3, #2084]	@ 0x824
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184640:	2300      	movs	r3, #0
34184642:	e000      	b.n	34184646 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x34>
    return HAL_ERROR;
34184644:	2301      	movs	r3, #1
}
34184646:	4618      	mov	r0, r3
34184648:	370c      	adds	r7, #12
3418464a:	46bd      	mov	sp, r7
3418464c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184650:	4770      	bx	lr

34184652 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval  The strength of the bad pixel removal process.
  */
uint32_t HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184652:	b480      	push	{r7}
34184654:	b083      	sub	sp, #12
34184656:	af00      	add	r7, sp, #0
34184658:	6078      	str	r0, [r7, #4]
3418465a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  return (((READ_REG(hdcmipp->Instance->P1BPRCR)) & DCMIPP_P1BPRCR_STRENGTH) >> DCMIPP_P1BPRCR_STRENGTH_Pos);
3418465c:	687b      	ldr	r3, [r7, #4]
3418465e:	681b      	ldr	r3, [r3, #0]
34184660:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
34184664:	085b      	lsrs	r3, r3, #1
34184666:	f003 0307 	and.w	r3, r3, #7
}
3418466a:	4618      	mov	r0, r3
3418466c:	370c      	adds	r7, #12
3418466e:	46bd      	mov	sp, r7
34184670:	f85d 7b04 	ldr.w	r7, [sp], #4
34184674:	4770      	bx	lr

34184676 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184676:	b480      	push	{r7}
34184678:	b083      	sub	sp, #12
3418467a:	af00      	add	r7, sp, #0
3418467c:	6078      	str	r0, [r7, #4]
3418467e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184680:	683b      	ldr	r3, [r7, #0]
34184682:	2b01      	cmp	r3, #1
34184684:	d10b      	bne.n	3418469e <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x28>
  {
    return ((READ_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE) == DCMIPP_P1BPRCR_ENABLE) ? 1U : 0U);
34184686:	687b      	ldr	r3, [r7, #4]
34184688:	681b      	ldr	r3, [r3, #0]
3418468a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
3418468e:	f003 0301 	and.w	r3, r3, #1
34184692:	2b01      	cmp	r3, #1
34184694:	d101      	bne.n	3418469a <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x24>
34184696:	2301      	movs	r3, #1
34184698:	e002      	b.n	341846a0 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x2a>
3418469a:	2300      	movs	r3, #0
3418469c:	e000      	b.n	341846a0 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x2a>
  }
  else
  {
    /* State Disabled */
    return 0;
3418469e:	2300      	movs	r3, #0
  }
}
341846a0:	4618      	mov	r0, r3
341846a2:	370c      	adds	r7, #12
341846a4:	46bd      	mov	sp, r7
341846a6:	f85d 7b04 	ldr.w	r7, [sp], #4
341846aa:	4770      	bx	lr

341846ac <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter>:
  * @param  pCounter pointer receiving the number of corrected bad pixels
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                               uint32_t *pCounter)
{
341846ac:	b480      	push	{r7}
341846ae:	b085      	sub	sp, #20
341846b0:	af00      	add	r7, sp, #0
341846b2:	60f8      	str	r0, [r7, #12]
341846b4:	60b9      	str	r1, [r7, #8]
341846b6:	607a      	str	r2, [r7, #4]
  /* Check handles validity */
  if ((hdcmipp == NULL) || (pCounter == NULL))
341846b8:	68fb      	ldr	r3, [r7, #12]
341846ba:	2b00      	cmp	r3, #0
341846bc:	d002      	beq.n	341846c4 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x18>
341846be:	687b      	ldr	r3, [r7, #4]
341846c0:	2b00      	cmp	r3, #0
341846c2:	d101      	bne.n	341846c8 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x1c>
  {
    return HAL_ERROR;
341846c4:	2301      	movs	r3, #1
341846c6:	e00f      	b.n	341846e8 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x3c>

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  /* Check the DCMIPP State */
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
341846c8:	68fb      	ldr	r3, [r7, #12]
341846ca:	791b      	ldrb	r3, [r3, #4]
341846cc:	b2db      	uxtb	r3, r3
341846ce:	2b02      	cmp	r3, #2
341846d0:	d109      	bne.n	341846e6 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x3a>
  {
    *pCounter = READ_REG(hdcmipp->Instance->P1BPRSR & DCMIPP_P1BPRSR_BADCNT);
341846d2:	68fb      	ldr	r3, [r7, #12]
341846d4:	681b      	ldr	r3, [r3, #0]
341846d6:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
341846da:	f3c3 020b 	ubfx	r2, r3, #0, #12
341846de:	687b      	ldr	r3, [r7, #4]
341846e0:	601a      	str	r2, [r3, #0]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341846e2:	2300      	movs	r3, #0
341846e4:	e000      	b.n	341846e8 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x3c>
    return HAL_ERROR;
341846e6:	2301      	movs	r3, #1
}
341846e8:	4618      	mov	r0, r3
341846ea:	3714      	adds	r7, #20
341846ec:	46bd      	mov	sp, r7
341846ee:	f85d 7b04 	ldr.w	r7, [sp], #4
341846f2:	4770      	bx	lr

341846f4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPColorConversionConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                              const DCMIPP_ColorConversionConfTypeDef
                                                              *pColorConversionConfig)
{
341846f4:	b480      	push	{r7}
341846f6:	b087      	sub	sp, #28
341846f8:	af00      	add	r7, sp, #0
341846fa:	60f8      	str	r0, [r7, #12]
341846fc:	60b9      	str	r1, [r7, #8]
341846fe:	607a      	str	r2, [r7, #4]
  uint32_t p1cccr_reg;
  uint16_t tmp1;
  uint16_t tmp2;

  /* Check handles validity */
  if ((hdcmipp == NULL) || (pColorConversionConfig == NULL))
34184700:	68fb      	ldr	r3, [r7, #12]
34184702:	2b00      	cmp	r3, #0
34184704:	d002      	beq.n	3418470c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x18>
34184706:	687b      	ldr	r3, [r7, #4]
34184708:	2b00      	cmp	r3, #0
3418470a:	d101      	bne.n	34184710 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1c>
  {
    return HAL_ERROR;
3418470c:	2301      	movs	r3, #1
3418470e:	e14b      	b.n	341849a8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2b4>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BR));
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BG));
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BB));
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BA));

  if (Pipe == DCMIPP_PIPE1)
34184710:	68bb      	ldr	r3, [r7, #8]
34184712:	2b01      	cmp	r3, #1
34184714:	f040 8147 	bne.w	341849a6 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2b2>
  {
    /* Set Clamp and Type */
    p1cccr_reg = ((uint32_t)pColorConversionConfig->ClampOutputSamples << DCMIPP_P1CCCR_CLAMP_Pos) | \
34184718:	687b      	ldr	r3, [r7, #4]
3418471a:	781b      	ldrb	r3, [r3, #0]
3418471c:	009b      	lsls	r3, r3, #2
                 ((uint32_t)pColorConversionConfig->OutputSamplesType);
3418471e:	687a      	ldr	r2, [r7, #4]
34184720:	7852      	ldrb	r2, [r2, #1]
    p1cccr_reg = ((uint32_t)pColorConversionConfig->ClampOutputSamples << DCMIPP_P1CCCR_CLAMP_Pos) | \
34184722:	4313      	orrs	r3, r2
34184724:	617b      	str	r3, [r7, #20]

    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
34184726:	68fb      	ldr	r3, [r7, #12]
34184728:	681b      	ldr	r3, [r3, #0]
3418472a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
3418472e:	f023 0106 	bic.w	r1, r3, #6
34184732:	68fb      	ldr	r3, [r7, #12]
34184734:	681b      	ldr	r3, [r3, #0]
34184736:	697a      	ldr	r2, [r7, #20]
34184738:	430a      	orrs	r2, r1
3418473a:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RR);
3418473e:	687b      	ldr	r3, [r7, #4]
34184740:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
34184744:	2b00      	cmp	r3, #0
34184746:	da07      	bge.n	34184758 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x64>
34184748:	687b      	ldr	r3, [r7, #4]
3418474a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
3418474e:	b29b      	uxth	r3, r3
34184750:	f3c3 030a 	ubfx	r3, r3, #0, #11
34184754:	b29b      	uxth	r3, r3
34184756:	e003      	b.n	34184760 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x6c>
34184758:	687b      	ldr	r3, [r7, #4]
3418475a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
3418475e:	b29b      	uxth	r3, r3
34184760:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RG);
34184762:	687b      	ldr	r3, [r7, #4]
34184764:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
34184768:	2b00      	cmp	r3, #0
3418476a:	da07      	bge.n	3418477c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x88>
3418476c:	687b      	ldr	r3, [r7, #4]
3418476e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
34184772:	b29b      	uxth	r3, r3
34184774:	f3c3 030a 	ubfx	r3, r3, #0, #11
34184778:	b29b      	uxth	r3, r3
3418477a:	e003      	b.n	34184784 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x90>
3418477c:	687b      	ldr	r3, [r7, #4]
3418477e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
34184782:	b29b      	uxth	r3, r3
34184784:	823b      	strh	r3, [r7, #16]

    /* Set Coefficient row 1 columns 1 2 3 and the added column of the matrix */
    MODIFY_REG(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR | DCMIPP_P1CCRR1_RG,
34184786:	68fb      	ldr	r3, [r7, #12]
34184788:	681b      	ldr	r3, [r3, #0]
3418478a:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
3418478e:	f003 21f8 	and.w	r1, r3, #4160813056	@ 0xf800f800
34184792:	8a7a      	ldrh	r2, [r7, #18]
34184794:	8a3b      	ldrh	r3, [r7, #16]
34184796:	041b      	lsls	r3, r3, #16
34184798:	431a      	orrs	r2, r3
3418479a:	68fb      	ldr	r3, [r7, #12]
3418479c:	681b      	ldr	r3, [r3, #0]
3418479e:	430a      	orrs	r2, r1
341847a0:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
               (((uint32_t)tmp1) << DCMIPP_P1CCRR1_RR_Pos) | (((uint32_t)tmp2) << DCMIPP_P1CCRR1_RG_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RB);
341847a4:	687b      	ldr	r3, [r7, #4]
341847a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
341847aa:	2b00      	cmp	r3, #0
341847ac:	da07      	bge.n	341847be <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xca>
341847ae:	687b      	ldr	r3, [r7, #4]
341847b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
341847b4:	b29b      	uxth	r3, r3
341847b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
341847ba:	b29b      	uxth	r3, r3
341847bc:	e003      	b.n	341847c6 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xd2>
341847be:	687b      	ldr	r3, [r7, #4]
341847c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
341847c4:	b29b      	uxth	r3, r3
341847c6:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->RA);
341847c8:	687b      	ldr	r3, [r7, #4]
341847ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
341847ce:	2b00      	cmp	r3, #0
341847d0:	da07      	bge.n	341847e2 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xee>
341847d2:	687b      	ldr	r3, [r7, #4]
341847d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
341847d8:	b29b      	uxth	r3, r3
341847da:	f3c3 0309 	ubfx	r3, r3, #0, #10
341847de:	b29b      	uxth	r3, r3
341847e0:	e003      	b.n	341847ea <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xf6>
341847e2:	687b      	ldr	r3, [r7, #4]
341847e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
341847e8:	b29b      	uxth	r3, r3
341847ea:	823b      	strh	r3, [r7, #16]

    MODIFY_REG(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB | DCMIPP_P1CCRR2_RA,
341847ec:	68fb      	ldr	r3, [r7, #12]
341847ee:	681b      	ldr	r3, [r3, #0]
341847f0:	f8d3 2888 	ldr.w	r2, [r3, #2184]	@ 0x888
341847f4:	4b6f      	ldr	r3, [pc, #444]	@ (341849b4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2c0>)
341847f6:	4013      	ands	r3, r2
341847f8:	8a79      	ldrh	r1, [r7, #18]
341847fa:	8a3a      	ldrh	r2, [r7, #16]
341847fc:	0412      	lsls	r2, r2, #16
341847fe:	4311      	orrs	r1, r2
34184800:	68fa      	ldr	r2, [r7, #12]
34184802:	6812      	ldr	r2, [r2, #0]
34184804:	430b      	orrs	r3, r1
34184806:	f8c2 3888 	str.w	r3, [r2, #2184]	@ 0x888
               ((uint32_t)tmp1 << DCMIPP_P1CCRR2_RB_Pos) | ((uint32_t)tmp2 << DCMIPP_P1CCRR2_RA_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GG);
3418480a:	687b      	ldr	r3, [r7, #4]
3418480c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
34184810:	2b00      	cmp	r3, #0
34184812:	da07      	bge.n	34184824 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x130>
34184814:	687b      	ldr	r3, [r7, #4]
34184816:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
3418481a:	b29b      	uxth	r3, r3
3418481c:	f3c3 030a 	ubfx	r3, r3, #0, #11
34184820:	b29b      	uxth	r3, r3
34184822:	e003      	b.n	3418482c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x138>
34184824:	687b      	ldr	r3, [r7, #4]
34184826:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
3418482a:	b29b      	uxth	r3, r3
3418482c:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GR);
3418482e:	687b      	ldr	r3, [r7, #4]
34184830:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
34184834:	2b00      	cmp	r3, #0
34184836:	da07      	bge.n	34184848 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x154>
34184838:	687b      	ldr	r3, [r7, #4]
3418483a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
3418483e:	b29b      	uxth	r3, r3
34184840:	f3c3 030a 	ubfx	r3, r3, #0, #11
34184844:	b29b      	uxth	r3, r3
34184846:	e003      	b.n	34184850 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x15c>
34184848:	687b      	ldr	r3, [r7, #4]
3418484a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
3418484e:	b29b      	uxth	r3, r3
34184850:	823b      	strh	r3, [r7, #16]


    /* Set Coefficient row 2 columns 1 2 3 and the added column of the matrix  */
    MODIFY_REG(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR | DCMIPP_P1CCGR1_GG,
34184852:	68fb      	ldr	r3, [r7, #12]
34184854:	681b      	ldr	r3, [r3, #0]
34184856:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
3418485a:	f003 21f8 	and.w	r1, r3, #4160813056	@ 0xf800f800
3418485e:	8a7b      	ldrh	r3, [r7, #18]
34184860:	041a      	lsls	r2, r3, #16
34184862:	8a3b      	ldrh	r3, [r7, #16]
34184864:	431a      	orrs	r2, r3
34184866:	68fb      	ldr	r3, [r7, #12]
34184868:	681b      	ldr	r3, [r3, #0]
3418486a:	430a      	orrs	r2, r1
3418486c:	f8c3 288c 	str.w	r2, [r3, #2188]	@ 0x88c
               ((uint32_t)tmp1 << DCMIPP_P1CCGR1_GG_Pos) | ((uint32_t)tmp2 << DCMIPP_P1CCGR1_GR_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GB);
34184870:	687b      	ldr	r3, [r7, #4]
34184872:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
34184876:	2b00      	cmp	r3, #0
34184878:	da07      	bge.n	3418488a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x196>
3418487a:	687b      	ldr	r3, [r7, #4]
3418487c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
34184880:	b29b      	uxth	r3, r3
34184882:	f3c3 030a 	ubfx	r3, r3, #0, #11
34184886:	b29b      	uxth	r3, r3
34184888:	e003      	b.n	34184892 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x19e>
3418488a:	687b      	ldr	r3, [r7, #4]
3418488c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
34184890:	b29b      	uxth	r3, r3
34184892:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->GA);
34184894:	687b      	ldr	r3, [r7, #4]
34184896:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
3418489a:	2b00      	cmp	r3, #0
3418489c:	da07      	bge.n	341848ae <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1ba>
3418489e:	687b      	ldr	r3, [r7, #4]
341848a0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
341848a4:	b29b      	uxth	r3, r3
341848a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
341848aa:	b29b      	uxth	r3, r3
341848ac:	e003      	b.n	341848b6 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1c2>
341848ae:	687b      	ldr	r3, [r7, #4]
341848b0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
341848b4:	b29b      	uxth	r3, r3
341848b6:	823b      	strh	r3, [r7, #16]

    MODIFY_REG(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB | DCMIPP_P1CCGR2_GA,
341848b8:	68fb      	ldr	r3, [r7, #12]
341848ba:	681b      	ldr	r3, [r3, #0]
341848bc:	f8d3 2890 	ldr.w	r2, [r3, #2192]	@ 0x890
341848c0:	4b3c      	ldr	r3, [pc, #240]	@ (341849b4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2c0>)
341848c2:	4013      	ands	r3, r2
341848c4:	8a79      	ldrh	r1, [r7, #18]
341848c6:	8a3a      	ldrh	r2, [r7, #16]
341848c8:	0412      	lsls	r2, r2, #16
341848ca:	4311      	orrs	r1, r2
341848cc:	68fa      	ldr	r2, [r7, #12]
341848ce:	6812      	ldr	r2, [r2, #0]
341848d0:	430b      	orrs	r3, r1
341848d2:	f8c2 3890 	str.w	r3, [r2, #2192]	@ 0x890
               ((uint32_t)tmp1 << DCMIPP_P1CCGR2_GB_Pos) | ((uint32_t)tmp2 << DCMIPP_P1CCGR2_GA_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BR);
341848d6:	687b      	ldr	r3, [r7, #4]
341848d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
341848dc:	2b00      	cmp	r3, #0
341848de:	da07      	bge.n	341848f0 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1fc>
341848e0:	687b      	ldr	r3, [r7, #4]
341848e2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
341848e6:	b29b      	uxth	r3, r3
341848e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
341848ec:	b29b      	uxth	r3, r3
341848ee:	e003      	b.n	341848f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x204>
341848f0:	687b      	ldr	r3, [r7, #4]
341848f2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
341848f6:	b29b      	uxth	r3, r3
341848f8:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BG);
341848fa:	687b      	ldr	r3, [r7, #4]
341848fc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
34184900:	2b00      	cmp	r3, #0
34184902:	da07      	bge.n	34184914 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x220>
34184904:	687b      	ldr	r3, [r7, #4]
34184906:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
3418490a:	b29b      	uxth	r3, r3
3418490c:	f3c3 030a 	ubfx	r3, r3, #0, #11
34184910:	b29b      	uxth	r3, r3
34184912:	e003      	b.n	3418491c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x228>
34184914:	687b      	ldr	r3, [r7, #4]
34184916:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
3418491a:	b29b      	uxth	r3, r3
3418491c:	823b      	strh	r3, [r7, #16]

    /* Set Coefficient row 3 columns 1 2 3 and the added column of the matrix  */
    MODIFY_REG(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BR | DCMIPP_P1CCBR1_BG,
3418491e:	68fb      	ldr	r3, [r7, #12]
34184920:	681b      	ldr	r3, [r3, #0]
34184922:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
34184926:	f003 21f8 	and.w	r1, r3, #4160813056	@ 0xf800f800
3418492a:	8a7a      	ldrh	r2, [r7, #18]
3418492c:	8a3b      	ldrh	r3, [r7, #16]
3418492e:	041b      	lsls	r3, r3, #16
34184930:	431a      	orrs	r2, r3
34184932:	68fb      	ldr	r3, [r7, #12]
34184934:	681b      	ldr	r3, [r3, #0]
34184936:	430a      	orrs	r2, r1
34184938:	f8c3 2894 	str.w	r2, [r3, #2196]	@ 0x894
               ((uint32_t)tmp1 << DCMIPP_P1CCBR1_BR_Pos) | ((uint32_t)tmp2 << DCMIPP_P1CCBR1_BG_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BB);
3418493c:	687b      	ldr	r3, [r7, #4]
3418493e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
34184942:	2b00      	cmp	r3, #0
34184944:	da07      	bge.n	34184956 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x262>
34184946:	687b      	ldr	r3, [r7, #4]
34184948:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
3418494c:	b29b      	uxth	r3, r3
3418494e:	f3c3 030a 	ubfx	r3, r3, #0, #11
34184952:	b29b      	uxth	r3, r3
34184954:	e003      	b.n	3418495e <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x26a>
34184956:	687b      	ldr	r3, [r7, #4]
34184958:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
3418495c:	b29b      	uxth	r3, r3
3418495e:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->BA);
34184960:	687b      	ldr	r3, [r7, #4]
34184962:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
34184966:	2b00      	cmp	r3, #0
34184968:	da07      	bge.n	3418497a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x286>
3418496a:	687b      	ldr	r3, [r7, #4]
3418496c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
34184970:	b29b      	uxth	r3, r3
34184972:	f3c3 0309 	ubfx	r3, r3, #0, #10
34184976:	b29b      	uxth	r3, r3
34184978:	e003      	b.n	34184982 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x28e>
3418497a:	687b      	ldr	r3, [r7, #4]
3418497c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
34184980:	b29b      	uxth	r3, r3
34184982:	823b      	strh	r3, [r7, #16]

    MODIFY_REG(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BB | DCMIPP_P1CCBR2_BA,
34184984:	68fb      	ldr	r3, [r7, #12]
34184986:	681b      	ldr	r3, [r3, #0]
34184988:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
3418498c:	4b09      	ldr	r3, [pc, #36]	@ (341849b4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2c0>)
3418498e:	4013      	ands	r3, r2
34184990:	8a79      	ldrh	r1, [r7, #18]
34184992:	8a3a      	ldrh	r2, [r7, #16]
34184994:	0412      	lsls	r2, r2, #16
34184996:	4311      	orrs	r1, r2
34184998:	68fa      	ldr	r2, [r7, #12]
3418499a:	6812      	ldr	r2, [r2, #0]
3418499c:	430b      	orrs	r3, r1
3418499e:	f8c2 3898 	str.w	r3, [r2, #2200]	@ 0x898
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341849a2:	2300      	movs	r3, #0
341849a4:	e000      	b.n	341849a8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2b4>
    return HAL_ERROR;
341849a6:	2301      	movs	r3, #1
}
341849a8:	4618      	mov	r0, r3
341849aa:	371c      	adds	r7, #28
341849ac:	46bd      	mov	sp, r7
341849ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341849b2:	4770      	bx	lr
341849b4:	fc00f800 	.word	0xfc00f800

341849b8 <HAL_DCMIPP_PIPE_EnableISPColorConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPColorConversion(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341849b8:	b480      	push	{r7}
341849ba:	b083      	sub	sp, #12
341849bc:	af00      	add	r7, sp, #0
341849be:	6078      	str	r0, [r7, #4]
341849c0:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
341849c2:	687b      	ldr	r3, [r7, #4]
341849c4:	2b00      	cmp	r3, #0
341849c6:	d101      	bne.n	341849cc <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x14>
  {
    return HAL_ERROR;
341849c8:	2301      	movs	r3, #1
341849ca:	e00f      	b.n	341849ec <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
341849cc:	683b      	ldr	r3, [r7, #0]
341849ce:	2b01      	cmp	r3, #1
341849d0:	d10b      	bne.n	341849ea <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
341849d2:	687b      	ldr	r3, [r7, #4]
341849d4:	681b      	ldr	r3, [r3, #0]
341849d6:	f8d3 2880 	ldr.w	r2, [r3, #2176]	@ 0x880
341849da:	687b      	ldr	r3, [r7, #4]
341849dc:	681b      	ldr	r3, [r3, #0]
341849de:	f042 0201 	orr.w	r2, r2, #1
341849e2:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341849e6:	2300      	movs	r3, #0
341849e8:	e000      	b.n	341849ec <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x34>
    return HAL_ERROR;
341849ea:	2301      	movs	r3, #1
}
341849ec:	4618      	mov	r0, r3
341849ee:	370c      	adds	r7, #12
341849f0:	46bd      	mov	sp, r7
341849f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341849f6:	4770      	bx	lr

341849f8 <HAL_DCMIPP_PIPE_DisableISPColorConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPColorConversion(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341849f8:	b480      	push	{r7}
341849fa:	b083      	sub	sp, #12
341849fc:	af00      	add	r7, sp, #0
341849fe:	6078      	str	r0, [r7, #4]
34184a00:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34184a02:	687b      	ldr	r3, [r7, #4]
34184a04:	2b00      	cmp	r3, #0
34184a06:	d101      	bne.n	34184a0c <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x14>
  {
    return HAL_ERROR;
34184a08:	2301      	movs	r3, #1
34184a0a:	e00f      	b.n	34184a2c <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184a0c:	683b      	ldr	r3, [r7, #0]
34184a0e:	2b01      	cmp	r3, #1
34184a10:	d10b      	bne.n	34184a2a <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
34184a12:	687b      	ldr	r3, [r7, #4]
34184a14:	681b      	ldr	r3, [r3, #0]
34184a16:	f8d3 2880 	ldr.w	r2, [r3, #2176]	@ 0x880
34184a1a:	687b      	ldr	r3, [r7, #4]
34184a1c:	681b      	ldr	r3, [r3, #0]
34184a1e:	f022 0201 	bic.w	r2, r2, #1
34184a22:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184a26:	2300      	movs	r3, #0
34184a28:	e000      	b.n	34184a2c <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x34>
    return HAL_ERROR;
34184a2a:	2301      	movs	r3, #1
}
34184a2c:	4618      	mov	r0, r3
34184a2e:	370c      	adds	r7, #12
34184a30:	46bd      	mov	sp, r7
34184a32:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a36:	4770      	bx	lr

34184a38 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                                    const DCMIPP_BlackLevelConfTypeDef
                                                                    *pBlackLevelConfig)
{
34184a38:	b480      	push	{r7}
34184a3a:	b085      	sub	sp, #20
34184a3c:	af00      	add	r7, sp, #0
34184a3e:	60f8      	str	r0, [r7, #12]
34184a40:	60b9      	str	r1, [r7, #8]
34184a42:	607a      	str	r2, [r7, #4]
  /* Check handles validity */
  if ((hdcmipp == NULL) || (pBlackLevelConfig == NULL))
34184a44:	68fb      	ldr	r3, [r7, #12]
34184a46:	2b00      	cmp	r3, #0
34184a48:	d002      	beq.n	34184a50 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x18>
34184a4a:	687b      	ldr	r3, [r7, #4]
34184a4c:	2b00      	cmp	r3, #0
34184a4e:	d101      	bne.n	34184a54 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x1c>
  {
    return HAL_ERROR;
34184a50:	2301      	movs	r3, #1
34184a52:	e01a      	b.n	34184a8a <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x52>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184a54:	68bb      	ldr	r3, [r7, #8]
34184a56:	2b01      	cmp	r3, #1
34184a58:	d116      	bne.n	34184a88 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x50>
  {
    MODIFY_REG(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_BLCR | DCMIPP_P1BLCCR_BLCG | DCMIPP_P1BLCCR_BLCB,
34184a5a:	68fb      	ldr	r3, [r7, #12]
34184a5c:	681b      	ldr	r3, [r3, #0]
34184a5e:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
34184a62:	b2d9      	uxtb	r1, r3
34184a64:	687b      	ldr	r3, [r7, #4]
34184a66:	781b      	ldrb	r3, [r3, #0]
34184a68:	061a      	lsls	r2, r3, #24
34184a6a:	687b      	ldr	r3, [r7, #4]
34184a6c:	785b      	ldrb	r3, [r3, #1]
34184a6e:	041b      	lsls	r3, r3, #16
34184a70:	431a      	orrs	r2, r3
34184a72:	687b      	ldr	r3, [r7, #4]
34184a74:	789b      	ldrb	r3, [r3, #2]
34184a76:	021b      	lsls	r3, r3, #8
34184a78:	431a      	orrs	r2, r3
34184a7a:	68fb      	ldr	r3, [r7, #12]
34184a7c:	681b      	ldr	r3, [r3, #0]
34184a7e:	430a      	orrs	r2, r1
34184a80:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184a84:	2300      	movs	r3, #0
34184a86:	e000      	b.n	34184a8a <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x52>
    return HAL_ERROR;
34184a88:	2301      	movs	r3, #1
}
34184a8a:	4618      	mov	r0, r3
34184a8c:	3714      	adds	r7, #20
34184a8e:	46bd      	mov	sp, r7
34184a90:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a94:	4770      	bx	lr

34184a96 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184a96:	b480      	push	{r7}
34184a98:	b083      	sub	sp, #12
34184a9a:	af00      	add	r7, sp, #0
34184a9c:	6078      	str	r0, [r7, #4]
34184a9e:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34184aa0:	687b      	ldr	r3, [r7, #4]
34184aa2:	2b00      	cmp	r3, #0
34184aa4:	d101      	bne.n	34184aaa <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x14>
  {
    return HAL_ERROR;
34184aa6:	2301      	movs	r3, #1
34184aa8:	e00f      	b.n	34184aca <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184aaa:	683b      	ldr	r3, [r7, #0]
34184aac:	2b01      	cmp	r3, #1
34184aae:	d10b      	bne.n	34184ac8 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
34184ab0:	687b      	ldr	r3, [r7, #4]
34184ab2:	681b      	ldr	r3, [r3, #0]
34184ab4:	f8d3 2840 	ldr.w	r2, [r3, #2112]	@ 0x840
34184ab8:	687b      	ldr	r3, [r7, #4]
34184aba:	681b      	ldr	r3, [r3, #0]
34184abc:	f042 0201 	orr.w	r2, r2, #1
34184ac0:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184ac4:	2300      	movs	r3, #0
34184ac6:	e000      	b.n	34184aca <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x34>
    return HAL_ERROR;
34184ac8:	2301      	movs	r3, #1
}
34184aca:	4618      	mov	r0, r3
34184acc:	370c      	adds	r7, #12
34184ace:	46bd      	mov	sp, r7
34184ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ad4:	4770      	bx	lr

34184ad6 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184ad6:	b480      	push	{r7}
34184ad8:	b083      	sub	sp, #12
34184ada:	af00      	add	r7, sp, #0
34184adc:	6078      	str	r0, [r7, #4]
34184ade:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34184ae0:	687b      	ldr	r3, [r7, #4]
34184ae2:	2b00      	cmp	r3, #0
34184ae4:	d101      	bne.n	34184aea <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x14>
  {
    return HAL_ERROR;
34184ae6:	2301      	movs	r3, #1
34184ae8:	e00f      	b.n	34184b0a <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184aea:	683b      	ldr	r3, [r7, #0]
34184aec:	2b01      	cmp	r3, #1
34184aee:	d10b      	bne.n	34184b08 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
34184af0:	687b      	ldr	r3, [r7, #4]
34184af2:	681b      	ldr	r3, [r3, #0]
34184af4:	f8d3 2840 	ldr.w	r2, [r3, #2112]	@ 0x840
34184af8:	687b      	ldr	r3, [r7, #4]
34184afa:	681b      	ldr	r3, [r3, #0]
34184afc:	f022 0201 	bic.w	r2, r2, #1
34184b00:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184b04:	2300      	movs	r3, #0
34184b06:	e000      	b.n	34184b0a <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x34>
    return HAL_ERROR;
34184b08:	2301      	movs	r3, #1
}
34184b0a:	4618      	mov	r0, r3
34184b0c:	370c      	adds	r7, #12
34184b0e:	46bd      	mov	sp, r7
34184b10:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b14:	4770      	bx	lr

34184b16 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig>:
  *                            filled with the black level calibration configuration of the specified pipe.
  * @retval None
  */
void HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                       DCMIPP_BlackLevelConfTypeDef *pBlackLevelConfig)
{
34184b16:	b480      	push	{r7}
34184b18:	b087      	sub	sp, #28
34184b1a:	af00      	add	r7, sp, #0
34184b1c:	60f8      	str	r0, [r7, #12]
34184b1e:	60b9      	str	r1, [r7, #8]
34184b20:	607a      	str	r2, [r7, #4]
  uint32_t p1blccr_reg;
  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184b22:	68bb      	ldr	r3, [r7, #8]
34184b24:	2b01      	cmp	r3, #1
34184b26:	d113      	bne.n	34184b50 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x3a>
  {
    p1blccr_reg = READ_REG(hdcmipp->Instance->P1BLCCR);
34184b28:	68fb      	ldr	r3, [r7, #12]
34184b2a:	681b      	ldr	r3, [r3, #0]
34184b2c:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
34184b30:	617b      	str	r3, [r7, #20]
    pBlackLevelConfig->BlueCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCB) >> DCMIPP_P1BLCCR_BLCB_Pos);
34184b32:	697b      	ldr	r3, [r7, #20]
34184b34:	0a1b      	lsrs	r3, r3, #8
34184b36:	b2da      	uxtb	r2, r3
34184b38:	687b      	ldr	r3, [r7, #4]
34184b3a:	709a      	strb	r2, [r3, #2]
    pBlackLevelConfig->GreenCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCG) >> DCMIPP_P1BLCCR_BLCG_Pos);
34184b3c:	697b      	ldr	r3, [r7, #20]
34184b3e:	0c1b      	lsrs	r3, r3, #16
34184b40:	b2da      	uxtb	r2, r3
34184b42:	687b      	ldr	r3, [r7, #4]
34184b44:	705a      	strb	r2, [r3, #1]
    pBlackLevelConfig->RedCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCR) >> DCMIPP_P1BLCCR_BLCR_Pos);
34184b46:	697b      	ldr	r3, [r7, #20]
34184b48:	0e1b      	lsrs	r3, r3, #24
34184b4a:	b2da      	uxtb	r2, r3
34184b4c:	687b      	ldr	r3, [r7, #4]
34184b4e:	701a      	strb	r2, [r3, #0]
  }
}
34184b50:	bf00      	nop
34184b52:	371c      	adds	r7, #28
34184b54:	46bd      	mov	sp, r7
34184b56:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b5a:	4770      	bx	lr

34184b5c <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184b5c:	b480      	push	{r7}
34184b5e:	b083      	sub	sp, #12
34184b60:	af00      	add	r7, sp, #0
34184b62:	6078      	str	r0, [r7, #4]
34184b64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184b66:	683b      	ldr	r3, [r7, #0]
34184b68:	2b01      	cmp	r3, #1
34184b6a:	d10b      	bne.n	34184b84 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x28>
  {
    return ((READ_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE) == DCMIPP_P1BLCCR_ENABLE) ? 1U : 0U);
34184b6c:	687b      	ldr	r3, [r7, #4]
34184b6e:	681b      	ldr	r3, [r3, #0]
34184b70:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
34184b74:	f003 0301 	and.w	r3, r3, #1
34184b78:	2b01      	cmp	r3, #1
34184b7a:	d101      	bne.n	34184b80 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x24>
34184b7c:	2301      	movs	r3, #1
34184b7e:	e002      	b.n	34184b86 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x2a>
34184b80:	2300      	movs	r3, #0
34184b82:	e000      	b.n	34184b86 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x2a>
  }
  else
  {
    /* State Disabled */
    return 0;
34184b84:	2300      	movs	r3, #0
  }
}
34184b86:	4618      	mov	r0, r3
34184b88:	370c      	adds	r7, #12
34184b8a:	46bd      	mov	sp, r7
34184b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b90:	4770      	bx	lr

34184b92 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig>:
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                                  uint8_t ModuleID, const
                                                                  DCMIPP_StatisticExtractionConfTypeDef
                                                                  *pStatisticExtractionConfig)
{
34184b92:	b480      	push	{r7}
34184b94:	b087      	sub	sp, #28
34184b96:	af00      	add	r7, sp, #0
34184b98:	60f8      	str	r0, [r7, #12]
34184b9a:	60b9      	str	r1, [r7, #8]
34184b9c:	603b      	str	r3, [r7, #0]
34184b9e:	4613      	mov	r3, r2
34184ba0:	71fb      	strb	r3, [r7, #7]
  uint32_t p1stxcr_reg;

  /* Check handle validity */
  if ((hdcmipp == NULL) || (pStatisticExtractionConfig == NULL))
34184ba2:	68fb      	ldr	r3, [r7, #12]
34184ba4:	2b00      	cmp	r3, #0
34184ba6:	d002      	beq.n	34184bae <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x1c>
34184ba8:	683b      	ldr	r3, [r7, #0]
34184baa:	2b00      	cmp	r3, #0
34184bac:	d101      	bne.n	34184bb2 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x20>
  {
    return HAL_ERROR;
34184bae:	2301      	movs	r3, #1
34184bb0:	e03b      	b.n	34184c2a <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x98>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
  assert_param(IS_DCMIPP_STAT_EXTRACTION_BINS(pStatisticExtractionConfig->Bins));
  assert_param(IS_DCMIPP_STAT_EXTRACTION_SOURCE(pStatisticExtractionConfig->Source));
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODE(pStatisticExtractionConfig->Mode));

  if (Pipe == DCMIPP_PIPE1)
34184bb2:	68bb      	ldr	r3, [r7, #8]
34184bb4:	2b01      	cmp	r3, #1
34184bb6:	d135      	bne.n	34184c24 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x92>
  {
    p1stxcr_reg = (pStatisticExtractionConfig->Mode) | (pStatisticExtractionConfig->Source) | \
34184bb8:	683b      	ldr	r3, [r7, #0]
34184bba:	681a      	ldr	r2, [r3, #0]
34184bbc:	683b      	ldr	r3, [r7, #0]
34184bbe:	685b      	ldr	r3, [r3, #4]
34184bc0:	431a      	orrs	r2, r3
                  (pStatisticExtractionConfig->Bins);
34184bc2:	683b      	ldr	r3, [r7, #0]
34184bc4:	689b      	ldr	r3, [r3, #8]
    p1stxcr_reg = (pStatisticExtractionConfig->Mode) | (pStatisticExtractionConfig->Source) | \
34184bc6:	4313      	orrs	r3, r2
34184bc8:	617b      	str	r3, [r7, #20]

    switch (ModuleID)
34184bca:	79fb      	ldrb	r3, [r7, #7]
34184bcc:	2b01      	cmp	r3, #1
34184bce:	d002      	beq.n	34184bd6 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x44>
34184bd0:	2b02      	cmp	r3, #2
34184bd2:	d00d      	beq.n	34184bf0 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x5e>
34184bd4:	e019      	b.n	34184c0a <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x78>
    {
      case DCMIPP_STATEXT_MODULE1:
        MODIFY_REG(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_BINS | DCMIPP_P1ST1CR_SRC | \
34184bd6:	68fb      	ldr	r3, [r7, #12]
34184bd8:	681b      	ldr	r3, [r3, #0]
34184bda:	f8d3 3850 	ldr.w	r3, [r3, #2128]	@ 0x850
34184bde:	f023 01fc 	bic.w	r1, r3, #252	@ 0xfc
34184be2:	68fb      	ldr	r3, [r7, #12]
34184be4:	681b      	ldr	r3, [r3, #0]
34184be6:	697a      	ldr	r2, [r7, #20]
34184be8:	430a      	orrs	r2, r1
34184bea:	f8c3 2850 	str.w	r2, [r3, #2128]	@ 0x850
                   DCMIPP_P1ST1CR_MODE, p1stxcr_reg);
        break;
34184bee:	e01b      	b.n	34184c28 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x96>
      case DCMIPP_STATEXT_MODULE2:
        MODIFY_REG(hdcmipp->Instance->P1ST2CR, DCMIPP_P1ST2CR_BINS | DCMIPP_P1ST2CR_SRC | \
34184bf0:	68fb      	ldr	r3, [r7, #12]
34184bf2:	681b      	ldr	r3, [r3, #0]
34184bf4:	f8d3 3854 	ldr.w	r3, [r3, #2132]	@ 0x854
34184bf8:	f023 01fc 	bic.w	r1, r3, #252	@ 0xfc
34184bfc:	68fb      	ldr	r3, [r7, #12]
34184bfe:	681b      	ldr	r3, [r3, #0]
34184c00:	697a      	ldr	r2, [r7, #20]
34184c02:	430a      	orrs	r2, r1
34184c04:	f8c3 2854 	str.w	r2, [r3, #2132]	@ 0x854
                   DCMIPP_P1ST2CR_MODE, p1stxcr_reg);
        break;
34184c08:	e00e      	b.n	34184c28 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x96>
      default:
        /* DCMIPP_STATEXT_MODULE3 */
        MODIFY_REG(hdcmipp->Instance->P1ST3CR, DCMIPP_P1ST3CR_BINS | DCMIPP_P1ST3CR_SRC | \
34184c0a:	68fb      	ldr	r3, [r7, #12]
34184c0c:	681b      	ldr	r3, [r3, #0]
34184c0e:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
34184c12:	f023 01fc 	bic.w	r1, r3, #252	@ 0xfc
34184c16:	68fb      	ldr	r3, [r7, #12]
34184c18:	681b      	ldr	r3, [r3, #0]
34184c1a:	697a      	ldr	r2, [r7, #20]
34184c1c:	430a      	orrs	r2, r1
34184c1e:	f8c3 2858 	str.w	r2, [r3, #2136]	@ 0x858
                   DCMIPP_P1ST3CR_MODE, p1stxcr_reg);
        break;
34184c22:	e001      	b.n	34184c28 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x96>
    }
  }
  else
  {
    return HAL_ERROR;
34184c24:	2301      	movs	r3, #1
34184c26:	e000      	b.n	34184c2a <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x98>
  }

  return HAL_OK;
34184c28:	2300      	movs	r3, #0
}
34184c2a:	4618      	mov	r0, r3
34184c2c:	371c      	adds	r7, #28
34184c2e:	46bd      	mov	sp, r7
34184c30:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c34:	4770      	bx	lr

34184c36 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                                      const DCMIPP_StatisticExtractionAreaConfTypeDef
                                                                      *pStatisticExtractionAreaConfig)
{
34184c36:	b480      	push	{r7}
34184c38:	b085      	sub	sp, #20
34184c3a:	af00      	add	r7, sp, #0
34184c3c:	60f8      	str	r0, [r7, #12]
34184c3e:	60b9      	str	r1, [r7, #8]
34184c40:	607a      	str	r2, [r7, #4]
  /* Check handle validity */
  if ((hdcmipp == NULL) || (pStatisticExtractionAreaConfig == NULL))
34184c42:	68fb      	ldr	r3, [r7, #12]
34184c44:	2b00      	cmp	r3, #0
34184c46:	d002      	beq.n	34184c4e <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x18>
34184c48:	687b      	ldr	r3, [r7, #4]
34184c4a:	2b00      	cmp	r3, #0
34184c4c:	d101      	bne.n	34184c52 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x1c>
  {
    return HAL_ERROR;
34184c4e:	2301      	movs	r3, #1
34184c50:	e027      	b.n	34184ca2 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x6c>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_START(pStatisticExtractionAreaConfig->HStart));
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_START(pStatisticExtractionAreaConfig->VStart));
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_SIZE(pStatisticExtractionAreaConfig->HSize));
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_SIZE(pStatisticExtractionAreaConfig->VSize));

  if (Pipe == DCMIPP_PIPE1)
34184c52:	68bb      	ldr	r3, [r7, #8]
34184c54:	2b01      	cmp	r3, #1
34184c56:	d123      	bne.n	34184ca0 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x6a>
  {
    MODIFY_REG(hdcmipp->Instance->P1STSTR, DCMIPP_P1STSTR_HSTART | DCMIPP_P1STSTR_VSTART,
34184c58:	68fb      	ldr	r3, [r7, #12]
34184c5a:	681b      	ldr	r3, [r3, #0]
34184c5c:	f8d3 385c 	ldr.w	r3, [r3, #2140]	@ 0x85c
34184c60:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
34184c64:	687b      	ldr	r3, [r7, #4]
34184c66:	685a      	ldr	r2, [r3, #4]
34184c68:	687b      	ldr	r3, [r7, #4]
34184c6a:	681b      	ldr	r3, [r3, #0]
34184c6c:	041b      	lsls	r3, r3, #16
34184c6e:	431a      	orrs	r2, r3
34184c70:	68fb      	ldr	r3, [r7, #12]
34184c72:	681b      	ldr	r3, [r3, #0]
34184c74:	430a      	orrs	r2, r1
34184c76:	f8c3 285c 	str.w	r2, [r3, #2140]	@ 0x85c
               (pStatisticExtractionAreaConfig->HStart << DCMIPP_P1STSTR_HSTART_Pos) | \
               (pStatisticExtractionAreaConfig->VStart << DCMIPP_P1STSTR_VSTART_Pos));

    MODIFY_REG(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_HSIZE | DCMIPP_P1STSZR_VSIZE,
34184c7a:	68fb      	ldr	r3, [r7, #12]
34184c7c:	681b      	ldr	r3, [r3, #0]
34184c7e:	f8d3 3860 	ldr.w	r3, [r3, #2144]	@ 0x860
34184c82:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
34184c86:	687b      	ldr	r3, [r7, #4]
34184c88:	68da      	ldr	r2, [r3, #12]
34184c8a:	687b      	ldr	r3, [r7, #4]
34184c8c:	689b      	ldr	r3, [r3, #8]
34184c8e:	041b      	lsls	r3, r3, #16
34184c90:	431a      	orrs	r2, r3
34184c92:	68fb      	ldr	r3, [r7, #12]
34184c94:	681b      	ldr	r3, [r3, #0]
34184c96:	430a      	orrs	r2, r1
34184c98:	f8c3 2860 	str.w	r2, [r3, #2144]	@ 0x860
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184c9c:	2300      	movs	r3, #0
34184c9e:	e000      	b.n	34184ca2 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x6c>
    return HAL_ERROR;
34184ca0:	2301      	movs	r3, #1
}
34184ca2:	4618      	mov	r0, r3
34184ca4:	3714      	adds	r7, #20
34184ca6:	46bd      	mov	sp, r7
34184ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cac:	4770      	bx	lr

34184cae <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction>:
  * @param  ModuleID  Specifies the Module ID, can be a value from @ref DCMIPP_Statistics_Extraction_Module_ID.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPStatisticExtraction(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                               uint8_t ModuleID)
{
34184cae:	b480      	push	{r7}
34184cb0:	b085      	sub	sp, #20
34184cb2:	af00      	add	r7, sp, #0
34184cb4:	60f8      	str	r0, [r7, #12]
34184cb6:	60b9      	str	r1, [r7, #8]
34184cb8:	4613      	mov	r3, r2
34184cba:	71fb      	strb	r3, [r7, #7]
  /* Check handle validity */
  if (hdcmipp == NULL)
34184cbc:	68fb      	ldr	r3, [r7, #12]
34184cbe:	2b00      	cmp	r3, #0
34184cc0:	d101      	bne.n	34184cc6 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x18>
  {
    return HAL_ERROR;
34184cc2:	2301      	movs	r3, #1
34184cc4:	e02c      	b.n	34184d20 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x72>

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));

  if (Pipe == DCMIPP_PIPE1)
34184cc6:	68bb      	ldr	r3, [r7, #8]
34184cc8:	2b01      	cmp	r3, #1
34184cca:	d126      	bne.n	34184d1a <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x6c>
  {
    switch (ModuleID)
34184ccc:	79fb      	ldrb	r3, [r7, #7]
34184cce:	2b01      	cmp	r3, #1
34184cd0:	d002      	beq.n	34184cd8 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x2a>
34184cd2:	2b02      	cmp	r3, #2
34184cd4:	d00b      	beq.n	34184cee <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x40>
34184cd6:	e015      	b.n	34184d04 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x56>
    {
      case DCMIPP_STATEXT_MODULE1:
        SET_BIT(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_ENABLE);
34184cd8:	68fb      	ldr	r3, [r7, #12]
34184cda:	681b      	ldr	r3, [r3, #0]
34184cdc:	f8d3 2850 	ldr.w	r2, [r3, #2128]	@ 0x850
34184ce0:	68fb      	ldr	r3, [r7, #12]
34184ce2:	681b      	ldr	r3, [r3, #0]
34184ce4:	f042 0201 	orr.w	r2, r2, #1
34184ce8:	f8c3 2850 	str.w	r2, [r3, #2128]	@ 0x850
        break;
34184cec:	e017      	b.n	34184d1e <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x70>
      case DCMIPP_STATEXT_MODULE2:
        SET_BIT(hdcmipp->Instance->P1ST2CR, DCMIPP_P1ST2CR_ENABLE);
34184cee:	68fb      	ldr	r3, [r7, #12]
34184cf0:	681b      	ldr	r3, [r3, #0]
34184cf2:	f8d3 2854 	ldr.w	r2, [r3, #2132]	@ 0x854
34184cf6:	68fb      	ldr	r3, [r7, #12]
34184cf8:	681b      	ldr	r3, [r3, #0]
34184cfa:	f042 0201 	orr.w	r2, r2, #1
34184cfe:	f8c3 2854 	str.w	r2, [r3, #2132]	@ 0x854
        break;
34184d02:	e00c      	b.n	34184d1e <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x70>
      default:
        /* DCMIPP_STATEXT_MODULE3 */
        SET_BIT(hdcmipp->Instance->P1ST3CR, DCMIPP_P1ST3CR_ENABLE);
34184d04:	68fb      	ldr	r3, [r7, #12]
34184d06:	681b      	ldr	r3, [r3, #0]
34184d08:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
34184d0c:	68fb      	ldr	r3, [r7, #12]
34184d0e:	681b      	ldr	r3, [r3, #0]
34184d10:	f042 0201 	orr.w	r2, r2, #1
34184d14:	f8c3 2858 	str.w	r2, [r3, #2136]	@ 0x858
        break;
34184d18:	e001      	b.n	34184d1e <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x70>
    }
  }
  else
  {
    return HAL_ERROR;
34184d1a:	2301      	movs	r3, #1
34184d1c:	e000      	b.n	34184d20 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x72>
  }

  return HAL_OK;
34184d1e:	2300      	movs	r3, #0
}
34184d20:	4618      	mov	r0, r3
34184d22:	3714      	adds	r7, #20
34184d24:	46bd      	mov	sp, r7
34184d26:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d2a:	4770      	bx	lr

34184d2c <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184d2c:	b480      	push	{r7}
34184d2e:	b083      	sub	sp, #12
34184d30:	af00      	add	r7, sp, #0
34184d32:	6078      	str	r0, [r7, #4]
34184d34:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34184d36:	687b      	ldr	r3, [r7, #4]
34184d38:	2b00      	cmp	r3, #0
34184d3a:	d101      	bne.n	34184d40 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x14>
  {
    return HAL_ERROR;
34184d3c:	2301      	movs	r3, #1
34184d3e:	e00f      	b.n	34184d60 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184d40:	683b      	ldr	r3, [r7, #0]
34184d42:	2b01      	cmp	r3, #1
34184d44:	d10b      	bne.n	34184d5e <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x32>
  {
    /* Crop line enable */
    SET_BIT(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_CROPEN);
34184d46:	687b      	ldr	r3, [r7, #4]
34184d48:	681b      	ldr	r3, [r3, #0]
34184d4a:	f8d3 2860 	ldr.w	r2, [r3, #2144]	@ 0x860
34184d4e:	687b      	ldr	r3, [r7, #4]
34184d50:	681b      	ldr	r3, [r3, #0]
34184d52:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34184d56:	f8c3 2860 	str.w	r2, [r3, #2144]	@ 0x860
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184d5a:	2300      	movs	r3, #0
34184d5c:	e000      	b.n	34184d60 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x34>
    return HAL_ERROR;
34184d5e:	2301      	movs	r3, #1
}
34184d60:	4618      	mov	r0, r3
34184d62:	370c      	adds	r7, #12
34184d64:	46bd      	mov	sp, r7
34184d66:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d6a:	4770      	bx	lr

34184d6c <HAL_DCMIPP_PIPE_SetISPExposureConfig>:
  * @param  pExposureConfig pointer to the DCMIPP_ExposureConfTypeDef structure that contains the exposure information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPExposureConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                       const DCMIPP_ExposureConfTypeDef *pExposureConfig)
{
34184d6c:	b480      	push	{r7}
34184d6e:	b085      	sub	sp, #20
34184d70:	af00      	add	r7, sp, #0
34184d72:	60f8      	str	r0, [r7, #12]
34184d74:	60b9      	str	r1, [r7, #8]
34184d76:	607a      	str	r2, [r7, #4]

  /* Check handle validity */
  if ((hdcmipp == NULL) || (pExposureConfig == NULL))
34184d78:	68fb      	ldr	r3, [r7, #12]
34184d7a:	2b00      	cmp	r3, #0
34184d7c:	d002      	beq.n	34184d84 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x18>
34184d7e:	687b      	ldr	r3, [r7, #4]
34184d80:	2b00      	cmp	r3, #0
34184d82:	d101      	bne.n	34184d88 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x1c>
  {
    return HAL_ERROR;
34184d84:	2301      	movs	r3, #1
34184d86:	e02d      	b.n	34184de4 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x78>
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftRed));
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftGreen));
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftBlue));

  if (Pipe == DCMIPP_PIPE1)
34184d88:	68bb      	ldr	r3, [r7, #8]
34184d8a:	2b01      	cmp	r3, #1
34184d8c:	d129      	bne.n	34184de2 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x76>
  {
    MODIFY_REG(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_SHFR | DCMIPP_P1EXCR1_MULTR,
34184d8e:	68fb      	ldr	r3, [r7, #12]
34184d90:	681b      	ldr	r3, [r3, #0]
34184d92:	f8d3 3844 	ldr.w	r3, [r3, #2116]	@ 0x844
34184d96:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
34184d9a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
34184d9e:	687a      	ldr	r2, [r7, #4]
34184da0:	7812      	ldrb	r2, [r2, #0]
34184da2:	0711      	lsls	r1, r2, #28
34184da4:	687a      	ldr	r2, [r7, #4]
34184da6:	7852      	ldrb	r2, [r2, #1]
34184da8:	0512      	lsls	r2, r2, #20
34184daa:	4311      	orrs	r1, r2
34184dac:	68fa      	ldr	r2, [r7, #12]
34184dae:	6812      	ldr	r2, [r2, #0]
34184db0:	430b      	orrs	r3, r1
34184db2:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
               (((uint32_t)pExposureConfig->ShiftRed << DCMIPP_P1EXCR1_SHFR_Pos) | \
                ((uint32_t)pExposureConfig->MultiplierRed << DCMIPP_P1EXCR1_MULTR_Pos)));

    WRITE_REG(hdcmipp->Instance->P1EXCR2, (((uint32_t)pExposureConfig->ShiftGreen << DCMIPP_P1EXCR2_SHFG_Pos) | \
34184db6:	687b      	ldr	r3, [r7, #4]
34184db8:	789b      	ldrb	r3, [r3, #2]
34184dba:	071a      	lsls	r2, r3, #28
34184dbc:	687b      	ldr	r3, [r7, #4]
34184dbe:	78db      	ldrb	r3, [r3, #3]
34184dc0:	051b      	lsls	r3, r3, #20
34184dc2:	431a      	orrs	r2, r3
34184dc4:	687b      	ldr	r3, [r7, #4]
34184dc6:	791b      	ldrb	r3, [r3, #4]
34184dc8:	031b      	lsls	r3, r3, #12
34184dca:	ea42 0103 	orr.w	r1, r2, r3
34184dce:	687b      	ldr	r3, [r7, #4]
34184dd0:	795b      	ldrb	r3, [r3, #5]
34184dd2:	011a      	lsls	r2, r3, #4
34184dd4:	68fb      	ldr	r3, [r7, #12]
34184dd6:	681b      	ldr	r3, [r3, #0]
34184dd8:	430a      	orrs	r2, r1
34184dda:	f8c3 2848 	str.w	r2, [r3, #2120]	@ 0x848
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184dde:	2300      	movs	r3, #0
34184de0:	e000      	b.n	34184de4 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x78>
    return HAL_ERROR;
34184de2:	2301      	movs	r3, #1
}
34184de4:	4618      	mov	r0, r3
34184de6:	3714      	adds	r7, #20
34184de8:	46bd      	mov	sp, r7
34184dea:	f85d 7b04 	ldr.w	r7, [sp], #4
34184dee:	4770      	bx	lr

34184df0 <HAL_DCMIPP_PIPE_EnableISPExposure>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPExposure(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184df0:	b480      	push	{r7}
34184df2:	b083      	sub	sp, #12
34184df4:	af00      	add	r7, sp, #0
34184df6:	6078      	str	r0, [r7, #4]
34184df8:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34184dfa:	687b      	ldr	r3, [r7, #4]
34184dfc:	2b00      	cmp	r3, #0
34184dfe:	d101      	bne.n	34184e04 <HAL_DCMIPP_PIPE_EnableISPExposure+0x14>
  {
    return HAL_ERROR;
34184e00:	2301      	movs	r3, #1
34184e02:	e00f      	b.n	34184e24 <HAL_DCMIPP_PIPE_EnableISPExposure+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184e04:	683b      	ldr	r3, [r7, #0]
34184e06:	2b01      	cmp	r3, #1
34184e08:	d10b      	bne.n	34184e22 <HAL_DCMIPP_PIPE_EnableISPExposure+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
34184e0a:	687b      	ldr	r3, [r7, #4]
34184e0c:	681b      	ldr	r3, [r3, #0]
34184e0e:	f8d3 2844 	ldr.w	r2, [r3, #2116]	@ 0x844
34184e12:	687b      	ldr	r3, [r7, #4]
34184e14:	681b      	ldr	r3, [r3, #0]
34184e16:	f042 0201 	orr.w	r2, r2, #1
34184e1a:	f8c3 2844 	str.w	r2, [r3, #2116]	@ 0x844
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184e1e:	2300      	movs	r3, #0
34184e20:	e000      	b.n	34184e24 <HAL_DCMIPP_PIPE_EnableISPExposure+0x34>
    return HAL_ERROR;
34184e22:	2301      	movs	r3, #1
}
34184e24:	4618      	mov	r0, r3
34184e26:	370c      	adds	r7, #12
34184e28:	46bd      	mov	sp, r7
34184e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e2e:	4770      	bx	lr

34184e30 <HAL_DCMIPP_PIPE_DisableISPExposure>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPExposure(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184e30:	b480      	push	{r7}
34184e32:	b083      	sub	sp, #12
34184e34:	af00      	add	r7, sp, #0
34184e36:	6078      	str	r0, [r7, #4]
34184e38:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34184e3a:	687b      	ldr	r3, [r7, #4]
34184e3c:	2b00      	cmp	r3, #0
34184e3e:	d101      	bne.n	34184e44 <HAL_DCMIPP_PIPE_DisableISPExposure+0x14>
  {
    return HAL_ERROR;
34184e40:	2301      	movs	r3, #1
34184e42:	e00f      	b.n	34184e64 <HAL_DCMIPP_PIPE_DisableISPExposure+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184e44:	683b      	ldr	r3, [r7, #0]
34184e46:	2b01      	cmp	r3, #1
34184e48:	d10b      	bne.n	34184e62 <HAL_DCMIPP_PIPE_DisableISPExposure+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
34184e4a:	687b      	ldr	r3, [r7, #4]
34184e4c:	681b      	ldr	r3, [r3, #0]
34184e4e:	f8d3 2844 	ldr.w	r2, [r3, #2116]	@ 0x844
34184e52:	687b      	ldr	r3, [r7, #4]
34184e54:	681b      	ldr	r3, [r3, #0]
34184e56:	f022 0201 	bic.w	r2, r2, #1
34184e5a:	f8c3 2844 	str.w	r2, [r3, #2116]	@ 0x844
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184e5e:	2300      	movs	r3, #0
34184e60:	e000      	b.n	34184e64 <HAL_DCMIPP_PIPE_DisableISPExposure+0x34>
    return HAL_ERROR;
34184e62:	2301      	movs	r3, #1
}
34184e64:	4618      	mov	r0, r3
34184e66:	370c      	adds	r7, #12
34184e68:	46bd      	mov	sp, r7
34184e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e6e:	4770      	bx	lr

34184e70 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig>:
  * @param  pContrastConfig pointer to the DCMIPP_ContrastConfTypeDef structure that contains contrast information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                           const DCMIPP_ContrastConfTypeDef *pContrastConfig)
{
34184e70:	b480      	push	{r7}
34184e72:	b085      	sub	sp, #20
34184e74:	af00      	add	r7, sp, #0
34184e76:	60f8      	str	r0, [r7, #12]
34184e78:	60b9      	str	r1, [r7, #8]
34184e7a:	607a      	str	r2, [r7, #4]
  /* Check handle validity */
  if ((hdcmipp == NULL) || (pContrastConfig == NULL))
34184e7c:	68fb      	ldr	r3, [r7, #12]
34184e7e:	2b00      	cmp	r3, #0
34184e80:	d002      	beq.n	34184e88 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x18>
34184e82:	687b      	ldr	r3, [r7, #4]
34184e84:	2b00      	cmp	r3, #0
34184e86:	d101      	bne.n	34184e8c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x1c>
  {
    return HAL_ERROR;
34184e88:	2301      	movs	r3, #1
34184e8a:	e03b      	b.n	34184f04 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x94>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_160));
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_192));
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_224));
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_256));

  if (Pipe == DCMIPP_PIPE1)
34184e8c:	68bb      	ldr	r3, [r7, #8]
34184e8e:	2b01      	cmp	r3, #1
34184e90:	d137      	bne.n	34184f02 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x92>
  {

    MODIFY_REG(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_LUM0,
34184e92:	68fb      	ldr	r3, [r7, #12]
34184e94:	681b      	ldr	r3, [r3, #0]
34184e96:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
34184e9a:	f423 41fc 	bic.w	r1, r3, #32256	@ 0x7e00
34184e9e:	687b      	ldr	r3, [r7, #4]
34184ea0:	781b      	ldrb	r3, [r3, #0]
34184ea2:	025a      	lsls	r2, r3, #9
34184ea4:	68fb      	ldr	r3, [r7, #12]
34184ea6:	681b      	ldr	r3, [r3, #0]
34184ea8:	430a      	orrs	r2, r1
34184eaa:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
               (uint32_t)pContrastConfig->LUM_0 << DCMIPP_P1CTCR1_LUM0_Pos);

    WRITE_REG(hdcmipp->Instance->P1CTCR2, (((uint32_t)pContrastConfig->LUM_32 << DCMIPP_P1CTCR2_LUM1_Pos) |
34184eae:	687b      	ldr	r3, [r7, #4]
34184eb0:	785b      	ldrb	r3, [r3, #1]
34184eb2:	065a      	lsls	r2, r3, #25
34184eb4:	687b      	ldr	r3, [r7, #4]
34184eb6:	789b      	ldrb	r3, [r3, #2]
34184eb8:	045b      	lsls	r3, r3, #17
34184eba:	431a      	orrs	r2, r3
34184ebc:	687b      	ldr	r3, [r7, #4]
34184ebe:	78db      	ldrb	r3, [r3, #3]
34184ec0:	025b      	lsls	r3, r3, #9
34184ec2:	ea42 0103 	orr.w	r1, r2, r3
34184ec6:	687b      	ldr	r3, [r7, #4]
34184ec8:	791b      	ldrb	r3, [r3, #4]
34184eca:	005a      	lsls	r2, r3, #1
34184ecc:	68fb      	ldr	r3, [r7, #12]
34184ece:	681b      	ldr	r3, [r3, #0]
34184ed0:	430a      	orrs	r2, r1
34184ed2:	f8c3 28a4 	str.w	r2, [r3, #2212]	@ 0x8a4
                                           ((uint32_t)pContrastConfig->LUM_64 << DCMIPP_P1CTCR2_LUM2_Pos) |
                                           ((uint32_t)pContrastConfig->LUM_96 << DCMIPP_P1CTCR2_LUM3_Pos) |
                                           ((uint32_t)pContrastConfig->LUM_128 << DCMIPP_P1CTCR2_LUM4_Pos)));

    WRITE_REG(hdcmipp->Instance->P1CTCR3, (((uint32_t)pContrastConfig->LUM_160 << DCMIPP_P1CTCR3_LUM5_Pos) |
34184ed6:	687b      	ldr	r3, [r7, #4]
34184ed8:	795b      	ldrb	r3, [r3, #5]
34184eda:	065a      	lsls	r2, r3, #25
34184edc:	687b      	ldr	r3, [r7, #4]
34184ede:	799b      	ldrb	r3, [r3, #6]
34184ee0:	045b      	lsls	r3, r3, #17
34184ee2:	431a      	orrs	r2, r3
34184ee4:	687b      	ldr	r3, [r7, #4]
34184ee6:	79db      	ldrb	r3, [r3, #7]
34184ee8:	025b      	lsls	r3, r3, #9
34184eea:	ea42 0103 	orr.w	r1, r2, r3
34184eee:	687b      	ldr	r3, [r7, #4]
34184ef0:	7a1b      	ldrb	r3, [r3, #8]
34184ef2:	005a      	lsls	r2, r3, #1
34184ef4:	68fb      	ldr	r3, [r7, #12]
34184ef6:	681b      	ldr	r3, [r3, #0]
34184ef8:	430a      	orrs	r2, r1
34184efa:	f8c3 28a8 	str.w	r2, [r3, #2216]	@ 0x8a8
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184efe:	2300      	movs	r3, #0
34184f00:	e000      	b.n	34184f04 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x94>
    return HAL_ERROR;
34184f02:	2301      	movs	r3, #1
}
34184f04:	4618      	mov	r0, r3
34184f06:	3714      	adds	r7, #20
34184f08:	46bd      	mov	sp, r7
34184f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f0e:	4770      	bx	lr

34184f10 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPCtrlContrast(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184f10:	b480      	push	{r7}
34184f12:	b083      	sub	sp, #12
34184f14:	af00      	add	r7, sp, #0
34184f16:	6078      	str	r0, [r7, #4]
34184f18:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34184f1a:	687b      	ldr	r3, [r7, #4]
34184f1c:	2b00      	cmp	r3, #0
34184f1e:	d101      	bne.n	34184f24 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x14>
  {
    return HAL_ERROR;
34184f20:	2301      	movs	r3, #1
34184f22:	e00f      	b.n	34184f44 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184f24:	683b      	ldr	r3, [r7, #0]
34184f26:	2b01      	cmp	r3, #1
34184f28:	d10b      	bne.n	34184f42 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
34184f2a:	687b      	ldr	r3, [r7, #4]
34184f2c:	681b      	ldr	r3, [r3, #0]
34184f2e:	f8d3 28a0 	ldr.w	r2, [r3, #2208]	@ 0x8a0
34184f32:	687b      	ldr	r3, [r7, #4]
34184f34:	681b      	ldr	r3, [r3, #0]
34184f36:	f042 0201 	orr.w	r2, r2, #1
34184f3a:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184f3e:	2300      	movs	r3, #0
34184f40:	e000      	b.n	34184f44 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x34>
    return HAL_ERROR;
34184f42:	2301      	movs	r3, #1
}
34184f44:	4618      	mov	r0, r3
34184f46:	370c      	adds	r7, #12
34184f48:	46bd      	mov	sp, r7
34184f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f4e:	4770      	bx	lr

34184f50 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPCtrlContrast(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34184f50:	b480      	push	{r7}
34184f52:	b083      	sub	sp, #12
34184f54:	af00      	add	r7, sp, #0
34184f56:	6078      	str	r0, [r7, #4]
34184f58:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34184f5a:	687b      	ldr	r3, [r7, #4]
34184f5c:	2b00      	cmp	r3, #0
34184f5e:	d101      	bne.n	34184f64 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x14>
  {
    return HAL_ERROR;
34184f60:	2301      	movs	r3, #1
34184f62:	e00f      	b.n	34184f84 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x34>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34184f64:	683b      	ldr	r3, [r7, #0]
34184f66:	2b01      	cmp	r3, #1
34184f68:	d10b      	bne.n	34184f82 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
34184f6a:	687b      	ldr	r3, [r7, #4]
34184f6c:	681b      	ldr	r3, [r3, #0]
34184f6e:	f8d3 28a0 	ldr.w	r2, [r3, #2208]	@ 0x8a0
34184f72:	687b      	ldr	r3, [r7, #4]
34184f74:	681b      	ldr	r3, [r3, #0]
34184f76:	f022 0201 	bic.w	r2, r2, #1
34184f7a:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34184f7e:	2300      	movs	r3, #0
34184f80:	e000      	b.n	34184f84 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x34>
    return HAL_ERROR;
34184f82:	2301      	movs	r3, #1
}
34184f84:	4618      	mov	r0, r3
34184f86:	370c      	adds	r7, #12
34184f88:	46bd      	mov	sp, r7
34184f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f8e:	4770      	bx	lr

34184f90 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>:
  * @param  pCounter pointer to receive the accumulated value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                                     uint8_t ModuleID, uint32_t *pCounter)
{
34184f90:	b480      	push	{r7}
34184f92:	b085      	sub	sp, #20
34184f94:	af00      	add	r7, sp, #0
34184f96:	60f8      	str	r0, [r7, #12]
34184f98:	60b9      	str	r1, [r7, #8]
34184f9a:	603b      	str	r3, [r7, #0]
34184f9c:	4613      	mov	r3, r2
34184f9e:	71fb      	strb	r3, [r7, #7]

  /* Check handle validity */
  if ((hdcmipp == NULL) || (pCounter == NULL))
34184fa0:	68fb      	ldr	r3, [r7, #12]
34184fa2:	2b00      	cmp	r3, #0
34184fa4:	d002      	beq.n	34184fac <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x1c>
34184fa6:	683b      	ldr	r3, [r7, #0]
34184fa8:	2b00      	cmp	r3, #0
34184faa:	d101      	bne.n	34184fb0 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x20>
  {
    return HAL_ERROR;
34184fac:	2301      	movs	r3, #1
34184fae:	e02b      	b.n	34185008 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x78>

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));

  if (Pipe == DCMIPP_PIPE1)
34184fb0:	68bb      	ldr	r3, [r7, #8]
34184fb2:	2b01      	cmp	r3, #1
34184fb4:	d124      	bne.n	34185000 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x70>
  {
    switch (ModuleID)
34184fb6:	79fb      	ldrb	r3, [r7, #7]
34184fb8:	2b03      	cmp	r3, #3
34184fba:	d018      	beq.n	34184fee <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x5e>
34184fbc:	2b03      	cmp	r3, #3
34184fbe:	dc21      	bgt.n	34185004 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x74>
34184fc0:	2b01      	cmp	r3, #1
34184fc2:	d002      	beq.n	34184fca <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x3a>
34184fc4:	2b02      	cmp	r3, #2
34184fc6:	d009      	beq.n	34184fdc <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x4c>
        break;
      case DCMIPP_STATEXT_MODULE3:
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST3SR & DCMIPP_P1ST3SR_ACCU));
        break;
      default:
        break;
34184fc8:	e01c      	b.n	34185004 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x74>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST1SR & DCMIPP_P1ST1SR_ACCU));
34184fca:	68fb      	ldr	r3, [r7, #12]
34184fcc:	681b      	ldr	r3, [r3, #0]
34184fce:	f8d3 3864 	ldr.w	r3, [r3, #2148]	@ 0x864
34184fd2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34184fd6:	683b      	ldr	r3, [r7, #0]
34184fd8:	601a      	str	r2, [r3, #0]
        break;
34184fda:	e014      	b.n	34185006 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x76>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST2SR & DCMIPP_P1ST2SR_ACCU));
34184fdc:	68fb      	ldr	r3, [r7, #12]
34184fde:	681b      	ldr	r3, [r3, #0]
34184fe0:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
34184fe4:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34184fe8:	683b      	ldr	r3, [r7, #0]
34184fea:	601a      	str	r2, [r3, #0]
        break;
34184fec:	e00b      	b.n	34185006 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x76>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST3SR & DCMIPP_P1ST3SR_ACCU));
34184fee:	68fb      	ldr	r3, [r7, #12]
34184ff0:	681b      	ldr	r3, [r3, #0]
34184ff2:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
34184ff6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34184ffa:	683b      	ldr	r3, [r7, #0]
34184ffc:	601a      	str	r2, [r3, #0]
        break;
34184ffe:	e002      	b.n	34185006 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x76>
    }
  }
  else
  {
    return HAL_ERROR;
34185000:	2301      	movs	r3, #1
34185002:	e001      	b.n	34185008 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x78>
        break;
34185004:	bf00      	nop
  }

  return HAL_OK;
34185006:	2300      	movs	r3, #0
}
34185008:	4618      	mov	r0, r3
3418500a:	3714      	adds	r7, #20
3418500c:	46bd      	mov	sp, r7
3418500e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185012:	4770      	bx	lr

34185014 <HAL_DCMIPP_PIPE_GetISPExposureConfig>:
  *                         filled with the exposure configuration of the specified pipe.
  * @retval None
  */
void HAL_DCMIPP_PIPE_GetISPExposureConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                          DCMIPP_ExposureConfTypeDef *pExposureConfig)
{
34185014:	b480      	push	{r7}
34185016:	b087      	sub	sp, #28
34185018:	af00      	add	r7, sp, #0
3418501a:	60f8      	str	r0, [r7, #12]
3418501c:	60b9      	str	r1, [r7, #8]
3418501e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34185020:	68bb      	ldr	r3, [r7, #8]
34185022:	2b01      	cmp	r3, #1
34185024:	d130      	bne.n	34185088 <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x74>
  {
    tmp = READ_REG(hdcmipp->Instance->P1EXCR2);
34185026:	68fb      	ldr	r3, [r7, #12]
34185028:	681b      	ldr	r3, [r3, #0]
3418502a:	f8d3 3848 	ldr.w	r3, [r3, #2120]	@ 0x848
3418502e:	617b      	str	r3, [r7, #20]

    pExposureConfig->MultiplierBlue  = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTB) >> DCMIPP_P1EXCR2_MULTB_Pos);
34185030:	697b      	ldr	r3, [r7, #20]
34185032:	091b      	lsrs	r3, r3, #4
34185034:	b2da      	uxtb	r2, r3
34185036:	687b      	ldr	r3, [r7, #4]
34185038:	715a      	strb	r2, [r3, #5]
    pExposureConfig->ShiftBlue       = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFB) >> DCMIPP_P1EXCR2_SHFB_Pos);
3418503a:	697b      	ldr	r3, [r7, #20]
3418503c:	0b1b      	lsrs	r3, r3, #12
3418503e:	b2db      	uxtb	r3, r3
34185040:	f003 0307 	and.w	r3, r3, #7
34185044:	b2da      	uxtb	r2, r3
34185046:	687b      	ldr	r3, [r7, #4]
34185048:	711a      	strb	r2, [r3, #4]
    pExposureConfig->ShiftGreen      = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFG) >> DCMIPP_P1EXCR2_SHFG_Pos);
3418504a:	697b      	ldr	r3, [r7, #20]
3418504c:	0f1b      	lsrs	r3, r3, #28
3418504e:	b2db      	uxtb	r3, r3
34185050:	f003 0307 	and.w	r3, r3, #7
34185054:	b2da      	uxtb	r2, r3
34185056:	687b      	ldr	r3, [r7, #4]
34185058:	709a      	strb	r2, [r3, #2]
    pExposureConfig->MultiplierGreen = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTG) >> DCMIPP_P1EXCR2_MULTG_Pos);
3418505a:	697b      	ldr	r3, [r7, #20]
3418505c:	0d1b      	lsrs	r3, r3, #20
3418505e:	b2da      	uxtb	r2, r3
34185060:	687b      	ldr	r3, [r7, #4]
34185062:	70da      	strb	r2, [r3, #3]

    tmp = READ_REG(hdcmipp->Instance->P1EXCR1);
34185064:	68fb      	ldr	r3, [r7, #12]
34185066:	681b      	ldr	r3, [r3, #0]
34185068:	f8d3 3844 	ldr.w	r3, [r3, #2116]	@ 0x844
3418506c:	617b      	str	r3, [r7, #20]

    pExposureConfig->MultiplierRed   = (uint8_t)((tmp & DCMIPP_P1EXCR1_MULTR) >> DCMIPP_P1EXCR1_MULTR_Pos);
3418506e:	697b      	ldr	r3, [r7, #20]
34185070:	0d1b      	lsrs	r3, r3, #20
34185072:	b2da      	uxtb	r2, r3
34185074:	687b      	ldr	r3, [r7, #4]
34185076:	705a      	strb	r2, [r3, #1]
    pExposureConfig->ShiftRed        = (uint8_t)((tmp & DCMIPP_P1EXCR1_SHFR) >> DCMIPP_P1EXCR1_SHFR_Pos);
34185078:	697b      	ldr	r3, [r7, #20]
3418507a:	0f1b      	lsrs	r3, r3, #28
3418507c:	b2db      	uxtb	r3, r3
3418507e:	f003 0307 	and.w	r3, r3, #7
34185082:	b2da      	uxtb	r2, r3
34185084:	687b      	ldr	r3, [r7, #4]
34185086:	701a      	strb	r2, [r3, #0]
  }
}
34185088:	bf00      	nop
3418508a:	371c      	adds	r7, #28
3418508c:	46bd      	mov	sp, r7
3418508e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185092:	4770      	bx	lr

34185094 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig>:
  *                                 filled with the color conversion configuration of the specified pipe.
  * @retval None
  */
void HAL_DCMIPP_PIPE_GetISPColorConversionConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                 DCMIPP_ColorConversionConfTypeDef *pColorConversionConfig)
{
34185094:	b480      	push	{r7}
34185096:	b087      	sub	sp, #28
34185098:	af00      	add	r7, sp, #0
3418509a:	60f8      	str	r0, [r7, #12]
3418509c:	60b9      	str	r1, [r7, #8]
3418509e:	607a      	str	r2, [r7, #4]
  uint16_t tmp;

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
341850a0:	68bb      	ldr	r3, [r7, #8]
341850a2:	2b01      	cmp	r3, #1
341850a4:	f040 8146 	bne.w	34185334 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x2a0>
  {
    tmp = (uint16_t)READ_REG(hdcmipp->Instance->P1CCCR);
341850a8:	68fb      	ldr	r3, [r7, #12]
341850aa:	681b      	ldr	r3, [r3, #0]
341850ac:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
341850b0:	82fb      	strh	r3, [r7, #22]

    UNUSED(tmp);

    pColorConversionConfig->ClampOutputSamples = (((tmp & DCMIPP_P1CCCR_CLAMP) >> DCMIPP_P1YUVCR_CLAMP_Pos) != 0U)
                                                 ? ENABLE : DISABLE;
341850b2:	8afb      	ldrh	r3, [r7, #22]
341850b4:	089b      	lsrs	r3, r3, #2
341850b6:	b2db      	uxtb	r3, r3
341850b8:	f003 0301 	and.w	r3, r3, #1
341850bc:	b2da      	uxtb	r2, r3
    pColorConversionConfig->ClampOutputSamples = (((tmp & DCMIPP_P1CCCR_CLAMP) >> DCMIPP_P1YUVCR_CLAMP_Pos) != 0U)
341850be:	687b      	ldr	r3, [r7, #4]
341850c0:	701a      	strb	r2, [r3, #0]
    pColorConversionConfig->OutputSamplesType  = (uint8_t)(tmp & DCMIPP_P1CCCR_TYPE);
341850c2:	8afb      	ldrh	r3, [r7, #22]
341850c4:	b2db      	uxtb	r3, r3
341850c6:	f003 0302 	and.w	r3, r3, #2
341850ca:	b2da      	uxtb	r2, r3
341850cc:	687b      	ldr	r3, [r7, #4]
341850ce:	705a      	strb	r2, [r3, #1]

    /* Get Coefficient row 1 columns 1 2 3 and the added column of the matrix */
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RG) >> DCMIPP_P1CCRR1_RG_Pos);
341850d0:	68fb      	ldr	r3, [r7, #12]
341850d2:	681b      	ldr	r3, [r3, #0]
341850d4:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
341850d8:	0c1b      	lsrs	r3, r3, #16
341850da:	b29b      	uxth	r3, r3
341850dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
341850e0:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->RG = (int16_t)GET_MATRIX_VALUE11(tmp);
341850e2:	8afb      	ldrh	r3, [r7, #22]
341850e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341850e8:	2b00      	cmp	r3, #0
341850ea:	d007      	beq.n	341850fc <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x68>
341850ec:	8afb      	ldrh	r3, [r7, #22]
341850ee:	ea6f 5343 	mvn.w	r3, r3, lsl #21
341850f2:	ea6f 5353 	mvn.w	r3, r3, lsr #21
341850f6:	b29b      	uxth	r3, r3
341850f8:	b21b      	sxth	r3, r3
341850fa:	e001      	b.n	34185100 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x6c>
341850fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34185100:	687a      	ldr	r2, [r7, #4]
34185102:	8093      	strh	r3, [r2, #4]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR) >> DCMIPP_P1CCRR1_RR_Pos);
34185104:	68fb      	ldr	r3, [r7, #12]
34185106:	681b      	ldr	r3, [r3, #0]
34185108:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
3418510c:	b29b      	uxth	r3, r3
3418510e:	f3c3 030a 	ubfx	r3, r3, #0, #11
34185112:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->RR = (int16_t)GET_MATRIX_VALUE11(tmp);
34185114:	8afb      	ldrh	r3, [r7, #22]
34185116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418511a:	2b00      	cmp	r3, #0
3418511c:	d007      	beq.n	3418512e <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x9a>
3418511e:	8afb      	ldrh	r3, [r7, #22]
34185120:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34185124:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34185128:	b29b      	uxth	r3, r3
3418512a:	b21b      	sxth	r3, r3
3418512c:	e001      	b.n	34185132 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x9e>
3418512e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34185132:	687a      	ldr	r2, [r7, #4]
34185134:	8053      	strh	r3, [r2, #2]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RA) >> DCMIPP_P1CCRR2_RA_Pos);
34185136:	68fb      	ldr	r3, [r7, #12]
34185138:	681b      	ldr	r3, [r3, #0]
3418513a:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
3418513e:	0c1b      	lsrs	r3, r3, #16
34185140:	b29b      	uxth	r3, r3
34185142:	f3c3 0309 	ubfx	r3, r3, #0, #10
34185146:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->RA = (int16_t)GET_MATRIX_VALUE10(tmp);
34185148:	8afb      	ldrh	r3, [r7, #22]
3418514a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418514e:	2b00      	cmp	r3, #0
34185150:	d007      	beq.n	34185162 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0xce>
34185152:	8afb      	ldrh	r3, [r7, #22]
34185154:	ea6f 5383 	mvn.w	r3, r3, lsl #22
34185158:	ea6f 5393 	mvn.w	r3, r3, lsr #22
3418515c:	b29b      	uxth	r3, r3
3418515e:	b21b      	sxth	r3, r3
34185160:	e001      	b.n	34185166 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0xd2>
34185162:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34185166:	687a      	ldr	r2, [r7, #4]
34185168:	8113      	strh	r3, [r2, #8]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB) >> DCMIPP_P1CCRR2_RB_Pos);
3418516a:	68fb      	ldr	r3, [r7, #12]
3418516c:	681b      	ldr	r3, [r3, #0]
3418516e:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
34185172:	b29b      	uxth	r3, r3
34185174:	f3c3 030a 	ubfx	r3, r3, #0, #11
34185178:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->RB = (int16_t)GET_MATRIX_VALUE11(tmp);
3418517a:	8afb      	ldrh	r3, [r7, #22]
3418517c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34185180:	2b00      	cmp	r3, #0
34185182:	d007      	beq.n	34185194 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x100>
34185184:	8afb      	ldrh	r3, [r7, #22]
34185186:	ea6f 5343 	mvn.w	r3, r3, lsl #21
3418518a:	ea6f 5353 	mvn.w	r3, r3, lsr #21
3418518e:	b29b      	uxth	r3, r3
34185190:	b21b      	sxth	r3, r3
34185192:	e001      	b.n	34185198 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x104>
34185194:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34185198:	687a      	ldr	r2, [r7, #4]
3418519a:	80d3      	strh	r3, [r2, #6]

    /* Get Coefficient row 2 columns 1 2 3 and the added column of the matrix  */
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GG) >> DCMIPP_P1CCGR1_GG_Pos);
3418519c:	68fb      	ldr	r3, [r7, #12]
3418519e:	681b      	ldr	r3, [r3, #0]
341851a0:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
341851a4:	0c1b      	lsrs	r3, r3, #16
341851a6:	b29b      	uxth	r3, r3
341851a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
341851ac:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->GG = (int16_t)GET_MATRIX_VALUE11(tmp);
341851ae:	8afb      	ldrh	r3, [r7, #22]
341851b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341851b4:	2b00      	cmp	r3, #0
341851b6:	d007      	beq.n	341851c8 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x134>
341851b8:	8afb      	ldrh	r3, [r7, #22]
341851ba:	ea6f 5343 	mvn.w	r3, r3, lsl #21
341851be:	ea6f 5353 	mvn.w	r3, r3, lsr #21
341851c2:	b29b      	uxth	r3, r3
341851c4:	b21b      	sxth	r3, r3
341851c6:	e001      	b.n	341851cc <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x138>
341851c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
341851cc:	687a      	ldr	r2, [r7, #4]
341851ce:	8193      	strh	r3, [r2, #12]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR) >> DCMIPP_P1CCGR1_GR_Pos);
341851d0:	68fb      	ldr	r3, [r7, #12]
341851d2:	681b      	ldr	r3, [r3, #0]
341851d4:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
341851d8:	b29b      	uxth	r3, r3
341851da:	f3c3 030a 	ubfx	r3, r3, #0, #11
341851de:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->GR = (int16_t)GET_MATRIX_VALUE11(tmp);
341851e0:	8afb      	ldrh	r3, [r7, #22]
341851e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341851e6:	2b00      	cmp	r3, #0
341851e8:	d007      	beq.n	341851fa <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x166>
341851ea:	8afb      	ldrh	r3, [r7, #22]
341851ec:	ea6f 5343 	mvn.w	r3, r3, lsl #21
341851f0:	ea6f 5353 	mvn.w	r3, r3, lsr #21
341851f4:	b29b      	uxth	r3, r3
341851f6:	b21b      	sxth	r3, r3
341851f8:	e001      	b.n	341851fe <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x16a>
341851fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
341851fe:	687a      	ldr	r2, [r7, #4]
34185200:	8153      	strh	r3, [r2, #10]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GA) >> DCMIPP_P1CCGR2_GA_Pos);
34185202:	68fb      	ldr	r3, [r7, #12]
34185204:	681b      	ldr	r3, [r3, #0]
34185206:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
3418520a:	0c1b      	lsrs	r3, r3, #16
3418520c:	b29b      	uxth	r3, r3
3418520e:	f3c3 0309 	ubfx	r3, r3, #0, #10
34185212:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->GA = (int16_t)GET_MATRIX_VALUE10(tmp);
34185214:	8afb      	ldrh	r3, [r7, #22]
34185216:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418521a:	2b00      	cmp	r3, #0
3418521c:	d007      	beq.n	3418522e <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x19a>
3418521e:	8afb      	ldrh	r3, [r7, #22]
34185220:	ea6f 5383 	mvn.w	r3, r3, lsl #22
34185224:	ea6f 5393 	mvn.w	r3, r3, lsr #22
34185228:	b29b      	uxth	r3, r3
3418522a:	b21b      	sxth	r3, r3
3418522c:	e001      	b.n	34185232 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x19e>
3418522e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34185232:	687a      	ldr	r2, [r7, #4]
34185234:	8213      	strh	r3, [r2, #16]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB) >> DCMIPP_P1CCGR2_GB_Pos);
34185236:	68fb      	ldr	r3, [r7, #12]
34185238:	681b      	ldr	r3, [r3, #0]
3418523a:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
3418523e:	b29b      	uxth	r3, r3
34185240:	f3c3 030a 	ubfx	r3, r3, #0, #11
34185244:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->GB = (int16_t)GET_MATRIX_VALUE11(tmp);
34185246:	8afb      	ldrh	r3, [r7, #22]
34185248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418524c:	2b00      	cmp	r3, #0
3418524e:	d007      	beq.n	34185260 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x1cc>
34185250:	8afb      	ldrh	r3, [r7, #22]
34185252:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34185256:	ea6f 5353 	mvn.w	r3, r3, lsr #21
3418525a:	b29b      	uxth	r3, r3
3418525c:	b21b      	sxth	r3, r3
3418525e:	e001      	b.n	34185264 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x1d0>
34185260:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34185264:	687a      	ldr	r2, [r7, #4]
34185266:	81d3      	strh	r3, [r2, #14]

    /* Get Coefficient row 3 columns 1 2 3 and the added column of the matrix  */
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BA) >> DCMIPP_P1CCBR2_BA_Pos);
34185268:	68fb      	ldr	r3, [r7, #12]
3418526a:	681b      	ldr	r3, [r3, #0]
3418526c:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
34185270:	0c1b      	lsrs	r3, r3, #16
34185272:	b29b      	uxth	r3, r3
34185274:	f3c3 0309 	ubfx	r3, r3, #0, #10
34185278:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->BA = (int16_t)GET_MATRIX_VALUE10(tmp);
3418527a:	8afb      	ldrh	r3, [r7, #22]
3418527c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34185280:	2b00      	cmp	r3, #0
34185282:	d007      	beq.n	34185294 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x200>
34185284:	8afb      	ldrh	r3, [r7, #22]
34185286:	ea6f 5383 	mvn.w	r3, r3, lsl #22
3418528a:	ea6f 5393 	mvn.w	r3, r3, lsr #22
3418528e:	b29b      	uxth	r3, r3
34185290:	b21b      	sxth	r3, r3
34185292:	e001      	b.n	34185298 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x204>
34185294:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34185298:	687a      	ldr	r2, [r7, #4]
3418529a:	8313      	strh	r3, [r2, #24]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BB) >> DCMIPP_P1CCBR2_BB_Pos);
3418529c:	68fb      	ldr	r3, [r7, #12]
3418529e:	681b      	ldr	r3, [r3, #0]
341852a0:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
341852a4:	b29b      	uxth	r3, r3
341852a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
341852aa:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->BB = (int16_t)GET_MATRIX_VALUE11(tmp);
341852ac:	8afb      	ldrh	r3, [r7, #22]
341852ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341852b2:	2b00      	cmp	r3, #0
341852b4:	d007      	beq.n	341852c6 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x232>
341852b6:	8afb      	ldrh	r3, [r7, #22]
341852b8:	ea6f 5343 	mvn.w	r3, r3, lsl #21
341852bc:	ea6f 5353 	mvn.w	r3, r3, lsr #21
341852c0:	b29b      	uxth	r3, r3
341852c2:	b21b      	sxth	r3, r3
341852c4:	e001      	b.n	341852ca <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x236>
341852c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
341852ca:	687a      	ldr	r2, [r7, #4]
341852cc:	82d3      	strh	r3, [r2, #22]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BG) >> DCMIPP_P1CCBR1_BG_Pos);
341852ce:	68fb      	ldr	r3, [r7, #12]
341852d0:	681b      	ldr	r3, [r3, #0]
341852d2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
341852d6:	0c1b      	lsrs	r3, r3, #16
341852d8:	b29b      	uxth	r3, r3
341852da:	f3c3 030a 	ubfx	r3, r3, #0, #11
341852de:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->BG = (int16_t)GET_MATRIX_VALUE11(tmp);
341852e0:	8afb      	ldrh	r3, [r7, #22]
341852e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341852e6:	2b00      	cmp	r3, #0
341852e8:	d007      	beq.n	341852fa <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x266>
341852ea:	8afb      	ldrh	r3, [r7, #22]
341852ec:	ea6f 5343 	mvn.w	r3, r3, lsl #21
341852f0:	ea6f 5353 	mvn.w	r3, r3, lsr #21
341852f4:	b29b      	uxth	r3, r3
341852f6:	b21b      	sxth	r3, r3
341852f8:	e001      	b.n	341852fe <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x26a>
341852fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
341852fe:	687a      	ldr	r2, [r7, #4]
34185300:	8293      	strh	r3, [r2, #20]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BR) >> DCMIPP_P1CCBR1_BR_Pos);
34185302:	68fb      	ldr	r3, [r7, #12]
34185304:	681b      	ldr	r3, [r3, #0]
34185306:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
3418530a:	b29b      	uxth	r3, r3
3418530c:	f3c3 030a 	ubfx	r3, r3, #0, #11
34185310:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->BR = (int16_t)GET_MATRIX_VALUE11(tmp);
34185312:	8afb      	ldrh	r3, [r7, #22]
34185314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34185318:	2b00      	cmp	r3, #0
3418531a:	d007      	beq.n	3418532c <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x298>
3418531c:	8afb      	ldrh	r3, [r7, #22]
3418531e:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34185322:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34185326:	b29b      	uxth	r3, r3
34185328:	b21b      	sxth	r3, r3
3418532a:	e001      	b.n	34185330 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x29c>
3418532c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34185330:	687a      	ldr	r2, [r7, #4]
34185332:	8253      	strh	r3, [r2, #18]
  }
}
34185334:	bf00      	nop
34185336:	371c      	adds	r7, #28
34185338:	46bd      	mov	sp, r7
3418533a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418533e:	4770      	bx	lr

34185340 <HAL_DCMIPP_PIPE_IsEnabledISPExposure>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledISPExposure(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185340:	b480      	push	{r7}
34185342:	b083      	sub	sp, #12
34185344:	af00      	add	r7, sp, #0
34185346:	6078      	str	r0, [r7, #4]
34185348:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
3418534a:	683b      	ldr	r3, [r7, #0]
3418534c:	2b01      	cmp	r3, #1
3418534e:	d10b      	bne.n	34185368 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x28>
  {
    return ((READ_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE) == DCMIPP_P1EXCR1_ENABLE) ? 1U : 0U);
34185350:	687b      	ldr	r3, [r7, #4]
34185352:	681b      	ldr	r3, [r3, #0]
34185354:	f8d3 3844 	ldr.w	r3, [r3, #2116]	@ 0x844
34185358:	f003 0301 	and.w	r3, r3, #1
3418535c:	2b01      	cmp	r3, #1
3418535e:	d101      	bne.n	34185364 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x24>
34185360:	2301      	movs	r3, #1
34185362:	e002      	b.n	3418536a <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x2a>
34185364:	2300      	movs	r3, #0
34185366:	e000      	b.n	3418536a <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x2a>
  }
  else
  {
    /* State Disabled */
    return 0;
34185368:	2300      	movs	r3, #0
  }
}
3418536a:	4618      	mov	r0, r3
3418536c:	370c      	adds	r7, #12
3418536e:	46bd      	mov	sp, r7
34185370:	f85d 7b04 	ldr.w	r7, [sp], #4
34185374:	4770      	bx	lr

34185376 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Pipe to be checked
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledISPColorConversion(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185376:	b480      	push	{r7}
34185378:	b083      	sub	sp, #12
3418537a:	af00      	add	r7, sp, #0
3418537c:	6078      	str	r0, [r7, #4]
3418537e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));

  if (Pipe == DCMIPP_PIPE1)
34185380:	683b      	ldr	r3, [r7, #0]
34185382:	2b01      	cmp	r3, #1
34185384:	d10b      	bne.n	3418539e <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x28>
  {
    return ((READ_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE) == DCMIPP_P1CCCR_ENABLE) ? 1U : 0U);
34185386:	687b      	ldr	r3, [r7, #4]
34185388:	681b      	ldr	r3, [r3, #0]
3418538a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
3418538e:	f003 0301 	and.w	r3, r3, #1
34185392:	2b01      	cmp	r3, #1
34185394:	d101      	bne.n	3418539a <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x24>
34185396:	2301      	movs	r3, #1
34185398:	e002      	b.n	341853a0 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x2a>
3418539a:	2300      	movs	r3, #0
3418539c:	e000      	b.n	341853a0 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x2a>
  }
  else
  {
    /* State Disabled */
    return 0;
3418539e:	2300      	movs	r3, #0
  }
}
341853a0:	4618      	mov	r0, r3
341853a2:	370c      	adds	r7, #12
341853a4:	46bd      	mov	sp, r7
341853a6:	f85d 7b04 	ldr.w	r7, [sp], #4
341853aa:	4770      	bx	lr

341853ac <HAL_DCMIPP_GetState>:
  * @brief  Return the DCMIPP state
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval HAL state
  */
HAL_DCMIPP_StateTypeDef HAL_DCMIPP_GetState(const DCMIPP_HandleTypeDef *hdcmipp)
{
341853ac:	b480      	push	{r7}
341853ae:	b083      	sub	sp, #12
341853b0:	af00      	add	r7, sp, #0
341853b2:	6078      	str	r0, [r7, #4]
  return hdcmipp->State;
341853b4:	687b      	ldr	r3, [r7, #4]
341853b6:	791b      	ldrb	r3, [r3, #4]
341853b8:	b2db      	uxtb	r3, r3
}
341853ba:	4618      	mov	r0, r3
341853bc:	370c      	adds	r7, #12
341853be:	46bd      	mov	sp, r7
341853c0:	f85d 7b04 	ldr.w	r7, [sp], #4
341853c4:	4770      	bx	lr

341853c6 <Pipe_Config>:
  * @param  pPipeConfig pointer to the DCMIPP_PipeConfTypeDef structure that contains
  *                     the configuration information for the pipe.
  * @retval None
  */
static void Pipe_Config(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, const DCMIPP_PipeConfTypeDef *pPipeConfig)
{
341853c6:	b480      	push	{r7}
341853c8:	b085      	sub	sp, #20
341853ca:	af00      	add	r7, sp, #0
341853cc:	60f8      	str	r0, [r7, #12]
341853ce:	60b9      	str	r1, [r7, #8]
341853d0:	607a      	str	r2, [r7, #4]
  if (Pipe == DCMIPP_PIPE0)
341853d2:	68bb      	ldr	r3, [r7, #8]
341853d4:	2b00      	cmp	r3, #0
341853d6:	d10d      	bne.n	341853f4 <Pipe_Config+0x2e>
  {
    /* Configure Pipe0 */
    /* Configure Frame Rate */
    MODIFY_REG(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_FRATE, pPipeConfig->FrameRate);
341853d8:	68fb      	ldr	r3, [r7, #12]
341853da:	681b      	ldr	r3, [r3, #0]
341853dc:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341853e0:	f023 0103 	bic.w	r1, r3, #3
341853e4:	687b      	ldr	r3, [r7, #4]
341853e6:	681a      	ldr	r2, [r3, #0]
341853e8:	68fb      	ldr	r3, [r7, #12]
341853ea:	681b      	ldr	r3, [r3, #0]
341853ec:	430a      	orrs	r2, r1
341853ee:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500

    /* Configure Pixel Pipe Pitch */
    MODIFY_REG(hdcmipp->Instance->P2PPM0PR, DCMIPP_P2PPM0PR_PITCH,
               pPipeConfig->PixelPipePitch << DCMIPP_P2PPM0PR_PITCH_Pos);
  }
}
341853f2:	e081      	b.n	341854f8 <Pipe_Config+0x132>
  else if (Pipe == DCMIPP_PIPE1)
341853f4:	68bb      	ldr	r3, [r7, #8]
341853f6:	2b01      	cmp	r3, #1
341853f8:	d155      	bne.n	341854a6 <Pipe_Config+0xe0>
    MODIFY_REG(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_FRATE, pPipeConfig->FrameRate);
341853fa:	68fb      	ldr	r3, [r7, #12]
341853fc:	681b      	ldr	r3, [r3, #0]
341853fe:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
34185402:	f023 0103 	bic.w	r1, r3, #3
34185406:	687b      	ldr	r3, [r7, #4]
34185408:	681a      	ldr	r2, [r3, #0]
3418540a:	68fb      	ldr	r3, [r7, #12]
3418540c:	681b      	ldr	r3, [r3, #0]
3418540e:	430a      	orrs	r2, r1
34185410:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
    MODIFY_REG(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_FORMAT, pPipeConfig->PixelPackerFormat);
34185414:	68fb      	ldr	r3, [r7, #12]
34185416:	681b      	ldr	r3, [r3, #0]
34185418:	f8d3 39c0 	ldr.w	r3, [r3, #2496]	@ 0x9c0
3418541c:	f023 010f 	bic.w	r1, r3, #15
34185420:	687b      	ldr	r3, [r7, #4]
34185422:	689a      	ldr	r2, [r3, #8]
34185424:	68fb      	ldr	r3, [r7, #12]
34185426:	681b      	ldr	r3, [r3, #0]
34185428:	430a      	orrs	r2, r1
3418542a:	f8c3 29c0 	str.w	r2, [r3, #2496]	@ 0x9c0
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH,
3418542e:	68fb      	ldr	r3, [r7, #12]
34185430:	681b      	ldr	r3, [r3, #0]
34185432:	f8d3 39cc 	ldr.w	r3, [r3, #2508]	@ 0x9cc
34185436:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
3418543a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418543e:	687a      	ldr	r2, [r7, #4]
34185440:	6851      	ldr	r1, [r2, #4]
34185442:	68fa      	ldr	r2, [r7, #12]
34185444:	6812      	ldr	r2, [r2, #0]
34185446:	430b      	orrs	r3, r1
34185448:	f8c2 39cc 	str.w	r3, [r2, #2508]	@ 0x9cc
    if ((pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV422_2) ||
3418544c:	687b      	ldr	r3, [r7, #4]
3418544e:	689b      	ldr	r3, [r3, #8]
34185450:	2b07      	cmp	r3, #7
34185452:	d003      	beq.n	3418545c <Pipe_Config+0x96>
        (pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV420_2))
34185454:	687b      	ldr	r3, [r7, #4]
34185456:	689b      	ldr	r3, [r3, #8]
    if ((pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV422_2) ||
34185458:	2b08      	cmp	r3, #8
3418545a:	d10f      	bne.n	3418547c <Pipe_Config+0xb6>
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
3418545c:	68fb      	ldr	r3, [r7, #12]
3418545e:	681b      	ldr	r3, [r3, #0]
34185460:	f8d3 39dc 	ldr.w	r3, [r3, #2524]	@ 0x9dc
34185464:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
34185468:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418546c:	687a      	ldr	r2, [r7, #4]
3418546e:	6851      	ldr	r1, [r2, #4]
34185470:	68fa      	ldr	r2, [r7, #12]
34185472:	6812      	ldr	r2, [r2, #0]
34185474:	430b      	orrs	r3, r1
34185476:	f8c2 39dc 	str.w	r3, [r2, #2524]	@ 0x9dc
}
3418547a:	e03d      	b.n	341854f8 <Pipe_Config+0x132>
    else if (pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV420_3)
3418547c:	687b      	ldr	r3, [r7, #4]
3418547e:	689b      	ldr	r3, [r3, #8]
34185480:	2b09      	cmp	r3, #9
34185482:	d139      	bne.n	341854f8 <Pipe_Config+0x132>
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
34185484:	68fb      	ldr	r3, [r7, #12]
34185486:	681b      	ldr	r3, [r3, #0]
34185488:	f8d3 39dc 	ldr.w	r3, [r3, #2524]	@ 0x9dc
3418548c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
34185490:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34185494:	687a      	ldr	r2, [r7, #4]
34185496:	6852      	ldr	r2, [r2, #4]
34185498:	0851      	lsrs	r1, r2, #1
3418549a:	68fa      	ldr	r2, [r7, #12]
3418549c:	6812      	ldr	r2, [r2, #0]
3418549e:	430b      	orrs	r3, r1
341854a0:	f8c2 39dc 	str.w	r3, [r2, #2524]	@ 0x9dc
}
341854a4:	e028      	b.n	341854f8 <Pipe_Config+0x132>
    MODIFY_REG(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_FRATE, pPipeConfig->FrameRate);
341854a6:	68fb      	ldr	r3, [r7, #12]
341854a8:	681b      	ldr	r3, [r3, #0]
341854aa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
341854ae:	f023 0103 	bic.w	r1, r3, #3
341854b2:	687b      	ldr	r3, [r7, #4]
341854b4:	681a      	ldr	r2, [r3, #0]
341854b6:	68fb      	ldr	r3, [r7, #12]
341854b8:	681b      	ldr	r3, [r3, #0]
341854ba:	430a      	orrs	r2, r1
341854bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
    MODIFY_REG(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_FORMAT, pPipeConfig->PixelPackerFormat);
341854c0:	68fb      	ldr	r3, [r7, #12]
341854c2:	681b      	ldr	r3, [r3, #0]
341854c4:	f8d3 3dc0 	ldr.w	r3, [r3, #3520]	@ 0xdc0
341854c8:	f023 010f 	bic.w	r1, r3, #15
341854cc:	687b      	ldr	r3, [r7, #4]
341854ce:	689a      	ldr	r2, [r3, #8]
341854d0:	68fb      	ldr	r3, [r7, #12]
341854d2:	681b      	ldr	r3, [r3, #0]
341854d4:	430a      	orrs	r2, r1
341854d6:	f8c3 2dc0 	str.w	r2, [r3, #3520]	@ 0xdc0
    MODIFY_REG(hdcmipp->Instance->P2PPM0PR, DCMIPP_P2PPM0PR_PITCH,
341854da:	68fb      	ldr	r3, [r7, #12]
341854dc:	681b      	ldr	r3, [r3, #0]
341854de:	f8d3 3dcc 	ldr.w	r3, [r3, #3532]	@ 0xdcc
341854e2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
341854e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
341854ea:	687a      	ldr	r2, [r7, #4]
341854ec:	6851      	ldr	r1, [r2, #4]
341854ee:	68fa      	ldr	r2, [r7, #12]
341854f0:	6812      	ldr	r2, [r2, #0]
341854f2:	430b      	orrs	r3, r1
341854f4:	f8c2 3dcc 	str.w	r3, [r2, #3532]	@ 0xdcc
}
341854f8:	bf00      	nop
341854fa:	3714      	adds	r7, #20
341854fc:	46bd      	mov	sp, r7
341854fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34185502:	4770      	bx	lr

34185504 <DCMIPP_CSI_WritePHYReg>:
  * @param  reg_lsb specifies the testcode LSB in testdin
  * @param  val     specifies the page offset in testdin
  * @retval None
  */
static void DCMIPP_CSI_WritePHYReg(CSI_TypeDef *hcsi, uint32_t reg_msb, uint32_t reg_lsb, uint32_t val)
{
34185504:	b480      	push	{r7}
34185506:	b085      	sub	sp, #20
34185508:	af00      	add	r7, sp, #0
3418550a:	60f8      	str	r0, [r7, #12]
3418550c:	60b9      	str	r1, [r7, #8]
3418550e:	607a      	str	r2, [r7, #4]
34185510:	603b      	str	r3, [r7, #0]
  /* Based on sequence described at section 5.2.3.2 of DesignWave document */
  /* For writing the 4-bit testcode MSBs */
  /* Set testen to high */
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
34185512:	68fb      	ldr	r3, [r7, #12]
34185514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34185518:	695b      	ldr	r3, [r3, #20]
3418551a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3418551e:	68fa      	ldr	r2, [r7, #12]
34185520:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34185524:	6153      	str	r3, [r2, #20]

  /* Set testclk to high */
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
34185526:	68fb      	ldr	r3, [r7, #12]
34185528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418552c:	691b      	ldr	r3, [r3, #16]
3418552e:	f043 0301 	orr.w	r3, r3, #1
34185532:	68fa      	ldr	r2, [r7, #12]
34185534:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34185538:	6113      	str	r3, [r2, #16]

  /* Place 0x00 in testdin */
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3418553a:	68fb      	ldr	r3, [r7, #12]
3418553c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34185540:	695b      	ldr	r3, [r3, #20]
34185542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34185546:	68fa      	ldr	r2, [r7, #12]
34185548:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418554c:	6153      	str	r3, [r2, #20]

  /* Set testclk to low (with the falling edge on testclk, the testdin signal content is latched internally) */
  CLEAR_REG(hcsi->PTCR0);
3418554e:	68fb      	ldr	r3, [r7, #12]
34185550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34185554:	461a      	mov	r2, r3
34185556:	2300      	movs	r3, #0
34185558:	6113      	str	r3, [r2, #16]

  /* Set testen to low */
  CLEAR_REG(hcsi->PTCR1);
3418555a:	68fb      	ldr	r3, [r7, #12]
3418555c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34185560:	461a      	mov	r2, r3
34185562:	2300      	movs	r3, #0
34185564:	6153      	str	r3, [r2, #20]

  /* Place the 8-bit word corresponding to the testcode MSBs in testdin */
  SET_BIT(hcsi->PTCR1, reg_msb & 0xFFU);
34185566:	68fb      	ldr	r3, [r7, #12]
34185568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418556c:	695a      	ldr	r2, [r3, #20]
3418556e:	68bb      	ldr	r3, [r7, #8]
34185570:	b2db      	uxtb	r3, r3
34185572:	4313      	orrs	r3, r2
34185574:	68fa      	ldr	r2, [r7, #12]
34185576:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418557a:	6153      	str	r3, [r2, #20]

  /* Set testclk to high */
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
3418557c:	68fb      	ldr	r3, [r7, #12]
3418557e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34185582:	691b      	ldr	r3, [r3, #16]
34185584:	f043 0301 	orr.w	r3, r3, #1
34185588:	68fa      	ldr	r2, [r7, #12]
3418558a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418558e:	6113      	str	r3, [r2, #16]

  /* For writing the 8-bit testcode LSBs */
  /* Set testclk to low */
  CLEAR_REG(hcsi->PTCR0);
34185590:	68fb      	ldr	r3, [r7, #12]
34185592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34185596:	461a      	mov	r2, r3
34185598:	2300      	movs	r3, #0
3418559a:	6113      	str	r3, [r2, #16]

  /* Set testen to high */
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3418559c:	68fb      	ldr	r3, [r7, #12]
3418559e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341855a2:	695b      	ldr	r3, [r3, #20]
341855a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
341855a8:	68fa      	ldr	r2, [r7, #12]
341855aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341855ae:	6153      	str	r3, [r2, #20]

  /* Set testclk to high */
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
341855b0:	68fb      	ldr	r3, [r7, #12]
341855b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341855b6:	691b      	ldr	r3, [r3, #16]
341855b8:	f043 0301 	orr.w	r3, r3, #1
341855bc:	68fa      	ldr	r2, [r7, #12]
341855be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341855c2:	6113      	str	r3, [r2, #16]

  /* Place the 8-bit word test data in testdin */
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM | (reg_lsb & 0xFFU));
341855c4:	68fb      	ldr	r3, [r7, #12]
341855c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341855ca:	695a      	ldr	r2, [r3, #20]
341855cc:	687b      	ldr	r3, [r7, #4]
341855ce:	b2db      	uxtb	r3, r3
341855d0:	4313      	orrs	r3, r2
341855d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
341855d6:	68fa      	ldr	r2, [r7, #12]
341855d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341855dc:	6153      	str	r3, [r2, #20]

  /* Set testclk to low (with the falling edge on testclk, the testdin signal content is latched internally) */
  CLEAR_REG(hcsi->PTCR0);
341855de:	68fb      	ldr	r3, [r7, #12]
341855e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341855e4:	461a      	mov	r2, r3
341855e6:	2300      	movs	r3, #0
341855e8:	6113      	str	r3, [r2, #16]

  /* Set testen to low */
  CLEAR_REG(hcsi->PTCR1);
341855ea:	68fb      	ldr	r3, [r7, #12]
341855ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341855f0:	461a      	mov	r2, r3
341855f2:	2300      	movs	r3, #0
341855f4:	6153      	str	r3, [r2, #20]

  /* For writing the data */
  /* Place the 8-bit word corresponding to the page offset in testdin */
  SET_BIT(hcsi->PTCR1, val & 0xFFU);
341855f6:	68fb      	ldr	r3, [r7, #12]
341855f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341855fc:	695a      	ldr	r2, [r3, #20]
341855fe:	683b      	ldr	r3, [r7, #0]
34185600:	b2db      	uxtb	r3, r3
34185602:	4313      	orrs	r3, r2
34185604:	68fa      	ldr	r2, [r7, #12]
34185606:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418560a:	6153      	str	r3, [r2, #20]

  /* Set testclk to high (test data is programmed internally */
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
3418560c:	68fb      	ldr	r3, [r7, #12]
3418560e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34185612:	691b      	ldr	r3, [r3, #16]
34185614:	f043 0301 	orr.w	r3, r3, #1
34185618:	68fa      	ldr	r2, [r7, #12]
3418561a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418561e:	6113      	str	r3, [r2, #16]

  /* Finish by setting testclk to low */
  CLEAR_REG(hcsi->PTCR0);
34185620:	68fb      	ldr	r3, [r7, #12]
34185622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34185626:	461a      	mov	r2, r3
34185628:	2300      	movs	r3, #0
3418562a:	6113      	str	r3, [r2, #16]
}
3418562c:	bf00      	nop
3418562e:	3714      	adds	r7, #20
34185630:	46bd      	mov	sp, r7
34185632:	f85d 7b04 	ldr.w	r7, [sp], #4
34185636:	4770      	bx	lr

34185638 <DCMIPP_SetConfig>:
  * @param  DstAddress  Specifies the destination memory address for the captured data.
  * @param  CaptureMode Specifies the capture mode to be set for the pipe.
  * @retval None
  */
static void DCMIPP_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t DstAddress, uint32_t CaptureMode)
{
34185638:	b480      	push	{r7}
3418563a:	b085      	sub	sp, #20
3418563c:	af00      	add	r7, sp, #0
3418563e:	60f8      	str	r0, [r7, #12]
34185640:	60b9      	str	r1, [r7, #8]
34185642:	607a      	str	r2, [r7, #4]
34185644:	603b      	str	r3, [r7, #0]
  if (Pipe == DCMIPP_PIPE0)
34185646:	68bb      	ldr	r3, [r7, #8]
34185648:	2b00      	cmp	r3, #0
3418564a:	d121      	bne.n	34185690 <DCMIPP_SetConfig+0x58>
  {
    /* Update the DCMIPP pipe State */
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3418564c:	68fa      	ldr	r2, [r7, #12]
3418564e:	68bb      	ldr	r3, [r7, #8]
34185650:	4413      	add	r3, r2
34185652:	3305      	adds	r3, #5
34185654:	2202      	movs	r2, #2
34185656:	701a      	strb	r2, [r3, #0]

    /* Set the capture mode */
    hdcmipp->Instance->P0FCTCR |= CaptureMode;
34185658:	68fb      	ldr	r3, [r7, #12]
3418565a:	681b      	ldr	r3, [r3, #0]
3418565c:	f8d3 1500 	ldr.w	r1, [r3, #1280]	@ 0x500
34185660:	68fb      	ldr	r3, [r7, #12]
34185662:	681b      	ldr	r3, [r3, #0]
34185664:	683a      	ldr	r2, [r7, #0]
34185666:	430a      	orrs	r2, r1
34185668:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500

    /* Set the destination address */
    WRITE_REG(hdcmipp->Instance->P0PPM0AR1, DstAddress);
3418566c:	68fb      	ldr	r3, [r7, #12]
3418566e:	681b      	ldr	r3, [r3, #0]
34185670:	687a      	ldr	r2, [r7, #4]
34185672:	f8c3 25c4 	str.w	r2, [r3, #1476]	@ 0x5c4

    /* Enable all required interrupts lines for the PIPE0 */
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR |
34185676:	68fb      	ldr	r3, [r7, #12]
34185678:	681b      	ldr	r3, [r3, #0]
3418567a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
3418567e:	68fa      	ldr	r2, [r7, #12]
34185680:	6812      	ldr	r2, [r2, #0]
34185682:	f443 4306 	orr.w	r3, r3, #34304	@ 0x8600
34185686:	f043 0320 	orr.w	r3, r3, #32
3418568a:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0

    /* Enable all required interrupts lines for the PIPE2 */
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_OVR | DCMIPP_IT_PIPE2_VSYNC |
                           DCMIPP_IT_AXI_TRANSFER_ERROR);
  }
}
3418568e:	e045      	b.n	3418571c <DCMIPP_SetConfig+0xe4>
  else if (Pipe == DCMIPP_PIPE1)
34185690:	68bb      	ldr	r3, [r7, #8]
34185692:	2b01      	cmp	r3, #1
34185694:	d121      	bne.n	341856da <DCMIPP_SetConfig+0xa2>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
34185696:	68fa      	ldr	r2, [r7, #12]
34185698:	68bb      	ldr	r3, [r7, #8]
3418569a:	4413      	add	r3, r2
3418569c:	3305      	adds	r3, #5
3418569e:	2202      	movs	r2, #2
341856a0:	701a      	strb	r2, [r3, #0]
    hdcmipp->Instance->P1FCTCR |= CaptureMode;
341856a2:	68fb      	ldr	r3, [r7, #12]
341856a4:	681b      	ldr	r3, [r3, #0]
341856a6:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
341856aa:	68fb      	ldr	r3, [r7, #12]
341856ac:	681b      	ldr	r3, [r3, #0]
341856ae:	683a      	ldr	r2, [r7, #0]
341856b0:	430a      	orrs	r2, r1
341856b2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
    WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
341856b6:	68fb      	ldr	r3, [r7, #12]
341856b8:	681b      	ldr	r3, [r3, #0]
341856ba:	687a      	ldr	r2, [r7, #4]
341856bc:	f8c3 29c4 	str.w	r2, [r3, #2500]	@ 0x9c4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME  | DCMIPP_IT_PIPE1_OVR | DCMIPP_IT_PIPE1_VSYNC |
341856c0:	68fb      	ldr	r3, [r7, #12]
341856c2:	681b      	ldr	r3, [r3, #0]
341856c4:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
341856c8:	68fa      	ldr	r2, [r7, #12]
341856ca:	6812      	ldr	r2, [r2, #0]
341856cc:	f443 0306 	orr.w	r3, r3, #8781824	@ 0x860000
341856d0:	f043 0320 	orr.w	r3, r3, #32
341856d4:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
}
341856d8:	e020      	b.n	3418571c <DCMIPP_SetConfig+0xe4>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
341856da:	68fa      	ldr	r2, [r7, #12]
341856dc:	68bb      	ldr	r3, [r7, #8]
341856de:	4413      	add	r3, r2
341856e0:	3305      	adds	r3, #5
341856e2:	2202      	movs	r2, #2
341856e4:	701a      	strb	r2, [r3, #0]
    hdcmipp->Instance->P2FCTCR |= CaptureMode;
341856e6:	68fb      	ldr	r3, [r7, #12]
341856e8:	681b      	ldr	r3, [r3, #0]
341856ea:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
341856ee:	68fb      	ldr	r3, [r7, #12]
341856f0:	681b      	ldr	r3, [r3, #0]
341856f2:	683a      	ldr	r2, [r7, #0]
341856f4:	430a      	orrs	r2, r1
341856f6:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
    WRITE_REG(hdcmipp->Instance->P2PPM0AR1, DstAddress);
341856fa:	68fb      	ldr	r3, [r7, #12]
341856fc:	681b      	ldr	r3, [r3, #0]
341856fe:	687a      	ldr	r2, [r7, #4]
34185700:	f8c3 2dc4 	str.w	r2, [r3, #3524]	@ 0xdc4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_OVR | DCMIPP_IT_PIPE2_VSYNC |
34185704:	68fb      	ldr	r3, [r7, #12]
34185706:	681b      	ldr	r3, [r3, #0]
34185708:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
3418570c:	68fa      	ldr	r2, [r7, #12]
3418570e:	6812      	ldr	r2, [r2, #0]
34185710:	f043 4306 	orr.w	r3, r3, #2248146944	@ 0x86000000
34185714:	f043 0320 	orr.w	r3, r3, #32
34185718:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
}
3418571c:	bf00      	nop
3418571e:	3714      	adds	r7, #20
34185720:	46bd      	mov	sp, r7
34185722:	f85d 7b04 	ldr.w	r7, [sp], #4
34185726:	4770      	bx	lr

34185728 <DCMIPP_EnableCapture>:
  * @param  hdcmipp     Pointer to DCMIPP handle
  * @param  Pipe        Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
static void DCMIPP_EnableCapture(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34185728:	b480      	push	{r7}
3418572a:	b083      	sub	sp, #12
3418572c:	af00      	add	r7, sp, #0
3418572e:	6078      	str	r0, [r7, #4]
34185730:	6039      	str	r1, [r7, #0]
  if (Pipe == DCMIPP_PIPE0)
34185732:	683b      	ldr	r3, [r7, #0]
34185734:	2b00      	cmp	r3, #0
34185736:	d114      	bne.n	34185762 <DCMIPP_EnableCapture+0x3a>
  {
    /* Activate the Pipe */
    SET_BIT(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_PIPEN);
34185738:	687b      	ldr	r3, [r7, #4]
3418573a:	681b      	ldr	r3, [r3, #0]
3418573c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
34185740:	687b      	ldr	r3, [r7, #4]
34185742:	681b      	ldr	r3, [r3, #0]
34185744:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34185748:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

    /* Start the capture */
    SET_BIT(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_CPTREQ);
3418574c:	687b      	ldr	r3, [r7, #4]
3418574e:	681b      	ldr	r3, [r3, #0]
34185750:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
34185754:	687b      	ldr	r3, [r7, #4]
34185756:	681b      	ldr	r3, [r3, #0]
34185758:	f042 0208 	orr.w	r2, r2, #8
3418575c:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
    SET_BIT(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_PIPEN);

    /* Start the capture */
    SET_BIT(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_CPTREQ);
  }
}
34185760:	e031      	b.n	341857c6 <DCMIPP_EnableCapture+0x9e>
  else if (Pipe == DCMIPP_PIPE1)
34185762:	683b      	ldr	r3, [r7, #0]
34185764:	2b01      	cmp	r3, #1
34185766:	d11a      	bne.n	3418579e <DCMIPP_EnableCapture+0x76>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
34185768:	687a      	ldr	r2, [r7, #4]
3418576a:	683b      	ldr	r3, [r7, #0]
3418576c:	4413      	add	r3, r2
3418576e:	3305      	adds	r3, #5
34185770:	2202      	movs	r2, #2
34185772:	701a      	strb	r2, [r3, #0]
    SET_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEN);
34185774:	687b      	ldr	r3, [r7, #4]
34185776:	681b      	ldr	r3, [r3, #0]
34185778:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
3418577c:	687b      	ldr	r3, [r7, #4]
3418577e:	681b      	ldr	r3, [r3, #0]
34185780:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34185784:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    SET_BIT(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_CPTREQ);
34185788:	687b      	ldr	r3, [r7, #4]
3418578a:	681b      	ldr	r3, [r3, #0]
3418578c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
34185790:	687b      	ldr	r3, [r7, #4]
34185792:	681b      	ldr	r3, [r3, #0]
34185794:	f042 0208 	orr.w	r2, r2, #8
34185798:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
3418579c:	e013      	b.n	341857c6 <DCMIPP_EnableCapture+0x9e>
    SET_BIT(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_PIPEN);
3418579e:	687b      	ldr	r3, [r7, #4]
341857a0:	681b      	ldr	r3, [r3, #0]
341857a2:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
341857a6:	687b      	ldr	r3, [r7, #4]
341857a8:	681b      	ldr	r3, [r3, #0]
341857aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
341857ae:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
    SET_BIT(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_CPTREQ);
341857b2:	687b      	ldr	r3, [r7, #4]
341857b4:	681b      	ldr	r3, [r3, #0]
341857b6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
341857ba:	687b      	ldr	r3, [r7, #4]
341857bc:	681b      	ldr	r3, [r3, #0]
341857be:	f042 0208 	orr.w	r2, r2, #8
341857c2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
}
341857c6:	bf00      	nop
341857c8:	370c      	adds	r7, #12
341857ca:	46bd      	mov	sp, r7
341857cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341857d0:	4770      	bx	lr
	...

341857d4 <DCMIPP_CSI_SetVCConfig>:
  * @param  hdcmipp         Pointer to DCMIPP handle
  * @param  Pipe            Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @param  VirtualChannel  Specifies the virtual channel, can be a value from @ref DCMIPP_Virtual_Channel
  */
static HAL_StatusTypeDef DCMIPP_CSI_SetVCConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t VirtualChannel)
{
341857d4:	b580      	push	{r7, lr}
341857d6:	b086      	sub	sp, #24
341857d8:	af00      	add	r7, sp, #0
341857da:	60f8      	str	r0, [r7, #12]
341857dc:	60b9      	str	r1, [r7, #8]
341857de:	607a      	str	r2, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
341857e0:	4b48      	ldr	r3, [pc, #288]	@ (34185904 <DCMIPP_CSI_SetVCConfig+0x130>)
341857e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Set Virtual Channel ID for the selected Pipe */
  if (Pipe == DCMIPP_PIPE0)
341857e4:	68bb      	ldr	r3, [r7, #8]
341857e6:	2b00      	cmp	r3, #0
341857e8:	d10d      	bne.n	34185806 <DCMIPP_CSI_SetVCConfig+0x32>
  {
    MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_VC, VirtualChannel << DCMIPP_P0FSCR_VC_Pos);
341857ea:	68fb      	ldr	r3, [r7, #12]
341857ec:	681b      	ldr	r3, [r3, #0]
341857ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
341857f2:	f423 11c0 	bic.w	r1, r3, #1572864	@ 0x180000
341857f6:	687b      	ldr	r3, [r7, #4]
341857f8:	04da      	lsls	r2, r3, #19
341857fa:	68fb      	ldr	r3, [r7, #12]
341857fc:	681b      	ldr	r3, [r3, #0]
341857fe:	430a      	orrs	r2, r1
34185800:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
34185804:	e026      	b.n	34185854 <DCMIPP_CSI_SetVCConfig+0x80>
  }
  else if (Pipe == DCMIPP_PIPE1)
34185806:	68bb      	ldr	r3, [r7, #8]
34185808:	2b01      	cmp	r3, #1
3418580a:	d10d      	bne.n	34185828 <DCMIPP_CSI_SetVCConfig+0x54>
  {
    MODIFY_REG(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_VC, VirtualChannel << DCMIPP_P1FSCR_VC_Pos);
3418580c:	68fb      	ldr	r3, [r7, #12]
3418580e:	681b      	ldr	r3, [r3, #0]
34185810:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
34185814:	f423 11c0 	bic.w	r1, r3, #1572864	@ 0x180000
34185818:	687b      	ldr	r3, [r7, #4]
3418581a:	04da      	lsls	r2, r3, #19
3418581c:	68fb      	ldr	r3, [r7, #12]
3418581e:	681b      	ldr	r3, [r3, #0]
34185820:	430a      	orrs	r2, r1
34185822:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
34185826:	e015      	b.n	34185854 <DCMIPP_CSI_SetVCConfig+0x80>
  }
  else
  {
    /* Those bit fields are meaningful when PIPEDIFF = 1: Pipe1, Pipe2 is fully independent */
    if ((hdcmipp->Instance->P1FSCR & DCMIPP_P1FSCR_PIPEDIFF) == DCMIPP_P1FSCR_PIPEDIFF)
34185828:	68fb      	ldr	r3, [r7, #12]
3418582a:	681b      	ldr	r3, [r3, #0]
3418582c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
34185830:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34185834:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34185838:	d10c      	bne.n	34185854 <DCMIPP_CSI_SetVCConfig+0x80>
    {
      /* Set Virtual Channel ID and DTIDA for Pipe2 */
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_VC, VirtualChannel << DCMIPP_P2FSCR_VC_Pos);
3418583a:	68fb      	ldr	r3, [r7, #12]
3418583c:	681b      	ldr	r3, [r3, #0]
3418583e:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34185842:	f423 11c0 	bic.w	r1, r3, #1572864	@ 0x180000
34185846:	687b      	ldr	r3, [r7, #4]
34185848:	04da      	lsls	r2, r3, #19
3418584a:	68fb      	ldr	r3, [r7, #12]
3418584c:	681b      	ldr	r3, [r3, #0]
3418584e:	430a      	orrs	r2, r1
34185850:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
    }
  }

  /* Enable the selected virtual channel */
  switch (VirtualChannel)
34185854:	687b      	ldr	r3, [r7, #4]
34185856:	2b03      	cmp	r3, #3
34185858:	d017      	beq.n	3418588a <DCMIPP_CSI_SetVCConfig+0xb6>
3418585a:	687b      	ldr	r3, [r7, #4]
3418585c:	2b03      	cmp	r3, #3
3418585e:	d81b      	bhi.n	34185898 <DCMIPP_CSI_SetVCConfig+0xc4>
34185860:	687b      	ldr	r3, [r7, #4]
34185862:	2b01      	cmp	r3, #1
34185864:	d003      	beq.n	3418586e <DCMIPP_CSI_SetVCConfig+0x9a>
34185866:	687b      	ldr	r3, [r7, #4]
34185868:	2b02      	cmp	r3, #2
3418586a:	d007      	beq.n	3418587c <DCMIPP_CSI_SetVCConfig+0xa8>
3418586c:	e014      	b.n	34185898 <DCMIPP_CSI_SetVCConfig+0xc4>
  {
    case DCMIPP_VIRTUAL_CHANNEL1:
      SET_BIT(csi_instance->CR, CSI_CR_VC1START);
3418586e:	697b      	ldr	r3, [r7, #20]
34185870:	681b      	ldr	r3, [r3, #0]
34185872:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
34185876:	697b      	ldr	r3, [r7, #20]
34185878:	601a      	str	r2, [r3, #0]
      break;
3418587a:	e014      	b.n	341858a6 <DCMIPP_CSI_SetVCConfig+0xd2>
    case DCMIPP_VIRTUAL_CHANNEL2:
      SET_BIT(csi_instance->CR, CSI_CR_VC2START);
3418587c:	697b      	ldr	r3, [r7, #20]
3418587e:	681b      	ldr	r3, [r3, #0]
34185880:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
34185884:	697b      	ldr	r3, [r7, #20]
34185886:	601a      	str	r2, [r3, #0]
      break;
34185888:	e00d      	b.n	341858a6 <DCMIPP_CSI_SetVCConfig+0xd2>
    case DCMIPP_VIRTUAL_CHANNEL3:
      SET_BIT(csi_instance->CR, CSI_CR_VC3START);
3418588a:	697b      	ldr	r3, [r7, #20]
3418588c:	681b      	ldr	r3, [r3, #0]
3418588e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
34185892:	697b      	ldr	r3, [r7, #20]
34185894:	601a      	str	r2, [r3, #0]
      break;
34185896:	e006      	b.n	341858a6 <DCMIPP_CSI_SetVCConfig+0xd2>
    default:
      /* DCMIPP_VIRTUAL_CHANNEL0: */
      SET_BIT(csi_instance->CR, CSI_CR_VC0START);
34185898:	697b      	ldr	r3, [r7, #20]
3418589a:	681b      	ldr	r3, [r3, #0]
3418589c:	f043 0204 	orr.w	r2, r3, #4
341858a0:	697b      	ldr	r3, [r7, #20]
341858a2:	601a      	str	r2, [r3, #0]
      break;
341858a4:	bf00      	nop
  }

  /* wait for the selected virtual channel active state */
  tickstart = HAL_GetTick();
341858a6:	f7fd f8c9 	bl	34182a3c <HAL_GetTick>
341858aa:	6138      	str	r0, [r7, #16]
  do
  {
    if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
341858ac:	f7fd f8c6 	bl	34182a3c <HAL_GetTick>
341858b0:	4602      	mov	r2, r0
341858b2:	693b      	ldr	r3, [r7, #16]
341858b4:	1ad3      	subs	r3, r2, r3
341858b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
341858ba:	d901      	bls.n	341858c0 <DCMIPP_CSI_SetVCConfig+0xec>
    {
      return HAL_ERROR;
341858bc:	2301      	movs	r3, #1
341858be:	e01c      	b.n	341858fa <DCMIPP_CSI_SetVCConfig+0x126>
    }
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) != (CSI_SR0_VC0STATEF << VirtualChannel));
341858c0:	697b      	ldr	r3, [r7, #20]
341858c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
341858c6:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
341858ca:	687b      	ldr	r3, [r7, #4]
341858cc:	fa01 f303 	lsl.w	r3, r1, r3
341858d0:	401a      	ands	r2, r3
341858d2:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
341858d6:	687b      	ldr	r3, [r7, #4]
341858d8:	fa01 f303 	lsl.w	r3, r1, r3
341858dc:	429a      	cmp	r2, r3
341858de:	d1e5      	bne.n	341858ac <DCMIPP_CSI_SetVCConfig+0xd8>

  /* Enable the SOF and EOF interrupts for the selected virtual channel */
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, (DCMIPP_CSI_IT_EOF0 << VirtualChannel) | \
341858e0:	697b      	ldr	r3, [r7, #20]
341858e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
341858e6:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
341858ea:	687b      	ldr	r3, [r7, #4]
341858ec:	fa01 f303 	lsl.w	r3, r1, r3
341858f0:	431a      	orrs	r2, r3
341858f2:	697b      	ldr	r3, [r7, #20]
341858f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (DCMIPP_CSI_IT_SOF0 << VirtualChannel));
  return HAL_OK;
341858f8:	2300      	movs	r3, #0
}
341858fa:	4618      	mov	r0, r3
341858fc:	3718      	adds	r7, #24
341858fe:	46bd      	mov	sp, r7
34185900:	bd80      	pop	{r7, pc}
34185902:	bf00      	nop
34185904:	58006000 	.word	0x58006000

34185908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34185908:	b480      	push	{r7}
3418590a:	b087      	sub	sp, #28
3418590c:	af00      	add	r7, sp, #0
3418590e:	6078      	str	r0, [r7, #4]
34185910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34185912:	2300      	movs	r3, #0
34185914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34185916:	e180      	b.n	34185c1a <HAL_GPIO_Init+0x312>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34185918:	683b      	ldr	r3, [r7, #0]
3418591a:	681a      	ldr	r2, [r3, #0]
3418591c:	2101      	movs	r1, #1
3418591e:	697b      	ldr	r3, [r7, #20]
34185920:	fa01 f303 	lsl.w	r3, r1, r3
34185924:	4013      	ands	r3, r2
34185926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34185928:	68fb      	ldr	r3, [r7, #12]
3418592a:	2b00      	cmp	r3, #0
3418592c:	f000 8172 	beq.w	34185c14 <HAL_GPIO_Init+0x30c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34185930:	683b      	ldr	r3, [r7, #0]
34185932:	685b      	ldr	r3, [r3, #4]
34185934:	f003 0303 	and.w	r3, r3, #3
34185938:	2b01      	cmp	r3, #1
3418593a:	d005      	beq.n	34185948 <HAL_GPIO_Init+0x40>
3418593c:	683b      	ldr	r3, [r7, #0]
3418593e:	685b      	ldr	r3, [r3, #4]
34185940:	f003 0303 	and.w	r3, r3, #3
34185944:	2b02      	cmp	r3, #2
34185946:	d130      	bne.n	341859aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34185948:	687b      	ldr	r3, [r7, #4]
3418594a:	689b      	ldr	r3, [r3, #8]
3418594c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3418594e:	697b      	ldr	r3, [r7, #20]
34185950:	005b      	lsls	r3, r3, #1
34185952:	2203      	movs	r2, #3
34185954:	fa02 f303 	lsl.w	r3, r2, r3
34185958:	43db      	mvns	r3, r3
3418595a:	693a      	ldr	r2, [r7, #16]
3418595c:	4013      	ands	r3, r2
3418595e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34185960:	683b      	ldr	r3, [r7, #0]
34185962:	68da      	ldr	r2, [r3, #12]
34185964:	697b      	ldr	r3, [r7, #20]
34185966:	005b      	lsls	r3, r3, #1
34185968:	fa02 f303 	lsl.w	r3, r2, r3
3418596c:	693a      	ldr	r2, [r7, #16]
3418596e:	4313      	orrs	r3, r2
34185970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
34185972:	687b      	ldr	r3, [r7, #4]
34185974:	693a      	ldr	r2, [r7, #16]
34185976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34185978:	687b      	ldr	r3, [r7, #4]
3418597a:	685b      	ldr	r3, [r3, #4]
3418597c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
3418597e:	2201      	movs	r2, #1
34185980:	697b      	ldr	r3, [r7, #20]
34185982:	fa02 f303 	lsl.w	r3, r2, r3
34185986:	43db      	mvns	r3, r3
34185988:	693a      	ldr	r2, [r7, #16]
3418598a:	4013      	ands	r3, r2
3418598c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
3418598e:	683b      	ldr	r3, [r7, #0]
34185990:	685b      	ldr	r3, [r3, #4]
34185992:	091b      	lsrs	r3, r3, #4
34185994:	f003 0201 	and.w	r2, r3, #1
34185998:	697b      	ldr	r3, [r7, #20]
3418599a:	fa02 f303 	lsl.w	r3, r2, r3
3418599e:	693a      	ldr	r2, [r7, #16]
341859a0:	4313      	orrs	r3, r2
341859a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
341859a4:	687b      	ldr	r3, [r7, #4]
341859a6:	693a      	ldr	r2, [r7, #16]
341859a8:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
341859aa:	683b      	ldr	r3, [r7, #0]
341859ac:	685b      	ldr	r3, [r3, #4]
341859ae:	f003 0303 	and.w	r3, r3, #3
341859b2:	2b03      	cmp	r3, #3
341859b4:	d109      	bne.n	341859ca <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
341859b6:	683b      	ldr	r3, [r7, #0]
341859b8:	685b      	ldr	r3, [r3, #4]
341859ba:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
341859be:	2b03      	cmp	r3, #3
341859c0:	d11b      	bne.n	341859fa <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
341859c2:	683b      	ldr	r3, [r7, #0]
341859c4:	689b      	ldr	r3, [r3, #8]
341859c6:	2b01      	cmp	r3, #1
341859c8:	d017      	beq.n	341859fa <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
341859ca:	687b      	ldr	r3, [r7, #4]
341859cc:	68db      	ldr	r3, [r3, #12]
341859ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
341859d0:	697b      	ldr	r3, [r7, #20]
341859d2:	005b      	lsls	r3, r3, #1
341859d4:	2203      	movs	r2, #3
341859d6:	fa02 f303 	lsl.w	r3, r2, r3
341859da:	43db      	mvns	r3, r3
341859dc:	693a      	ldr	r2, [r7, #16]
341859de:	4013      	ands	r3, r2
341859e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
341859e2:	683b      	ldr	r3, [r7, #0]
341859e4:	689a      	ldr	r2, [r3, #8]
341859e6:	697b      	ldr	r3, [r7, #20]
341859e8:	005b      	lsls	r3, r3, #1
341859ea:	fa02 f303 	lsl.w	r3, r2, r3
341859ee:	693a      	ldr	r2, [r7, #16]
341859f0:	4313      	orrs	r3, r2
341859f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
341859f4:	687b      	ldr	r3, [r7, #4]
341859f6:	693a      	ldr	r2, [r7, #16]
341859f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
341859fa:	683b      	ldr	r3, [r7, #0]
341859fc:	685b      	ldr	r3, [r3, #4]
341859fe:	f003 0303 	and.w	r3, r3, #3
34185a02:	2b02      	cmp	r3, #2
34185a04:	d123      	bne.n	34185a4e <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
34185a06:	697b      	ldr	r3, [r7, #20]
34185a08:	08da      	lsrs	r2, r3, #3
34185a0a:	687b      	ldr	r3, [r7, #4]
34185a0c:	3208      	adds	r2, #8
34185a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34185a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34185a14:	697b      	ldr	r3, [r7, #20]
34185a16:	f003 0307 	and.w	r3, r3, #7
34185a1a:	009b      	lsls	r3, r3, #2
34185a1c:	220f      	movs	r2, #15
34185a1e:	fa02 f303 	lsl.w	r3, r2, r3
34185a22:	43db      	mvns	r3, r3
34185a24:	693a      	ldr	r2, [r7, #16]
34185a26:	4013      	ands	r3, r2
34185a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34185a2a:	683b      	ldr	r3, [r7, #0]
34185a2c:	691a      	ldr	r2, [r3, #16]
34185a2e:	697b      	ldr	r3, [r7, #20]
34185a30:	f003 0307 	and.w	r3, r3, #7
34185a34:	009b      	lsls	r3, r3, #2
34185a36:	fa02 f303 	lsl.w	r3, r2, r3
34185a3a:	693a      	ldr	r2, [r7, #16]
34185a3c:	4313      	orrs	r3, r2
34185a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34185a40:	697b      	ldr	r3, [r7, #20]
34185a42:	08da      	lsrs	r2, r3, #3
34185a44:	687b      	ldr	r3, [r7, #4]
34185a46:	3208      	adds	r2, #8
34185a48:	6939      	ldr	r1, [r7, #16]
34185a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
34185a4e:	687b      	ldr	r3, [r7, #4]
34185a50:	681b      	ldr	r3, [r3, #0]
34185a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34185a54:	697b      	ldr	r3, [r7, #20]
34185a56:	005b      	lsls	r3, r3, #1
34185a58:	2203      	movs	r2, #3
34185a5a:	fa02 f303 	lsl.w	r3, r2, r3
34185a5e:	43db      	mvns	r3, r3
34185a60:	693a      	ldr	r2, [r7, #16]
34185a62:	4013      	ands	r3, r2
34185a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34185a66:	683b      	ldr	r3, [r7, #0]
34185a68:	685b      	ldr	r3, [r3, #4]
34185a6a:	f003 0203 	and.w	r2, r3, #3
34185a6e:	697b      	ldr	r3, [r7, #20]
34185a70:	005b      	lsls	r3, r3, #1
34185a72:	fa02 f303 	lsl.w	r3, r2, r3
34185a76:	693a      	ldr	r2, [r7, #16]
34185a78:	4313      	orrs	r3, r2
34185a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
34185a7c:	687b      	ldr	r3, [r7, #4]
34185a7e:	693a      	ldr	r2, [r7, #16]
34185a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34185a82:	683b      	ldr	r3, [r7, #0]
34185a84:	685b      	ldr	r3, [r3, #4]
34185a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
34185a8a:	2b00      	cmp	r3, #0
34185a8c:	f000 80c2 	beq.w	34185c14 <HAL_GPIO_Init+0x30c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34185a90:	4a69      	ldr	r2, [pc, #420]	@ (34185c38 <HAL_GPIO_Init+0x330>)
34185a92:	697b      	ldr	r3, [r7, #20]
34185a94:	089b      	lsrs	r3, r3, #2
34185a96:	3318      	adds	r3, #24
34185a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34185a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34185a9e:	697b      	ldr	r3, [r7, #20]
34185aa0:	f003 0303 	and.w	r3, r3, #3
34185aa4:	00db      	lsls	r3, r3, #3
34185aa6:	220f      	movs	r2, #15
34185aa8:	fa02 f303 	lsl.w	r3, r2, r3
34185aac:	43db      	mvns	r3, r3
34185aae:	693a      	ldr	r2, [r7, #16]
34185ab0:	4013      	ands	r3, r2
34185ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34185ab4:	687b      	ldr	r3, [r7, #4]
34185ab6:	4a61      	ldr	r2, [pc, #388]	@ (34185c3c <HAL_GPIO_Init+0x334>)
34185ab8:	4293      	cmp	r3, r2
34185aba:	d043      	beq.n	34185b44 <HAL_GPIO_Init+0x23c>
34185abc:	687b      	ldr	r3, [r7, #4]
34185abe:	4a60      	ldr	r2, [pc, #384]	@ (34185c40 <HAL_GPIO_Init+0x338>)
34185ac0:	4293      	cmp	r3, r2
34185ac2:	d03d      	beq.n	34185b40 <HAL_GPIO_Init+0x238>
34185ac4:	687b      	ldr	r3, [r7, #4]
34185ac6:	4a5f      	ldr	r2, [pc, #380]	@ (34185c44 <HAL_GPIO_Init+0x33c>)
34185ac8:	4293      	cmp	r3, r2
34185aca:	d037      	beq.n	34185b3c <HAL_GPIO_Init+0x234>
34185acc:	687b      	ldr	r3, [r7, #4]
34185ace:	4a5e      	ldr	r2, [pc, #376]	@ (34185c48 <HAL_GPIO_Init+0x340>)
34185ad0:	4293      	cmp	r3, r2
34185ad2:	d031      	beq.n	34185b38 <HAL_GPIO_Init+0x230>
34185ad4:	687b      	ldr	r3, [r7, #4]
34185ad6:	4a5d      	ldr	r2, [pc, #372]	@ (34185c4c <HAL_GPIO_Init+0x344>)
34185ad8:	4293      	cmp	r3, r2
34185ada:	d02b      	beq.n	34185b34 <HAL_GPIO_Init+0x22c>
34185adc:	687b      	ldr	r3, [r7, #4]
34185ade:	4a5c      	ldr	r2, [pc, #368]	@ (34185c50 <HAL_GPIO_Init+0x348>)
34185ae0:	4293      	cmp	r3, r2
34185ae2:	d025      	beq.n	34185b30 <HAL_GPIO_Init+0x228>
34185ae4:	687b      	ldr	r3, [r7, #4]
34185ae6:	4a5b      	ldr	r2, [pc, #364]	@ (34185c54 <HAL_GPIO_Init+0x34c>)
34185ae8:	4293      	cmp	r3, r2
34185aea:	d01f      	beq.n	34185b2c <HAL_GPIO_Init+0x224>
34185aec:	687b      	ldr	r3, [r7, #4]
34185aee:	4a5a      	ldr	r2, [pc, #360]	@ (34185c58 <HAL_GPIO_Init+0x350>)
34185af0:	4293      	cmp	r3, r2
34185af2:	d019      	beq.n	34185b28 <HAL_GPIO_Init+0x220>
34185af4:	687b      	ldr	r3, [r7, #4]
34185af6:	4a59      	ldr	r2, [pc, #356]	@ (34185c5c <HAL_GPIO_Init+0x354>)
34185af8:	4293      	cmp	r3, r2
34185afa:	d013      	beq.n	34185b24 <HAL_GPIO_Init+0x21c>
34185afc:	687b      	ldr	r3, [r7, #4]
34185afe:	4a58      	ldr	r2, [pc, #352]	@ (34185c60 <HAL_GPIO_Init+0x358>)
34185b00:	4293      	cmp	r3, r2
34185b02:	d00d      	beq.n	34185b20 <HAL_GPIO_Init+0x218>
34185b04:	687b      	ldr	r3, [r7, #4]
34185b06:	4a57      	ldr	r2, [pc, #348]	@ (34185c64 <HAL_GPIO_Init+0x35c>)
34185b08:	4293      	cmp	r3, r2
34185b0a:	d007      	beq.n	34185b1c <HAL_GPIO_Init+0x214>
34185b0c:	687b      	ldr	r3, [r7, #4]
34185b0e:	4a56      	ldr	r2, [pc, #344]	@ (34185c68 <HAL_GPIO_Init+0x360>)
34185b10:	4293      	cmp	r3, r2
34185b12:	d101      	bne.n	34185b18 <HAL_GPIO_Init+0x210>
34185b14:	230b      	movs	r3, #11
34185b16:	e016      	b.n	34185b46 <HAL_GPIO_Init+0x23e>
34185b18:	2310      	movs	r3, #16
34185b1a:	e014      	b.n	34185b46 <HAL_GPIO_Init+0x23e>
34185b1c:	230a      	movs	r3, #10
34185b1e:	e012      	b.n	34185b46 <HAL_GPIO_Init+0x23e>
34185b20:	2309      	movs	r3, #9
34185b22:	e010      	b.n	34185b46 <HAL_GPIO_Init+0x23e>
34185b24:	2308      	movs	r3, #8
34185b26:	e00e      	b.n	34185b46 <HAL_GPIO_Init+0x23e>
34185b28:	2307      	movs	r3, #7
34185b2a:	e00c      	b.n	34185b46 <HAL_GPIO_Init+0x23e>
34185b2c:	2306      	movs	r3, #6
34185b2e:	e00a      	b.n	34185b46 <HAL_GPIO_Init+0x23e>
34185b30:	2305      	movs	r3, #5
34185b32:	e008      	b.n	34185b46 <HAL_GPIO_Init+0x23e>
34185b34:	2304      	movs	r3, #4
34185b36:	e006      	b.n	34185b46 <HAL_GPIO_Init+0x23e>
34185b38:	2303      	movs	r3, #3
34185b3a:	e004      	b.n	34185b46 <HAL_GPIO_Init+0x23e>
34185b3c:	2302      	movs	r3, #2
34185b3e:	e002      	b.n	34185b46 <HAL_GPIO_Init+0x23e>
34185b40:	2301      	movs	r3, #1
34185b42:	e000      	b.n	34185b46 <HAL_GPIO_Init+0x23e>
34185b44:	2300      	movs	r3, #0
34185b46:	697a      	ldr	r2, [r7, #20]
34185b48:	f002 0203 	and.w	r2, r2, #3
34185b4c:	00d2      	lsls	r2, r2, #3
34185b4e:	4093      	lsls	r3, r2
34185b50:	693a      	ldr	r2, [r7, #16]
34185b52:	4313      	orrs	r3, r2
34185b54:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
34185b56:	4938      	ldr	r1, [pc, #224]	@ (34185c38 <HAL_GPIO_Init+0x330>)
34185b58:	697b      	ldr	r3, [r7, #20]
34185b5a:	089b      	lsrs	r3, r3, #2
34185b5c:	3318      	adds	r3, #24
34185b5e:	693a      	ldr	r2, [r7, #16]
34185b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34185b64:	4b34      	ldr	r3, [pc, #208]	@ (34185c38 <HAL_GPIO_Init+0x330>)
34185b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34185b6c:	68fb      	ldr	r3, [r7, #12]
34185b6e:	43db      	mvns	r3, r3
34185b70:	693a      	ldr	r2, [r7, #16]
34185b72:	4013      	ands	r3, r2
34185b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
34185b76:	683b      	ldr	r3, [r7, #0]
34185b78:	685b      	ldr	r3, [r3, #4]
34185b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34185b7e:	2b00      	cmp	r3, #0
34185b80:	d003      	beq.n	34185b8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
34185b82:	693a      	ldr	r2, [r7, #16]
34185b84:	68fb      	ldr	r3, [r7, #12]
34185b86:	4313      	orrs	r3, r2
34185b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34185b8a:	4a2b      	ldr	r2, [pc, #172]	@ (34185c38 <HAL_GPIO_Init+0x330>)
34185b8c:	693b      	ldr	r3, [r7, #16]
34185b8e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
34185b92:	4b29      	ldr	r3, [pc, #164]	@ (34185c38 <HAL_GPIO_Init+0x330>)
34185b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34185b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34185b9a:	68fb      	ldr	r3, [r7, #12]
34185b9c:	43db      	mvns	r3, r3
34185b9e:	693a      	ldr	r2, [r7, #16]
34185ba0:	4013      	ands	r3, r2
34185ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34185ba4:	683b      	ldr	r3, [r7, #0]
34185ba6:	685b      	ldr	r3, [r3, #4]
34185ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34185bac:	2b00      	cmp	r3, #0
34185bae:	d003      	beq.n	34185bb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
34185bb0:	693a      	ldr	r2, [r7, #16]
34185bb2:	68fb      	ldr	r3, [r7, #12]
34185bb4:	4313      	orrs	r3, r2
34185bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34185bb8:	4a1f      	ldr	r2, [pc, #124]	@ (34185c38 <HAL_GPIO_Init+0x330>)
34185bba:	693b      	ldr	r3, [r7, #16]
34185bbc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34185bc0:	4b1d      	ldr	r3, [pc, #116]	@ (34185c38 <HAL_GPIO_Init+0x330>)
34185bc2:	681b      	ldr	r3, [r3, #0]
34185bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34185bc6:	68fb      	ldr	r3, [r7, #12]
34185bc8:	43db      	mvns	r3, r3
34185bca:	693a      	ldr	r2, [r7, #16]
34185bcc:	4013      	ands	r3, r2
34185bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34185bd0:	683b      	ldr	r3, [r7, #0]
34185bd2:	685b      	ldr	r3, [r3, #4]
34185bd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34185bd8:	2b00      	cmp	r3, #0
34185bda:	d003      	beq.n	34185be4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
34185bdc:	693a      	ldr	r2, [r7, #16]
34185bde:	68fb      	ldr	r3, [r7, #12]
34185be0:	4313      	orrs	r3, r2
34185be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34185be4:	4a14      	ldr	r2, [pc, #80]	@ (34185c38 <HAL_GPIO_Init+0x330>)
34185be6:	693b      	ldr	r3, [r7, #16]
34185be8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34185bea:	4b13      	ldr	r3, [pc, #76]	@ (34185c38 <HAL_GPIO_Init+0x330>)
34185bec:	685b      	ldr	r3, [r3, #4]
34185bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34185bf0:	68fb      	ldr	r3, [r7, #12]
34185bf2:	43db      	mvns	r3, r3
34185bf4:	693a      	ldr	r2, [r7, #16]
34185bf6:	4013      	ands	r3, r2
34185bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
34185bfa:	683b      	ldr	r3, [r7, #0]
34185bfc:	685b      	ldr	r3, [r3, #4]
34185bfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34185c02:	2b00      	cmp	r3, #0
34185c04:	d003      	beq.n	34185c0e <HAL_GPIO_Init+0x306>
        {
          temp |= iocurrent;
34185c06:	693a      	ldr	r2, [r7, #16]
34185c08:	68fb      	ldr	r3, [r7, #12]
34185c0a:	4313      	orrs	r3, r2
34185c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
34185c0e:	4a0a      	ldr	r2, [pc, #40]	@ (34185c38 <HAL_GPIO_Init+0x330>)
34185c10:	693b      	ldr	r3, [r7, #16]
34185c12:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
34185c14:	697b      	ldr	r3, [r7, #20]
34185c16:	3301      	adds	r3, #1
34185c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34185c1a:	683b      	ldr	r3, [r7, #0]
34185c1c:	681a      	ldr	r2, [r3, #0]
34185c1e:	697b      	ldr	r3, [r7, #20]
34185c20:	fa22 f303 	lsr.w	r3, r2, r3
34185c24:	2b00      	cmp	r3, #0
34185c26:	f47f ae77 	bne.w	34185918 <HAL_GPIO_Init+0x10>
  }
}
34185c2a:	bf00      	nop
34185c2c:	bf00      	nop
34185c2e:	371c      	adds	r7, #28
34185c30:	46bd      	mov	sp, r7
34185c32:	f85d 7b04 	ldr.w	r7, [sp], #4
34185c36:	4770      	bx	lr
34185c38:	56025000 	.word	0x56025000
34185c3c:	56020000 	.word	0x56020000
34185c40:	56020400 	.word	0x56020400
34185c44:	56020800 	.word	0x56020800
34185c48:	56020c00 	.word	0x56020c00
34185c4c:	56021000 	.word	0x56021000
34185c50:	56021400 	.word	0x56021400
34185c54:	56021800 	.word	0x56021800
34185c58:	56021c00 	.word	0x56021c00
34185c5c:	56023400 	.word	0x56023400
34185c60:	56023800 	.word	0x56023800
34185c64:	56023c00 	.word	0x56023c00
34185c68:	56024000 	.word	0x56024000

34185c6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
34185c6c:	b480      	push	{r7}
34185c6e:	b087      	sub	sp, #28
34185c70:	af00      	add	r7, sp, #0
34185c72:	6078      	str	r0, [r7, #4]
34185c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34185c76:	2300      	movs	r3, #0
34185c78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
34185c7a:	e10f      	b.n	34185e9c <HAL_GPIO_DeInit+0x230>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
34185c7c:	2201      	movs	r2, #1
34185c7e:	697b      	ldr	r3, [r7, #20]
34185c80:	fa02 f303 	lsl.w	r3, r2, r3
34185c84:	683a      	ldr	r2, [r7, #0]
34185c86:	4013      	ands	r3, r2
34185c88:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
34185c8a:	693b      	ldr	r3, [r7, #16]
34185c8c:	2b00      	cmp	r3, #0
34185c8e:	f000 8102 	beq.w	34185e96 <HAL_GPIO_DeInit+0x22a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
34185c92:	4a89      	ldr	r2, [pc, #548]	@ (34185eb8 <HAL_GPIO_DeInit+0x24c>)
34185c94:	697b      	ldr	r3, [r7, #20]
34185c96:	089b      	lsrs	r3, r3, #2
34185c98:	3318      	adds	r3, #24
34185c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34185c9e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34185ca0:	697b      	ldr	r3, [r7, #20]
34185ca2:	f003 0303 	and.w	r3, r3, #3
34185ca6:	00db      	lsls	r3, r3, #3
34185ca8:	220f      	movs	r2, #15
34185caa:	fa02 f303 	lsl.w	r3, r2, r3
34185cae:	68fa      	ldr	r2, [r7, #12]
34185cb0:	4013      	ands	r3, r2
34185cb2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos)))
34185cb4:	687b      	ldr	r3, [r7, #4]
34185cb6:	4a81      	ldr	r2, [pc, #516]	@ (34185ebc <HAL_GPIO_DeInit+0x250>)
34185cb8:	4293      	cmp	r3, r2
34185cba:	d043      	beq.n	34185d44 <HAL_GPIO_DeInit+0xd8>
34185cbc:	687b      	ldr	r3, [r7, #4]
34185cbe:	4a80      	ldr	r2, [pc, #512]	@ (34185ec0 <HAL_GPIO_DeInit+0x254>)
34185cc0:	4293      	cmp	r3, r2
34185cc2:	d03d      	beq.n	34185d40 <HAL_GPIO_DeInit+0xd4>
34185cc4:	687b      	ldr	r3, [r7, #4]
34185cc6:	4a7f      	ldr	r2, [pc, #508]	@ (34185ec4 <HAL_GPIO_DeInit+0x258>)
34185cc8:	4293      	cmp	r3, r2
34185cca:	d037      	beq.n	34185d3c <HAL_GPIO_DeInit+0xd0>
34185ccc:	687b      	ldr	r3, [r7, #4]
34185cce:	4a7e      	ldr	r2, [pc, #504]	@ (34185ec8 <HAL_GPIO_DeInit+0x25c>)
34185cd0:	4293      	cmp	r3, r2
34185cd2:	d031      	beq.n	34185d38 <HAL_GPIO_DeInit+0xcc>
34185cd4:	687b      	ldr	r3, [r7, #4]
34185cd6:	4a7d      	ldr	r2, [pc, #500]	@ (34185ecc <HAL_GPIO_DeInit+0x260>)
34185cd8:	4293      	cmp	r3, r2
34185cda:	d02b      	beq.n	34185d34 <HAL_GPIO_DeInit+0xc8>
34185cdc:	687b      	ldr	r3, [r7, #4]
34185cde:	4a7c      	ldr	r2, [pc, #496]	@ (34185ed0 <HAL_GPIO_DeInit+0x264>)
34185ce0:	4293      	cmp	r3, r2
34185ce2:	d025      	beq.n	34185d30 <HAL_GPIO_DeInit+0xc4>
34185ce4:	687b      	ldr	r3, [r7, #4]
34185ce6:	4a7b      	ldr	r2, [pc, #492]	@ (34185ed4 <HAL_GPIO_DeInit+0x268>)
34185ce8:	4293      	cmp	r3, r2
34185cea:	d01f      	beq.n	34185d2c <HAL_GPIO_DeInit+0xc0>
34185cec:	687b      	ldr	r3, [r7, #4]
34185cee:	4a7a      	ldr	r2, [pc, #488]	@ (34185ed8 <HAL_GPIO_DeInit+0x26c>)
34185cf0:	4293      	cmp	r3, r2
34185cf2:	d019      	beq.n	34185d28 <HAL_GPIO_DeInit+0xbc>
34185cf4:	687b      	ldr	r3, [r7, #4]
34185cf6:	4a79      	ldr	r2, [pc, #484]	@ (34185edc <HAL_GPIO_DeInit+0x270>)
34185cf8:	4293      	cmp	r3, r2
34185cfa:	d013      	beq.n	34185d24 <HAL_GPIO_DeInit+0xb8>
34185cfc:	687b      	ldr	r3, [r7, #4]
34185cfe:	4a78      	ldr	r2, [pc, #480]	@ (34185ee0 <HAL_GPIO_DeInit+0x274>)
34185d00:	4293      	cmp	r3, r2
34185d02:	d00d      	beq.n	34185d20 <HAL_GPIO_DeInit+0xb4>
34185d04:	687b      	ldr	r3, [r7, #4]
34185d06:	4a77      	ldr	r2, [pc, #476]	@ (34185ee4 <HAL_GPIO_DeInit+0x278>)
34185d08:	4293      	cmp	r3, r2
34185d0a:	d007      	beq.n	34185d1c <HAL_GPIO_DeInit+0xb0>
34185d0c:	687b      	ldr	r3, [r7, #4]
34185d0e:	4a76      	ldr	r2, [pc, #472]	@ (34185ee8 <HAL_GPIO_DeInit+0x27c>)
34185d10:	4293      	cmp	r3, r2
34185d12:	d101      	bne.n	34185d18 <HAL_GPIO_DeInit+0xac>
34185d14:	230b      	movs	r3, #11
34185d16:	e016      	b.n	34185d46 <HAL_GPIO_DeInit+0xda>
34185d18:	2310      	movs	r3, #16
34185d1a:	e014      	b.n	34185d46 <HAL_GPIO_DeInit+0xda>
34185d1c:	230a      	movs	r3, #10
34185d1e:	e012      	b.n	34185d46 <HAL_GPIO_DeInit+0xda>
34185d20:	2309      	movs	r3, #9
34185d22:	e010      	b.n	34185d46 <HAL_GPIO_DeInit+0xda>
34185d24:	2308      	movs	r3, #8
34185d26:	e00e      	b.n	34185d46 <HAL_GPIO_DeInit+0xda>
34185d28:	2307      	movs	r3, #7
34185d2a:	e00c      	b.n	34185d46 <HAL_GPIO_DeInit+0xda>
34185d2c:	2306      	movs	r3, #6
34185d2e:	e00a      	b.n	34185d46 <HAL_GPIO_DeInit+0xda>
34185d30:	2305      	movs	r3, #5
34185d32:	e008      	b.n	34185d46 <HAL_GPIO_DeInit+0xda>
34185d34:	2304      	movs	r3, #4
34185d36:	e006      	b.n	34185d46 <HAL_GPIO_DeInit+0xda>
34185d38:	2303      	movs	r3, #3
34185d3a:	e004      	b.n	34185d46 <HAL_GPIO_DeInit+0xda>
34185d3c:	2302      	movs	r3, #2
34185d3e:	e002      	b.n	34185d46 <HAL_GPIO_DeInit+0xda>
34185d40:	2301      	movs	r3, #1
34185d42:	e000      	b.n	34185d46 <HAL_GPIO_DeInit+0xda>
34185d44:	2300      	movs	r3, #0
34185d46:	697a      	ldr	r2, [r7, #20]
34185d48:	f002 0203 	and.w	r2, r2, #3
34185d4c:	00d2      	lsls	r2, r2, #3
34185d4e:	4093      	lsls	r3, r2
34185d50:	68fa      	ldr	r2, [r7, #12]
34185d52:	429a      	cmp	r2, r3
34185d54:	d136      	bne.n	34185dc4 <HAL_GPIO_DeInit+0x158>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
34185d56:	4b58      	ldr	r3, [pc, #352]	@ (34185eb8 <HAL_GPIO_DeInit+0x24c>)
34185d58:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34185d5c:	693b      	ldr	r3, [r7, #16]
34185d5e:	43db      	mvns	r3, r3
34185d60:	4955      	ldr	r1, [pc, #340]	@ (34185eb8 <HAL_GPIO_DeInit+0x24c>)
34185d62:	4013      	ands	r3, r2
34185d64:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
34185d68:	4b53      	ldr	r3, [pc, #332]	@ (34185eb8 <HAL_GPIO_DeInit+0x24c>)
34185d6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
34185d6e:	693b      	ldr	r3, [r7, #16]
34185d70:	43db      	mvns	r3, r3
34185d72:	4951      	ldr	r1, [pc, #324]	@ (34185eb8 <HAL_GPIO_DeInit+0x24c>)
34185d74:	4013      	ands	r3, r2
34185d76:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
34185d7a:	4b4f      	ldr	r3, [pc, #316]	@ (34185eb8 <HAL_GPIO_DeInit+0x24c>)
34185d7c:	681a      	ldr	r2, [r3, #0]
34185d7e:	693b      	ldr	r3, [r7, #16]
34185d80:	43db      	mvns	r3, r3
34185d82:	494d      	ldr	r1, [pc, #308]	@ (34185eb8 <HAL_GPIO_DeInit+0x24c>)
34185d84:	4013      	ands	r3, r2
34185d86:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
34185d88:	4b4b      	ldr	r3, [pc, #300]	@ (34185eb8 <HAL_GPIO_DeInit+0x24c>)
34185d8a:	685a      	ldr	r2, [r3, #4]
34185d8c:	693b      	ldr	r3, [r7, #16]
34185d8e:	43db      	mvns	r3, r3
34185d90:	4949      	ldr	r1, [pc, #292]	@ (34185eb8 <HAL_GPIO_DeInit+0x24c>)
34185d92:	4013      	ands	r3, r2
34185d94:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos);
34185d96:	697b      	ldr	r3, [r7, #20]
34185d98:	f003 0303 	and.w	r3, r3, #3
34185d9c:	00db      	lsls	r3, r3, #3
34185d9e:	220f      	movs	r2, #15
34185da0:	fa02 f303 	lsl.w	r3, r2, r3
34185da4:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
34185da6:	4a44      	ldr	r2, [pc, #272]	@ (34185eb8 <HAL_GPIO_DeInit+0x24c>)
34185da8:	697b      	ldr	r3, [r7, #20]
34185daa:	089b      	lsrs	r3, r3, #2
34185dac:	3318      	adds	r3, #24
34185dae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
34185db2:	68fb      	ldr	r3, [r7, #12]
34185db4:	43da      	mvns	r2, r3
34185db6:	4840      	ldr	r0, [pc, #256]	@ (34185eb8 <HAL_GPIO_DeInit+0x24c>)
34185db8:	697b      	ldr	r3, [r7, #20]
34185dba:	089b      	lsrs	r3, r3, #2
34185dbc:	400a      	ands	r2, r1
34185dbe:	3318      	adds	r3, #24
34185dc0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34185dc4:	687b      	ldr	r3, [r7, #4]
34185dc6:	681a      	ldr	r2, [r3, #0]
34185dc8:	697b      	ldr	r3, [r7, #20]
34185dca:	005b      	lsls	r3, r3, #1
34185dcc:	2103      	movs	r1, #3
34185dce:	fa01 f303 	lsl.w	r3, r1, r3
34185dd2:	431a      	orrs	r2, r3
34185dd4:	687b      	ldr	r3, [r7, #4]
34185dd6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
34185dd8:	697b      	ldr	r3, [r7, #20]
34185dda:	08da      	lsrs	r2, r3, #3
34185ddc:	687b      	ldr	r3, [r7, #4]
34185dde:	3208      	adds	r2, #8
34185de0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
34185de4:	697b      	ldr	r3, [r7, #20]
34185de6:	f003 0307 	and.w	r3, r3, #7
34185dea:	009b      	lsls	r3, r3, #2
34185dec:	220f      	movs	r2, #15
34185dee:	fa02 f303 	lsl.w	r3, r2, r3
34185df2:	43db      	mvns	r3, r3
34185df4:	697a      	ldr	r2, [r7, #20]
34185df6:	08d2      	lsrs	r2, r2, #3
34185df8:	4019      	ands	r1, r3
34185dfa:	687b      	ldr	r3, [r7, #4]
34185dfc:	3208      	adds	r2, #8
34185dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34185e02:	687b      	ldr	r3, [r7, #4]
34185e04:	689a      	ldr	r2, [r3, #8]
34185e06:	697b      	ldr	r3, [r7, #20]
34185e08:	005b      	lsls	r3, r3, #1
34185e0a:	2103      	movs	r1, #3
34185e0c:	fa01 f303 	lsl.w	r3, r1, r3
34185e10:	43db      	mvns	r3, r3
34185e12:	401a      	ands	r2, r3
34185e14:	687b      	ldr	r3, [r7, #4]
34185e16:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
34185e18:	687b      	ldr	r3, [r7, #4]
34185e1a:	685a      	ldr	r2, [r3, #4]
34185e1c:	2101      	movs	r1, #1
34185e1e:	697b      	ldr	r3, [r7, #20]
34185e20:	fa01 f303 	lsl.w	r3, r1, r3
34185e24:	43db      	mvns	r3, r3
34185e26:	401a      	ands	r2, r3
34185e28:	687b      	ldr	r3, [r7, #4]
34185e2a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34185e2c:	687b      	ldr	r3, [r7, #4]
34185e2e:	68da      	ldr	r2, [r3, #12]
34185e30:	697b      	ldr	r3, [r7, #20]
34185e32:	005b      	lsls	r3, r3, #1
34185e34:	2103      	movs	r1, #3
34185e36:	fa01 f303 	lsl.w	r3, r1, r3
34185e3a:	43db      	mvns	r3, r3
34185e3c:	401a      	ands	r2, r3
34185e3e:	687b      	ldr	r3, [r7, #4]
34185e40:	60da      	str	r2, [r3, #12]

      /* Reset delay settings for the current IO */
      GPIOx->DELAYR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_DELAYRL_DLY1_Pos)) ;
34185e42:	697b      	ldr	r3, [r7, #20]
34185e44:	08da      	lsrs	r2, r3, #3
34185e46:	687b      	ldr	r3, [r7, #4]
34185e48:	3210      	adds	r2, #16
34185e4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
34185e4e:	697b      	ldr	r3, [r7, #20]
34185e50:	f003 0307 	and.w	r3, r3, #7
34185e54:	009b      	lsls	r3, r3, #2
34185e56:	220f      	movs	r2, #15
34185e58:	fa02 f303 	lsl.w	r3, r2, r3
34185e5c:	43db      	mvns	r3, r3
34185e5e:	697a      	ldr	r2, [r7, #20]
34185e60:	08d2      	lsrs	r2, r2, #3
34185e62:	4019      	ands	r1, r3
34185e64:	687b      	ldr	r3, [r7, #4]
34185e66:	3210      	adds	r2, #16
34185e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Reset control settings for the current IO */
      GPIOx->ADVCFGR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_ADVCFGRL_1_Pos)) ;
34185e6c:	697b      	ldr	r3, [r7, #20]
34185e6e:	08da      	lsrs	r2, r3, #3
34185e70:	687b      	ldr	r3, [r7, #4]
34185e72:	3212      	adds	r2, #18
34185e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
34185e78:	697b      	ldr	r3, [r7, #20]
34185e7a:	f003 0307 	and.w	r3, r3, #7
34185e7e:	009b      	lsls	r3, r3, #2
34185e80:	220f      	movs	r2, #15
34185e82:	fa02 f303 	lsl.w	r3, r2, r3
34185e86:	43db      	mvns	r3, r3
34185e88:	697a      	ldr	r2, [r7, #20]
34185e8a:	08d2      	lsrs	r2, r2, #3
34185e8c:	4019      	ands	r1, r3
34185e8e:	687b      	ldr	r3, [r7, #4]
34185e90:	3212      	adds	r2, #18
34185e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    position++;
34185e96:	697b      	ldr	r3, [r7, #20]
34185e98:	3301      	adds	r3, #1
34185e9a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
34185e9c:	683a      	ldr	r2, [r7, #0]
34185e9e:	697b      	ldr	r3, [r7, #20]
34185ea0:	fa22 f303 	lsr.w	r3, r2, r3
34185ea4:	2b00      	cmp	r3, #0
34185ea6:	f47f aee9 	bne.w	34185c7c <HAL_GPIO_DeInit+0x10>
  }
}
34185eaa:	bf00      	nop
34185eac:	bf00      	nop
34185eae:	371c      	adds	r7, #28
34185eb0:	46bd      	mov	sp, r7
34185eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
34185eb6:	4770      	bx	lr
34185eb8:	56025000 	.word	0x56025000
34185ebc:	56020000 	.word	0x56020000
34185ec0:	56020400 	.word	0x56020400
34185ec4:	56020800 	.word	0x56020800
34185ec8:	56020c00 	.word	0x56020c00
34185ecc:	56021000 	.word	0x56021000
34185ed0:	56021400 	.word	0x56021400
34185ed4:	56021800 	.word	0x56021800
34185ed8:	56021c00 	.word	0x56021c00
34185edc:	56023400 	.word	0x56023400
34185ee0:	56023800 	.word	0x56023800
34185ee4:	56023c00 	.word	0x56023c00
34185ee8:	56024000 	.word	0x56024000

34185eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34185eec:	b480      	push	{r7}
34185eee:	b083      	sub	sp, #12
34185ef0:	af00      	add	r7, sp, #0
34185ef2:	6078      	str	r0, [r7, #4]
34185ef4:	460b      	mov	r3, r1
34185ef6:	807b      	strh	r3, [r7, #2]
34185ef8:	4613      	mov	r3, r2
34185efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
34185efc:	787b      	ldrb	r3, [r7, #1]
34185efe:	2b00      	cmp	r3, #0
34185f00:	d003      	beq.n	34185f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34185f02:	887a      	ldrh	r2, [r7, #2]
34185f04:	687b      	ldr	r3, [r7, #4]
34185f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34185f08:	e002      	b.n	34185f10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34185f0a:	887a      	ldrh	r2, [r7, #2]
34185f0c:	687b      	ldr	r3, [r7, #4]
34185f0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
34185f10:	bf00      	nop
34185f12:	370c      	adds	r7, #12
34185f14:	46bd      	mov	sp, r7
34185f16:	f85d 7b04 	ldr.w	r7, [sp], #4
34185f1a:	4770      	bx	lr

34185f1c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
34185f1c:	b480      	push	{r7}
34185f1e:	b085      	sub	sp, #20
34185f20:	af00      	add	r7, sp, #0
34185f22:	6078      	str	r0, [r7, #4]
34185f24:	460b      	mov	r3, r1
34185f26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
34185f28:	687b      	ldr	r3, [r7, #4]
34185f2a:	695b      	ldr	r3, [r3, #20]
34185f2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
34185f2e:	887a      	ldrh	r2, [r7, #2]
34185f30:	68fb      	ldr	r3, [r7, #12]
34185f32:	4013      	ands	r3, r2
34185f34:	041a      	lsls	r2, r3, #16
34185f36:	68fb      	ldr	r3, [r7, #12]
34185f38:	43d9      	mvns	r1, r3
34185f3a:	887b      	ldrh	r3, [r7, #2]
34185f3c:	400b      	ands	r3, r1
34185f3e:	431a      	orrs	r2, r3
34185f40:	687b      	ldr	r3, [r7, #4]
34185f42:	619a      	str	r2, [r3, #24]
}
34185f44:	bf00      	nop
34185f46:	3714      	adds	r7, #20
34185f48:	46bd      	mov	sp, r7
34185f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
34185f4e:	4770      	bx	lr

34185f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
34185f50:	b580      	push	{r7, lr}
34185f52:	b082      	sub	sp, #8
34185f54:	af00      	add	r7, sp, #0
34185f56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
34185f58:	687b      	ldr	r3, [r7, #4]
34185f5a:	2b00      	cmp	r3, #0
34185f5c:	d101      	bne.n	34185f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
34185f5e:	2301      	movs	r3, #1
34185f60:	e08d      	b.n	3418607e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
34185f62:	687b      	ldr	r3, [r7, #4]
34185f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34185f68:	b2db      	uxtb	r3, r3
34185f6a:	2b00      	cmp	r3, #0
34185f6c:	d106      	bne.n	34185f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
34185f6e:	687b      	ldr	r3, [r7, #4]
34185f70:	2200      	movs	r2, #0
34185f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
34185f76:	6878      	ldr	r0, [r7, #4]
34185f78:	f000 f8b4 	bl	341860e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
34185f7c:	687b      	ldr	r3, [r7, #4]
34185f7e:	2224      	movs	r2, #36	@ 0x24
34185f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
34185f84:	687b      	ldr	r3, [r7, #4]
34185f86:	681b      	ldr	r3, [r3, #0]
34185f88:	681a      	ldr	r2, [r3, #0]
34185f8a:	687b      	ldr	r3, [r7, #4]
34185f8c:	681b      	ldr	r3, [r3, #0]
34185f8e:	f022 0201 	bic.w	r2, r2, #1
34185f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
34185f94:	687b      	ldr	r3, [r7, #4]
34185f96:	685a      	ldr	r2, [r3, #4]
34185f98:	687b      	ldr	r3, [r7, #4]
34185f9a:	681b      	ldr	r3, [r3, #0]
34185f9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
34185fa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
34185fa2:	687b      	ldr	r3, [r7, #4]
34185fa4:	681b      	ldr	r3, [r3, #0]
34185fa6:	689a      	ldr	r2, [r3, #8]
34185fa8:	687b      	ldr	r3, [r7, #4]
34185faa:	681b      	ldr	r3, [r3, #0]
34185fac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34185fb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
34185fb2:	687b      	ldr	r3, [r7, #4]
34185fb4:	68db      	ldr	r3, [r3, #12]
34185fb6:	2b01      	cmp	r3, #1
34185fb8:	d107      	bne.n	34185fca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
34185fba:	687b      	ldr	r3, [r7, #4]
34185fbc:	689a      	ldr	r2, [r3, #8]
34185fbe:	687b      	ldr	r3, [r7, #4]
34185fc0:	681b      	ldr	r3, [r3, #0]
34185fc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34185fc6:	609a      	str	r2, [r3, #8]
34185fc8:	e006      	b.n	34185fd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
34185fca:	687b      	ldr	r3, [r7, #4]
34185fcc:	689a      	ldr	r2, [r3, #8]
34185fce:	687b      	ldr	r3, [r7, #4]
34185fd0:	681b      	ldr	r3, [r3, #0]
34185fd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
34185fd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
34185fd8:	687b      	ldr	r3, [r7, #4]
34185fda:	68db      	ldr	r3, [r3, #12]
34185fdc:	2b02      	cmp	r3, #2
34185fde:	d108      	bne.n	34185ff2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
34185fe0:	687b      	ldr	r3, [r7, #4]
34185fe2:	681b      	ldr	r3, [r3, #0]
34185fe4:	685a      	ldr	r2, [r3, #4]
34185fe6:	687b      	ldr	r3, [r7, #4]
34185fe8:	681b      	ldr	r3, [r3, #0]
34185fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
34185fee:	605a      	str	r2, [r3, #4]
34185ff0:	e007      	b.n	34186002 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
34185ff2:	687b      	ldr	r3, [r7, #4]
34185ff4:	681b      	ldr	r3, [r3, #0]
34185ff6:	685a      	ldr	r2, [r3, #4]
34185ff8:	687b      	ldr	r3, [r7, #4]
34185ffa:	681b      	ldr	r3, [r3, #0]
34185ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34186000:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
34186002:	687b      	ldr	r3, [r7, #4]
34186004:	681b      	ldr	r3, [r3, #0]
34186006:	685b      	ldr	r3, [r3, #4]
34186008:	687a      	ldr	r2, [r7, #4]
3418600a:	6812      	ldr	r2, [r2, #0]
3418600c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
34186010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34186014:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
34186016:	687b      	ldr	r3, [r7, #4]
34186018:	681b      	ldr	r3, [r3, #0]
3418601a:	68da      	ldr	r2, [r3, #12]
3418601c:	687b      	ldr	r3, [r7, #4]
3418601e:	681b      	ldr	r3, [r3, #0]
34186020:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34186024:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
34186026:	687b      	ldr	r3, [r7, #4]
34186028:	691a      	ldr	r2, [r3, #16]
3418602a:	687b      	ldr	r3, [r7, #4]
3418602c:	695b      	ldr	r3, [r3, #20]
3418602e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
34186032:	687b      	ldr	r3, [r7, #4]
34186034:	699b      	ldr	r3, [r3, #24]
34186036:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
34186038:	687b      	ldr	r3, [r7, #4]
3418603a:	681b      	ldr	r3, [r3, #0]
3418603c:	430a      	orrs	r2, r1
3418603e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
34186040:	687b      	ldr	r3, [r7, #4]
34186042:	69d9      	ldr	r1, [r3, #28]
34186044:	687b      	ldr	r3, [r7, #4]
34186046:	6a1a      	ldr	r2, [r3, #32]
34186048:	687b      	ldr	r3, [r7, #4]
3418604a:	681b      	ldr	r3, [r3, #0]
3418604c:	430a      	orrs	r2, r1
3418604e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
34186050:	687b      	ldr	r3, [r7, #4]
34186052:	681b      	ldr	r3, [r3, #0]
34186054:	681a      	ldr	r2, [r3, #0]
34186056:	687b      	ldr	r3, [r7, #4]
34186058:	681b      	ldr	r3, [r3, #0]
3418605a:	f042 0201 	orr.w	r2, r2, #1
3418605e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
34186060:	687b      	ldr	r3, [r7, #4]
34186062:	2200      	movs	r2, #0
34186064:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
34186066:	687b      	ldr	r3, [r7, #4]
34186068:	2220      	movs	r2, #32
3418606a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
3418606e:	687b      	ldr	r3, [r7, #4]
34186070:	2200      	movs	r2, #0
34186072:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
34186074:	687b      	ldr	r3, [r7, #4]
34186076:	2200      	movs	r2, #0
34186078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
3418607c:	2300      	movs	r3, #0
}
3418607e:	4618      	mov	r0, r3
34186080:	3708      	adds	r7, #8
34186082:	46bd      	mov	sp, r7
34186084:	bd80      	pop	{r7, pc}

34186086 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
34186086:	b580      	push	{r7, lr}
34186088:	b082      	sub	sp, #8
3418608a:	af00      	add	r7, sp, #0
3418608c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
3418608e:	687b      	ldr	r3, [r7, #4]
34186090:	2b00      	cmp	r3, #0
34186092:	d101      	bne.n	34186098 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
34186094:	2301      	movs	r3, #1
34186096:	e021      	b.n	341860dc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
34186098:	687b      	ldr	r3, [r7, #4]
3418609a:	2224      	movs	r2, #36	@ 0x24
3418609c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
341860a0:	687b      	ldr	r3, [r7, #4]
341860a2:	681b      	ldr	r3, [r3, #0]
341860a4:	681a      	ldr	r2, [r3, #0]
341860a6:	687b      	ldr	r3, [r7, #4]
341860a8:	681b      	ldr	r3, [r3, #0]
341860aa:	f022 0201 	bic.w	r2, r2, #1
341860ae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
341860b0:	6878      	ldr	r0, [r7, #4]
341860b2:	f000 f821 	bl	341860f8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
341860b6:	687b      	ldr	r3, [r7, #4]
341860b8:	2200      	movs	r2, #0
341860ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
341860bc:	687b      	ldr	r3, [r7, #4]
341860be:	2200      	movs	r2, #0
341860c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
341860c4:	687b      	ldr	r3, [r7, #4]
341860c6:	2200      	movs	r2, #0
341860c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
341860ca:	687b      	ldr	r3, [r7, #4]
341860cc:	2200      	movs	r2, #0
341860ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
341860d2:	687b      	ldr	r3, [r7, #4]
341860d4:	2200      	movs	r2, #0
341860d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
341860da:	2300      	movs	r3, #0
}
341860dc:	4618      	mov	r0, r3
341860de:	3708      	adds	r7, #8
341860e0:	46bd      	mov	sp, r7
341860e2:	bd80      	pop	{r7, pc}

341860e4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
341860e4:	b480      	push	{r7}
341860e6:	b083      	sub	sp, #12
341860e8:	af00      	add	r7, sp, #0
341860ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
341860ec:	bf00      	nop
341860ee:	370c      	adds	r7, #12
341860f0:	46bd      	mov	sp, r7
341860f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341860f6:	4770      	bx	lr

341860f8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
341860f8:	b480      	push	{r7}
341860fa:	b083      	sub	sp, #12
341860fc:	af00      	add	r7, sp, #0
341860fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
34186100:	bf00      	nop
34186102:	370c      	adds	r7, #12
34186104:	46bd      	mov	sp, r7
34186106:	f85d 7b04 	ldr.w	r7, [sp], #4
3418610a:	4770      	bx	lr

3418610c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
3418610c:	b580      	push	{r7, lr}
3418610e:	b088      	sub	sp, #32
34186110:	af02      	add	r7, sp, #8
34186112:	60f8      	str	r0, [r7, #12]
34186114:	4608      	mov	r0, r1
34186116:	4611      	mov	r1, r2
34186118:	461a      	mov	r2, r3
3418611a:	4603      	mov	r3, r0
3418611c:	817b      	strh	r3, [r7, #10]
3418611e:	460b      	mov	r3, r1
34186120:	813b      	strh	r3, [r7, #8]
34186122:	4613      	mov	r3, r2
34186124:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
34186126:	68fb      	ldr	r3, [r7, #12]
34186128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418612c:	b2db      	uxtb	r3, r3
3418612e:	2b20      	cmp	r3, #32
34186130:	f040 80f9 	bne.w	34186326 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
34186134:	6a3b      	ldr	r3, [r7, #32]
34186136:	2b00      	cmp	r3, #0
34186138:	d002      	beq.n	34186140 <HAL_I2C_Mem_Write+0x34>
3418613a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
3418613c:	2b00      	cmp	r3, #0
3418613e:	d105      	bne.n	3418614c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
34186140:	68fb      	ldr	r3, [r7, #12]
34186142:	f44f 7200 	mov.w	r2, #512	@ 0x200
34186146:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
34186148:	2301      	movs	r3, #1
3418614a:	e0ed      	b.n	34186328 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
3418614c:	68fb      	ldr	r3, [r7, #12]
3418614e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34186152:	2b01      	cmp	r3, #1
34186154:	d101      	bne.n	3418615a <HAL_I2C_Mem_Write+0x4e>
34186156:	2302      	movs	r3, #2
34186158:	e0e6      	b.n	34186328 <HAL_I2C_Mem_Write+0x21c>
3418615a:	68fb      	ldr	r3, [r7, #12]
3418615c:	2201      	movs	r2, #1
3418615e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
34186162:	f7fc fc6b 	bl	34182a3c <HAL_GetTick>
34186166:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
34186168:	697b      	ldr	r3, [r7, #20]
3418616a:	9300      	str	r3, [sp, #0]
3418616c:	2319      	movs	r3, #25
3418616e:	2201      	movs	r2, #1
34186170:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
34186174:	68f8      	ldr	r0, [r7, #12]
34186176:	f000 fadd 	bl	34186734 <I2C_WaitOnFlagUntilTimeout>
3418617a:	4603      	mov	r3, r0
3418617c:	2b00      	cmp	r3, #0
3418617e:	d001      	beq.n	34186184 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
34186180:	2301      	movs	r3, #1
34186182:	e0d1      	b.n	34186328 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
34186184:	68fb      	ldr	r3, [r7, #12]
34186186:	2221      	movs	r2, #33	@ 0x21
34186188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
3418618c:	68fb      	ldr	r3, [r7, #12]
3418618e:	2240      	movs	r2, #64	@ 0x40
34186190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
34186194:	68fb      	ldr	r3, [r7, #12]
34186196:	2200      	movs	r2, #0
34186198:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
3418619a:	68fb      	ldr	r3, [r7, #12]
3418619c:	6a3a      	ldr	r2, [r7, #32]
3418619e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
341861a0:	68fb      	ldr	r3, [r7, #12]
341861a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
341861a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
341861a6:	68fb      	ldr	r3, [r7, #12]
341861a8:	2200      	movs	r2, #0
341861aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
341861ac:	88f8      	ldrh	r0, [r7, #6]
341861ae:	893a      	ldrh	r2, [r7, #8]
341861b0:	8979      	ldrh	r1, [r7, #10]
341861b2:	697b      	ldr	r3, [r7, #20]
341861b4:	9301      	str	r3, [sp, #4]
341861b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341861b8:	9300      	str	r3, [sp, #0]
341861ba:	4603      	mov	r3, r0
341861bc:	68f8      	ldr	r0, [r7, #12]
341861be:	f000 f9ed 	bl	3418659c <I2C_RequestMemoryWrite>
341861c2:	4603      	mov	r3, r0
341861c4:	2b00      	cmp	r3, #0
341861c6:	d005      	beq.n	341861d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
341861c8:	68fb      	ldr	r3, [r7, #12]
341861ca:	2200      	movs	r2, #0
341861cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
341861d0:	2301      	movs	r3, #1
341861d2:	e0a9      	b.n	34186328 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
341861d4:	68fb      	ldr	r3, [r7, #12]
341861d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
341861d8:	b29b      	uxth	r3, r3
341861da:	2bff      	cmp	r3, #255	@ 0xff
341861dc:	d90e      	bls.n	341861fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
341861de:	68fb      	ldr	r3, [r7, #12]
341861e0:	22ff      	movs	r2, #255	@ 0xff
341861e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
341861e4:	68fb      	ldr	r3, [r7, #12]
341861e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341861e8:	b2da      	uxtb	r2, r3
341861ea:	8979      	ldrh	r1, [r7, #10]
341861ec:	2300      	movs	r3, #0
341861ee:	9300      	str	r3, [sp, #0]
341861f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
341861f4:	68f8      	ldr	r0, [r7, #12]
341861f6:	f000 fc61 	bl	34186abc <I2C_TransferConfig>
341861fa:	e00f      	b.n	3418621c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
341861fc:	68fb      	ldr	r3, [r7, #12]
341861fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34186200:	b29a      	uxth	r2, r3
34186202:	68fb      	ldr	r3, [r7, #12]
34186204:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
34186206:	68fb      	ldr	r3, [r7, #12]
34186208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
3418620a:	b2da      	uxtb	r2, r3
3418620c:	8979      	ldrh	r1, [r7, #10]
3418620e:	2300      	movs	r3, #0
34186210:	9300      	str	r3, [sp, #0]
34186212:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
34186216:	68f8      	ldr	r0, [r7, #12]
34186218:	f000 fc50 	bl	34186abc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
3418621c:	697a      	ldr	r2, [r7, #20]
3418621e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34186220:	68f8      	ldr	r0, [r7, #12]
34186222:	f000 fae0 	bl	341867e6 <I2C_WaitOnTXISFlagUntilTimeout>
34186226:	4603      	mov	r3, r0
34186228:	2b00      	cmp	r3, #0
3418622a:	d001      	beq.n	34186230 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
3418622c:	2301      	movs	r3, #1
3418622e:	e07b      	b.n	34186328 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
34186230:	68fb      	ldr	r3, [r7, #12]
34186232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34186234:	781a      	ldrb	r2, [r3, #0]
34186236:	68fb      	ldr	r3, [r7, #12]
34186238:	681b      	ldr	r3, [r3, #0]
3418623a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
3418623c:	68fb      	ldr	r3, [r7, #12]
3418623e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34186240:	1c5a      	adds	r2, r3, #1
34186242:	68fb      	ldr	r3, [r7, #12]
34186244:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
34186246:	68fb      	ldr	r3, [r7, #12]
34186248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
3418624a:	b29b      	uxth	r3, r3
3418624c:	3b01      	subs	r3, #1
3418624e:	b29a      	uxth	r2, r3
34186250:	68fb      	ldr	r3, [r7, #12]
34186252:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
34186254:	68fb      	ldr	r3, [r7, #12]
34186256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34186258:	3b01      	subs	r3, #1
3418625a:	b29a      	uxth	r2, r3
3418625c:	68fb      	ldr	r3, [r7, #12]
3418625e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
34186260:	68fb      	ldr	r3, [r7, #12]
34186262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34186264:	b29b      	uxth	r3, r3
34186266:	2b00      	cmp	r3, #0
34186268:	d034      	beq.n	341862d4 <HAL_I2C_Mem_Write+0x1c8>
3418626a:	68fb      	ldr	r3, [r7, #12]
3418626c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
3418626e:	2b00      	cmp	r3, #0
34186270:	d130      	bne.n	341862d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
34186272:	697b      	ldr	r3, [r7, #20]
34186274:	9300      	str	r3, [sp, #0]
34186276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34186278:	2200      	movs	r2, #0
3418627a:	2180      	movs	r1, #128	@ 0x80
3418627c:	68f8      	ldr	r0, [r7, #12]
3418627e:	f000 fa59 	bl	34186734 <I2C_WaitOnFlagUntilTimeout>
34186282:	4603      	mov	r3, r0
34186284:	2b00      	cmp	r3, #0
34186286:	d001      	beq.n	3418628c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
34186288:	2301      	movs	r3, #1
3418628a:	e04d      	b.n	34186328 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
3418628c:	68fb      	ldr	r3, [r7, #12]
3418628e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34186290:	b29b      	uxth	r3, r3
34186292:	2bff      	cmp	r3, #255	@ 0xff
34186294:	d90e      	bls.n	341862b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
34186296:	68fb      	ldr	r3, [r7, #12]
34186298:	22ff      	movs	r2, #255	@ 0xff
3418629a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
3418629c:	68fb      	ldr	r3, [r7, #12]
3418629e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341862a0:	b2da      	uxtb	r2, r3
341862a2:	8979      	ldrh	r1, [r7, #10]
341862a4:	2300      	movs	r3, #0
341862a6:	9300      	str	r3, [sp, #0]
341862a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
341862ac:	68f8      	ldr	r0, [r7, #12]
341862ae:	f000 fc05 	bl	34186abc <I2C_TransferConfig>
341862b2:	e00f      	b.n	341862d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
341862b4:	68fb      	ldr	r3, [r7, #12]
341862b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
341862b8:	b29a      	uxth	r2, r3
341862ba:	68fb      	ldr	r3, [r7, #12]
341862bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
341862be:	68fb      	ldr	r3, [r7, #12]
341862c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341862c2:	b2da      	uxtb	r2, r3
341862c4:	8979      	ldrh	r1, [r7, #10]
341862c6:	2300      	movs	r3, #0
341862c8:	9300      	str	r3, [sp, #0]
341862ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
341862ce:	68f8      	ldr	r0, [r7, #12]
341862d0:	f000 fbf4 	bl	34186abc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
341862d4:	68fb      	ldr	r3, [r7, #12]
341862d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
341862d8:	b29b      	uxth	r3, r3
341862da:	2b00      	cmp	r3, #0
341862dc:	d19e      	bne.n	3418621c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
341862de:	697a      	ldr	r2, [r7, #20]
341862e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341862e2:	68f8      	ldr	r0, [r7, #12]
341862e4:	f000 fac6 	bl	34186874 <I2C_WaitOnSTOPFlagUntilTimeout>
341862e8:	4603      	mov	r3, r0
341862ea:	2b00      	cmp	r3, #0
341862ec:	d001      	beq.n	341862f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
341862ee:	2301      	movs	r3, #1
341862f0:	e01a      	b.n	34186328 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
341862f2:	68fb      	ldr	r3, [r7, #12]
341862f4:	681b      	ldr	r3, [r3, #0]
341862f6:	2220      	movs	r2, #32
341862f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
341862fa:	68fb      	ldr	r3, [r7, #12]
341862fc:	681b      	ldr	r3, [r3, #0]
341862fe:	6859      	ldr	r1, [r3, #4]
34186300:	68fb      	ldr	r3, [r7, #12]
34186302:	681a      	ldr	r2, [r3, #0]
34186304:	4b0a      	ldr	r3, [pc, #40]	@ (34186330 <HAL_I2C_Mem_Write+0x224>)
34186306:	400b      	ands	r3, r1
34186308:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
3418630a:	68fb      	ldr	r3, [r7, #12]
3418630c:	2220      	movs	r2, #32
3418630e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
34186312:	68fb      	ldr	r3, [r7, #12]
34186314:	2200      	movs	r2, #0
34186316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
3418631a:	68fb      	ldr	r3, [r7, #12]
3418631c:	2200      	movs	r2, #0
3418631e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
34186322:	2300      	movs	r3, #0
34186324:	e000      	b.n	34186328 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
34186326:	2302      	movs	r3, #2
  }
}
34186328:	4618      	mov	r0, r3
3418632a:	3718      	adds	r7, #24
3418632c:	46bd      	mov	sp, r7
3418632e:	bd80      	pop	{r7, pc}
34186330:	fe00e800 	.word	0xfe00e800

34186334 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
34186334:	b580      	push	{r7, lr}
34186336:	b088      	sub	sp, #32
34186338:	af02      	add	r7, sp, #8
3418633a:	60f8      	str	r0, [r7, #12]
3418633c:	4608      	mov	r0, r1
3418633e:	4611      	mov	r1, r2
34186340:	461a      	mov	r2, r3
34186342:	4603      	mov	r3, r0
34186344:	817b      	strh	r3, [r7, #10]
34186346:	460b      	mov	r3, r1
34186348:	813b      	strh	r3, [r7, #8]
3418634a:	4613      	mov	r3, r2
3418634c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
3418634e:	68fb      	ldr	r3, [r7, #12]
34186350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34186354:	b2db      	uxtb	r3, r3
34186356:	2b20      	cmp	r3, #32
34186358:	f040 80fd 	bne.w	34186556 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
3418635c:	6a3b      	ldr	r3, [r7, #32]
3418635e:	2b00      	cmp	r3, #0
34186360:	d002      	beq.n	34186368 <HAL_I2C_Mem_Read+0x34>
34186362:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
34186364:	2b00      	cmp	r3, #0
34186366:	d105      	bne.n	34186374 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
34186368:	68fb      	ldr	r3, [r7, #12]
3418636a:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418636e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
34186370:	2301      	movs	r3, #1
34186372:	e0f1      	b.n	34186558 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
34186374:	68fb      	ldr	r3, [r7, #12]
34186376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418637a:	2b01      	cmp	r3, #1
3418637c:	d101      	bne.n	34186382 <HAL_I2C_Mem_Read+0x4e>
3418637e:	2302      	movs	r3, #2
34186380:	e0ea      	b.n	34186558 <HAL_I2C_Mem_Read+0x224>
34186382:	68fb      	ldr	r3, [r7, #12]
34186384:	2201      	movs	r2, #1
34186386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
3418638a:	f7fc fb57 	bl	34182a3c <HAL_GetTick>
3418638e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
34186390:	697b      	ldr	r3, [r7, #20]
34186392:	9300      	str	r3, [sp, #0]
34186394:	2319      	movs	r3, #25
34186396:	2201      	movs	r2, #1
34186398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3418639c:	68f8      	ldr	r0, [r7, #12]
3418639e:	f000 f9c9 	bl	34186734 <I2C_WaitOnFlagUntilTimeout>
341863a2:	4603      	mov	r3, r0
341863a4:	2b00      	cmp	r3, #0
341863a6:	d001      	beq.n	341863ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
341863a8:	2301      	movs	r3, #1
341863aa:	e0d5      	b.n	34186558 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
341863ac:	68fb      	ldr	r3, [r7, #12]
341863ae:	2222      	movs	r2, #34	@ 0x22
341863b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
341863b4:	68fb      	ldr	r3, [r7, #12]
341863b6:	2240      	movs	r2, #64	@ 0x40
341863b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
341863bc:	68fb      	ldr	r3, [r7, #12]
341863be:	2200      	movs	r2, #0
341863c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
341863c2:	68fb      	ldr	r3, [r7, #12]
341863c4:	6a3a      	ldr	r2, [r7, #32]
341863c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
341863c8:	68fb      	ldr	r3, [r7, #12]
341863ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
341863cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
341863ce:	68fb      	ldr	r3, [r7, #12]
341863d0:	2200      	movs	r2, #0
341863d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
341863d4:	88f8      	ldrh	r0, [r7, #6]
341863d6:	893a      	ldrh	r2, [r7, #8]
341863d8:	8979      	ldrh	r1, [r7, #10]
341863da:	697b      	ldr	r3, [r7, #20]
341863dc:	9301      	str	r3, [sp, #4]
341863de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341863e0:	9300      	str	r3, [sp, #0]
341863e2:	4603      	mov	r3, r0
341863e4:	68f8      	ldr	r0, [r7, #12]
341863e6:	f000 f92d 	bl	34186644 <I2C_RequestMemoryRead>
341863ea:	4603      	mov	r3, r0
341863ec:	2b00      	cmp	r3, #0
341863ee:	d005      	beq.n	341863fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
341863f0:	68fb      	ldr	r3, [r7, #12]
341863f2:	2200      	movs	r2, #0
341863f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
341863f8:	2301      	movs	r3, #1
341863fa:	e0ad      	b.n	34186558 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
341863fc:	68fb      	ldr	r3, [r7, #12]
341863fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34186400:	b29b      	uxth	r3, r3
34186402:	2bff      	cmp	r3, #255	@ 0xff
34186404:	d90e      	bls.n	34186424 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
34186406:	68fb      	ldr	r3, [r7, #12]
34186408:	22ff      	movs	r2, #255	@ 0xff
3418640a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
3418640c:	68fb      	ldr	r3, [r7, #12]
3418640e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34186410:	b2da      	uxtb	r2, r3
34186412:	8979      	ldrh	r1, [r7, #10]
34186414:	4b52      	ldr	r3, [pc, #328]	@ (34186560 <HAL_I2C_Mem_Read+0x22c>)
34186416:	9300      	str	r3, [sp, #0]
34186418:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418641c:	68f8      	ldr	r0, [r7, #12]
3418641e:	f000 fb4d 	bl	34186abc <I2C_TransferConfig>
34186422:	e00f      	b.n	34186444 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
34186424:	68fb      	ldr	r3, [r7, #12]
34186426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34186428:	b29a      	uxth	r2, r3
3418642a:	68fb      	ldr	r3, [r7, #12]
3418642c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
3418642e:	68fb      	ldr	r3, [r7, #12]
34186430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34186432:	b2da      	uxtb	r2, r3
34186434:	8979      	ldrh	r1, [r7, #10]
34186436:	4b4a      	ldr	r3, [pc, #296]	@ (34186560 <HAL_I2C_Mem_Read+0x22c>)
34186438:	9300      	str	r3, [sp, #0]
3418643a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
3418643e:	68f8      	ldr	r0, [r7, #12]
34186440:	f000 fb3c 	bl	34186abc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
34186444:	697b      	ldr	r3, [r7, #20]
34186446:	9300      	str	r3, [sp, #0]
34186448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418644a:	2200      	movs	r2, #0
3418644c:	2104      	movs	r1, #4
3418644e:	68f8      	ldr	r0, [r7, #12]
34186450:	f000 f970 	bl	34186734 <I2C_WaitOnFlagUntilTimeout>
34186454:	4603      	mov	r3, r0
34186456:	2b00      	cmp	r3, #0
34186458:	d001      	beq.n	3418645e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
3418645a:	2301      	movs	r3, #1
3418645c:	e07c      	b.n	34186558 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
3418645e:	68fb      	ldr	r3, [r7, #12]
34186460:	681b      	ldr	r3, [r3, #0]
34186462:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34186464:	68fb      	ldr	r3, [r7, #12]
34186466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34186468:	b2d2      	uxtb	r2, r2
3418646a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
3418646c:	68fb      	ldr	r3, [r7, #12]
3418646e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34186470:	1c5a      	adds	r2, r3, #1
34186472:	68fb      	ldr	r3, [r7, #12]
34186474:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
34186476:	68fb      	ldr	r3, [r7, #12]
34186478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
3418647a:	3b01      	subs	r3, #1
3418647c:	b29a      	uxth	r2, r3
3418647e:	68fb      	ldr	r3, [r7, #12]
34186480:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
34186482:	68fb      	ldr	r3, [r7, #12]
34186484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34186486:	b29b      	uxth	r3, r3
34186488:	3b01      	subs	r3, #1
3418648a:	b29a      	uxth	r2, r3
3418648c:	68fb      	ldr	r3, [r7, #12]
3418648e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
34186490:	68fb      	ldr	r3, [r7, #12]
34186492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34186494:	b29b      	uxth	r3, r3
34186496:	2b00      	cmp	r3, #0
34186498:	d034      	beq.n	34186504 <HAL_I2C_Mem_Read+0x1d0>
3418649a:	68fb      	ldr	r3, [r7, #12]
3418649c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
3418649e:	2b00      	cmp	r3, #0
341864a0:	d130      	bne.n	34186504 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
341864a2:	697b      	ldr	r3, [r7, #20]
341864a4:	9300      	str	r3, [sp, #0]
341864a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341864a8:	2200      	movs	r2, #0
341864aa:	2180      	movs	r1, #128	@ 0x80
341864ac:	68f8      	ldr	r0, [r7, #12]
341864ae:	f000 f941 	bl	34186734 <I2C_WaitOnFlagUntilTimeout>
341864b2:	4603      	mov	r3, r0
341864b4:	2b00      	cmp	r3, #0
341864b6:	d001      	beq.n	341864bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
341864b8:	2301      	movs	r3, #1
341864ba:	e04d      	b.n	34186558 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
341864bc:	68fb      	ldr	r3, [r7, #12]
341864be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
341864c0:	b29b      	uxth	r3, r3
341864c2:	2bff      	cmp	r3, #255	@ 0xff
341864c4:	d90e      	bls.n	341864e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
341864c6:	68fb      	ldr	r3, [r7, #12]
341864c8:	22ff      	movs	r2, #255	@ 0xff
341864ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
341864cc:	68fb      	ldr	r3, [r7, #12]
341864ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341864d0:	b2da      	uxtb	r2, r3
341864d2:	8979      	ldrh	r1, [r7, #10]
341864d4:	2300      	movs	r3, #0
341864d6:	9300      	str	r3, [sp, #0]
341864d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
341864dc:	68f8      	ldr	r0, [r7, #12]
341864de:	f000 faed 	bl	34186abc <I2C_TransferConfig>
341864e2:	e00f      	b.n	34186504 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
341864e4:	68fb      	ldr	r3, [r7, #12]
341864e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
341864e8:	b29a      	uxth	r2, r3
341864ea:	68fb      	ldr	r3, [r7, #12]
341864ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
341864ee:	68fb      	ldr	r3, [r7, #12]
341864f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341864f2:	b2da      	uxtb	r2, r3
341864f4:	8979      	ldrh	r1, [r7, #10]
341864f6:	2300      	movs	r3, #0
341864f8:	9300      	str	r3, [sp, #0]
341864fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
341864fe:	68f8      	ldr	r0, [r7, #12]
34186500:	f000 fadc 	bl	34186abc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
34186504:	68fb      	ldr	r3, [r7, #12]
34186506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34186508:	b29b      	uxth	r3, r3
3418650a:	2b00      	cmp	r3, #0
3418650c:	d19a      	bne.n	34186444 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
3418650e:	697a      	ldr	r2, [r7, #20]
34186510:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34186512:	68f8      	ldr	r0, [r7, #12]
34186514:	f000 f9ae 	bl	34186874 <I2C_WaitOnSTOPFlagUntilTimeout>
34186518:	4603      	mov	r3, r0
3418651a:	2b00      	cmp	r3, #0
3418651c:	d001      	beq.n	34186522 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
3418651e:	2301      	movs	r3, #1
34186520:	e01a      	b.n	34186558 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
34186522:	68fb      	ldr	r3, [r7, #12]
34186524:	681b      	ldr	r3, [r3, #0]
34186526:	2220      	movs	r2, #32
34186528:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
3418652a:	68fb      	ldr	r3, [r7, #12]
3418652c:	681b      	ldr	r3, [r3, #0]
3418652e:	6859      	ldr	r1, [r3, #4]
34186530:	68fb      	ldr	r3, [r7, #12]
34186532:	681a      	ldr	r2, [r3, #0]
34186534:	4b0b      	ldr	r3, [pc, #44]	@ (34186564 <HAL_I2C_Mem_Read+0x230>)
34186536:	400b      	ands	r3, r1
34186538:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
3418653a:	68fb      	ldr	r3, [r7, #12]
3418653c:	2220      	movs	r2, #32
3418653e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
34186542:	68fb      	ldr	r3, [r7, #12]
34186544:	2200      	movs	r2, #0
34186546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
3418654a:	68fb      	ldr	r3, [r7, #12]
3418654c:	2200      	movs	r2, #0
3418654e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
34186552:	2300      	movs	r3, #0
34186554:	e000      	b.n	34186558 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
34186556:	2302      	movs	r3, #2
  }
}
34186558:	4618      	mov	r0, r3
3418655a:	3718      	adds	r7, #24
3418655c:	46bd      	mov	sp, r7
3418655e:	bd80      	pop	{r7, pc}
34186560:	80002400 	.word	0x80002400
34186564:	fe00e800 	.word	0xfe00e800

34186568 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
34186568:	b480      	push	{r7}
3418656a:	b083      	sub	sp, #12
3418656c:	af00      	add	r7, sp, #0
3418656e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
34186570:	687b      	ldr	r3, [r7, #4]
34186572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34186576:	b2db      	uxtb	r3, r3
}
34186578:	4618      	mov	r0, r3
3418657a:	370c      	adds	r7, #12
3418657c:	46bd      	mov	sp, r7
3418657e:	f85d 7b04 	ldr.w	r7, [sp], #4
34186582:	4770      	bx	lr

34186584 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
34186584:	b480      	push	{r7}
34186586:	b083      	sub	sp, #12
34186588:	af00      	add	r7, sp, #0
3418658a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
3418658c:	687b      	ldr	r3, [r7, #4]
3418658e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
34186590:	4618      	mov	r0, r3
34186592:	370c      	adds	r7, #12
34186594:	46bd      	mov	sp, r7
34186596:	f85d 7b04 	ldr.w	r7, [sp], #4
3418659a:	4770      	bx	lr

3418659c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
3418659c:	b580      	push	{r7, lr}
3418659e:	b086      	sub	sp, #24
341865a0:	af02      	add	r7, sp, #8
341865a2:	60f8      	str	r0, [r7, #12]
341865a4:	4608      	mov	r0, r1
341865a6:	4611      	mov	r1, r2
341865a8:	461a      	mov	r2, r3
341865aa:	4603      	mov	r3, r0
341865ac:	817b      	strh	r3, [r7, #10]
341865ae:	460b      	mov	r3, r1
341865b0:	813b      	strh	r3, [r7, #8]
341865b2:	4613      	mov	r3, r2
341865b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
341865b6:	88fb      	ldrh	r3, [r7, #6]
341865b8:	b2da      	uxtb	r2, r3
341865ba:	8979      	ldrh	r1, [r7, #10]
341865bc:	4b20      	ldr	r3, [pc, #128]	@ (34186640 <I2C_RequestMemoryWrite+0xa4>)
341865be:	9300      	str	r3, [sp, #0]
341865c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
341865c4:	68f8      	ldr	r0, [r7, #12]
341865c6:	f000 fa79 	bl	34186abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
341865ca:	69fa      	ldr	r2, [r7, #28]
341865cc:	69b9      	ldr	r1, [r7, #24]
341865ce:	68f8      	ldr	r0, [r7, #12]
341865d0:	f000 f909 	bl	341867e6 <I2C_WaitOnTXISFlagUntilTimeout>
341865d4:	4603      	mov	r3, r0
341865d6:	2b00      	cmp	r3, #0
341865d8:	d001      	beq.n	341865de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
341865da:	2301      	movs	r3, #1
341865dc:	e02c      	b.n	34186638 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
341865de:	88fb      	ldrh	r3, [r7, #6]
341865e0:	2b01      	cmp	r3, #1
341865e2:	d105      	bne.n	341865f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
341865e4:	893b      	ldrh	r3, [r7, #8]
341865e6:	b2da      	uxtb	r2, r3
341865e8:	68fb      	ldr	r3, [r7, #12]
341865ea:	681b      	ldr	r3, [r3, #0]
341865ec:	629a      	str	r2, [r3, #40]	@ 0x28
341865ee:	e015      	b.n	3418661c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
341865f0:	893b      	ldrh	r3, [r7, #8]
341865f2:	0a1b      	lsrs	r3, r3, #8
341865f4:	b29b      	uxth	r3, r3
341865f6:	b2da      	uxtb	r2, r3
341865f8:	68fb      	ldr	r3, [r7, #12]
341865fa:	681b      	ldr	r3, [r3, #0]
341865fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
341865fe:	69fa      	ldr	r2, [r7, #28]
34186600:	69b9      	ldr	r1, [r7, #24]
34186602:	68f8      	ldr	r0, [r7, #12]
34186604:	f000 f8ef 	bl	341867e6 <I2C_WaitOnTXISFlagUntilTimeout>
34186608:	4603      	mov	r3, r0
3418660a:	2b00      	cmp	r3, #0
3418660c:	d001      	beq.n	34186612 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
3418660e:	2301      	movs	r3, #1
34186610:	e012      	b.n	34186638 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34186612:	893b      	ldrh	r3, [r7, #8]
34186614:	b2da      	uxtb	r2, r3
34186616:	68fb      	ldr	r3, [r7, #12]
34186618:	681b      	ldr	r3, [r3, #0]
3418661a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
3418661c:	69fb      	ldr	r3, [r7, #28]
3418661e:	9300      	str	r3, [sp, #0]
34186620:	69bb      	ldr	r3, [r7, #24]
34186622:	2200      	movs	r2, #0
34186624:	2180      	movs	r1, #128	@ 0x80
34186626:	68f8      	ldr	r0, [r7, #12]
34186628:	f000 f884 	bl	34186734 <I2C_WaitOnFlagUntilTimeout>
3418662c:	4603      	mov	r3, r0
3418662e:	2b00      	cmp	r3, #0
34186630:	d001      	beq.n	34186636 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
34186632:	2301      	movs	r3, #1
34186634:	e000      	b.n	34186638 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
34186636:	2300      	movs	r3, #0
}
34186638:	4618      	mov	r0, r3
3418663a:	3710      	adds	r7, #16
3418663c:	46bd      	mov	sp, r7
3418663e:	bd80      	pop	{r7, pc}
34186640:	80002000 	.word	0x80002000

34186644 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
34186644:	b580      	push	{r7, lr}
34186646:	b086      	sub	sp, #24
34186648:	af02      	add	r7, sp, #8
3418664a:	60f8      	str	r0, [r7, #12]
3418664c:	4608      	mov	r0, r1
3418664e:	4611      	mov	r1, r2
34186650:	461a      	mov	r2, r3
34186652:	4603      	mov	r3, r0
34186654:	817b      	strh	r3, [r7, #10]
34186656:	460b      	mov	r3, r1
34186658:	813b      	strh	r3, [r7, #8]
3418665a:	4613      	mov	r3, r2
3418665c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
3418665e:	88fb      	ldrh	r3, [r7, #6]
34186660:	b2da      	uxtb	r2, r3
34186662:	8979      	ldrh	r1, [r7, #10]
34186664:	4b20      	ldr	r3, [pc, #128]	@ (341866e8 <I2C_RequestMemoryRead+0xa4>)
34186666:	9300      	str	r3, [sp, #0]
34186668:	2300      	movs	r3, #0
3418666a:	68f8      	ldr	r0, [r7, #12]
3418666c:	f000 fa26 	bl	34186abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
34186670:	69fa      	ldr	r2, [r7, #28]
34186672:	69b9      	ldr	r1, [r7, #24]
34186674:	68f8      	ldr	r0, [r7, #12]
34186676:	f000 f8b6 	bl	341867e6 <I2C_WaitOnTXISFlagUntilTimeout>
3418667a:	4603      	mov	r3, r0
3418667c:	2b00      	cmp	r3, #0
3418667e:	d001      	beq.n	34186684 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
34186680:	2301      	movs	r3, #1
34186682:	e02c      	b.n	341866de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
34186684:	88fb      	ldrh	r3, [r7, #6]
34186686:	2b01      	cmp	r3, #1
34186688:	d105      	bne.n	34186696 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3418668a:	893b      	ldrh	r3, [r7, #8]
3418668c:	b2da      	uxtb	r2, r3
3418668e:	68fb      	ldr	r3, [r7, #12]
34186690:	681b      	ldr	r3, [r3, #0]
34186692:	629a      	str	r2, [r3, #40]	@ 0x28
34186694:	e015      	b.n	341866c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
34186696:	893b      	ldrh	r3, [r7, #8]
34186698:	0a1b      	lsrs	r3, r3, #8
3418669a:	b29b      	uxth	r3, r3
3418669c:	b2da      	uxtb	r2, r3
3418669e:	68fb      	ldr	r3, [r7, #12]
341866a0:	681b      	ldr	r3, [r3, #0]
341866a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
341866a4:	69fa      	ldr	r2, [r7, #28]
341866a6:	69b9      	ldr	r1, [r7, #24]
341866a8:	68f8      	ldr	r0, [r7, #12]
341866aa:	f000 f89c 	bl	341867e6 <I2C_WaitOnTXISFlagUntilTimeout>
341866ae:	4603      	mov	r3, r0
341866b0:	2b00      	cmp	r3, #0
341866b2:	d001      	beq.n	341866b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
341866b4:	2301      	movs	r3, #1
341866b6:	e012      	b.n	341866de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
341866b8:	893b      	ldrh	r3, [r7, #8]
341866ba:	b2da      	uxtb	r2, r3
341866bc:	68fb      	ldr	r3, [r7, #12]
341866be:	681b      	ldr	r3, [r3, #0]
341866c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
341866c2:	69fb      	ldr	r3, [r7, #28]
341866c4:	9300      	str	r3, [sp, #0]
341866c6:	69bb      	ldr	r3, [r7, #24]
341866c8:	2200      	movs	r2, #0
341866ca:	2140      	movs	r1, #64	@ 0x40
341866cc:	68f8      	ldr	r0, [r7, #12]
341866ce:	f000 f831 	bl	34186734 <I2C_WaitOnFlagUntilTimeout>
341866d2:	4603      	mov	r3, r0
341866d4:	2b00      	cmp	r3, #0
341866d6:	d001      	beq.n	341866dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
341866d8:	2301      	movs	r3, #1
341866da:	e000      	b.n	341866de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
341866dc:	2300      	movs	r3, #0
}
341866de:	4618      	mov	r0, r3
341866e0:	3710      	adds	r7, #16
341866e2:	46bd      	mov	sp, r7
341866e4:	bd80      	pop	{r7, pc}
341866e6:	bf00      	nop
341866e8:	80002000 	.word	0x80002000

341866ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
341866ec:	b480      	push	{r7}
341866ee:	b083      	sub	sp, #12
341866f0:	af00      	add	r7, sp, #0
341866f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
341866f4:	687b      	ldr	r3, [r7, #4]
341866f6:	681b      	ldr	r3, [r3, #0]
341866f8:	699b      	ldr	r3, [r3, #24]
341866fa:	f003 0302 	and.w	r3, r3, #2
341866fe:	2b02      	cmp	r3, #2
34186700:	d103      	bne.n	3418670a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
34186702:	687b      	ldr	r3, [r7, #4]
34186704:	681b      	ldr	r3, [r3, #0]
34186706:	2200      	movs	r2, #0
34186708:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
3418670a:	687b      	ldr	r3, [r7, #4]
3418670c:	681b      	ldr	r3, [r3, #0]
3418670e:	699b      	ldr	r3, [r3, #24]
34186710:	f003 0301 	and.w	r3, r3, #1
34186714:	2b01      	cmp	r3, #1
34186716:	d007      	beq.n	34186728 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
34186718:	687b      	ldr	r3, [r7, #4]
3418671a:	681b      	ldr	r3, [r3, #0]
3418671c:	699a      	ldr	r2, [r3, #24]
3418671e:	687b      	ldr	r3, [r7, #4]
34186720:	681b      	ldr	r3, [r3, #0]
34186722:	f042 0201 	orr.w	r2, r2, #1
34186726:	619a      	str	r2, [r3, #24]
  }
}
34186728:	bf00      	nop
3418672a:	370c      	adds	r7, #12
3418672c:	46bd      	mov	sp, r7
3418672e:	f85d 7b04 	ldr.w	r7, [sp], #4
34186732:	4770      	bx	lr

34186734 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
34186734:	b580      	push	{r7, lr}
34186736:	b084      	sub	sp, #16
34186738:	af00      	add	r7, sp, #0
3418673a:	60f8      	str	r0, [r7, #12]
3418673c:	60b9      	str	r1, [r7, #8]
3418673e:	603b      	str	r3, [r7, #0]
34186740:	4613      	mov	r3, r2
34186742:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
34186744:	e03b      	b.n	341867be <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
34186746:	69ba      	ldr	r2, [r7, #24]
34186748:	6839      	ldr	r1, [r7, #0]
3418674a:	68f8      	ldr	r0, [r7, #12]
3418674c:	f000 f8d6 	bl	341868fc <I2C_IsErrorOccurred>
34186750:	4603      	mov	r3, r0
34186752:	2b00      	cmp	r3, #0
34186754:	d001      	beq.n	3418675a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
34186756:	2301      	movs	r3, #1
34186758:	e041      	b.n	341867de <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3418675a:	683b      	ldr	r3, [r7, #0]
3418675c:	f1b3 3fff 	cmp.w	r3, #4294967295
34186760:	d02d      	beq.n	341867be <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34186762:	f7fc f96b 	bl	34182a3c <HAL_GetTick>
34186766:	4602      	mov	r2, r0
34186768:	69bb      	ldr	r3, [r7, #24]
3418676a:	1ad3      	subs	r3, r2, r3
3418676c:	683a      	ldr	r2, [r7, #0]
3418676e:	429a      	cmp	r2, r3
34186770:	d302      	bcc.n	34186778 <I2C_WaitOnFlagUntilTimeout+0x44>
34186772:	683b      	ldr	r3, [r7, #0]
34186774:	2b00      	cmp	r3, #0
34186776:	d122      	bne.n	341867be <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
34186778:	68fb      	ldr	r3, [r7, #12]
3418677a:	681b      	ldr	r3, [r3, #0]
3418677c:	699a      	ldr	r2, [r3, #24]
3418677e:	68bb      	ldr	r3, [r7, #8]
34186780:	4013      	ands	r3, r2
34186782:	68ba      	ldr	r2, [r7, #8]
34186784:	429a      	cmp	r2, r3
34186786:	bf0c      	ite	eq
34186788:	2301      	moveq	r3, #1
3418678a:	2300      	movne	r3, #0
3418678c:	b2db      	uxtb	r3, r3
3418678e:	461a      	mov	r2, r3
34186790:	79fb      	ldrb	r3, [r7, #7]
34186792:	429a      	cmp	r2, r3
34186794:	d113      	bne.n	341867be <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34186796:	68fb      	ldr	r3, [r7, #12]
34186798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418679a:	f043 0220 	orr.w	r2, r3, #32
3418679e:	68fb      	ldr	r3, [r7, #12]
341867a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
341867a2:	68fb      	ldr	r3, [r7, #12]
341867a4:	2220      	movs	r2, #32
341867a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
341867aa:	68fb      	ldr	r3, [r7, #12]
341867ac:	2200      	movs	r2, #0
341867ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
341867b2:	68fb      	ldr	r3, [r7, #12]
341867b4:	2200      	movs	r2, #0
341867b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
341867ba:	2301      	movs	r3, #1
341867bc:	e00f      	b.n	341867de <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
341867be:	68fb      	ldr	r3, [r7, #12]
341867c0:	681b      	ldr	r3, [r3, #0]
341867c2:	699a      	ldr	r2, [r3, #24]
341867c4:	68bb      	ldr	r3, [r7, #8]
341867c6:	4013      	ands	r3, r2
341867c8:	68ba      	ldr	r2, [r7, #8]
341867ca:	429a      	cmp	r2, r3
341867cc:	bf0c      	ite	eq
341867ce:	2301      	moveq	r3, #1
341867d0:	2300      	movne	r3, #0
341867d2:	b2db      	uxtb	r3, r3
341867d4:	461a      	mov	r2, r3
341867d6:	79fb      	ldrb	r3, [r7, #7]
341867d8:	429a      	cmp	r2, r3
341867da:	d0b4      	beq.n	34186746 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
341867dc:	2300      	movs	r3, #0
}
341867de:	4618      	mov	r0, r3
341867e0:	3710      	adds	r7, #16
341867e2:	46bd      	mov	sp, r7
341867e4:	bd80      	pop	{r7, pc}

341867e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
341867e6:	b580      	push	{r7, lr}
341867e8:	b084      	sub	sp, #16
341867ea:	af00      	add	r7, sp, #0
341867ec:	60f8      	str	r0, [r7, #12]
341867ee:	60b9      	str	r1, [r7, #8]
341867f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
341867f2:	e033      	b.n	3418685c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
341867f4:	687a      	ldr	r2, [r7, #4]
341867f6:	68b9      	ldr	r1, [r7, #8]
341867f8:	68f8      	ldr	r0, [r7, #12]
341867fa:	f000 f87f 	bl	341868fc <I2C_IsErrorOccurred>
341867fe:	4603      	mov	r3, r0
34186800:	2b00      	cmp	r3, #0
34186802:	d001      	beq.n	34186808 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
34186804:	2301      	movs	r3, #1
34186806:	e031      	b.n	3418686c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
34186808:	68bb      	ldr	r3, [r7, #8]
3418680a:	f1b3 3fff 	cmp.w	r3, #4294967295
3418680e:	d025      	beq.n	3418685c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34186810:	f7fc f914 	bl	34182a3c <HAL_GetTick>
34186814:	4602      	mov	r2, r0
34186816:	687b      	ldr	r3, [r7, #4]
34186818:	1ad3      	subs	r3, r2, r3
3418681a:	68ba      	ldr	r2, [r7, #8]
3418681c:	429a      	cmp	r2, r3
3418681e:	d302      	bcc.n	34186826 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
34186820:	68bb      	ldr	r3, [r7, #8]
34186822:	2b00      	cmp	r3, #0
34186824:	d11a      	bne.n	3418685c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
34186826:	68fb      	ldr	r3, [r7, #12]
34186828:	681b      	ldr	r3, [r3, #0]
3418682a:	699b      	ldr	r3, [r3, #24]
3418682c:	f003 0302 	and.w	r3, r3, #2
34186830:	2b02      	cmp	r3, #2
34186832:	d013      	beq.n	3418685c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34186834:	68fb      	ldr	r3, [r7, #12]
34186836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186838:	f043 0220 	orr.w	r2, r3, #32
3418683c:	68fb      	ldr	r3, [r7, #12]
3418683e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
34186840:	68fb      	ldr	r3, [r7, #12]
34186842:	2220      	movs	r2, #32
34186844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
34186848:	68fb      	ldr	r3, [r7, #12]
3418684a:	2200      	movs	r2, #0
3418684c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
34186850:	68fb      	ldr	r3, [r7, #12]
34186852:	2200      	movs	r2, #0
34186854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
34186858:	2301      	movs	r3, #1
3418685a:	e007      	b.n	3418686c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
3418685c:	68fb      	ldr	r3, [r7, #12]
3418685e:	681b      	ldr	r3, [r3, #0]
34186860:	699b      	ldr	r3, [r3, #24]
34186862:	f003 0302 	and.w	r3, r3, #2
34186866:	2b02      	cmp	r3, #2
34186868:	d1c4      	bne.n	341867f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
3418686a:	2300      	movs	r3, #0
}
3418686c:	4618      	mov	r0, r3
3418686e:	3710      	adds	r7, #16
34186870:	46bd      	mov	sp, r7
34186872:	bd80      	pop	{r7, pc}

34186874 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
34186874:	b580      	push	{r7, lr}
34186876:	b084      	sub	sp, #16
34186878:	af00      	add	r7, sp, #0
3418687a:	60f8      	str	r0, [r7, #12]
3418687c:	60b9      	str	r1, [r7, #8]
3418687e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34186880:	e02f      	b.n	341868e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
34186882:	687a      	ldr	r2, [r7, #4]
34186884:	68b9      	ldr	r1, [r7, #8]
34186886:	68f8      	ldr	r0, [r7, #12]
34186888:	f000 f838 	bl	341868fc <I2C_IsErrorOccurred>
3418688c:	4603      	mov	r3, r0
3418688e:	2b00      	cmp	r3, #0
34186890:	d001      	beq.n	34186896 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
34186892:	2301      	movs	r3, #1
34186894:	e02d      	b.n	341868f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34186896:	f7fc f8d1 	bl	34182a3c <HAL_GetTick>
3418689a:	4602      	mov	r2, r0
3418689c:	687b      	ldr	r3, [r7, #4]
3418689e:	1ad3      	subs	r3, r2, r3
341868a0:	68ba      	ldr	r2, [r7, #8]
341868a2:	429a      	cmp	r2, r3
341868a4:	d302      	bcc.n	341868ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
341868a6:	68bb      	ldr	r3, [r7, #8]
341868a8:	2b00      	cmp	r3, #0
341868aa:	d11a      	bne.n	341868e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
341868ac:	68fb      	ldr	r3, [r7, #12]
341868ae:	681b      	ldr	r3, [r3, #0]
341868b0:	699b      	ldr	r3, [r3, #24]
341868b2:	f003 0320 	and.w	r3, r3, #32
341868b6:	2b20      	cmp	r3, #32
341868b8:	d013      	beq.n	341868e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
341868ba:	68fb      	ldr	r3, [r7, #12]
341868bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341868be:	f043 0220 	orr.w	r2, r3, #32
341868c2:	68fb      	ldr	r3, [r7, #12]
341868c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
341868c6:	68fb      	ldr	r3, [r7, #12]
341868c8:	2220      	movs	r2, #32
341868ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
341868ce:	68fb      	ldr	r3, [r7, #12]
341868d0:	2200      	movs	r2, #0
341868d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
341868d6:	68fb      	ldr	r3, [r7, #12]
341868d8:	2200      	movs	r2, #0
341868da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
341868de:	2301      	movs	r3, #1
341868e0:	e007      	b.n	341868f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
341868e2:	68fb      	ldr	r3, [r7, #12]
341868e4:	681b      	ldr	r3, [r3, #0]
341868e6:	699b      	ldr	r3, [r3, #24]
341868e8:	f003 0320 	and.w	r3, r3, #32
341868ec:	2b20      	cmp	r3, #32
341868ee:	d1c8      	bne.n	34186882 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
341868f0:	2300      	movs	r3, #0
}
341868f2:	4618      	mov	r0, r3
341868f4:	3710      	adds	r7, #16
341868f6:	46bd      	mov	sp, r7
341868f8:	bd80      	pop	{r7, pc}
	...

341868fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
341868fc:	b580      	push	{r7, lr}
341868fe:	b08a      	sub	sp, #40	@ 0x28
34186900:	af00      	add	r7, sp, #0
34186902:	60f8      	str	r0, [r7, #12]
34186904:	60b9      	str	r1, [r7, #8]
34186906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34186908:	2300      	movs	r3, #0
3418690a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
3418690e:	68fb      	ldr	r3, [r7, #12]
34186910:	681b      	ldr	r3, [r3, #0]
34186912:	699b      	ldr	r3, [r3, #24]
34186914:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
34186916:	2300      	movs	r3, #0
34186918:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
3418691a:	687b      	ldr	r3, [r7, #4]
3418691c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
3418691e:	69bb      	ldr	r3, [r7, #24]
34186920:	f003 0310 	and.w	r3, r3, #16
34186924:	2b00      	cmp	r3, #0
34186926:	d068      	beq.n	341869fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
34186928:	68fb      	ldr	r3, [r7, #12]
3418692a:	681b      	ldr	r3, [r3, #0]
3418692c:	2210      	movs	r2, #16
3418692e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
34186930:	e049      	b.n	341869c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
34186932:	68bb      	ldr	r3, [r7, #8]
34186934:	f1b3 3fff 	cmp.w	r3, #4294967295
34186938:	d045      	beq.n	341869c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
3418693a:	f7fc f87f 	bl	34182a3c <HAL_GetTick>
3418693e:	4602      	mov	r2, r0
34186940:	69fb      	ldr	r3, [r7, #28]
34186942:	1ad3      	subs	r3, r2, r3
34186944:	68ba      	ldr	r2, [r7, #8]
34186946:	429a      	cmp	r2, r3
34186948:	d302      	bcc.n	34186950 <I2C_IsErrorOccurred+0x54>
3418694a:	68bb      	ldr	r3, [r7, #8]
3418694c:	2b00      	cmp	r3, #0
3418694e:	d13a      	bne.n	341869c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
34186950:	68fb      	ldr	r3, [r7, #12]
34186952:	681b      	ldr	r3, [r3, #0]
34186954:	685b      	ldr	r3, [r3, #4]
34186956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3418695a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
3418695c:	68fb      	ldr	r3, [r7, #12]
3418695e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
34186962:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
34186964:	68fb      	ldr	r3, [r7, #12]
34186966:	681b      	ldr	r3, [r3, #0]
34186968:	699b      	ldr	r3, [r3, #24]
3418696a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3418696e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34186972:	d121      	bne.n	341869b8 <I2C_IsErrorOccurred+0xbc>
34186974:	697b      	ldr	r3, [r7, #20]
34186976:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3418697a:	d01d      	beq.n	341869b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
3418697c:	7cfb      	ldrb	r3, [r7, #19]
3418697e:	2b20      	cmp	r3, #32
34186980:	d01a      	beq.n	341869b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
34186982:	68fb      	ldr	r3, [r7, #12]
34186984:	681b      	ldr	r3, [r3, #0]
34186986:	685a      	ldr	r2, [r3, #4]
34186988:	68fb      	ldr	r3, [r7, #12]
3418698a:	681b      	ldr	r3, [r3, #0]
3418698c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
34186990:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
34186992:	f7fc f853 	bl	34182a3c <HAL_GetTick>
34186996:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34186998:	e00e      	b.n	341869b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
3418699a:	f7fc f84f 	bl	34182a3c <HAL_GetTick>
3418699e:	4602      	mov	r2, r0
341869a0:	69fb      	ldr	r3, [r7, #28]
341869a2:	1ad3      	subs	r3, r2, r3
341869a4:	2b19      	cmp	r3, #25
341869a6:	d907      	bls.n	341869b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
341869a8:	6a3b      	ldr	r3, [r7, #32]
341869aa:	f043 0320 	orr.w	r3, r3, #32
341869ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
341869b0:	2301      	movs	r3, #1
341869b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
341869b6:	e006      	b.n	341869c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
341869b8:	68fb      	ldr	r3, [r7, #12]
341869ba:	681b      	ldr	r3, [r3, #0]
341869bc:	699b      	ldr	r3, [r3, #24]
341869be:	f003 0320 	and.w	r3, r3, #32
341869c2:	2b20      	cmp	r3, #32
341869c4:	d1e9      	bne.n	3418699a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
341869c6:	68fb      	ldr	r3, [r7, #12]
341869c8:	681b      	ldr	r3, [r3, #0]
341869ca:	699b      	ldr	r3, [r3, #24]
341869cc:	f003 0320 	and.w	r3, r3, #32
341869d0:	2b20      	cmp	r3, #32
341869d2:	d003      	beq.n	341869dc <I2C_IsErrorOccurred+0xe0>
341869d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341869d8:	2b00      	cmp	r3, #0
341869da:	d0aa      	beq.n	34186932 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
341869dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341869e0:	2b00      	cmp	r3, #0
341869e2:	d103      	bne.n	341869ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
341869e4:	68fb      	ldr	r3, [r7, #12]
341869e6:	681b      	ldr	r3, [r3, #0]
341869e8:	2220      	movs	r2, #32
341869ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
341869ec:	6a3b      	ldr	r3, [r7, #32]
341869ee:	f043 0304 	orr.w	r3, r3, #4
341869f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
341869f4:	2301      	movs	r3, #1
341869f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
341869fa:	68fb      	ldr	r3, [r7, #12]
341869fc:	681b      	ldr	r3, [r3, #0]
341869fe:	699b      	ldr	r3, [r3, #24]
34186a00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
34186a02:	69bb      	ldr	r3, [r7, #24]
34186a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34186a08:	2b00      	cmp	r3, #0
34186a0a:	d00b      	beq.n	34186a24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
34186a0c:	6a3b      	ldr	r3, [r7, #32]
34186a0e:	f043 0301 	orr.w	r3, r3, #1
34186a12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
34186a14:	68fb      	ldr	r3, [r7, #12]
34186a16:	681b      	ldr	r3, [r3, #0]
34186a18:	f44f 7280 	mov.w	r2, #256	@ 0x100
34186a1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
34186a1e:	2301      	movs	r3, #1
34186a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
34186a24:	69bb      	ldr	r3, [r7, #24]
34186a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34186a2a:	2b00      	cmp	r3, #0
34186a2c:	d00b      	beq.n	34186a46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
34186a2e:	6a3b      	ldr	r3, [r7, #32]
34186a30:	f043 0308 	orr.w	r3, r3, #8
34186a34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
34186a36:	68fb      	ldr	r3, [r7, #12]
34186a38:	681b      	ldr	r3, [r3, #0]
34186a3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34186a3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
34186a40:	2301      	movs	r3, #1
34186a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
34186a46:	69bb      	ldr	r3, [r7, #24]
34186a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34186a4c:	2b00      	cmp	r3, #0
34186a4e:	d00b      	beq.n	34186a68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
34186a50:	6a3b      	ldr	r3, [r7, #32]
34186a52:	f043 0302 	orr.w	r3, r3, #2
34186a56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
34186a58:	68fb      	ldr	r3, [r7, #12]
34186a5a:	681b      	ldr	r3, [r3, #0]
34186a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
34186a60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
34186a62:	2301      	movs	r3, #1
34186a64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
34186a68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34186a6c:	2b00      	cmp	r3, #0
34186a6e:	d01c      	beq.n	34186aaa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
34186a70:	68f8      	ldr	r0, [r7, #12]
34186a72:	f7ff fe3b 	bl	341866ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
34186a76:	68fb      	ldr	r3, [r7, #12]
34186a78:	681b      	ldr	r3, [r3, #0]
34186a7a:	6859      	ldr	r1, [r3, #4]
34186a7c:	68fb      	ldr	r3, [r7, #12]
34186a7e:	681a      	ldr	r2, [r3, #0]
34186a80:	4b0d      	ldr	r3, [pc, #52]	@ (34186ab8 <I2C_IsErrorOccurred+0x1bc>)
34186a82:	400b      	ands	r3, r1
34186a84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
34186a86:	68fb      	ldr	r3, [r7, #12]
34186a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
34186a8a:	6a3b      	ldr	r3, [r7, #32]
34186a8c:	431a      	orrs	r2, r3
34186a8e:	68fb      	ldr	r3, [r7, #12]
34186a90:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
34186a92:	68fb      	ldr	r3, [r7, #12]
34186a94:	2220      	movs	r2, #32
34186a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
34186a9a:	68fb      	ldr	r3, [r7, #12]
34186a9c:	2200      	movs	r2, #0
34186a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34186aa2:	68fb      	ldr	r3, [r7, #12]
34186aa4:	2200      	movs	r2, #0
34186aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
34186aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
34186aae:	4618      	mov	r0, r3
34186ab0:	3728      	adds	r7, #40	@ 0x28
34186ab2:	46bd      	mov	sp, r7
34186ab4:	bd80      	pop	{r7, pc}
34186ab6:	bf00      	nop
34186ab8:	fe00e800 	.word	0xfe00e800

34186abc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
34186abc:	b480      	push	{r7}
34186abe:	b087      	sub	sp, #28
34186ac0:	af00      	add	r7, sp, #0
34186ac2:	60f8      	str	r0, [r7, #12]
34186ac4:	607b      	str	r3, [r7, #4]
34186ac6:	460b      	mov	r3, r1
34186ac8:	817b      	strh	r3, [r7, #10]
34186aca:	4613      	mov	r3, r2
34186acc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34186ace:	897b      	ldrh	r3, [r7, #10]
34186ad0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
34186ad4:	7a7b      	ldrb	r3, [r7, #9]
34186ad6:	041b      	lsls	r3, r3, #16
34186ad8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34186adc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
34186ade:	687b      	ldr	r3, [r7, #4]
34186ae0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34186ae2:	6a3b      	ldr	r3, [r7, #32]
34186ae4:	4313      	orrs	r3, r2
34186ae6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34186aea:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
34186aec:	68fb      	ldr	r3, [r7, #12]
34186aee:	681b      	ldr	r3, [r3, #0]
34186af0:	685a      	ldr	r2, [r3, #4]
34186af2:	6a3b      	ldr	r3, [r7, #32]
34186af4:	0d5b      	lsrs	r3, r3, #21
34186af6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
34186afa:	4b08      	ldr	r3, [pc, #32]	@ (34186b1c <I2C_TransferConfig+0x60>)
34186afc:	430b      	orrs	r3, r1
34186afe:	43db      	mvns	r3, r3
34186b00:	ea02 0103 	and.w	r1, r2, r3
34186b04:	68fb      	ldr	r3, [r7, #12]
34186b06:	681b      	ldr	r3, [r3, #0]
34186b08:	697a      	ldr	r2, [r7, #20]
34186b0a:	430a      	orrs	r2, r1
34186b0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
34186b0e:	bf00      	nop
34186b10:	371c      	adds	r7, #28
34186b12:	46bd      	mov	sp, r7
34186b14:	f85d 7b04 	ldr.w	r7, [sp], #4
34186b18:	4770      	bx	lr
34186b1a:	bf00      	nop
34186b1c:	03ff63ff 	.word	0x03ff63ff

34186b20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
34186b20:	b480      	push	{r7}
34186b22:	b083      	sub	sp, #12
34186b24:	af00      	add	r7, sp, #0
34186b26:	6078      	str	r0, [r7, #4]
34186b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
34186b2a:	687b      	ldr	r3, [r7, #4]
34186b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34186b30:	b2db      	uxtb	r3, r3
34186b32:	2b20      	cmp	r3, #32
34186b34:	d138      	bne.n	34186ba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
34186b36:	687b      	ldr	r3, [r7, #4]
34186b38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34186b3c:	2b01      	cmp	r3, #1
34186b3e:	d101      	bne.n	34186b44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
34186b40:	2302      	movs	r3, #2
34186b42:	e032      	b.n	34186baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
34186b44:	687b      	ldr	r3, [r7, #4]
34186b46:	2201      	movs	r2, #1
34186b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
34186b4c:	687b      	ldr	r3, [r7, #4]
34186b4e:	2224      	movs	r2, #36	@ 0x24
34186b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
34186b54:	687b      	ldr	r3, [r7, #4]
34186b56:	681b      	ldr	r3, [r3, #0]
34186b58:	681a      	ldr	r2, [r3, #0]
34186b5a:	687b      	ldr	r3, [r7, #4]
34186b5c:	681b      	ldr	r3, [r3, #0]
34186b5e:	f022 0201 	bic.w	r2, r2, #1
34186b62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
34186b64:	687b      	ldr	r3, [r7, #4]
34186b66:	681b      	ldr	r3, [r3, #0]
34186b68:	681a      	ldr	r2, [r3, #0]
34186b6a:	687b      	ldr	r3, [r7, #4]
34186b6c:	681b      	ldr	r3, [r3, #0]
34186b6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34186b72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
34186b74:	687b      	ldr	r3, [r7, #4]
34186b76:	681b      	ldr	r3, [r3, #0]
34186b78:	6819      	ldr	r1, [r3, #0]
34186b7a:	687b      	ldr	r3, [r7, #4]
34186b7c:	681b      	ldr	r3, [r3, #0]
34186b7e:	683a      	ldr	r2, [r7, #0]
34186b80:	430a      	orrs	r2, r1
34186b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
34186b84:	687b      	ldr	r3, [r7, #4]
34186b86:	681b      	ldr	r3, [r3, #0]
34186b88:	681a      	ldr	r2, [r3, #0]
34186b8a:	687b      	ldr	r3, [r7, #4]
34186b8c:	681b      	ldr	r3, [r3, #0]
34186b8e:	f042 0201 	orr.w	r2, r2, #1
34186b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
34186b94:	687b      	ldr	r3, [r7, #4]
34186b96:	2220      	movs	r2, #32
34186b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34186b9c:	687b      	ldr	r3, [r7, #4]
34186b9e:	2200      	movs	r2, #0
34186ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
34186ba4:	2300      	movs	r3, #0
34186ba6:	e000      	b.n	34186baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
34186ba8:	2302      	movs	r3, #2
  }
}
34186baa:	4618      	mov	r0, r3
34186bac:	370c      	adds	r7, #12
34186bae:	46bd      	mov	sp, r7
34186bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
34186bb4:	4770      	bx	lr

34186bb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
34186bb6:	b480      	push	{r7}
34186bb8:	b085      	sub	sp, #20
34186bba:	af00      	add	r7, sp, #0
34186bbc:	6078      	str	r0, [r7, #4]
34186bbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
34186bc0:	687b      	ldr	r3, [r7, #4]
34186bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34186bc6:	b2db      	uxtb	r3, r3
34186bc8:	2b20      	cmp	r3, #32
34186bca:	d139      	bne.n	34186c40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
34186bcc:	687b      	ldr	r3, [r7, #4]
34186bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34186bd2:	2b01      	cmp	r3, #1
34186bd4:	d101      	bne.n	34186bda <HAL_I2CEx_ConfigDigitalFilter+0x24>
34186bd6:	2302      	movs	r3, #2
34186bd8:	e033      	b.n	34186c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
34186bda:	687b      	ldr	r3, [r7, #4]
34186bdc:	2201      	movs	r2, #1
34186bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
34186be2:	687b      	ldr	r3, [r7, #4]
34186be4:	2224      	movs	r2, #36	@ 0x24
34186be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
34186bea:	687b      	ldr	r3, [r7, #4]
34186bec:	681b      	ldr	r3, [r3, #0]
34186bee:	681a      	ldr	r2, [r3, #0]
34186bf0:	687b      	ldr	r3, [r7, #4]
34186bf2:	681b      	ldr	r3, [r3, #0]
34186bf4:	f022 0201 	bic.w	r2, r2, #1
34186bf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
34186bfa:	687b      	ldr	r3, [r7, #4]
34186bfc:	681b      	ldr	r3, [r3, #0]
34186bfe:	681b      	ldr	r3, [r3, #0]
34186c00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
34186c02:	68fb      	ldr	r3, [r7, #12]
34186c04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
34186c08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
34186c0a:	683b      	ldr	r3, [r7, #0]
34186c0c:	021b      	lsls	r3, r3, #8
34186c0e:	68fa      	ldr	r2, [r7, #12]
34186c10:	4313      	orrs	r3, r2
34186c12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
34186c14:	687b      	ldr	r3, [r7, #4]
34186c16:	681b      	ldr	r3, [r3, #0]
34186c18:	68fa      	ldr	r2, [r7, #12]
34186c1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
34186c1c:	687b      	ldr	r3, [r7, #4]
34186c1e:	681b      	ldr	r3, [r3, #0]
34186c20:	681a      	ldr	r2, [r3, #0]
34186c22:	687b      	ldr	r3, [r7, #4]
34186c24:	681b      	ldr	r3, [r3, #0]
34186c26:	f042 0201 	orr.w	r2, r2, #1
34186c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
34186c2c:	687b      	ldr	r3, [r7, #4]
34186c2e:	2220      	movs	r2, #32
34186c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34186c34:	687b      	ldr	r3, [r7, #4]
34186c36:	2200      	movs	r2, #0
34186c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
34186c3c:	2300      	movs	r3, #0
34186c3e:	e000      	b.n	34186c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
34186c40:	2302      	movs	r3, #2
  }
}
34186c42:	4618      	mov	r0, r3
34186c44:	3714      	adds	r7, #20
34186c46:	46bd      	mov	sp, r7
34186c48:	f85d 7b04 	ldr.w	r7, [sp], #4
34186c4c:	4770      	bx	lr

34186c4e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
34186c4e:	b580      	push	{r7, lr}
34186c50:	b084      	sub	sp, #16
34186c52:	af00      	add	r7, sp, #0
34186c54:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
34186c56:	687b      	ldr	r3, [r7, #4]
34186c58:	2b00      	cmp	r3, #0
34186c5a:	d101      	bne.n	34186c60 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
34186c5c:	2301      	movs	r3, #1
34186c5e:	e09d      	b.n	34186d9c <HAL_LTDC_Init+0x14e>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
34186c60:	687b      	ldr	r3, [r7, #4]
34186c62:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
34186c66:	b2db      	uxtb	r3, r3
34186c68:	2b00      	cmp	r3, #0
34186c6a:	d106      	bne.n	34186c7a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
34186c6c:	687b      	ldr	r3, [r7, #4]
34186c6e:	2200      	movs	r2, #0
34186c70:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
34186c74:	6878      	ldr	r0, [r7, #4]
34186c76:	f00a f9cb 	bl	34191010 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
34186c7a:	687b      	ldr	r3, [r7, #4]
34186c7c:	2202      	movs	r2, #2
34186c7e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
34186c82:	687b      	ldr	r3, [r7, #4]
34186c84:	681b      	ldr	r3, [r3, #0]
34186c86:	699a      	ldr	r2, [r3, #24]
34186c88:	687b      	ldr	r3, [r7, #4]
34186c8a:	681b      	ldr	r3, [r3, #0]
34186c8c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
34186c90:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
34186c92:	687b      	ldr	r3, [r7, #4]
34186c94:	681b      	ldr	r3, [r3, #0]
34186c96:	6999      	ldr	r1, [r3, #24]
34186c98:	687b      	ldr	r3, [r7, #4]
34186c9a:	685a      	ldr	r2, [r3, #4]
34186c9c:	687b      	ldr	r3, [r7, #4]
34186c9e:	689b      	ldr	r3, [r3, #8]
34186ca0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
34186ca2:	687b      	ldr	r3, [r7, #4]
34186ca4:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
34186ca6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
34186ca8:	687b      	ldr	r3, [r7, #4]
34186caa:	691b      	ldr	r3, [r3, #16]
34186cac:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
34186cae:	687b      	ldr	r3, [r7, #4]
34186cb0:	681b      	ldr	r3, [r3, #0]
34186cb2:	430a      	orrs	r2, r1
34186cb4:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
34186cb6:	687b      	ldr	r3, [r7, #4]
34186cb8:	695b      	ldr	r3, [r3, #20]
34186cba:	041b      	lsls	r3, r3, #16
34186cbc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
34186cbe:	687b      	ldr	r3, [r7, #4]
34186cc0:	6999      	ldr	r1, [r3, #24]
34186cc2:	687b      	ldr	r3, [r7, #4]
34186cc4:	681b      	ldr	r3, [r3, #0]
34186cc6:	68fa      	ldr	r2, [r7, #12]
34186cc8:	430a      	orrs	r2, r1
34186cca:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
34186ccc:	687b      	ldr	r3, [r7, #4]
34186cce:	69db      	ldr	r3, [r3, #28]
34186cd0:	041b      	lsls	r3, r3, #16
34186cd2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
34186cd4:	687b      	ldr	r3, [r7, #4]
34186cd6:	6a19      	ldr	r1, [r3, #32]
34186cd8:	687b      	ldr	r3, [r7, #4]
34186cda:	681b      	ldr	r3, [r3, #0]
34186cdc:	68fa      	ldr	r2, [r7, #12]
34186cde:	430a      	orrs	r2, r1
34186ce0:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
34186ce2:	687b      	ldr	r3, [r7, #4]
34186ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34186ce6:	041b      	lsls	r3, r3, #16
34186ce8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
34186cea:	687b      	ldr	r3, [r7, #4]
34186cec:	6a99      	ldr	r1, [r3, #40]	@ 0x28
34186cee:	687b      	ldr	r3, [r7, #4]
34186cf0:	681b      	ldr	r3, [r3, #0]
34186cf2:	68fa      	ldr	r2, [r7, #12]
34186cf4:	430a      	orrs	r2, r1
34186cf6:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
34186cf8:	687b      	ldr	r3, [r7, #4]
34186cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34186cfc:	041b      	lsls	r3, r3, #16
34186cfe:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
34186d00:	687b      	ldr	r3, [r7, #4]
34186d02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
34186d04:	687b      	ldr	r3, [r7, #4]
34186d06:	681b      	ldr	r3, [r3, #0]
34186d08:	68fa      	ldr	r2, [r7, #12]
34186d0a:	430a      	orrs	r2, r1
34186d0c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
34186d0e:	687b      	ldr	r3, [r7, #4]
34186d10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
34186d14:	021b      	lsls	r3, r3, #8
34186d16:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
34186d18:	687b      	ldr	r3, [r7, #4]
34186d1a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
34186d1e:	041b      	lsls	r3, r3, #16
34186d20:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
34186d22:	687b      	ldr	r3, [r7, #4]
34186d24:	681b      	ldr	r3, [r3, #0]
34186d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34186d28:	687b      	ldr	r3, [r7, #4]
34186d2a:	681b      	ldr	r3, [r3, #0]
34186d2c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
34186d30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
34186d32:	687b      	ldr	r3, [r7, #4]
34186d34:	681b      	ldr	r3, [r3, #0]
34186d36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
34186d38:	68ba      	ldr	r2, [r7, #8]
34186d3a:	68fb      	ldr	r3, [r7, #12]
34186d3c:	4313      	orrs	r3, r2
34186d3e:	687a      	ldr	r2, [r7, #4]
34186d40:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
34186d44:	431a      	orrs	r2, r3
34186d46:	687b      	ldr	r3, [r7, #4]
34186d48:	681b      	ldr	r3, [r3, #0]
34186d4a:	430a      	orrs	r2, r1
34186d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Activate Global Reload for Layer 1 and Layer 2 */
  WRITE_REG(LTDC_LAYER(hltdc, LTDC_LAYER_1)->RCR, LTDC_LxRCR_GRMSK);
34186d4e:	687b      	ldr	r3, [r7, #4]
34186d50:	681b      	ldr	r3, [r3, #0]
34186d52:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34186d56:	461a      	mov	r2, r3
34186d58:	2304      	movs	r3, #4
34186d5a:	6093      	str	r3, [r2, #8]
  WRITE_REG(LTDC_LAYER(hltdc, LTDC_LAYER_2)->RCR, LTDC_LxRCR_GRMSK);
34186d5c:	687b      	ldr	r3, [r7, #4]
34186d5e:	681b      	ldr	r3, [r3, #0]
34186d60:	f503 7300 	add.w	r3, r3, #512	@ 0x200
34186d64:	461a      	mov	r2, r3
34186d66:	2304      	movs	r3, #4
34186d68:	6093      	str	r3, [r2, #8]

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
34186d6a:	687b      	ldr	r3, [r7, #4]
34186d6c:	681b      	ldr	r3, [r3, #0]
34186d6e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
34186d70:	687b      	ldr	r3, [r7, #4]
34186d72:	681b      	ldr	r3, [r3, #0]
34186d74:	f042 0244 	orr.w	r2, r2, #68	@ 0x44
34186d78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
34186d7a:	687b      	ldr	r3, [r7, #4]
34186d7c:	681b      	ldr	r3, [r3, #0]
34186d7e:	699a      	ldr	r2, [r3, #24]
34186d80:	687b      	ldr	r3, [r7, #4]
34186d82:	681b      	ldr	r3, [r3, #0]
34186d84:	f042 0201 	orr.w	r2, r2, #1
34186d88:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
34186d8a:	687b      	ldr	r3, [r7, #4]
34186d8c:	2200      	movs	r2, #0
34186d8e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
34186d92:	687b      	ldr	r3, [r7, #4]
34186d94:	2201      	movs	r2, #1
34186d96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
34186d9a:	2300      	movs	r3, #0
}
34186d9c:	4618      	mov	r0, r3
34186d9e:	3710      	adds	r7, #16
34186da0:	46bd      	mov	sp, r7
34186da2:	bd80      	pop	{r7, pc}

34186da4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
34186da4:	b5b0      	push	{r4, r5, r7, lr}
34186da6:	b086      	sub	sp, #24
34186da8:	af02      	add	r7, sp, #8
34186daa:	60f8      	str	r0, [r7, #12]
34186dac:	60b9      	str	r1, [r7, #8]
34186dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
34186db0:	68fb      	ldr	r3, [r7, #12]
34186db2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
34186db6:	2b01      	cmp	r3, #1
34186db8:	d101      	bne.n	34186dbe <HAL_LTDC_ConfigLayer+0x1a>
34186dba:	2302      	movs	r3, #2
34186dbc:	e052      	b.n	34186e64 <HAL_LTDC_ConfigLayer+0xc0>
34186dbe:	68fb      	ldr	r3, [r7, #12]
34186dc0:	2201      	movs	r2, #1
34186dc2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
34186dc6:	68fb      	ldr	r3, [r7, #12]
34186dc8:	2202      	movs	r2, #2
34186dca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
34186dce:	68fa      	ldr	r2, [r7, #12]
34186dd0:	687b      	ldr	r3, [r7, #4]
34186dd2:	2134      	movs	r1, #52	@ 0x34
34186dd4:	fb01 f303 	mul.w	r3, r1, r3
34186dd8:	4413      	add	r3, r2
34186dda:	f103 0238 	add.w	r2, r3, #56	@ 0x38
34186dde:	68bb      	ldr	r3, [r7, #8]
34186de0:	4614      	mov	r4, r2
34186de2:	461d      	mov	r5, r3
34186de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34186de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34186de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34186dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34186dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34186dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34186df0:	682b      	ldr	r3, [r5, #0]
34186df2:	6023      	str	r3, [r4, #0]

  /* Configure Predefined format */
  LTDC_SetPredefFormat(hltdc, LayerIdx);
34186df4:	6879      	ldr	r1, [r7, #4]
34186df6:	68f8      	ldr	r0, [r7, #12]
34186df8:	f000 ff6c 	bl	34187cd4 <LTDC_SetPredefFormat>

  /* Configure composition and blending*/
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
34186dfc:	6879      	ldr	r1, [r7, #4]
34186dfe:	68f8      	ldr	r0, [r7, #12]
34186e00:	f000 fec0 	bl	34187b84 <LTDC_SetCompositionConfig>

  /* Disable YUV format */
  CLEAR_BIT(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN);
34186e04:	68fb      	ldr	r3, [r7, #12]
34186e06:	681b      	ldr	r3, [r3, #0]
34186e08:	461a      	mov	r2, r3
34186e0a:	687b      	ldr	r3, [r7, #4]
34186e0c:	021b      	lsls	r3, r3, #8
34186e0e:	4413      	add	r3, r2
34186e10:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34186e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34186e16:	68fa      	ldr	r2, [r7, #12]
34186e18:	6812      	ldr	r2, [r2, #0]
34186e1a:	4611      	mov	r1, r2
34186e1c:	687a      	ldr	r2, [r7, #4]
34186e1e:	0212      	lsls	r2, r2, #8
34186e20:	440a      	add	r2, r1
34186e22:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34186e26:	f023 0308 	bic.w	r3, r3, #8
34186e2a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
34186e2c:	687b      	ldr	r3, [r7, #4]
34186e2e:	9300      	str	r3, [sp, #0]
34186e30:	2303      	movs	r3, #3
34186e32:	2200      	movs	r2, #0
34186e34:	2100      	movs	r1, #0
34186e36:	68f8      	ldr	r0, [r7, #12]
34186e38:	f000 f818 	bl	34186e6c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
34186e3c:	68fb      	ldr	r3, [r7, #12]
34186e3e:	681b      	ldr	r3, [r3, #0]
34186e40:	461a      	mov	r2, r3
34186e42:	687b      	ldr	r3, [r7, #4]
34186e44:	021b      	lsls	r3, r3, #8
34186e46:	4413      	add	r3, r2
34186e48:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34186e4c:	461a      	mov	r2, r3
34186e4e:	2305      	movs	r3, #5
34186e50:	6093      	str	r3, [r2, #8]

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
34186e52:	68fb      	ldr	r3, [r7, #12]
34186e54:	2201      	movs	r2, #1
34186e56:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
34186e5a:	68fb      	ldr	r3, [r7, #12]
34186e5c:	2200      	movs	r2, #0
34186e5e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
34186e62:	2300      	movs	r3, #0
}
34186e64:	4618      	mov	r0, r3
34186e66:	3710      	adds	r7, #16
34186e68:	46bd      	mov	sp, r7
34186e6a:	bdb0      	pop	{r4, r5, r7, pc}

34186e6c <LTDC_SetConfig>:
  *       This function does not return a value as it is a static function used internally within the
  *        driver.
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, uint32_t Aux0Addr, uint32_t Aux1Addr, uint32_t Mirror,
                           uint32_t LayerIdx)
{
34186e6c:	b4b0      	push	{r4, r5, r7}
34186e6e:	b087      	sub	sp, #28
34186e70:	af00      	add	r7, sp, #0
34186e72:	60f8      	str	r0, [r7, #12]
34186e74:	60b9      	str	r1, [r7, #8]
34186e76:	607a      	str	r2, [r7, #4]
34186e78:	603b      	str	r3, [r7, #0]
  uint32_t stride;
  uint32_t tmp;

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
34186e7a:	68fb      	ldr	r3, [r7, #12]
34186e7c:	681b      	ldr	r3, [r3, #0]
34186e7e:	461a      	mov	r2, r3
34186e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34186e82:	021b      	lsls	r3, r3, #8
34186e84:	4413      	add	r3, r2
34186e86:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34186e8a:	4618      	mov	r0, r3
34186e8c:	68fa      	ldr	r2, [r7, #12]
34186e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34186e90:	2134      	movs	r1, #52	@ 0x34
34186e92:	fb01 f303 	mul.w	r3, r1, r3
34186e96:	4413      	add	r3, r2
34186e98:	3364      	adds	r3, #100	@ 0x64
34186e9a:	681b      	ldr	r3, [r3, #0]
34186e9c:	63c3      	str	r3, [r0, #60]	@ 0x3c

  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34186e9e:	68fa      	ldr	r2, [r7, #12]
34186ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34186ea2:	2134      	movs	r1, #52	@ 0x34
34186ea4:	fb01 f303 	mul.w	r3, r1, r3
34186ea8:	4413      	add	r3, r2
34186eaa:	3348      	adds	r3, #72	@ 0x48
34186eac:	681b      	ldr	r3, [r3, #0]
34186eae:	2b03      	cmp	r3, #3
34186eb0:	d821      	bhi.n	34186ef6 <LTDC_SetConfig+0x8a>
34186eb2:	e025      	b.n	34186f00 <LTDC_SetConfig+0x94>
34186eb4:	3b04      	subs	r3, #4
34186eb6:	2201      	movs	r2, #1
34186eb8:	fa02 f303 	lsl.w	r3, r2, r3
34186ebc:	f240 229b 	movw	r2, #667	@ 0x29b
34186ec0:	401a      	ands	r2, r3
34186ec2:	2a00      	cmp	r2, #0
34186ec4:	bf14      	ite	ne
34186ec6:	2201      	movne	r2, #1
34186ec8:	2200      	moveq	r2, #0
34186eca:	b2d2      	uxtb	r2, r2
34186ecc:	2a00      	cmp	r2, #0
34186ece:	d11d      	bne.n	34186f0c <LTDC_SetConfig+0xa0>
34186ed0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
34186ed4:	2a00      	cmp	r2, #0
34186ed6:	bf14      	ite	ne
34186ed8:	2201      	movne	r2, #1
34186eda:	2200      	moveq	r2, #0
34186edc:	b2d2      	uxtb	r2, r2
34186ede:	2a00      	cmp	r2, #0
34186ee0:	d117      	bne.n	34186f12 <LTDC_SetConfig+0xa6>
34186ee2:	f003 0304 	and.w	r3, r3, #4
34186ee6:	2b00      	cmp	r3, #0
34186ee8:	bf14      	ite	ne
34186eea:	2301      	movne	r3, #1
34186eec:	2300      	moveq	r3, #0
34186eee:	b2db      	uxtb	r3, r3
34186ef0:	2b00      	cmp	r3, #0
34186ef2:	d108      	bne.n	34186f06 <LTDC_SetConfig+0x9a>
34186ef4:	e01b      	b.n	34186f2e <LTDC_SetConfig+0xc2>
34186ef6:	2b0d      	cmp	r3, #13
34186ef8:	d819      	bhi.n	34186f2e <LTDC_SetConfig+0xc2>
34186efa:	2b04      	cmp	r3, #4
34186efc:	d2da      	bcs.n	34186eb4 <LTDC_SetConfig+0x48>
34186efe:	e016      	b.n	34186f2e <LTDC_SetConfig+0xc2>
  {
    case LTDC_PIXEL_FORMAT_ARGB8888:
    case LTDC_PIXEL_FORMAT_BGRA8888:
    case LTDC_PIXEL_FORMAT_ABGR8888:
    case LTDC_PIXEL_FORMAT_RGBA8888:
      stride = 4U;
34186f00:	2304      	movs	r3, #4
34186f02:	617b      	str	r3, [r7, #20]
      break;
34186f04:	e016      	b.n	34186f34 <LTDC_SetConfig+0xc8>
    case LTDC_PIXEL_FORMAT_RGB888:
      stride = 3U;
34186f06:	2303      	movs	r3, #3
34186f08:	617b      	str	r3, [r7, #20]
      break;
34186f0a:	e013      	b.n	34186f34 <LTDC_SetConfig+0xc8>
    case LTDC_PIXEL_FORMAT_BGR565:
    case LTDC_PIXEL_FORMAT_ARGB1555:
    case LTDC_PIXEL_FORMAT_ARGB4444:
    case LTDC_PIXEL_FORMAT_AL88:
    case LTDC_PIXEL_FORMAT_FLEX_YUV_COPLANAR:
      stride = 2U;
34186f0c:	2302      	movs	r3, #2
34186f0e:	617b      	str	r3, [r7, #20]
      break;
34186f10:	e010      	b.n	34186f34 <LTDC_SetConfig+0xc8>
    case LTDC_PIXEL_FORMAT_FLEX_ARGB:
      stride = (((LTDC_LAYER(hltdc, LayerIdx)->FPF1R) & LTDC_LxFPF1R_PSIZE_Msk) >> LTDC_LxFPF1R_PSIZE_Pos);
34186f12:	68fb      	ldr	r3, [r7, #12]
34186f14:	681b      	ldr	r3, [r3, #0]
34186f16:	461a      	mov	r2, r3
34186f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34186f1a:	021b      	lsls	r3, r3, #8
34186f1c:	4413      	add	r3, r2
34186f1e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34186f22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34186f24:	0c9b      	lsrs	r3, r3, #18
34186f26:	f003 0307 	and.w	r3, r3, #7
34186f2a:	617b      	str	r3, [r7, #20]
      break;
34186f2c:	e002      	b.n	34186f34 <LTDC_SetConfig+0xc8>
    case LTDC_PIXEL_FORMAT_L8:
    case LTDC_PIXEL_FORMAT_AL44:
    case LTDC_PIXEL_FORMAT_FLEX_YUV_SEMIPLANAR:
    default:
      stride = 1U;
34186f2e:	2301      	movs	r3, #1
34186f30:	617b      	str	r3, [r7, #20]
      break;
34186f32:	bf00      	nop
  }

  /* Configure the horizontal start and stop position */
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
34186f34:	68fa      	ldr	r2, [r7, #12]
34186f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34186f38:	2134      	movs	r1, #52	@ 0x34
34186f3a:	fb01 f303 	mul.w	r3, r1, r3
34186f3e:	4413      	add	r3, r2
34186f40:	333c      	adds	r3, #60	@ 0x3c
34186f42:	681a      	ldr	r2, [r3, #0]
34186f44:	68fb      	ldr	r3, [r7, #12]
34186f46:	681b      	ldr	r3, [r3, #0]
34186f48:	68db      	ldr	r3, [r3, #12]
34186f4a:	0c1b      	lsrs	r3, r3, #16
34186f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
34186f50:	4413      	add	r3, r2
34186f52:	041b      	lsls	r3, r3, #16
34186f54:	613b      	str	r3, [r7, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
34186f56:	68fa      	ldr	r2, [r7, #12]
34186f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34186f5a:	2134      	movs	r1, #52	@ 0x34
34186f5c:	fb01 f303 	mul.w	r3, r1, r3
34186f60:	4413      	add	r3, r2
34186f62:	3338      	adds	r3, #56	@ 0x38
34186f64:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
34186f66:	68fb      	ldr	r3, [r7, #12]
34186f68:	681b      	ldr	r3, [r3, #0]
34186f6a:	68db      	ldr	r3, [r3, #12]
34186f6c:	0c1b      	lsrs	r3, r3, #16
34186f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
34186f72:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
34186f74:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
34186f76:	68fb      	ldr	r3, [r7, #12]
34186f78:	681b      	ldr	r3, [r3, #0]
34186f7a:	4619      	mov	r1, r3
34186f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34186f7e:	021b      	lsls	r3, r3, #8
34186f80:	440b      	add	r3, r1
34186f82:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34186f86:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
34186f88:	693b      	ldr	r3, [r7, #16]
34186f8a:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
34186f8c:	610b      	str	r3, [r1, #16]

  /* Configure the vertical start and stop position */
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
34186f8e:	68fa      	ldr	r2, [r7, #12]
34186f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34186f92:	2134      	movs	r1, #52	@ 0x34
34186f94:	fb01 f303 	mul.w	r3, r1, r3
34186f98:	4413      	add	r3, r2
34186f9a:	3344      	adds	r3, #68	@ 0x44
34186f9c:	681a      	ldr	r2, [r3, #0]
34186f9e:	68fb      	ldr	r3, [r7, #12]
34186fa0:	681b      	ldr	r3, [r3, #0]
34186fa2:	68db      	ldr	r3, [r3, #12]
34186fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
34186fa8:	4413      	add	r3, r2
34186faa:	041b      	lsls	r3, r3, #16
34186fac:	613b      	str	r3, [r7, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34186fae:	68fa      	ldr	r2, [r7, #12]
34186fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34186fb2:	2134      	movs	r1, #52	@ 0x34
34186fb4:	fb01 f303 	mul.w	r3, r1, r3
34186fb8:	4413      	add	r3, r2
34186fba:	3340      	adds	r3, #64	@ 0x40
34186fbc:	681a      	ldr	r2, [r3, #0]
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
34186fbe:	68fb      	ldr	r3, [r7, #12]
34186fc0:	681b      	ldr	r3, [r3, #0]
34186fc2:	68db      	ldr	r3, [r3, #12]
34186fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34186fc8:	4413      	add	r3, r2
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
34186fca:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34186fcc:	68fb      	ldr	r3, [r7, #12]
34186fce:	681b      	ldr	r3, [r3, #0]
34186fd0:	4619      	mov	r1, r3
34186fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34186fd4:	021b      	lsls	r3, r3, #8
34186fd6:	440b      	add	r3, r1
34186fd8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34186fdc:	4619      	mov	r1, r3
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
34186fde:	693b      	ldr	r3, [r7, #16]
34186fe0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34186fe2:	614b      	str	r3, [r1, #20]

  if (Mirror == LTDC_MIRROR_NONE)
34186fe4:	683b      	ldr	r3, [r7, #0]
34186fe6:	2b03      	cmp	r3, #3
34186fe8:	f040 80fb 	bne.w	341871e2 <LTDC_SetConfig+0x376>
  {
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
34186fec:	68fb      	ldr	r3, [r7, #12]
34186fee:	681b      	ldr	r3, [r3, #0]
34186ff0:	461a      	mov	r2, r3
34186ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34186ff4:	021b      	lsls	r3, r3, #8
34186ff6:	4413      	add	r3, r2
34186ff8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34186ffc:	4618      	mov	r0, r3
34186ffe:	68fa      	ldr	r2, [r7, #12]
34187000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187002:	2134      	movs	r1, #52	@ 0x34
34187004:	fb01 f303 	mul.w	r3, r1, r3
34187008:	4413      	add	r3, r2
3418700a:	335c      	adds	r3, #92	@ 0x5c
3418700c:	681b      	ldr	r3, [r3, #0]
3418700e:	6343      	str	r3, [r0, #52]	@ 0x34

    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34187010:	68fa      	ldr	r2, [r7, #12]
34187012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187014:	2134      	movs	r1, #52	@ 0x34
34187016:	fb01 f303 	mul.w	r3, r1, r3
3418701a:	4413      	add	r3, r2
3418701c:	3348      	adds	r3, #72	@ 0x48
3418701e:	681b      	ldr	r3, [r3, #0]
34187020:	f240 120d 	movw	r2, #269	@ 0x10d
34187024:	4293      	cmp	r3, r2
34187026:	d004      	beq.n	34187032 <LTDC_SetConfig+0x1c6>
34187028:	f240 220d 	movw	r2, #525	@ 0x20d
3418702c:	4293      	cmp	r3, r2
3418702e:	d043      	beq.n	341870b8 <LTDC_SetConfig+0x24c>
        /* Configure the frame buffer line number */
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = (hltdc->LayerCfg[LayerIdx].ImageHeight) >> 1U;
        break;
      default:
        /* Nothing to do */
        break;
34187030:	e092      	b.n	34187158 <LTDC_SetConfig+0x2ec>
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr;
34187032:	68fb      	ldr	r3, [r7, #12]
34187034:	681b      	ldr	r3, [r3, #0]
34187036:	461a      	mov	r2, r3
34187038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418703a:	021b      	lsls	r3, r3, #8
3418703c:	4413      	add	r3, r2
3418703e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187042:	461a      	mov	r2, r3
34187044:	68bb      	ldr	r3, [r7, #8]
34187046:	6413      	str	r3, [r2, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
34187048:	68fa      	ldr	r2, [r7, #12]
3418704a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418704c:	2134      	movs	r1, #52	@ 0x34
3418704e:	fb01 f303 	mul.w	r3, r1, r3
34187052:	4413      	add	r3, r2
34187054:	3360      	adds	r3, #96	@ 0x60
34187056:	681b      	ldr	r3, [r3, #0]
34187058:	041a      	lsls	r2, r3, #16
                                             (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418705a:	68f9      	ldr	r1, [r7, #12]
3418705c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418705e:	2034      	movs	r0, #52	@ 0x34
34187060:	fb00 f303 	mul.w	r3, r0, r3
34187064:	440b      	add	r3, r1
34187066:	333c      	adds	r3, #60	@ 0x3c
34187068:	6819      	ldr	r1, [r3, #0]
                                              hltdc->LayerCfg[LayerIdx].WindowX0 + 7U);
3418706a:	68f8      	ldr	r0, [r7, #12]
3418706c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418706e:	2434      	movs	r4, #52	@ 0x34
34187070:	fb04 f303 	mul.w	r3, r4, r3
34187074:	4403      	add	r3, r0
34187076:	3338      	adds	r3, #56	@ 0x38
34187078:	681b      	ldr	r3, [r3, #0]
                                             (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418707a:	1acb      	subs	r3, r1, r3
                                              hltdc->LayerCfg[LayerIdx].WindowX0 + 7U);
3418707c:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
3418707e:	68f9      	ldr	r1, [r7, #12]
34187080:	6809      	ldr	r1, [r1, #0]
34187082:	4608      	mov	r0, r1
34187084:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34187086:	0209      	lsls	r1, r1, #8
34187088:	4401      	add	r1, r0
3418708a:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418708e:	4313      	orrs	r3, r2
34187090:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = (hltdc->LayerCfg[LayerIdx].ImageHeight) >> 1U;
34187092:	68fa      	ldr	r2, [r7, #12]
34187094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187096:	2134      	movs	r1, #52	@ 0x34
34187098:	fb01 f303 	mul.w	r3, r1, r3
3418709c:	4413      	add	r3, r2
3418709e:	3364      	adds	r3, #100	@ 0x64
341870a0:	681b      	ldr	r3, [r3, #0]
341870a2:	68fa      	ldr	r2, [r7, #12]
341870a4:	6812      	ldr	r2, [r2, #0]
341870a6:	4611      	mov	r1, r2
341870a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341870aa:	0212      	lsls	r2, r2, #8
341870ac:	440a      	add	r2, r1
341870ae:	f502 7280 	add.w	r2, r2, #256	@ 0x100
341870b2:	085b      	lsrs	r3, r3, #1
341870b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
341870b6:	e04f      	b.n	34187158 <LTDC_SetConfig+0x2ec>
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr;
341870b8:	68fb      	ldr	r3, [r7, #12]
341870ba:	681b      	ldr	r3, [r3, #0]
341870bc:	461a      	mov	r2, r3
341870be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341870c0:	021b      	lsls	r3, r3, #8
341870c2:	4413      	add	r3, r2
341870c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
341870c8:	461a      	mov	r2, r3
341870ca:	68bb      	ldr	r3, [r7, #8]
341870cc:	6413      	str	r3, [r2, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr;
341870ce:	68fb      	ldr	r3, [r7, #12]
341870d0:	681b      	ldr	r3, [r3, #0]
341870d2:	461a      	mov	r2, r3
341870d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341870d6:	021b      	lsls	r3, r3, #8
341870d8:	4413      	add	r3, r2
341870da:	f503 7380 	add.w	r3, r3, #256	@ 0x100
341870de:	461a      	mov	r2, r3
341870e0:	687b      	ldr	r3, [r7, #4]
341870e2:	6453      	str	r3, [r2, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
341870e4:	68fa      	ldr	r2, [r7, #12]
341870e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341870e8:	2134      	movs	r1, #52	@ 0x34
341870ea:	fb01 f303 	mul.w	r3, r1, r3
341870ee:	4413      	add	r3, r2
341870f0:	3360      	adds	r3, #96	@ 0x60
341870f2:	681b      	ldr	r3, [r3, #0]
341870f4:	085b      	lsrs	r3, r3, #1
341870f6:	041a      	lsls	r2, r3, #16
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
341870f8:	68f9      	ldr	r1, [r7, #12]
341870fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341870fc:	2034      	movs	r0, #52	@ 0x34
341870fe:	fb00 f303 	mul.w	r3, r0, r3
34187102:	440b      	add	r3, r1
34187104:	333c      	adds	r3, #60	@ 0x3c
34187106:	6819      	ldr	r1, [r3, #0]
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
34187108:	68f8      	ldr	r0, [r7, #12]
3418710a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418710c:	2434      	movs	r4, #52	@ 0x34
3418710e:	fb04 f303 	mul.w	r3, r4, r3
34187112:	4403      	add	r3, r0
34187114:	3338      	adds	r3, #56	@ 0x38
34187116:	681b      	ldr	r3, [r3, #0]
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187118:	1acb      	subs	r3, r1, r3
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
3418711a:	085b      	lsrs	r3, r3, #1
3418711c:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
3418711e:	68f9      	ldr	r1, [r7, #12]
34187120:	6809      	ldr	r1, [r1, #0]
34187122:	4608      	mov	r0, r1
34187124:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34187126:	0209      	lsls	r1, r1, #8
34187128:	4401      	add	r1, r0
3418712a:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418712e:	4313      	orrs	r3, r2
34187130:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = (hltdc->LayerCfg[LayerIdx].ImageHeight) >> 1U;
34187132:	68fa      	ldr	r2, [r7, #12]
34187134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187136:	2134      	movs	r1, #52	@ 0x34
34187138:	fb01 f303 	mul.w	r3, r1, r3
3418713c:	4413      	add	r3, r2
3418713e:	3364      	adds	r3, #100	@ 0x64
34187140:	681b      	ldr	r3, [r3, #0]
34187142:	68fa      	ldr	r2, [r7, #12]
34187144:	6812      	ldr	r2, [r2, #0]
34187146:	4611      	mov	r1, r2
34187148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418714a:	0212      	lsls	r2, r2, #8
3418714c:	440a      	add	r2, r1
3418714e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34187152:	085b      	lsrs	r3, r3, #1
34187154:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
34187156:	bf00      	nop
    }

    /* Configure the color frame buffer pitch in byte */
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34187158:	68fa      	ldr	r2, [r7, #12]
3418715a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418715c:	2134      	movs	r1, #52	@ 0x34
3418715e:	fb01 f303 	mul.w	r3, r1, r3
34187162:	4413      	add	r3, r2
34187164:	3360      	adds	r3, #96	@ 0x60
34187166:	681b      	ldr	r3, [r3, #0]
34187168:	697a      	ldr	r2, [r7, #20]
3418716a:	fb02 f303 	mul.w	r3, r2, r3
3418716e:	041a      	lsls	r2, r3, #16
                                          (((hltdc->LayerCfg[LayerIdx].WindowX1 - hltdc->LayerCfg[LayerIdx].WindowX0) *
34187170:	68f9      	ldr	r1, [r7, #12]
34187172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187174:	2034      	movs	r0, #52	@ 0x34
34187176:	fb00 f303 	mul.w	r3, r0, r3
3418717a:	440b      	add	r3, r1
3418717c:	333c      	adds	r3, #60	@ 0x3c
3418717e:	6819      	ldr	r1, [r3, #0]
34187180:	68f8      	ldr	r0, [r7, #12]
34187182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187184:	2434      	movs	r4, #52	@ 0x34
34187186:	fb04 f303 	mul.w	r3, r4, r3
3418718a:	4403      	add	r3, r0
3418718c:	3338      	adds	r3, #56	@ 0x38
3418718e:	681b      	ldr	r3, [r3, #0]
34187190:	1acb      	subs	r3, r1, r3
34187192:	6979      	ldr	r1, [r7, #20]
34187194:	fb01 f303 	mul.w	r3, r1, r3
                                            stride)  + 7U));
34187198:	3307      	adds	r3, #7
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
3418719a:	68f9      	ldr	r1, [r7, #12]
3418719c:	6809      	ldr	r1, [r1, #0]
3418719e:	4608      	mov	r0, r1
341871a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341871a2:	0209      	lsls	r1, r1, #8
341871a4:	4401      	add	r1, r0
341871a6:	f501 7180 	add.w	r1, r1, #256	@ 0x100
341871aa:	4313      	orrs	r3, r2
341871ac:	638b      	str	r3, [r1, #56]	@ 0x38

    /* Enable LTDC_Layer by setting LEN bit */
    MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->CR,LTDC_LxCR_HMEN, LTDC_LxCR_LEN);
341871ae:	68fb      	ldr	r3, [r7, #12]
341871b0:	681b      	ldr	r3, [r3, #0]
341871b2:	461a      	mov	r2, r3
341871b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341871b6:	021b      	lsls	r3, r3, #8
341871b8:	4413      	add	r3, r2
341871ba:	f503 7380 	add.w	r3, r3, #256	@ 0x100
341871be:	68db      	ldr	r3, [r3, #12]
341871c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
341871c4:	f023 0301 	bic.w	r3, r3, #1
341871c8:	68fa      	ldr	r2, [r7, #12]
341871ca:	6812      	ldr	r2, [r2, #0]
341871cc:	4611      	mov	r1, r2
341871ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341871d0:	0212      	lsls	r2, r2, #8
341871d2:	440a      	add	r2, r1
341871d4:	f502 7280 	add.w	r2, r2, #256	@ 0x100
341871d8:	f043 0301 	orr.w	r3, r3, #1
341871dc:	60d3      	str	r3, [r2, #12]
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));

    /* Enable horizontal mirroring bit & LTDC_Layer by setting LEN bit */
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
  }
}
341871de:	f000 bccc 	b.w	34187b7a <LTDC_SetConfig+0xd0e>
  else if (Mirror == LTDC_MIRROR_HORIZONTAL)
341871e2:	683b      	ldr	r3, [r7, #0]
341871e4:	2b00      	cmp	r3, #0
341871e6:	f040 814e 	bne.w	34187486 <LTDC_SetConfig+0x61a>
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
341871ea:	68fa      	ldr	r2, [r7, #12]
341871ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341871ee:	2134      	movs	r1, #52	@ 0x34
341871f0:	fb01 f303 	mul.w	r3, r1, r3
341871f4:	4413      	add	r3, r2
341871f6:	335c      	adds	r3, #92	@ 0x5c
341871f8:	681a      	ldr	r2, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
341871fa:	68f9      	ldr	r1, [r7, #12]
341871fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341871fe:	2034      	movs	r0, #52	@ 0x34
34187200:	fb00 f303 	mul.w	r3, r0, r3
34187204:	440b      	add	r3, r1
34187206:	333c      	adds	r3, #60	@ 0x3c
34187208:	6819      	ldr	r1, [r3, #0]
                                                    hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
3418720a:	68f8      	ldr	r0, [r7, #12]
3418720c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418720e:	2434      	movs	r4, #52	@ 0x34
34187210:	fb04 f303 	mul.w	r3, r4, r3
34187214:	4403      	add	r3, r0
34187216:	3338      	adds	r3, #56	@ 0x38
34187218:	681b      	ldr	r3, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418721a:	1acb      	subs	r3, r1, r3
3418721c:	6979      	ldr	r1, [r7, #20]
3418721e:	fb01 f303 	mul.w	r3, r1, r3
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34187222:	4413      	add	r3, r2
34187224:	68fa      	ldr	r2, [r7, #12]
34187226:	6812      	ldr	r2, [r2, #0]
34187228:	4611      	mov	r1, r2
3418722a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418722c:	0212      	lsls	r2, r2, #8
3418722e:	440a      	add	r2, r1
34187230:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                    hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
34187234:	3b01      	subs	r3, #1
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34187236:	6353      	str	r3, [r2, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34187238:	68fa      	ldr	r2, [r7, #12]
3418723a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418723c:	2134      	movs	r1, #52	@ 0x34
3418723e:	fb01 f303 	mul.w	r3, r1, r3
34187242:	4413      	add	r3, r2
34187244:	3348      	adds	r3, #72	@ 0x48
34187246:	681b      	ldr	r3, [r3, #0]
34187248:	f240 120d 	movw	r2, #269	@ 0x10d
3418724c:	4293      	cmp	r3, r2
3418724e:	d004      	beq.n	3418725a <LTDC_SetConfig+0x3ee>
34187250:	f240 220d 	movw	r2, #525	@ 0x20d
34187254:	4293      	cmp	r3, r2
34187256:	d058      	beq.n	3418730a <LTDC_SetConfig+0x49e>
        break;
34187258:	e0d3      	b.n	34187402 <LTDC_SetConfig+0x596>
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418725a:	68fa      	ldr	r2, [r7, #12]
3418725c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418725e:	2134      	movs	r1, #52	@ 0x34
34187260:	fb01 f303 	mul.w	r3, r1, r3
34187264:	4413      	add	r3, r2
34187266:	333c      	adds	r3, #60	@ 0x3c
34187268:	681a      	ldr	r2, [r3, #0]
                                                         hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
3418726a:	68f9      	ldr	r1, [r7, #12]
3418726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418726e:	2034      	movs	r0, #52	@ 0x34
34187270:	fb00 f303 	mul.w	r3, r0, r3
34187274:	440b      	add	r3, r1
34187276:	3338      	adds	r3, #56	@ 0x38
34187278:	681b      	ldr	r3, [r3, #0]
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418727a:	1ad3      	subs	r3, r2, r3
3418727c:	697a      	ldr	r2, [r7, #20]
3418727e:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34187282:	68bb      	ldr	r3, [r7, #8]
34187284:	4413      	add	r3, r2
34187286:	68fa      	ldr	r2, [r7, #12]
34187288:	6812      	ldr	r2, [r2, #0]
3418728a:	4611      	mov	r1, r2
3418728c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418728e:	0212      	lsls	r2, r2, #8
34187290:	440a      	add	r2, r1
34187292:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                         hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
34187296:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34187298:	6413      	str	r3, [r2, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
3418729a:	68fa      	ldr	r2, [r7, #12]
3418729c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418729e:	2134      	movs	r1, #52	@ 0x34
341872a0:	fb01 f303 	mul.w	r3, r1, r3
341872a4:	4413      	add	r3, r2
341872a6:	3360      	adds	r3, #96	@ 0x60
341872a8:	681b      	ldr	r3, [r3, #0]
341872aa:	041a      	lsls	r2, r3, #16
                                             (hltdc->LayerCfg[LayerIdx].WindowX1 - hltdc->LayerCfg[LayerIdx].WindowX0 +
341872ac:	68f9      	ldr	r1, [r7, #12]
341872ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341872b0:	2034      	movs	r0, #52	@ 0x34
341872b2:	fb00 f303 	mul.w	r3, r0, r3
341872b6:	440b      	add	r3, r1
341872b8:	333c      	adds	r3, #60	@ 0x3c
341872ba:	6819      	ldr	r1, [r3, #0]
341872bc:	68f8      	ldr	r0, [r7, #12]
341872be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341872c0:	2434      	movs	r4, #52	@ 0x34
341872c2:	fb04 f303 	mul.w	r3, r4, r3
341872c6:	4403      	add	r3, r0
341872c8:	3338      	adds	r3, #56	@ 0x38
341872ca:	681b      	ldr	r3, [r3, #0]
341872cc:	1acb      	subs	r3, r1, r3
341872ce:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
341872d0:	68f9      	ldr	r1, [r7, #12]
341872d2:	6809      	ldr	r1, [r1, #0]
341872d4:	4608      	mov	r0, r1
341872d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341872d8:	0209      	lsls	r1, r1, #8
341872da:	4401      	add	r1, r0
341872dc:	f501 7180 	add.w	r1, r1, #256	@ 0x100
341872e0:	4313      	orrs	r3, r2
341872e2:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U ;
341872e4:	68fa      	ldr	r2, [r7, #12]
341872e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341872e8:	2134      	movs	r1, #52	@ 0x34
341872ea:	fb01 f303 	mul.w	r3, r1, r3
341872ee:	4413      	add	r3, r2
341872f0:	3364      	adds	r3, #100	@ 0x64
341872f2:	681b      	ldr	r3, [r3, #0]
341872f4:	68fa      	ldr	r2, [r7, #12]
341872f6:	6812      	ldr	r2, [r2, #0]
341872f8:	4611      	mov	r1, r2
341872fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341872fc:	0212      	lsls	r2, r2, #8
341872fe:	440a      	add	r2, r1
34187300:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34187304:	085b      	lsrs	r3, r3, #1
34187306:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
34187308:	e07b      	b.n	34187402 <LTDC_SetConfig+0x596>
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418730a:	68fa      	ldr	r2, [r7, #12]
3418730c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418730e:	2134      	movs	r1, #52	@ 0x34
34187310:	fb01 f303 	mul.w	r3, r1, r3
34187314:	4413      	add	r3, r2
34187316:	333c      	adds	r3, #60	@ 0x3c
34187318:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3418731a:	68f9      	ldr	r1, [r7, #12]
3418731c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418731e:	2034      	movs	r0, #52	@ 0x34
34187320:	fb00 f303 	mul.w	r3, r0, r3
34187324:	440b      	add	r3, r1
34187326:	3338      	adds	r3, #56	@ 0x38
34187328:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418732a:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3418732c:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418732e:	697a      	ldr	r2, [r7, #20]
34187330:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34187334:	68bb      	ldr	r3, [r7, #8]
34187336:	4413      	add	r3, r2
34187338:	68fa      	ldr	r2, [r7, #12]
3418733a:	6812      	ldr	r2, [r2, #0]
3418733c:	4611      	mov	r1, r2
3418733e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187340:	0212      	lsls	r2, r2, #8
34187342:	440a      	add	r2, r1
34187344:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34187348:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418734a:	6413      	str	r3, [r2, #64]	@ 0x40
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418734c:	68fa      	ldr	r2, [r7, #12]
3418734e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187350:	2134      	movs	r1, #52	@ 0x34
34187352:	fb01 f303 	mul.w	r3, r1, r3
34187356:	4413      	add	r3, r2
34187358:	333c      	adds	r3, #60	@ 0x3c
3418735a:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3418735c:	68f9      	ldr	r1, [r7, #12]
3418735e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187360:	2034      	movs	r0, #52	@ 0x34
34187362:	fb00 f303 	mul.w	r3, r0, r3
34187366:	440b      	add	r3, r1
34187368:	3338      	adds	r3, #56	@ 0x38
3418736a:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418736c:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3418736e:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187370:	697a      	ldr	r2, [r7, #20]
34187372:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34187376:	687b      	ldr	r3, [r7, #4]
34187378:	4413      	add	r3, r2
3418737a:	68fa      	ldr	r2, [r7, #12]
3418737c:	6812      	ldr	r2, [r2, #0]
3418737e:	4611      	mov	r1, r2
34187380:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187382:	0212      	lsls	r2, r2, #8
34187384:	440a      	add	r2, r1
34187386:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3418738a:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
3418738c:	6453      	str	r3, [r2, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
3418738e:	68fa      	ldr	r2, [r7, #12]
34187390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187392:	2134      	movs	r1, #52	@ 0x34
34187394:	fb01 f303 	mul.w	r3, r1, r3
34187398:	4413      	add	r3, r2
3418739a:	3360      	adds	r3, #96	@ 0x60
3418739c:	681b      	ldr	r3, [r3, #0]
3418739e:	085b      	lsrs	r3, r3, #1
341873a0:	041a      	lsls	r2, r3, #16
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
341873a2:	68f9      	ldr	r1, [r7, #12]
341873a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341873a6:	2034      	movs	r0, #52	@ 0x34
341873a8:	fb00 f303 	mul.w	r3, r0, r3
341873ac:	440b      	add	r3, r1
341873ae:	333c      	adds	r3, #60	@ 0x3c
341873b0:	6819      	ldr	r1, [r3, #0]
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
341873b2:	68f8      	ldr	r0, [r7, #12]
341873b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341873b6:	2434      	movs	r4, #52	@ 0x34
341873b8:	fb04 f303 	mul.w	r3, r4, r3
341873bc:	4403      	add	r3, r0
341873be:	3338      	adds	r3, #56	@ 0x38
341873c0:	681b      	ldr	r3, [r3, #0]
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
341873c2:	1acb      	subs	r3, r1, r3
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
341873c4:	085b      	lsrs	r3, r3, #1
341873c6:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
341873c8:	68f9      	ldr	r1, [r7, #12]
341873ca:	6809      	ldr	r1, [r1, #0]
341873cc:	4608      	mov	r0, r1
341873ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341873d0:	0209      	lsls	r1, r1, #8
341873d2:	4401      	add	r1, r0
341873d4:	f501 7180 	add.w	r1, r1, #256	@ 0x100
341873d8:	4313      	orrs	r3, r2
341873da:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
341873dc:	68fa      	ldr	r2, [r7, #12]
341873de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341873e0:	2134      	movs	r1, #52	@ 0x34
341873e2:	fb01 f303 	mul.w	r3, r1, r3
341873e6:	4413      	add	r3, r2
341873e8:	3364      	adds	r3, #100	@ 0x64
341873ea:	681b      	ldr	r3, [r3, #0]
341873ec:	68fa      	ldr	r2, [r7, #12]
341873ee:	6812      	ldr	r2, [r2, #0]
341873f0:	4611      	mov	r1, r2
341873f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341873f4:	0212      	lsls	r2, r2, #8
341873f6:	440a      	add	r2, r1
341873f8:	f502 7280 	add.w	r2, r2, #256	@ 0x100
341873fc:	085b      	lsrs	r3, r3, #1
341873fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
34187400:	bf00      	nop
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34187402:	68fa      	ldr	r2, [r7, #12]
34187404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187406:	2134      	movs	r1, #52	@ 0x34
34187408:	fb01 f303 	mul.w	r3, r1, r3
3418740c:	4413      	add	r3, r2
3418740e:	3360      	adds	r3, #96	@ 0x60
34187410:	681b      	ldr	r3, [r3, #0]
34187412:	697a      	ldr	r2, [r7, #20]
34187414:	fb02 f303 	mul.w	r3, r2, r3
34187418:	041a      	lsls	r2, r3, #16
                                          (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418741a:	68f9      	ldr	r1, [r7, #12]
3418741c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418741e:	2034      	movs	r0, #52	@ 0x34
34187420:	fb00 f303 	mul.w	r3, r0, r3
34187424:	440b      	add	r3, r1
34187426:	333c      	adds	r3, #60	@ 0x3c
34187428:	6819      	ldr	r1, [r3, #0]
                                             hltdc->LayerCfg[LayerIdx].WindowX0) * stride)  + 7U));
3418742a:	68f8      	ldr	r0, [r7, #12]
3418742c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418742e:	2434      	movs	r4, #52	@ 0x34
34187430:	fb04 f303 	mul.w	r3, r4, r3
34187434:	4403      	add	r3, r0
34187436:	3338      	adds	r3, #56	@ 0x38
34187438:	681b      	ldr	r3, [r3, #0]
                                          (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418743a:	1acb      	subs	r3, r1, r3
                                             hltdc->LayerCfg[LayerIdx].WindowX0) * stride)  + 7U));
3418743c:	6979      	ldr	r1, [r7, #20]
3418743e:	fb01 f303 	mul.w	r3, r1, r3
34187442:	3307      	adds	r3, #7
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34187444:	68f9      	ldr	r1, [r7, #12]
34187446:	6809      	ldr	r1, [r1, #0]
34187448:	4608      	mov	r0, r1
3418744a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418744c:	0209      	lsls	r1, r1, #8
3418744e:	4401      	add	r1, r0
34187450:	f501 7180 	add.w	r1, r1, #256	@ 0x100
34187454:	4313      	orrs	r3, r2
34187456:	638b      	str	r3, [r1, #56]	@ 0x38
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
34187458:	68fb      	ldr	r3, [r7, #12]
3418745a:	681b      	ldr	r3, [r3, #0]
3418745c:	461a      	mov	r2, r3
3418745e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187460:	021b      	lsls	r3, r3, #8
34187462:	4413      	add	r3, r2
34187464:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187468:	68db      	ldr	r3, [r3, #12]
3418746a:	68fa      	ldr	r2, [r7, #12]
3418746c:	6812      	ldr	r2, [r2, #0]
3418746e:	4611      	mov	r1, r2
34187470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187472:	0212      	lsls	r2, r2, #8
34187474:	440a      	add	r2, r1
34187476:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418747a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3418747e:	f043 0301 	orr.w	r3, r3, #1
34187482:	60d3      	str	r3, [r2, #12]
}
34187484:	e379      	b.n	34187b7a <LTDC_SetConfig+0xd0e>
  else if (Mirror == LTDC_MIRROR_VERTICAL)
34187486:	683b      	ldr	r3, [r7, #0]
34187488:	2b01      	cmp	r3, #1
3418748a:	f040 81b4 	bne.w	341877f6 <LTDC_SetConfig+0x98a>
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
3418748e:	68fa      	ldr	r2, [r7, #12]
34187490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187492:	2134      	movs	r1, #52	@ 0x34
34187494:	fb01 f303 	mul.w	r3, r1, r3
34187498:	4413      	add	r3, r2
3418749a:	335c      	adds	r3, #92	@ 0x5c
3418749c:	681a      	ldr	r2, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418749e:	68f9      	ldr	r1, [r7, #12]
341874a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341874a2:	2034      	movs	r0, #52	@ 0x34
341874a4:	fb00 f303 	mul.w	r3, r0, r3
341874a8:	440b      	add	r3, r1
341874aa:	333c      	adds	r3, #60	@ 0x3c
341874ac:	6819      	ldr	r1, [r3, #0]
                                                    hltdc->LayerCfg[LayerIdx].WindowX0) *
341874ae:	68f8      	ldr	r0, [r7, #12]
341874b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341874b2:	2434      	movs	r4, #52	@ 0x34
341874b4:	fb04 f303 	mul.w	r3, r4, r3
341874b8:	4403      	add	r3, r0
341874ba:	3338      	adds	r3, #56	@ 0x38
341874bc:	681b      	ldr	r3, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
341874be:	1acb      	subs	r3, r1, r3
341874c0:	6979      	ldr	r1, [r7, #20]
341874c2:	fb01 f303 	mul.w	r3, r1, r3
                                          ((hltdc->LayerCfg[LayerIdx].WindowY1 -
341874c6:	68f8      	ldr	r0, [r7, #12]
341874c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341874ca:	2434      	movs	r4, #52	@ 0x34
341874cc:	fb04 f101 	mul.w	r1, r4, r1
341874d0:	4401      	add	r1, r0
341874d2:	3144      	adds	r1, #68	@ 0x44
341874d4:	6808      	ldr	r0, [r1, #0]
                                            hltdc->LayerCfg[LayerIdx].WindowY0) - 1U));
341874d6:	68fc      	ldr	r4, [r7, #12]
341874d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341874da:	2534      	movs	r5, #52	@ 0x34
341874dc:	fb05 f101 	mul.w	r1, r5, r1
341874e0:	4421      	add	r1, r4
341874e2:	3140      	adds	r1, #64	@ 0x40
341874e4:	6809      	ldr	r1, [r1, #0]
                                          ((hltdc->LayerCfg[LayerIdx].WindowY1 -
341874e6:	1a41      	subs	r1, r0, r1
                                            hltdc->LayerCfg[LayerIdx].WindowY0) - 1U));
341874e8:	3901      	subs	r1, #1
                                                    hltdc->LayerCfg[LayerIdx].WindowX0) *
341874ea:	fb01 f303 	mul.w	r3, r1, r3
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
341874ee:	68f9      	ldr	r1, [r7, #12]
341874f0:	6809      	ldr	r1, [r1, #0]
341874f2:	4608      	mov	r0, r1
341874f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341874f6:	0209      	lsls	r1, r1, #8
341874f8:	4401      	add	r1, r0
341874fa:	f501 7180 	add.w	r1, r1, #256	@ 0x100
341874fe:	4413      	add	r3, r2
34187500:	634b      	str	r3, [r1, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34187502:	68fa      	ldr	r2, [r7, #12]
34187504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187506:	2134      	movs	r1, #52	@ 0x34
34187508:	fb01 f303 	mul.w	r3, r1, r3
3418750c:	4413      	add	r3, r2
3418750e:	3348      	adds	r3, #72	@ 0x48
34187510:	681b      	ldr	r3, [r3, #0]
34187512:	f240 120d 	movw	r2, #269	@ 0x10d
34187516:	4293      	cmp	r3, r2
34187518:	d004      	beq.n	34187524 <LTDC_SetConfig+0x6b8>
3418751a:	f240 220d 	movw	r2, #525	@ 0x20d
3418751e:	4293      	cmp	r3, r2
34187520:	d075      	beq.n	3418760e <LTDC_SetConfig+0x7a2>
        break;
34187522:	e122      	b.n	3418776a <LTDC_SetConfig+0x8fe>
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
34187524:	68fa      	ldr	r2, [r7, #12]
34187526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187528:	2134      	movs	r1, #52	@ 0x34
3418752a:	fb01 f303 	mul.w	r3, r1, r3
3418752e:	4413      	add	r3, r2
34187530:	333c      	adds	r3, #60	@ 0x3c
34187532:	681a      	ldr	r2, [r3, #0]
                                                         hltdc->LayerCfg[LayerIdx].WindowX0) *
34187534:	68f9      	ldr	r1, [r7, #12]
34187536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187538:	2034      	movs	r0, #52	@ 0x34
3418753a:	fb00 f303 	mul.w	r3, r0, r3
3418753e:	440b      	add	r3, r1
34187540:	3338      	adds	r3, #56	@ 0x38
34187542:	681b      	ldr	r3, [r3, #0]
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
34187544:	1ad3      	subs	r3, r2, r3
34187546:	697a      	ldr	r2, [r7, #20]
34187548:	fb02 f303 	mul.w	r3, r2, r3
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418754c:	68f9      	ldr	r1, [r7, #12]
3418754e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187550:	2034      	movs	r0, #52	@ 0x34
34187552:	fb00 f202 	mul.w	r2, r0, r2
34187556:	440a      	add	r2, r1
34187558:	3244      	adds	r2, #68	@ 0x44
3418755a:	6811      	ldr	r1, [r2, #0]
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
3418755c:	68f8      	ldr	r0, [r7, #12]
3418755e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187560:	2434      	movs	r4, #52	@ 0x34
34187562:	fb04 f202 	mul.w	r2, r4, r2
34187566:	4402      	add	r2, r0
34187568:	3240      	adds	r2, #64	@ 0x40
3418756a:	6812      	ldr	r2, [r2, #0]
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418756c:	1a8a      	subs	r2, r1, r2
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
3418756e:	0852      	lsrs	r2, r2, #1
34187570:	3a01      	subs	r2, #1
                                                         hltdc->LayerCfg[LayerIdx].WindowX0) *
34187572:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34187576:	68fb      	ldr	r3, [r7, #12]
34187578:	681b      	ldr	r3, [r3, #0]
3418757a:	4619      	mov	r1, r3
3418757c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418757e:	021b      	lsls	r3, r3, #8
34187580:	440b      	add	r3, r1
34187582:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187586:	4619      	mov	r1, r3
34187588:	68bb      	ldr	r3, [r7, #8]
3418758a:	4413      	add	r3, r2
3418758c:	640b      	str	r3, [r1, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
3418758e:	68fa      	ldr	r2, [r7, #12]
34187590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187592:	2134      	movs	r1, #52	@ 0x34
34187594:	fb01 f303 	mul.w	r3, r1, r3
34187598:	4413      	add	r3, r2
3418759a:	3360      	adds	r3, #96	@ 0x60
3418759c:	681b      	ldr	r3, [r3, #0]
3418759e:	697a      	ldr	r2, [r7, #20]
341875a0:	fb02 f303 	mul.w	r3, r2, r3
341875a4:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
341875a8:	041a      	lsls	r2, r3, #16
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
341875aa:	68f9      	ldr	r1, [r7, #12]
341875ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341875ae:	2034      	movs	r0, #52	@ 0x34
341875b0:	fb00 f303 	mul.w	r3, r0, r3
341875b4:	440b      	add	r3, r1
341875b6:	333c      	adds	r3, #60	@ 0x3c
341875b8:	6819      	ldr	r1, [r3, #0]
                                                hltdc->LayerCfg[LayerIdx].WindowX0) * stride)  + 7U);
341875ba:	68f8      	ldr	r0, [r7, #12]
341875bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341875be:	2434      	movs	r4, #52	@ 0x34
341875c0:	fb04 f303 	mul.w	r3, r4, r3
341875c4:	4403      	add	r3, r0
341875c6:	3338      	adds	r3, #56	@ 0x38
341875c8:	681b      	ldr	r3, [r3, #0]
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
341875ca:	1acb      	subs	r3, r1, r3
                                                hltdc->LayerCfg[LayerIdx].WindowX0) * stride)  + 7U);
341875cc:	6979      	ldr	r1, [r7, #20]
341875ce:	fb01 f303 	mul.w	r3, r1, r3
341875d2:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
341875d4:	68f9      	ldr	r1, [r7, #12]
341875d6:	6809      	ldr	r1, [r1, #0]
341875d8:	4608      	mov	r0, r1
341875da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341875dc:	0209      	lsls	r1, r1, #8
341875de:	4401      	add	r1, r0
341875e0:	f501 7180 	add.w	r1, r1, #256	@ 0x100
341875e4:	4313      	orrs	r3, r2
341875e6:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
341875e8:	68fa      	ldr	r2, [r7, #12]
341875ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341875ec:	2134      	movs	r1, #52	@ 0x34
341875ee:	fb01 f303 	mul.w	r3, r1, r3
341875f2:	4413      	add	r3, r2
341875f4:	3364      	adds	r3, #100	@ 0x64
341875f6:	681b      	ldr	r3, [r3, #0]
341875f8:	68fa      	ldr	r2, [r7, #12]
341875fa:	6812      	ldr	r2, [r2, #0]
341875fc:	4611      	mov	r1, r2
341875fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187600:	0212      	lsls	r2, r2, #8
34187602:	440a      	add	r2, r1
34187604:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34187608:	085b      	lsrs	r3, r3, #1
3418760a:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
3418760c:	e0ad      	b.n	3418776a <LTDC_SetConfig+0x8fe>
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418760e:	68fa      	ldr	r2, [r7, #12]
34187610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187612:	2134      	movs	r1, #52	@ 0x34
34187614:	fb01 f303 	mul.w	r3, r1, r3
34187618:	4413      	add	r3, r2
3418761a:	333c      	adds	r3, #60	@ 0x3c
3418761c:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418761e:	68f9      	ldr	r1, [r7, #12]
34187620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187622:	2034      	movs	r0, #52	@ 0x34
34187624:	fb00 f303 	mul.w	r3, r0, r3
34187628:	440b      	add	r3, r1
3418762a:	3338      	adds	r3, #56	@ 0x38
3418762c:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418762e:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34187630:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187632:	697a      	ldr	r2, [r7, #20]
34187634:	fb02 f303 	mul.w	r3, r2, r3
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
34187638:	68f9      	ldr	r1, [r7, #12]
3418763a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418763c:	2034      	movs	r0, #52	@ 0x34
3418763e:	fb00 f202 	mul.w	r2, r0, r2
34187642:	440a      	add	r2, r1
34187644:	3244      	adds	r2, #68	@ 0x44
34187646:	6811      	ldr	r1, [r2, #0]
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34187648:	68f8      	ldr	r0, [r7, #12]
3418764a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418764c:	2434      	movs	r4, #52	@ 0x34
3418764e:	fb04 f202 	mul.w	r2, r4, r2
34187652:	4402      	add	r2, r0
34187654:	3240      	adds	r2, #64	@ 0x40
34187656:	6812      	ldr	r2, [r2, #0]
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
34187658:	1a8a      	subs	r2, r1, r2
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
3418765a:	0852      	lsrs	r2, r2, #1
3418765c:	3a01      	subs	r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418765e:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34187662:	68fb      	ldr	r3, [r7, #12]
34187664:	681b      	ldr	r3, [r3, #0]
34187666:	4619      	mov	r1, r3
34187668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418766a:	021b      	lsls	r3, r3, #8
3418766c:	440b      	add	r3, r1
3418766e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187672:	4619      	mov	r1, r3
34187674:	68bb      	ldr	r3, [r7, #8]
34187676:	4413      	add	r3, r2
34187678:	640b      	str	r3, [r1, #64]	@ 0x40
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418767a:	68fa      	ldr	r2, [r7, #12]
3418767c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418767e:	2134      	movs	r1, #52	@ 0x34
34187680:	fb01 f303 	mul.w	r3, r1, r3
34187684:	4413      	add	r3, r2
34187686:	333c      	adds	r3, #60	@ 0x3c
34187688:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418768a:	68f9      	ldr	r1, [r7, #12]
3418768c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418768e:	2034      	movs	r0, #52	@ 0x34
34187690:	fb00 f303 	mul.w	r3, r0, r3
34187694:	440b      	add	r3, r1
34187696:	3338      	adds	r3, #56	@ 0x38
34187698:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418769a:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418769c:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418769e:	697a      	ldr	r2, [r7, #20]
341876a0:	fb02 f303 	mul.w	r3, r2, r3
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
341876a4:	68f9      	ldr	r1, [r7, #12]
341876a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341876a8:	2034      	movs	r0, #52	@ 0x34
341876aa:	fb00 f202 	mul.w	r2, r0, r2
341876ae:	440a      	add	r2, r1
341876b0:	3244      	adds	r2, #68	@ 0x44
341876b2:	6811      	ldr	r1, [r2, #0]
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
341876b4:	68f8      	ldr	r0, [r7, #12]
341876b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341876b8:	2434      	movs	r4, #52	@ 0x34
341876ba:	fb04 f202 	mul.w	r2, r4, r2
341876be:	4402      	add	r2, r0
341876c0:	3240      	adds	r2, #64	@ 0x40
341876c2:	6812      	ldr	r2, [r2, #0]
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
341876c4:	1a8a      	subs	r2, r1, r2
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
341876c6:	0852      	lsrs	r2, r2, #1
341876c8:	3a01      	subs	r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
341876ca:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
341876ce:	68fb      	ldr	r3, [r7, #12]
341876d0:	681b      	ldr	r3, [r3, #0]
341876d2:	4619      	mov	r1, r3
341876d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341876d6:	021b      	lsls	r3, r3, #8
341876d8:	440b      	add	r3, r1
341876da:	f503 7380 	add.w	r3, r3, #256	@ 0x100
341876de:	4619      	mov	r1, r3
341876e0:	687b      	ldr	r3, [r7, #4]
341876e2:	4413      	add	r3, r2
341876e4:	644b      	str	r3, [r1, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
341876e6:	68fa      	ldr	r2, [r7, #12]
341876e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341876ea:	2134      	movs	r1, #52	@ 0x34
341876ec:	fb01 f303 	mul.w	r3, r1, r3
341876f0:	4413      	add	r3, r2
341876f2:	3360      	adds	r3, #96	@ 0x60
341876f4:	681b      	ldr	r3, [r3, #0]
341876f6:	085b      	lsrs	r3, r3, #1
341876f8:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
341876fc:	697a      	ldr	r2, [r7, #20]
341876fe:	fb02 f303 	mul.w	r3, r2, r3
                                               stride) << 16U) |
34187702:	041a      	lsls	r2, r3, #16
                                             ((((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187704:	68f9      	ldr	r1, [r7, #12]
34187706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187708:	2034      	movs	r0, #52	@ 0x34
3418770a:	fb00 f303 	mul.w	r3, r0, r3
3418770e:	440b      	add	r3, r1
34187710:	333c      	adds	r3, #60	@ 0x3c
34187712:	6819      	ldr	r1, [r3, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
34187714:	68f8      	ldr	r0, [r7, #12]
34187716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187718:	2434      	movs	r4, #52	@ 0x34
3418771a:	fb04 f303 	mul.w	r3, r4, r3
3418771e:	4403      	add	r3, r0
34187720:	3338      	adds	r3, #56	@ 0x38
34187722:	681b      	ldr	r3, [r3, #0]
                                             ((((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187724:	1acb      	subs	r3, r1, r3
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
34187726:	085b      	lsrs	r3, r3, #1
34187728:	6979      	ldr	r1, [r7, #20]
3418772a:	fb01 f303 	mul.w	r3, r1, r3
3418772e:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
34187730:	68f9      	ldr	r1, [r7, #12]
34187732:	6809      	ldr	r1, [r1, #0]
34187734:	4608      	mov	r0, r1
34187736:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34187738:	0209      	lsls	r1, r1, #8
3418773a:	4401      	add	r1, r0
3418773c:	f501 7180 	add.w	r1, r1, #256	@ 0x100
                                               stride) << 16U) |
34187740:	4313      	orrs	r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
34187742:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34187744:	68fa      	ldr	r2, [r7, #12]
34187746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187748:	2134      	movs	r1, #52	@ 0x34
3418774a:	fb01 f303 	mul.w	r3, r1, r3
3418774e:	4413      	add	r3, r2
34187750:	3364      	adds	r3, #100	@ 0x64
34187752:	681b      	ldr	r3, [r3, #0]
34187754:	68fa      	ldr	r2, [r7, #12]
34187756:	6812      	ldr	r2, [r2, #0]
34187758:	4611      	mov	r1, r2
3418775a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418775c:	0212      	lsls	r2, r2, #8
3418775e:	440a      	add	r2, r1
34187760:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34187764:	085b      	lsrs	r3, r3, #1
34187766:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
34187768:	bf00      	nop
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
3418776a:	68fa      	ldr	r2, [r7, #12]
3418776c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418776e:	2134      	movs	r1, #52	@ 0x34
34187770:	fb01 f303 	mul.w	r3, r1, r3
34187774:	4413      	add	r3, r2
34187776:	3360      	adds	r3, #96	@ 0x60
34187778:	681b      	ldr	r3, [r3, #0]
3418777a:	697a      	ldr	r2, [r7, #20]
3418777c:	fb02 f303 	mul.w	r3, r2, r3
34187780:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
34187784:	041a      	lsls	r2, r3, #16
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187786:	68f9      	ldr	r1, [r7, #12]
34187788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418778a:	2034      	movs	r0, #52	@ 0x34
3418778c:	fb00 f303 	mul.w	r3, r0, r3
34187790:	440b      	add	r3, r1
34187792:	333c      	adds	r3, #60	@ 0x3c
34187794:	6819      	ldr	r1, [r3, #0]
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));
34187796:	68f8      	ldr	r0, [r7, #12]
34187798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418779a:	2434      	movs	r4, #52	@ 0x34
3418779c:	fb04 f303 	mul.w	r3, r4, r3
341877a0:	4403      	add	r3, r0
341877a2:	3338      	adds	r3, #56	@ 0x38
341877a4:	681b      	ldr	r3, [r3, #0]
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
341877a6:	1acb      	subs	r3, r1, r3
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));
341877a8:	6979      	ldr	r1, [r7, #20]
341877aa:	fb01 f303 	mul.w	r3, r1, r3
341877ae:	3307      	adds	r3, #7
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
341877b0:	68f9      	ldr	r1, [r7, #12]
341877b2:	6809      	ldr	r1, [r1, #0]
341877b4:	4608      	mov	r0, r1
341877b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341877b8:	0209      	lsls	r1, r1, #8
341877ba:	4401      	add	r1, r0
341877bc:	f501 7180 	add.w	r1, r1, #256	@ 0x100
341877c0:	4313      	orrs	r3, r2
341877c2:	638b      	str	r3, [r1, #56]	@ 0x38
    MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN, LTDC_LxCR_LEN);
341877c4:	68fb      	ldr	r3, [r7, #12]
341877c6:	681b      	ldr	r3, [r3, #0]
341877c8:	461a      	mov	r2, r3
341877ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341877cc:	021b      	lsls	r3, r3, #8
341877ce:	4413      	add	r3, r2
341877d0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
341877d4:	68db      	ldr	r3, [r3, #12]
341877d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
341877da:	f023 0301 	bic.w	r3, r3, #1
341877de:	68fa      	ldr	r2, [r7, #12]
341877e0:	6812      	ldr	r2, [r2, #0]
341877e2:	4611      	mov	r1, r2
341877e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341877e6:	0212      	lsls	r2, r2, #8
341877e8:	440a      	add	r2, r1
341877ea:	f502 7280 	add.w	r2, r2, #256	@ 0x100
341877ee:	f043 0301 	orr.w	r3, r3, #1
341877f2:	60d3      	str	r3, [r2, #12]
}
341877f4:	e1c1      	b.n	34187b7a <LTDC_SetConfig+0xd0e>
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
341877f6:	68fa      	ldr	r2, [r7, #12]
341877f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341877fa:	2134      	movs	r1, #52	@ 0x34
341877fc:	fb01 f303 	mul.w	r3, r1, r3
34187800:	4413      	add	r3, r2
34187802:	335c      	adds	r3, #92	@ 0x5c
34187804:	681a      	ldr	r2, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
34187806:	68f9      	ldr	r1, [r7, #12]
34187808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418780a:	2034      	movs	r0, #52	@ 0x34
3418780c:	fb00 f303 	mul.w	r3, r0, r3
34187810:	440b      	add	r3, r1
34187812:	333c      	adds	r3, #60	@ 0x3c
34187814:	6819      	ldr	r1, [r3, #0]
                                                    hltdc->LayerCfg[LayerIdx].WindowX0) *
34187816:	68f8      	ldr	r0, [r7, #12]
34187818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418781a:	2434      	movs	r4, #52	@ 0x34
3418781c:	fb04 f303 	mul.w	r3, r4, r3
34187820:	4403      	add	r3, r0
34187822:	3338      	adds	r3, #56	@ 0x38
34187824:	681b      	ldr	r3, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
34187826:	1acb      	subs	r3, r1, r3
34187828:	6979      	ldr	r1, [r7, #20]
3418782a:	fb01 f303 	mul.w	r3, r1, r3
                                          (hltdc->LayerCfg[LayerIdx].WindowY1 - \
3418782e:	68f8      	ldr	r0, [r7, #12]
34187830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34187832:	2434      	movs	r4, #52	@ 0x34
34187834:	fb04 f101 	mul.w	r1, r4, r1
34187838:	4401      	add	r1, r0
3418783a:	3144      	adds	r1, #68	@ 0x44
3418783c:	6808      	ldr	r0, [r1, #0]
                                           hltdc->LayerCfg[LayerIdx].WindowY0)) - 1U;
3418783e:	68fc      	ldr	r4, [r7, #12]
34187840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34187842:	2534      	movs	r5, #52	@ 0x34
34187844:	fb05 f101 	mul.w	r1, r5, r1
34187848:	4421      	add	r1, r4
3418784a:	3140      	adds	r1, #64	@ 0x40
3418784c:	6809      	ldr	r1, [r1, #0]
                                          (hltdc->LayerCfg[LayerIdx].WindowY1 - \
3418784e:	1a41      	subs	r1, r0, r1
                                                    hltdc->LayerCfg[LayerIdx].WindowX0) *
34187850:	fb01 f303 	mul.w	r3, r1, r3
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34187854:	4413      	add	r3, r2
34187856:	68fa      	ldr	r2, [r7, #12]
34187858:	6812      	ldr	r2, [r2, #0]
3418785a:	4611      	mov	r1, r2
3418785c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418785e:	0212      	lsls	r2, r2, #8
34187860:	440a      	add	r2, r1
34187862:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                           hltdc->LayerCfg[LayerIdx].WindowY0)) - 1U;
34187866:	3b01      	subs	r3, #1
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34187868:	6353      	str	r3, [r2, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3418786a:	68fa      	ldr	r2, [r7, #12]
3418786c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418786e:	2134      	movs	r1, #52	@ 0x34
34187870:	fb01 f303 	mul.w	r3, r1, r3
34187874:	4413      	add	r3, r2
34187876:	3348      	adds	r3, #72	@ 0x48
34187878:	681b      	ldr	r3, [r3, #0]
3418787a:	f240 120d 	movw	r2, #269	@ 0x10d
3418787e:	4293      	cmp	r3, r2
34187880:	d004      	beq.n	3418788c <LTDC_SetConfig+0xa20>
34187882:	f240 220d 	movw	r2, #525	@ 0x20d
34187886:	4293      	cmp	r3, r2
34187888:	d074      	beq.n	34187974 <LTDC_SetConfig+0xb08>
        break;
3418788a:	e133      	b.n	34187af4 <LTDC_SetConfig+0xc88>
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418788c:	68fa      	ldr	r2, [r7, #12]
3418788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187890:	2134      	movs	r1, #52	@ 0x34
34187892:	fb01 f303 	mul.w	r3, r1, r3
34187896:	4413      	add	r3, r2
34187898:	333c      	adds	r3, #60	@ 0x3c
3418789a:	681a      	ldr	r2, [r3, #0]
                                                         hltdc->LayerCfg[LayerIdx].WindowX0) *
3418789c:	68f9      	ldr	r1, [r7, #12]
3418789e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341878a0:	2034      	movs	r0, #52	@ 0x34
341878a2:	fb00 f303 	mul.w	r3, r0, r3
341878a6:	440b      	add	r3, r1
341878a8:	3338      	adds	r3, #56	@ 0x38
341878aa:	681b      	ldr	r3, [r3, #0]
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
341878ac:	1ad3      	subs	r3, r2, r3
341878ae:	697a      	ldr	r2, [r7, #20]
341878b0:	fb02 f303 	mul.w	r3, r2, r3
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
341878b4:	68f9      	ldr	r1, [r7, #12]
341878b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341878b8:	2034      	movs	r0, #52	@ 0x34
341878ba:	fb00 f202 	mul.w	r2, r0, r2
341878be:	440a      	add	r2, r1
341878c0:	3244      	adds	r2, #68	@ 0x44
341878c2:	6811      	ldr	r1, [r2, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
341878c4:	68f8      	ldr	r0, [r7, #12]
341878c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341878c8:	2434      	movs	r4, #52	@ 0x34
341878ca:	fb04 f202 	mul.w	r2, r4, r2
341878ce:	4402      	add	r2, r0
341878d0:	3240      	adds	r2, #64	@ 0x40
341878d2:	6812      	ldr	r2, [r2, #0]
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
341878d4:	1a8a      	subs	r2, r1, r2
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
341878d6:	0852      	lsrs	r2, r2, #1
                                                         hltdc->LayerCfg[LayerIdx].WindowX0) *
341878d8:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
341878dc:	68bb      	ldr	r3, [r7, #8]
341878de:	4413      	add	r3, r2
341878e0:	68fa      	ldr	r2, [r7, #12]
341878e2:	6812      	ldr	r2, [r2, #0]
341878e4:	4611      	mov	r1, r2
341878e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341878e8:	0212      	lsls	r2, r2, #8
341878ea:	440a      	add	r2, r1
341878ec:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
341878f0:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
341878f2:	6413      	str	r3, [r2, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
341878f4:	68fa      	ldr	r2, [r7, #12]
341878f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341878f8:	2134      	movs	r1, #52	@ 0x34
341878fa:	fb01 f303 	mul.w	r3, r1, r3
341878fe:	4413      	add	r3, r2
34187900:	3360      	adds	r3, #96	@ 0x60
34187902:	681b      	ldr	r3, [r3, #0]
34187904:	697a      	ldr	r2, [r7, #20]
34187906:	fb02 f303 	mul.w	r3, r2, r3
3418790a:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
3418790e:	041a      	lsls	r2, r3, #16
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187910:	68f9      	ldr	r1, [r7, #12]
34187912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187914:	2034      	movs	r0, #52	@ 0x34
34187916:	fb00 f303 	mul.w	r3, r0, r3
3418791a:	440b      	add	r3, r1
3418791c:	333c      	adds	r3, #60	@ 0x3c
3418791e:	6819      	ldr	r1, [r3, #0]
                                                hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U);
34187920:	68f8      	ldr	r0, [r7, #12]
34187922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187924:	2434      	movs	r4, #52	@ 0x34
34187926:	fb04 f303 	mul.w	r3, r4, r3
3418792a:	4403      	add	r3, r0
3418792c:	3338      	adds	r3, #56	@ 0x38
3418792e:	681b      	ldr	r3, [r3, #0]
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187930:	1acb      	subs	r3, r1, r3
                                                hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U);
34187932:	6979      	ldr	r1, [r7, #20]
34187934:	fb01 f303 	mul.w	r3, r1, r3
34187938:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
3418793a:	68f9      	ldr	r1, [r7, #12]
3418793c:	6809      	ldr	r1, [r1, #0]
3418793e:	4608      	mov	r0, r1
34187940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34187942:	0209      	lsls	r1, r1, #8
34187944:	4401      	add	r1, r0
34187946:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418794a:	4313      	orrs	r3, r2
3418794c:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
3418794e:	68fa      	ldr	r2, [r7, #12]
34187950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187952:	2134      	movs	r1, #52	@ 0x34
34187954:	fb01 f303 	mul.w	r3, r1, r3
34187958:	4413      	add	r3, r2
3418795a:	3364      	adds	r3, #100	@ 0x64
3418795c:	681b      	ldr	r3, [r3, #0]
3418795e:	68fa      	ldr	r2, [r7, #12]
34187960:	6812      	ldr	r2, [r2, #0]
34187962:	4611      	mov	r1, r2
34187964:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187966:	0212      	lsls	r2, r2, #8
34187968:	440a      	add	r2, r1
3418796a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418796e:	085b      	lsrs	r3, r3, #1
34187970:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
34187972:	e0bf      	b.n	34187af4 <LTDC_SetConfig+0xc88>
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187974:	68fa      	ldr	r2, [r7, #12]
34187976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187978:	2134      	movs	r1, #52	@ 0x34
3418797a:	fb01 f303 	mul.w	r3, r1, r3
3418797e:	4413      	add	r3, r2
34187980:	333c      	adds	r3, #60	@ 0x3c
34187982:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34187984:	68f9      	ldr	r1, [r7, #12]
34187986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187988:	2034      	movs	r0, #52	@ 0x34
3418798a:	fb00 f303 	mul.w	r3, r0, r3
3418798e:	440b      	add	r3, r1
34187990:	3338      	adds	r3, #56	@ 0x38
34187992:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187994:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34187996:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187998:	697a      	ldr	r2, [r7, #20]
3418799a:	fb02 f303 	mul.w	r3, r2, r3
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418799e:	68f9      	ldr	r1, [r7, #12]
341879a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341879a2:	2034      	movs	r0, #52	@ 0x34
341879a4:	fb00 f202 	mul.w	r2, r0, r2
341879a8:	440a      	add	r2, r1
341879aa:	3244      	adds	r2, #68	@ 0x44
341879ac:	6811      	ldr	r1, [r2, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
341879ae:	68f8      	ldr	r0, [r7, #12]
341879b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341879b2:	2434      	movs	r4, #52	@ 0x34
341879b4:	fb04 f202 	mul.w	r2, r4, r2
341879b8:	4402      	add	r2, r0
341879ba:	3240      	adds	r2, #64	@ 0x40
341879bc:	6812      	ldr	r2, [r2, #0]
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
341879be:	1a8a      	subs	r2, r1, r2
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
341879c0:	0852      	lsrs	r2, r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
341879c2:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
341879c6:	68bb      	ldr	r3, [r7, #8]
341879c8:	4413      	add	r3, r2
341879ca:	68fa      	ldr	r2, [r7, #12]
341879cc:	6812      	ldr	r2, [r2, #0]
341879ce:	4611      	mov	r1, r2
341879d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341879d2:	0212      	lsls	r2, r2, #8
341879d4:	440a      	add	r2, r1
341879d6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
341879da:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
341879dc:	6413      	str	r3, [r2, #64]	@ 0x40
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
341879de:	68fa      	ldr	r2, [r7, #12]
341879e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341879e2:	2134      	movs	r1, #52	@ 0x34
341879e4:	fb01 f303 	mul.w	r3, r1, r3
341879e8:	4413      	add	r3, r2
341879ea:	333c      	adds	r3, #60	@ 0x3c
341879ec:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
341879ee:	68f9      	ldr	r1, [r7, #12]
341879f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341879f2:	2034      	movs	r0, #52	@ 0x34
341879f4:	fb00 f303 	mul.w	r3, r0, r3
341879f8:	440b      	add	r3, r1
341879fa:	3338      	adds	r3, #56	@ 0x38
341879fc:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
341879fe:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34187a00:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187a02:	697a      	ldr	r2, [r7, #20]
34187a04:	fb02 f303 	mul.w	r3, r2, r3
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
34187a08:	68f9      	ldr	r1, [r7, #12]
34187a0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187a0c:	2034      	movs	r0, #52	@ 0x34
34187a0e:	fb00 f202 	mul.w	r2, r0, r2
34187a12:	440a      	add	r2, r1
34187a14:	3244      	adds	r2, #68	@ 0x44
34187a16:	6811      	ldr	r1, [r2, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34187a18:	68f8      	ldr	r0, [r7, #12]
34187a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187a1c:	2434      	movs	r4, #52	@ 0x34
34187a1e:	fb04 f202 	mul.w	r2, r4, r2
34187a22:	4402      	add	r2, r0
34187a24:	3240      	adds	r2, #64	@ 0x40
34187a26:	6812      	ldr	r2, [r2, #0]
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
34187a28:	1a8a      	subs	r2, r1, r2
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34187a2a:	0852      	lsrs	r2, r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34187a2c:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34187a30:	687b      	ldr	r3, [r7, #4]
34187a32:	4413      	add	r3, r2
34187a34:	68fa      	ldr	r2, [r7, #12]
34187a36:	6812      	ldr	r2, [r2, #0]
34187a38:	4611      	mov	r1, r2
34187a3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187a3c:	0212      	lsls	r2, r2, #8
34187a3e:	440a      	add	r2, r1
34187a40:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34187a44:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34187a46:	6453      	str	r3, [r2, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34187a48:	68fa      	ldr	r2, [r7, #12]
34187a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187a4c:	2134      	movs	r1, #52	@ 0x34
34187a4e:	fb01 f303 	mul.w	r3, r1, r3
34187a52:	4413      	add	r3, r2
34187a54:	3360      	adds	r3, #96	@ 0x60
34187a56:	681b      	ldr	r3, [r3, #0]
34187a58:	085b      	lsrs	r3, r3, #1
34187a5a:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
34187a5e:	697a      	ldr	r2, [r7, #20]
34187a60:	fb02 f303 	mul.w	r3, r2, r3
                                              << 16U) |
34187a64:	041a      	lsls	r2, r3, #16
                                             ((((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187a66:	68f9      	ldr	r1, [r7, #12]
34187a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187a6a:	2034      	movs	r0, #52	@ 0x34
34187a6c:	fb00 f303 	mul.w	r3, r0, r3
34187a70:	440b      	add	r3, r1
34187a72:	333c      	adds	r3, #60	@ 0x3c
34187a74:	6819      	ldr	r1, [r3, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
34187a76:	68f8      	ldr	r0, [r7, #12]
34187a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187a7a:	2434      	movs	r4, #52	@ 0x34
34187a7c:	fb04 f303 	mul.w	r3, r4, r3
34187a80:	4403      	add	r3, r0
34187a82:	3338      	adds	r3, #56	@ 0x38
34187a84:	681b      	ldr	r3, [r3, #0]
                                             ((((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187a86:	1acb      	subs	r3, r1, r3
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
34187a88:	085b      	lsrs	r3, r3, #1
34187a8a:	6979      	ldr	r1, [r7, #20]
34187a8c:	fb01 f303 	mul.w	r3, r1, r3
34187a90:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34187a92:	68f9      	ldr	r1, [r7, #12]
34187a94:	6809      	ldr	r1, [r1, #0]
34187a96:	4608      	mov	r0, r1
34187a98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34187a9a:	0209      	lsls	r1, r1, #8
34187a9c:	4401      	add	r1, r0
34187a9e:	f501 7180 	add.w	r1, r1, #256	@ 0x100
                                              << 16U) |
34187aa2:	4313      	orrs	r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34187aa4:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR &= ~(LTDC_L1AFBLNR_AFBLNBR);
34187aa6:	68fb      	ldr	r3, [r7, #12]
34187aa8:	681b      	ldr	r3, [r3, #0]
34187aaa:	461a      	mov	r2, r3
34187aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187aae:	021b      	lsls	r3, r3, #8
34187ab0:	4413      	add	r3, r2
34187ab2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187ab8:	68fa      	ldr	r2, [r7, #12]
34187aba:	6812      	ldr	r2, [r2, #0]
34187abc:	4611      	mov	r1, r2
34187abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187ac0:	0212      	lsls	r2, r2, #8
34187ac2:	440a      	add	r2, r1
34187ac4:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34187ac8:	0c1b      	lsrs	r3, r3, #16
34187aca:	041b      	lsls	r3, r3, #16
34187acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34187ace:	68fa      	ldr	r2, [r7, #12]
34187ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187ad2:	2134      	movs	r1, #52	@ 0x34
34187ad4:	fb01 f303 	mul.w	r3, r1, r3
34187ad8:	4413      	add	r3, r2
34187ada:	3364      	adds	r3, #100	@ 0x64
34187adc:	681b      	ldr	r3, [r3, #0]
34187ade:	68fa      	ldr	r2, [r7, #12]
34187ae0:	6812      	ldr	r2, [r2, #0]
34187ae2:	4611      	mov	r1, r2
34187ae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187ae6:	0212      	lsls	r2, r2, #8
34187ae8:	440a      	add	r2, r1
34187aea:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34187aee:	085b      	lsrs	r3, r3, #1
34187af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
34187af2:	bf00      	nop
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
34187af4:	68fa      	ldr	r2, [r7, #12]
34187af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187af8:	2134      	movs	r1, #52	@ 0x34
34187afa:	fb01 f303 	mul.w	r3, r1, r3
34187afe:	4413      	add	r3, r2
34187b00:	3360      	adds	r3, #96	@ 0x60
34187b02:	681b      	ldr	r3, [r3, #0]
34187b04:	697a      	ldr	r2, [r7, #20]
34187b06:	fb02 f303 	mul.w	r3, r2, r3
34187b0a:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
34187b0e:	041a      	lsls	r2, r3, #16
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187b10:	68f9      	ldr	r1, [r7, #12]
34187b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187b14:	2034      	movs	r0, #52	@ 0x34
34187b16:	fb00 f303 	mul.w	r3, r0, r3
34187b1a:	440b      	add	r3, r1
34187b1c:	333c      	adds	r3, #60	@ 0x3c
34187b1e:	6819      	ldr	r1, [r3, #0]
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));
34187b20:	68f8      	ldr	r0, [r7, #12]
34187b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187b24:	2434      	movs	r4, #52	@ 0x34
34187b26:	fb04 f303 	mul.w	r3, r4, r3
34187b2a:	4403      	add	r3, r0
34187b2c:	3338      	adds	r3, #56	@ 0x38
34187b2e:	681b      	ldr	r3, [r3, #0]
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34187b30:	1acb      	subs	r3, r1, r3
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));
34187b32:	6979      	ldr	r1, [r7, #20]
34187b34:	fb01 f303 	mul.w	r3, r1, r3
34187b38:	3307      	adds	r3, #7
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
34187b3a:	68f9      	ldr	r1, [r7, #12]
34187b3c:	6809      	ldr	r1, [r1, #0]
34187b3e:	4608      	mov	r0, r1
34187b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34187b42:	0209      	lsls	r1, r1, #8
34187b44:	4401      	add	r1, r0
34187b46:	f501 7180 	add.w	r1, r1, #256	@ 0x100
34187b4a:	4313      	orrs	r3, r2
34187b4c:	638b      	str	r3, [r1, #56]	@ 0x38
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
34187b4e:	68fb      	ldr	r3, [r7, #12]
34187b50:	681b      	ldr	r3, [r3, #0]
34187b52:	461a      	mov	r2, r3
34187b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187b56:	021b      	lsls	r3, r3, #8
34187b58:	4413      	add	r3, r2
34187b5a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187b5e:	68db      	ldr	r3, [r3, #12]
34187b60:	68fa      	ldr	r2, [r7, #12]
34187b62:	6812      	ldr	r2, [r2, #0]
34187b64:	4611      	mov	r1, r2
34187b66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34187b68:	0212      	lsls	r2, r2, #8
34187b6a:	440a      	add	r2, r1
34187b6c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34187b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34187b74:	f043 0301 	orr.w	r3, r3, #1
34187b78:	60d3      	str	r3, [r2, #12]
}
34187b7a:	bf00      	nop
34187b7c:	371c      	adds	r7, #28
34187b7e:	46bd      	mov	sp, r7
34187b80:	bcb0      	pop	{r4, r5, r7}
34187b82:	4770      	bx	lr

34187b84 <LTDC_SetCompositionConfig>:
  *                 - Other layer indices as defined by the hardware and used within the driver.
  *
  * @note This function is intended for internal use within the LTDC driver and does not return a value.
 */
static void LTDC_SetCompositionConfig(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
34187b84:	b480      	push	{r7}
34187b86:	b087      	sub	sp, #28
34187b88:	af00      	add	r7, sp, #0
34187b8a:	6078      	str	r0, [r7, #4]
34187b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the default color values */
  tmp = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Green) << 8U);
34187b8e:	687a      	ldr	r2, [r7, #4]
34187b90:	683b      	ldr	r3, [r7, #0]
34187b92:	2134      	movs	r1, #52	@ 0x34
34187b94:	fb01 f303 	mul.w	r3, r1, r3
34187b98:	4413      	add	r3, r2
34187b9a:	3369      	adds	r3, #105	@ 0x69
34187b9c:	781b      	ldrb	r3, [r3, #0]
34187b9e:	021b      	lsls	r3, r3, #8
34187ba0:	617b      	str	r3, [r7, #20]
  tmp1 = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Red) << 16U);
34187ba2:	687a      	ldr	r2, [r7, #4]
34187ba4:	683b      	ldr	r3, [r7, #0]
34187ba6:	2134      	movs	r1, #52	@ 0x34
34187ba8:	fb01 f303 	mul.w	r3, r1, r3
34187bac:	4413      	add	r3, r2
34187bae:	336a      	adds	r3, #106	@ 0x6a
34187bb0:	781b      	ldrb	r3, [r3, #0]
34187bb2:	041b      	lsls	r3, r3, #16
34187bb4:	613b      	str	r3, [r7, #16]
  tmp2 = (hltdc->LayerCfg[LayerIdx].Alpha0 << 24U);
34187bb6:	687a      	ldr	r2, [r7, #4]
34187bb8:	683b      	ldr	r3, [r7, #0]
34187bba:	2134      	movs	r1, #52	@ 0x34
34187bbc:	fb01 f303 	mul.w	r3, r1, r3
34187bc0:	4413      	add	r3, r2
34187bc2:	3350      	adds	r3, #80	@ 0x50
34187bc4:	681b      	ldr	r3, [r3, #0]
34187bc6:	061b      	lsls	r3, r3, #24
34187bc8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34187bca:	687a      	ldr	r2, [r7, #4]
34187bcc:	683b      	ldr	r3, [r7, #0]
34187bce:	2134      	movs	r1, #52	@ 0x34
34187bd0:	fb01 f303 	mul.w	r3, r1, r3
34187bd4:	4413      	add	r3, r2
34187bd6:	3368      	adds	r3, #104	@ 0x68
34187bd8:	781b      	ldrb	r3, [r3, #0]
34187bda:	461a      	mov	r2, r3
34187bdc:	697b      	ldr	r3, [r7, #20]
34187bde:	431a      	orrs	r2, r3
34187be0:	693b      	ldr	r3, [r7, #16]
34187be2:	431a      	orrs	r2, r3
34187be4:	687b      	ldr	r3, [r7, #4]
34187be6:	681b      	ldr	r3, [r3, #0]
34187be8:	4619      	mov	r1, r3
34187bea:	683b      	ldr	r3, [r7, #0]
34187bec:	021b      	lsls	r3, r3, #8
34187bee:	440b      	add	r3, r1
34187bf0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187bf4:	4619      	mov	r1, r3
34187bf6:	68fb      	ldr	r3, [r7, #12]
34187bf8:	4313      	orrs	r3, r2
34187bfa:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
34187bfc:	687b      	ldr	r3, [r7, #4]
34187bfe:	681b      	ldr	r3, [r3, #0]
34187c00:	461a      	mov	r2, r3
34187c02:	683b      	ldr	r3, [r7, #0]
34187c04:	021b      	lsls	r3, r3, #8
34187c06:	4413      	add	r3, r2
34187c08:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187c0c:	6a1b      	ldr	r3, [r3, #32]
34187c0e:	687a      	ldr	r2, [r7, #4]
34187c10:	6812      	ldr	r2, [r2, #0]
34187c12:	4611      	mov	r1, r2
34187c14:	683a      	ldr	r2, [r7, #0]
34187c16:	0212      	lsls	r2, r2, #8
34187c18:	440a      	add	r2, r1
34187c1a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
34187c1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
34187c22:	6213      	str	r3, [r2, #32]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (hltdc->LayerCfg[LayerIdx].Alpha);
34187c24:	687b      	ldr	r3, [r7, #4]
34187c26:	681b      	ldr	r3, [r3, #0]
34187c28:	461a      	mov	r2, r3
34187c2a:	683b      	ldr	r3, [r7, #0]
34187c2c:	021b      	lsls	r3, r3, #8
34187c2e:	4413      	add	r3, r2
34187c30:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187c34:	4618      	mov	r0, r3
34187c36:	687a      	ldr	r2, [r7, #4]
34187c38:	683b      	ldr	r3, [r7, #0]
34187c3a:	2134      	movs	r1, #52	@ 0x34
34187c3c:	fb01 f303 	mul.w	r3, r1, r3
34187c40:	4413      	add	r3, r2
34187c42:	334c      	adds	r3, #76	@ 0x4c
34187c44:	681b      	ldr	r3, [r3, #0]
34187c46:	6203      	str	r3, [r0, #32]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BOR | LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
34187c48:	687b      	ldr	r3, [r7, #4]
34187c4a:	681b      	ldr	r3, [r3, #0]
34187c4c:	461a      	mov	r2, r3
34187c4e:	683b      	ldr	r3, [r7, #0]
34187c50:	021b      	lsls	r3, r3, #8
34187c52:	4413      	add	r3, r2
34187c54:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187c58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34187c5a:	687b      	ldr	r3, [r7, #4]
34187c5c:	681b      	ldr	r3, [r3, #0]
34187c5e:	4619      	mov	r1, r3
34187c60:	683b      	ldr	r3, [r7, #0]
34187c62:	021b      	lsls	r3, r3, #8
34187c64:	440b      	add	r3, r1
34187c66:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187c6a:	4619      	mov	r1, r3
34187c6c:	4b18      	ldr	r3, [pc, #96]	@ (34187cd0 <LTDC_SetCompositionConfig+0x14c>)
34187c6e:	4013      	ands	r3, r2
34187c70:	628b      	str	r3, [r1, #40]	@ 0x28
  tmp = ((uint32_t)(LTDC_LAYER(hltdc, LayerIdx)->BFCR & LTDC_LxBFCR_BOR_Msk) >> LTDC_LxBFCR_BOR_Pos) << 16U;
34187c72:	687b      	ldr	r3, [r7, #4]
34187c74:	681b      	ldr	r3, [r3, #0]
34187c76:	461a      	mov	r2, r3
34187c78:	683b      	ldr	r3, [r7, #0]
34187c7a:	021b      	lsls	r3, r3, #8
34187c7c:	4413      	add	r3, r2
34187c7e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34187c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34187c88:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
34187c8a:	687a      	ldr	r2, [r7, #4]
34187c8c:	683b      	ldr	r3, [r7, #0]
34187c8e:	2134      	movs	r1, #52	@ 0x34
34187c90:	fb01 f303 	mul.w	r3, r1, r3
34187c94:	4413      	add	r3, r2
34187c96:	3354      	adds	r3, #84	@ 0x54
34187c98:	681a      	ldr	r2, [r3, #0]
                                       hltdc->LayerCfg[LayerIdx].BlendingFactor2 | tmp);
34187c9a:	6879      	ldr	r1, [r7, #4]
34187c9c:	683b      	ldr	r3, [r7, #0]
34187c9e:	2034      	movs	r0, #52	@ 0x34
34187ca0:	fb00 f303 	mul.w	r3, r0, r3
34187ca4:	440b      	add	r3, r1
34187ca6:	3358      	adds	r3, #88	@ 0x58
34187ca8:	681b      	ldr	r3, [r3, #0]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
34187caa:	431a      	orrs	r2, r3
34187cac:	687b      	ldr	r3, [r7, #4]
34187cae:	681b      	ldr	r3, [r3, #0]
34187cb0:	4619      	mov	r1, r3
34187cb2:	683b      	ldr	r3, [r7, #0]
34187cb4:	021b      	lsls	r3, r3, #8
34187cb6:	440b      	add	r3, r1
34187cb8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187cbc:	4619      	mov	r1, r3
                                       hltdc->LayerCfg[LayerIdx].BlendingFactor2 | tmp);
34187cbe:	697b      	ldr	r3, [r7, #20]
34187cc0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
34187cc2:	628b      	str	r3, [r1, #40]	@ 0x28
}
34187cc4:	bf00      	nop
34187cc6:	371c      	adds	r7, #28
34187cc8:	46bd      	mov	sp, r7
34187cca:	f85d 7b04 	ldr.w	r7, [sp], #4
34187cce:	4770      	bx	lr
34187cd0:	fffef8f8 	.word	0xfffef8f8

34187cd4 <LTDC_SetPredefFormat>:
  *
  *  @note This function does not return a value as it is a static function used internally within the
  *        driver.
  */
static void LTDC_SetPredefFormat(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
34187cd4:	b480      	push	{r7}
34187cd6:	b08d      	sub	sp, #52	@ 0x34
34187cd8:	af00      	add	r7, sp, #0
34187cda:	6078      	str	r0, [r7, #4]
34187cdc:	6039      	str	r1, [r7, #0]
  uint32_t PSIZE = 0U;
34187cde:	2300      	movs	r3, #0
34187ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t ALEN = 0U;
34187ce2:	2300      	movs	r3, #0
34187ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t APOS = 0U;
34187ce6:	2300      	movs	r3, #0
34187ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t RLEN = 0U;
34187cea:	2300      	movs	r3, #0
34187cec:	623b      	str	r3, [r7, #32]
  uint32_t RPOS = 0U;
34187cee:	2300      	movs	r3, #0
34187cf0:	61fb      	str	r3, [r7, #28]
  uint32_t BLEN = 0U;
34187cf2:	2300      	movs	r3, #0
34187cf4:	61bb      	str	r3, [r7, #24]
  uint32_t BPOS = 0U;
34187cf6:	2300      	movs	r3, #0
34187cf8:	617b      	str	r3, [r7, #20]
  uint32_t GLEN = 0U;
34187cfa:	2300      	movs	r3, #0
34187cfc:	613b      	str	r3, [r7, #16]
  uint32_t GPOS = 0U;
34187cfe:	2300      	movs	r3, #0
34187d00:	60fb      	str	r3, [r7, #12]

  /* Specify Flex ARGB parameters according to pixel format */
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34187d02:	687a      	ldr	r2, [r7, #4]
34187d04:	683b      	ldr	r3, [r7, #0]
34187d06:	2134      	movs	r1, #52	@ 0x34
34187d08:	fb01 f303 	mul.w	r3, r1, r3
34187d0c:	4413      	add	r3, r2
34187d0e:	3348      	adds	r3, #72	@ 0x48
34187d10:	681b      	ldr	r3, [r3, #0]
34187d12:	3b07      	subs	r3, #7
34187d14:	2b04      	cmp	r3, #4
34187d16:	d86c      	bhi.n	34187df2 <LTDC_SetPredefFormat+0x11e>
34187d18:	a201      	add	r2, pc, #4	@ (adr r2, 34187d20 <LTDC_SetPredefFormat+0x4c>)
34187d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34187d1e:	bf00      	nop
34187d20:	34187d35 	.word	0x34187d35
34187d24:	34187d5b 	.word	0x34187d5b
34187d28:	34187d81 	.word	0x34187d81
34187d2c:	34187da7 	.word	0x34187da7
34187d30:	34187dcd 	.word	0x34187dcd
  {
    case LTDC_PIXEL_FORMAT_ARGB1555:
      PSIZE = 2U;
34187d34:	2302      	movs	r3, #2
34187d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 1U;
34187d38:	2301      	movs	r3, #1
34187d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 15U;
34187d3c:	230f      	movs	r3, #15
34187d3e:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 5U;
34187d40:	2305      	movs	r3, #5
34187d42:	623b      	str	r3, [r7, #32]
      RPOS = 10U;
34187d44:	230a      	movs	r3, #10
34187d46:	61fb      	str	r3, [r7, #28]
      GLEN = 5U;
34187d48:	2305      	movs	r3, #5
34187d4a:	613b      	str	r3, [r7, #16]
      GPOS = 5U;
34187d4c:	2305      	movs	r3, #5
34187d4e:	60fb      	str	r3, [r7, #12]
      BLEN = 5U;
34187d50:	2305      	movs	r3, #5
34187d52:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
34187d54:	2300      	movs	r3, #0
34187d56:	617b      	str	r3, [r7, #20]
      break;
34187d58:	e04c      	b.n	34187df4 <LTDC_SetPredefFormat+0x120>
    case LTDC_PIXEL_FORMAT_ARGB4444:
      PSIZE = 2U;
34187d5a:	2302      	movs	r3, #2
34187d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 4U;
34187d5e:	2304      	movs	r3, #4
34187d60:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 12U;
34187d62:	230c      	movs	r3, #12
34187d64:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 4U;
34187d66:	2304      	movs	r3, #4
34187d68:	623b      	str	r3, [r7, #32]
      RPOS = 8U;
34187d6a:	2308      	movs	r3, #8
34187d6c:	61fb      	str	r3, [r7, #28]
      GLEN = 4U;
34187d6e:	2304      	movs	r3, #4
34187d70:	613b      	str	r3, [r7, #16]
      GPOS = 4U;
34187d72:	2304      	movs	r3, #4
34187d74:	60fb      	str	r3, [r7, #12]
      BLEN = 4U;
34187d76:	2304      	movs	r3, #4
34187d78:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
34187d7a:	2300      	movs	r3, #0
34187d7c:	617b      	str	r3, [r7, #20]
      break;
34187d7e:	e039      	b.n	34187df4 <LTDC_SetPredefFormat+0x120>
    case LTDC_PIXEL_FORMAT_L8:
      PSIZE = 1U;
34187d80:	2301      	movs	r3, #1
34187d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 0U;
34187d84:	2300      	movs	r3, #0
34187d86:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 0U;
34187d88:	2300      	movs	r3, #0
34187d8a:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 8U;
34187d8c:	2308      	movs	r3, #8
34187d8e:	623b      	str	r3, [r7, #32]
      RPOS = 0U;
34187d90:	2300      	movs	r3, #0
34187d92:	61fb      	str	r3, [r7, #28]
      GLEN = 8U;
34187d94:	2308      	movs	r3, #8
34187d96:	613b      	str	r3, [r7, #16]
      GPOS = 0U;
34187d98:	2300      	movs	r3, #0
34187d9a:	60fb      	str	r3, [r7, #12]
      BLEN = 8U;
34187d9c:	2308      	movs	r3, #8
34187d9e:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
34187da0:	2300      	movs	r3, #0
34187da2:	617b      	str	r3, [r7, #20]
      break;
34187da4:	e026      	b.n	34187df4 <LTDC_SetPredefFormat+0x120>
    case LTDC_PIXEL_FORMAT_AL44:
      PSIZE = 1U;
34187da6:	2301      	movs	r3, #1
34187da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 4U;
34187daa:	2304      	movs	r3, #4
34187dac:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 4U;
34187dae:	2304      	movs	r3, #4
34187db0:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 4U;
34187db2:	2304      	movs	r3, #4
34187db4:	623b      	str	r3, [r7, #32]
      RPOS = 0U;
34187db6:	2300      	movs	r3, #0
34187db8:	61fb      	str	r3, [r7, #28]
      GLEN = 4U;
34187dba:	2304      	movs	r3, #4
34187dbc:	613b      	str	r3, [r7, #16]
      GPOS = 0U;
34187dbe:	2300      	movs	r3, #0
34187dc0:	60fb      	str	r3, [r7, #12]
      BLEN = 4U;
34187dc2:	2304      	movs	r3, #4
34187dc4:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
34187dc6:	2300      	movs	r3, #0
34187dc8:	617b      	str	r3, [r7, #20]
      break;
34187dca:	e013      	b.n	34187df4 <LTDC_SetPredefFormat+0x120>
    case LTDC_PIXEL_FORMAT_AL88:
      PSIZE = 2U;
34187dcc:	2302      	movs	r3, #2
34187dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 8U;
34187dd0:	2308      	movs	r3, #8
34187dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 8U;
34187dd4:	2308      	movs	r3, #8
34187dd6:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 8U;
34187dd8:	2308      	movs	r3, #8
34187dda:	623b      	str	r3, [r7, #32]
      RPOS = 0U;
34187ddc:	2300      	movs	r3, #0
34187dde:	61fb      	str	r3, [r7, #28]
      GLEN = 8U;
34187de0:	2308      	movs	r3, #8
34187de2:	613b      	str	r3, [r7, #16]
      GPOS = 0U;
34187de4:	2300      	movs	r3, #0
34187de6:	60fb      	str	r3, [r7, #12]
      BLEN = 8U;
34187de8:	2308      	movs	r3, #8
34187dea:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
34187dec:	2300      	movs	r3, #0
34187dee:	617b      	str	r3, [r7, #20]
      break;
34187df0:	e000      	b.n	34187df4 <LTDC_SetPredefFormat+0x120>
    default:
      break;
34187df2:	bf00      	nop
  }

  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34187df4:	687a      	ldr	r2, [r7, #4]
34187df6:	683b      	ldr	r3, [r7, #0]
34187df8:	2134      	movs	r1, #52	@ 0x34
34187dfa:	fb01 f303 	mul.w	r3, r1, r3
34187dfe:	4413      	add	r3, r2
34187e00:	3348      	adds	r3, #72	@ 0x48
34187e02:	681b      	ldr	r3, [r3, #0]
34187e04:	2b06      	cmp	r3, #6
34187e06:	d903      	bls.n	34187e10 <LTDC_SetPredefFormat+0x13c>
34187e08:	3b07      	subs	r3, #7
34187e0a:	2b04      	cmp	r3, #4
34187e0c:	d860      	bhi.n	34187ed0 <LTDC_SetPredefFormat+0x1fc>
34187e0e:	e028      	b.n	34187e62 <LTDC_SetPredefFormat+0x18e>
    case LTDC_PIXEL_FORMAT_RGBA8888:
    case LTDC_PIXEL_FORMAT_BGRA8888:
    case LTDC_PIXEL_FORMAT_RGB565:
    case LTDC_PIXEL_FORMAT_BGR565:
    case LTDC_PIXEL_FORMAT_RGB888:
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = (hltdc->LayerCfg[LayerIdx].PixelFormat);
34187e10:	687b      	ldr	r3, [r7, #4]
34187e12:	681b      	ldr	r3, [r3, #0]
34187e14:	461a      	mov	r2, r3
34187e16:	683b      	ldr	r3, [r7, #0]
34187e18:	021b      	lsls	r3, r3, #8
34187e1a:	4413      	add	r3, r2
34187e1c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187e20:	4618      	mov	r0, r3
34187e22:	687a      	ldr	r2, [r7, #4]
34187e24:	683b      	ldr	r3, [r7, #0]
34187e26:	2134      	movs	r1, #52	@ 0x34
34187e28:	fb01 f303 	mul.w	r3, r1, r3
34187e2c:	4413      	add	r3, r2
34187e2e:	3348      	adds	r3, #72	@ 0x48
34187e30:	681b      	ldr	r3, [r3, #0]
34187e32:	61c3      	str	r3, [r0, #28]
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = 0U;
34187e34:	687b      	ldr	r3, [r7, #4]
34187e36:	681b      	ldr	r3, [r3, #0]
34187e38:	461a      	mov	r2, r3
34187e3a:	683b      	ldr	r3, [r7, #0]
34187e3c:	021b      	lsls	r3, r3, #8
34187e3e:	4413      	add	r3, r2
34187e40:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187e44:	461a      	mov	r2, r3
34187e46:	2300      	movs	r3, #0
34187e48:	6753      	str	r3, [r2, #116]	@ 0x74
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = 0U;
34187e4a:	687b      	ldr	r3, [r7, #4]
34187e4c:	681b      	ldr	r3, [r3, #0]
34187e4e:	461a      	mov	r2, r3
34187e50:	683b      	ldr	r3, [r7, #0]
34187e52:	021b      	lsls	r3, r3, #8
34187e54:	4413      	add	r3, r2
34187e56:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187e5a:	461a      	mov	r2, r3
34187e5c:	2300      	movs	r3, #0
34187e5e:	6793      	str	r3, [r2, #120]	@ 0x78
      break;
34187e60:	e037      	b.n	34187ed2 <LTDC_SetPredefFormat+0x1fe>
    case LTDC_PIXEL_FORMAT_ARGB1555:
    case LTDC_PIXEL_FORMAT_ARGB4444:
    case LTDC_PIXEL_FORMAT_L8:
    case LTDC_PIXEL_FORMAT_AL44:
    case LTDC_PIXEL_FORMAT_AL88:
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
34187e62:	687b      	ldr	r3, [r7, #4]
34187e64:	681b      	ldr	r3, [r3, #0]
34187e66:	461a      	mov	r2, r3
34187e68:	683b      	ldr	r3, [r7, #0]
34187e6a:	021b      	lsls	r3, r3, #8
34187e6c:	4413      	add	r3, r2
34187e6e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187e72:	461a      	mov	r2, r3
34187e74:	2307      	movs	r3, #7
34187e76:	61d3      	str	r3, [r2, #28]
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
34187e78:	6a3b      	ldr	r3, [r7, #32]
34187e7a:	039a      	lsls	r2, r3, #14
                                           (RPOS << LTDC_LxFPF0R_RPOS_Pos) +
34187e7c:	69fb      	ldr	r3, [r7, #28]
34187e7e:	025b      	lsls	r3, r3, #9
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
34187e80:	441a      	add	r2, r3
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
34187e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34187e84:	015b      	lsls	r3, r3, #5
                                           (RPOS << LTDC_LxFPF0R_RPOS_Pos) +
34187e86:	441a      	add	r2, r3
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
34187e88:	687b      	ldr	r3, [r7, #4]
34187e8a:	681b      	ldr	r3, [r3, #0]
34187e8c:	4619      	mov	r1, r3
34187e8e:	683b      	ldr	r3, [r7, #0]
34187e90:	021b      	lsls	r3, r3, #8
34187e92:	440b      	add	r3, r1
34187e94:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187e98:	4619      	mov	r1, r3
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
34187e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34187e9c:	4413      	add	r3, r2
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
34187e9e:	674b      	str	r3, [r1, #116]	@ 0x74
                                           APOS;
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
34187ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34187ea2:	049a      	lsls	r2, r3, #18
                                           (BLEN << LTDC_LxFPF1R_BLEN_Pos)  +
34187ea4:	69bb      	ldr	r3, [r7, #24]
34187ea6:	039b      	lsls	r3, r3, #14
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
34187ea8:	441a      	add	r2, r3
                                           (BPOS << LTDC_LxFPF1R_BPOS_Pos) +
34187eaa:	697b      	ldr	r3, [r7, #20]
34187eac:	025b      	lsls	r3, r3, #9
                                           (BLEN << LTDC_LxFPF1R_BLEN_Pos)  +
34187eae:	441a      	add	r2, r3
                                           (GLEN << LTDC_LxFPF1R_GLEN_Pos) +
34187eb0:	693b      	ldr	r3, [r7, #16]
34187eb2:	015b      	lsls	r3, r3, #5
                                           (BPOS << LTDC_LxFPF1R_BPOS_Pos) +
34187eb4:	441a      	add	r2, r3
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
34187eb6:	687b      	ldr	r3, [r7, #4]
34187eb8:	681b      	ldr	r3, [r3, #0]
34187eba:	4619      	mov	r1, r3
34187ebc:	683b      	ldr	r3, [r7, #0]
34187ebe:	021b      	lsls	r3, r3, #8
34187ec0:	440b      	add	r3, r1
34187ec2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34187ec6:	4619      	mov	r1, r3
                                           (GLEN << LTDC_LxFPF1R_GLEN_Pos) +
34187ec8:	68fb      	ldr	r3, [r7, #12]
34187eca:	4413      	add	r3, r2
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
34187ecc:	678b      	str	r3, [r1, #120]	@ 0x78
                                           GPOS;
      break;
34187ece:	e000      	b.n	34187ed2 <LTDC_SetPredefFormat+0x1fe>
    default:
      break;
34187ed0:	bf00      	nop
  }
}
34187ed2:	bf00      	nop
34187ed4:	3734      	adds	r7, #52	@ 0x34
34187ed6:	46bd      	mov	sp, r7
34187ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
34187edc:	4770      	bx	lr
34187ede:	bf00      	nop

34187ee0 <HAL_PWREx_ConfigSupply>:
  * @note: The power supply configuration is not reset by wakeup from Standby mode and
  *        application reset, but only reset by VDD POR.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
34187ee0:	b580      	push	{r7, lr}
34187ee2:	b084      	sub	sp, #16
34187ee4:	af00      	add	r7, sp, #0
34187ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR1, PWR_SUPPLY_CONFIG_MASK, SupplySource);
34187ee8:	4b10      	ldr	r3, [pc, #64]	@ (34187f2c <HAL_PWREx_ConfigSupply+0x4c>)
34187eea:	681b      	ldr	r3, [r3, #0]
34187eec:	f023 0204 	bic.w	r2, r3, #4
34187ef0:	490e      	ldr	r1, [pc, #56]	@ (34187f2c <HAL_PWREx_ConfigSupply+0x4c>)
34187ef2:	687b      	ldr	r3, [r7, #4]
34187ef4:	4313      	orrs	r3, r2
34187ef6:	600b      	str	r3, [r1, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
34187ef8:	f7fa fda0 	bl	34182a3c <HAL_GetTick>
34187efc:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34187efe:	e009      	b.n	34187f14 <HAL_PWREx_ConfigSupply+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
34187f00:	f7fa fd9c 	bl	34182a3c <HAL_GetTick>
34187f04:	4602      	mov	r2, r0
34187f06:	68fb      	ldr	r3, [r7, #12]
34187f08:	1ad3      	subs	r3, r2, r3
34187f0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34187f0e:	d901      	bls.n	34187f14 <HAL_PWREx_ConfigSupply+0x34>
    {
      return HAL_ERROR;
34187f10:	2301      	movs	r3, #1
34187f12:	e006      	b.n	34187f22 <HAL_PWREx_ConfigSupply+0x42>
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34187f14:	4b05      	ldr	r3, [pc, #20]	@ (34187f2c <HAL_PWREx_ConfigSupply+0x4c>)
34187f16:	6a1b      	ldr	r3, [r3, #32]
34187f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34187f1c:	2b00      	cmp	r3, #0
34187f1e:	d0ef      	beq.n	34187f00 <HAL_PWREx_ConfigSupply+0x20>
    }
  }

  return HAL_OK;
34187f20:	2300      	movs	r3, #0
}
34187f22:	4618      	mov	r0, r3
34187f24:	3710      	adds	r7, #16
34187f26:	46bd      	mov	sp, r7
34187f28:	bd80      	pop	{r7, pc}
34187f2a:	bf00      	nop
34187f2c:	56024800 	.word	0x56024800

34187f30 <HAL_PWREx_EnableVddIO2>:
  * @brief  Enable VDDIO2 supply valid.
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
34187f30:	b480      	push	{r7}
34187f32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
34187f34:	4b05      	ldr	r3, [pc, #20]	@ (34187f4c <HAL_PWREx_EnableVddIO2+0x1c>)
34187f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34187f38:	4a04      	ldr	r2, [pc, #16]	@ (34187f4c <HAL_PWREx_EnableVddIO2+0x1c>)
34187f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34187f3e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34187f40:	bf00      	nop
34187f42:	46bd      	mov	sp, r7
34187f44:	f85d 7b04 	ldr.w	r7, [sp], #4
34187f48:	4770      	bx	lr
34187f4a:	bf00      	nop
34187f4c:	56024800 	.word	0x56024800

34187f50 <HAL_PWREx_EnableVddIO4>:
  * @brief  Enable VDDIO4 supply valid.
  * @note   Setting this bit is mandatory to use PB[9,8], PC[12:6], and PD[2] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO4(void)
{
34187f50:	b480      	push	{r7}
34187f52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
34187f54:	4b05      	ldr	r3, [pc, #20]	@ (34187f6c <HAL_PWREx_EnableVddIO4+0x1c>)
34187f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34187f58:	4a04      	ldr	r2, [pc, #16]	@ (34187f6c <HAL_PWREx_EnableVddIO4+0x1c>)
34187f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34187f5e:	6353      	str	r3, [r2, #52]	@ 0x34
}
34187f60:	bf00      	nop
34187f62:	46bd      	mov	sp, r7
34187f64:	f85d 7b04 	ldr.w	r7, [sp], #4
34187f68:	4770      	bx	lr
34187f6a:	bf00      	nop
34187f6c:	56024800 	.word	0x56024800

34187f70 <HAL_RAMCFG_EnableAXISRAM>:
  *                   contains the configuration information for the
  *                   specified RAMCFG instance.
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
34187f70:	b480      	push	{r7}
34187f72:	b083      	sub	sp, #12
34187f74:	af00      	add	r7, sp, #0
34187f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
34187f78:	687b      	ldr	r3, [r7, #4]
34187f7a:	681b      	ldr	r3, [r3, #0]
34187f7c:	681a      	ldr	r2, [r3, #0]
34187f7e:	687b      	ldr	r3, [r7, #4]
34187f80:	681b      	ldr	r3, [r3, #0]
34187f82:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
34187f86:	601a      	str	r2, [r3, #0]
}
34187f88:	bf00      	nop
34187f8a:	370c      	adds	r7, #12
34187f8c:	46bd      	mov	sp, r7
34187f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187f92:	4770      	bx	lr

34187f94 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll SR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
34187f94:	b480      	push	{r7}
34187f96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34187f98:	4b06      	ldr	r3, [pc, #24]	@ (34187fb4 <LL_RCC_HSE_IsReady+0x20>)
34187f9a:	685b      	ldr	r3, [r3, #4]
34187f9c:	f003 0310 	and.w	r3, r3, #16
34187fa0:	2b00      	cmp	r3, #0
34187fa2:	d001      	beq.n	34187fa8 <LL_RCC_HSE_IsReady+0x14>
34187fa4:	2301      	movs	r3, #1
34187fa6:	e000      	b.n	34187faa <LL_RCC_HSE_IsReady+0x16>
34187fa8:	2300      	movs	r3, #0
}
34187faa:	4618      	mov	r0, r3
34187fac:	46bd      	mov	sp, r7
34187fae:	f85d 7b04 	ldr.w	r7, [sp], #4
34187fb2:	4770      	bx	lr
34187fb4:	56028000 	.word	0x56028000

34187fb8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CSR          HSIONS        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
34187fb8:	b480      	push	{r7}
34187fba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34187fbc:	4b04      	ldr	r3, [pc, #16]	@ (34187fd0 <LL_RCC_HSI_Enable+0x18>)
34187fbe:	2208      	movs	r2, #8
34187fc0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34187fc4:	bf00      	nop
34187fc6:	46bd      	mov	sp, r7
34187fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34187fcc:	4770      	bx	lr
34187fce:	bf00      	nop
34187fd0:	56028000 	.word	0x56028000

34187fd4 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CCR          HSIONC        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
34187fd4:	b480      	push	{r7}
34187fd6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34187fd8:	4b05      	ldr	r3, [pc, #20]	@ (34187ff0 <LL_RCC_HSI_Disable+0x1c>)
34187fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34187fde:	461a      	mov	r2, r3
34187fe0:	2308      	movs	r3, #8
34187fe2:	6013      	str	r3, [r2, #0]
}
34187fe4:	bf00      	nop
34187fe6:	46bd      	mov	sp, r7
34187fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
34187fec:	4770      	bx	lr
34187fee:	bf00      	nop
34187ff0:	56028000 	.word	0x56028000

34187ff4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
34187ff4:	b480      	push	{r7}
34187ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34187ff8:	4b06      	ldr	r3, [pc, #24]	@ (34188014 <LL_RCC_HSI_IsReady+0x20>)
34187ffa:	685b      	ldr	r3, [r3, #4]
34187ffc:	f003 0308 	and.w	r3, r3, #8
34188000:	2b00      	cmp	r3, #0
34188002:	d001      	beq.n	34188008 <LL_RCC_HSI_IsReady+0x14>
34188004:	2301      	movs	r3, #1
34188006:	e000      	b.n	3418800a <LL_RCC_HSI_IsReady+0x16>
34188008:	2300      	movs	r3, #0
}
3418800a:	4618      	mov	r0, r3
3418800c:	46bd      	mov	sp, r7
3418800e:	f85d 7b04 	ldr.w	r7, [sp], #4
34188012:	4770      	bx	lr
34188014:	56028000 	.word	0x56028000

34188018 <LL_RCC_HSI_SetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
34188018:	b480      	push	{r7}
3418801a:	b083      	sub	sp, #12
3418801c:	af00      	add	r7, sp, #0
3418801e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34188020:	4b06      	ldr	r3, [pc, #24]	@ (3418803c <LL_RCC_HSI_SetDivider+0x24>)
34188022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34188024:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
34188028:	4904      	ldr	r1, [pc, #16]	@ (3418803c <LL_RCC_HSI_SetDivider+0x24>)
3418802a:	687b      	ldr	r3, [r7, #4]
3418802c:	4313      	orrs	r3, r2
3418802e:	648b      	str	r3, [r1, #72]	@ 0x48
}
34188030:	bf00      	nop
34188032:	370c      	adds	r7, #12
34188034:	46bd      	mov	sp, r7
34188036:	f85d 7b04 	ldr.w	r7, [sp], #4
3418803a:	4770      	bx	lr
3418803c:	56028000 	.word	0x56028000

34188040 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_2
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
34188040:	b480      	push	{r7}
34188042:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34188044:	4b04      	ldr	r3, [pc, #16]	@ (34188058 <LL_RCC_HSI_GetDivider+0x18>)
34188046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34188048:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
3418804c:	4618      	mov	r0, r3
3418804e:	46bd      	mov	sp, r7
34188050:	f85d 7b04 	ldr.w	r7, [sp], #4
34188054:	4770      	bx	lr
34188056:	bf00      	nop
34188058:	56028000 	.word	0x56028000

3418805c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll HSICFGR      HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value This parameter can be a value between 0 and 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
3418805c:	b480      	push	{r7}
3418805e:	b083      	sub	sp, #12
34188060:	af00      	add	r7, sp, #0
34188062:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34188064:	4b07      	ldr	r3, [pc, #28]	@ (34188084 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34188066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34188068:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
3418806c:	687b      	ldr	r3, [r7, #4]
3418806e:	041b      	lsls	r3, r3, #16
34188070:	4904      	ldr	r1, [pc, #16]	@ (34188084 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34188072:	4313      	orrs	r3, r2
34188074:	648b      	str	r3, [r1, #72]	@ 0x48
}
34188076:	bf00      	nop
34188078:	370c      	adds	r7, #12
3418807a:	46bd      	mov	sp, r7
3418807c:	f85d 7b04 	ldr.w	r7, [sp], #4
34188080:	4770      	bx	lr
34188082:	bf00      	nop
34188084:	56028000 	.word	0x56028000

34188088 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CSR          MSIONS        LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
34188088:	b480      	push	{r7}
3418808a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
3418808c:	4b04      	ldr	r3, [pc, #16]	@ (341880a0 <LL_RCC_MSI_Enable+0x18>)
3418808e:	2204      	movs	r2, #4
34188090:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34188094:	bf00      	nop
34188096:	46bd      	mov	sp, r7
34188098:	f85d 7b04 	ldr.w	r7, [sp], #4
3418809c:	4770      	bx	lr
3418809e:	bf00      	nop
341880a0:	56028000 	.word	0x56028000

341880a4 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CCR          MSIONC        LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
341880a4:	b480      	push	{r7}
341880a6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
341880a8:	4b05      	ldr	r3, [pc, #20]	@ (341880c0 <LL_RCC_MSI_Disable+0x1c>)
341880aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341880ae:	461a      	mov	r2, r3
341880b0:	2304      	movs	r3, #4
341880b2:	6013      	str	r3, [r2, #0]
}
341880b4:	bf00      	nop
341880b6:	46bd      	mov	sp, r7
341880b8:	f85d 7b04 	ldr.w	r7, [sp], #4
341880bc:	4770      	bx	lr
341880be:	bf00      	nop
341880c0:	56028000 	.word	0x56028000

341880c4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI clock is ready
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
341880c4:	b480      	push	{r7}
341880c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
341880c8:	4b06      	ldr	r3, [pc, #24]	@ (341880e4 <LL_RCC_MSI_IsReady+0x20>)
341880ca:	685b      	ldr	r3, [r3, #4]
341880cc:	f003 0304 	and.w	r3, r3, #4
341880d0:	2b00      	cmp	r3, #0
341880d2:	d001      	beq.n	341880d8 <LL_RCC_MSI_IsReady+0x14>
341880d4:	2301      	movs	r3, #1
341880d6:	e000      	b.n	341880da <LL_RCC_MSI_IsReady+0x16>
341880d8:	2300      	movs	r3, #0
}
341880da:	4618      	mov	r0, r3
341880dc:	46bd      	mov	sp, r7
341880de:	f85d 7b04 	ldr.w	r7, [sp], #4
341880e2:	4770      	bx	lr
341880e4:	56028000 	.word	0x56028000

341880e8 <LL_RCC_MSI_SetFrequency>:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_MSI_SetFrequency(uint32_t Value)
{
341880e8:	b480      	push	{r7}
341880ea:	b083      	sub	sp, #12
341880ec:	af00      	add	r7, sp, #0
341880ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
341880f0:	4b06      	ldr	r3, [pc, #24]	@ (3418810c <LL_RCC_MSI_SetFrequency+0x24>)
341880f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341880f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
341880f8:	4904      	ldr	r1, [pc, #16]	@ (3418810c <LL_RCC_MSI_SetFrequency+0x24>)
341880fa:	687b      	ldr	r3, [r7, #4]
341880fc:	4313      	orrs	r3, r2
341880fe:	644b      	str	r3, [r1, #68]	@ 0x44
}
34188100:	bf00      	nop
34188102:	370c      	adds	r7, #12
34188104:	46bd      	mov	sp, r7
34188106:	f85d 7b04 	ldr.w	r7, [sp], #4
3418810a:	4770      	bx	lr
3418810c:	56028000 	.word	0x56028000

34188110 <LL_RCC_MSI_GetFrequency>:
  * @retval can be one of the following values:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetFrequency(void)
{
34188110:	b480      	push	{r7}
34188112:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34188114:	4b04      	ldr	r3, [pc, #16]	@ (34188128 <LL_RCC_MSI_GetFrequency+0x18>)
34188116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34188118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
3418811c:	4618      	mov	r0, r3
3418811e:	46bd      	mov	sp, r7
34188120:	f85d 7b04 	ldr.w	r7, [sp], #4
34188124:	4770      	bx	lr
34188126:	bf00      	nop
34188128:	56028000 	.word	0x56028000

3418812c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll MSICFGR      MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value can be a value between 0 and 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
3418812c:	b480      	push	{r7}
3418812e:	b083      	sub	sp, #12
34188130:	af00      	add	r7, sp, #0
34188132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34188134:	4b07      	ldr	r3, [pc, #28]	@ (34188154 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34188136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34188138:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
3418813c:	687b      	ldr	r3, [r7, #4]
3418813e:	041b      	lsls	r3, r3, #16
34188140:	4904      	ldr	r1, [pc, #16]	@ (34188154 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34188142:	4313      	orrs	r3, r2
34188144:	644b      	str	r3, [r1, #68]	@ 0x44
}
34188146:	bf00      	nop
34188148:	370c      	adds	r7, #12
3418814a:	46bd      	mov	sp, r7
3418814c:	f85d 7b04 	ldr.w	r7, [sp], #4
34188150:	4770      	bx	lr
34188152:	bf00      	nop
34188154:	56028000 	.word	0x56028000

34188158 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll SR           LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
34188158:	b480      	push	{r7}
3418815a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
3418815c:	4b06      	ldr	r3, [pc, #24]	@ (34188178 <LL_RCC_LSE_IsReady+0x20>)
3418815e:	685b      	ldr	r3, [r3, #4]
34188160:	f003 0302 	and.w	r3, r3, #2
34188164:	2b00      	cmp	r3, #0
34188166:	d001      	beq.n	3418816c <LL_RCC_LSE_IsReady+0x14>
34188168:	2301      	movs	r3, #1
3418816a:	e000      	b.n	3418816e <LL_RCC_LSE_IsReady+0x16>
3418816c:	2300      	movs	r3, #0
}
3418816e:	4618      	mov	r0, r3
34188170:	46bd      	mov	sp, r7
34188172:	f85d 7b04 	ldr.w	r7, [sp], #4
34188176:	4770      	bx	lr
34188178:	56028000 	.word	0x56028000

3418817c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSIONS        LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
3418817c:	b480      	push	{r7}
3418817e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34188180:	4b04      	ldr	r3, [pc, #16]	@ (34188194 <LL_RCC_LSI_Enable+0x18>)
34188182:	2201      	movs	r2, #1
34188184:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34188188:	bf00      	nop
3418818a:	46bd      	mov	sp, r7
3418818c:	f85d 7b04 	ldr.w	r7, [sp], #4
34188190:	4770      	bx	lr
34188192:	bf00      	nop
34188194:	56028000 	.word	0x56028000

34188198 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CCR          LSIONC        LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
34188198:	b480      	push	{r7}
3418819a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
3418819c:	4b05      	ldr	r3, [pc, #20]	@ (341881b4 <LL_RCC_LSI_Disable+0x1c>)
3418819e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341881a2:	461a      	mov	r2, r3
341881a4:	2301      	movs	r3, #1
341881a6:	6013      	str	r3, [r2, #0]
}
341881a8:	bf00      	nop
341881aa:	46bd      	mov	sp, r7
341881ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341881b0:	4770      	bx	lr
341881b2:	bf00      	nop
341881b4:	56028000 	.word	0x56028000

341881b8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll SR           LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
341881b8:	b480      	push	{r7}
341881ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
341881bc:	4b04      	ldr	r3, [pc, #16]	@ (341881d0 <LL_RCC_LSI_IsReady+0x18>)
341881be:	685b      	ldr	r3, [r3, #4]
341881c0:	f003 0301 	and.w	r3, r3, #1
}
341881c4:	4618      	mov	r0, r3
341881c6:	46bd      	mov	sp, r7
341881c8:	f85d 7b04 	ldr.w	r7, [sp], #4
341881cc:	4770      	bx	lr
341881ce:	bf00      	nop
341881d0:	56028000 	.word	0x56028000

341881d4 <LL_RCC_GetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_IC1
  */
__STATIC_INLINE uint32_t LL_RCC_GetCpuClkSource(void)
{
341881d4:	b480      	push	{r7}
341881d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
341881d8:	4b04      	ldr	r3, [pc, #16]	@ (341881ec <LL_RCC_GetCpuClkSource+0x18>)
341881da:	6a1b      	ldr	r3, [r3, #32]
341881dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
341881e0:	4618      	mov	r0, r3
341881e2:	46bd      	mov	sp, r7
341881e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341881e8:	4770      	bx	lr
341881ea:	bf00      	nop
341881ec:	56028000 	.word	0x56028000

341881f0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
341881f0:	b480      	push	{r7}
341881f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
341881f4:	4b04      	ldr	r3, [pc, #16]	@ (34188208 <LL_RCC_GetSysClkSource+0x18>)
341881f6:	6a1b      	ldr	r3, [r3, #32]
341881f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341881fc:	4618      	mov	r0, r3
341881fe:	46bd      	mov	sp, r7
34188200:	f85d 7b04 	ldr.w	r7, [sp], #4
34188204:	4770      	bx	lr
34188206:	bf00      	nop
34188208:	56028000 	.word	0x56028000

3418820c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_32
  *         @arg @ref LL_RCC_AHB_DIV_64
  *         @arg @ref LL_RCC_AHB_DIV_128
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
3418820c:	b480      	push	{r7}
3418820e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34188210:	4b04      	ldr	r3, [pc, #16]	@ (34188224 <LL_RCC_GetAHBPrescaler+0x18>)
34188212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188214:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
34188218:	4618      	mov	r0, r3
3418821a:	46bd      	mov	sp, r7
3418821c:	f85d 7b04 	ldr.w	r7, [sp], #4
34188220:	4770      	bx	lr
34188222:	bf00      	nop
34188224:	56028000 	.word	0x56028000

34188228 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_32
  *         @arg @ref LL_RCC_APB1_DIV_64
  *         @arg @ref LL_RCC_APB1_DIV_128
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
34188228:	b480      	push	{r7}
3418822a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3418822c:	4b04      	ldr	r3, [pc, #16]	@ (34188240 <LL_RCC_GetAPB1Prescaler+0x18>)
3418822e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188230:	f003 0307 	and.w	r3, r3, #7
}
34188234:	4618      	mov	r0, r3
34188236:	46bd      	mov	sp, r7
34188238:	f85d 7b04 	ldr.w	r7, [sp], #4
3418823c:	4770      	bx	lr
3418823e:	bf00      	nop
34188240:	56028000 	.word	0x56028000

34188244 <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
34188244:	b480      	push	{r7}
34188246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34188248:	4b04      	ldr	r3, [pc, #16]	@ (3418825c <LL_RCC_PLL1_GetSource+0x18>)
3418824a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418824e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34188252:	4618      	mov	r0, r3
34188254:	46bd      	mov	sp, r7
34188256:	f85d 7b04 	ldr.w	r7, [sp], #4
3418825a:	4770      	bx	lr
3418825c:	56028000 	.word	0x56028000

34188260 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
34188260:	b480      	push	{r7}
34188262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34188264:	4b07      	ldr	r3, [pc, #28]	@ (34188284 <LL_RCC_PLL1_IsReady+0x24>)
34188266:	685b      	ldr	r3, [r3, #4]
34188268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418826c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34188270:	d101      	bne.n	34188276 <LL_RCC_PLL1_IsReady+0x16>
34188272:	2301      	movs	r3, #1
34188274:	e000      	b.n	34188278 <LL_RCC_PLL1_IsReady+0x18>
34188276:	2300      	movs	r3, #0
}
34188278:	4618      	mov	r0, r3
3418827a:	46bd      	mov	sp, r7
3418827c:	f85d 7b04 	ldr.w	r7, [sp], #4
34188280:	4770      	bx	lr
34188282:	bf00      	nop
34188284:	56028000 	.word	0x56028000

34188288 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
34188288:	b480      	push	{r7}
3418828a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3418828c:	4b07      	ldr	r3, [pc, #28]	@ (341882ac <LL_RCC_PLL1_IsEnabledBypass+0x24>)
3418828e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34188292:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34188296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418829a:	d101      	bne.n	341882a0 <LL_RCC_PLL1_IsEnabledBypass+0x18>
3418829c:	2301      	movs	r3, #1
3418829e:	e000      	b.n	341882a2 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
341882a0:	2300      	movs	r3, #0
}
341882a2:	4618      	mov	r0, r3
341882a4:	46bd      	mov	sp, r7
341882a6:	f85d 7b04 	ldr.w	r7, [sp], #4
341882aa:	4770      	bx	lr
341882ac:	56028000 	.word	0x56028000

341882b0 <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
341882b0:	b480      	push	{r7}
341882b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
341882b4:	4b04      	ldr	r3, [pc, #16]	@ (341882c8 <LL_RCC_PLL2_GetSource+0x18>)
341882b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341882ba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341882be:	4618      	mov	r0, r3
341882c0:	46bd      	mov	sp, r7
341882c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341882c6:	4770      	bx	lr
341882c8:	56028000 	.word	0x56028000

341882cc <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
341882cc:	b480      	push	{r7}
341882ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
341882d0:	4b07      	ldr	r3, [pc, #28]	@ (341882f0 <LL_RCC_PLL2_IsReady+0x24>)
341882d2:	685b      	ldr	r3, [r3, #4]
341882d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341882d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341882dc:	d101      	bne.n	341882e2 <LL_RCC_PLL2_IsReady+0x16>
341882de:	2301      	movs	r3, #1
341882e0:	e000      	b.n	341882e4 <LL_RCC_PLL2_IsReady+0x18>
341882e2:	2300      	movs	r3, #0
}
341882e4:	4618      	mov	r0, r3
341882e6:	46bd      	mov	sp, r7
341882e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341882ec:	4770      	bx	lr
341882ee:	bf00      	nop
341882f0:	56028000 	.word	0x56028000

341882f4 <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
341882f4:	b480      	push	{r7}
341882f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
341882f8:	4b07      	ldr	r3, [pc, #28]	@ (34188318 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
341882fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341882fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34188302:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34188306:	d101      	bne.n	3418830c <LL_RCC_PLL2_IsEnabledBypass+0x18>
34188308:	2301      	movs	r3, #1
3418830a:	e000      	b.n	3418830e <LL_RCC_PLL2_IsEnabledBypass+0x1a>
3418830c:	2300      	movs	r3, #0
}
3418830e:	4618      	mov	r0, r3
34188310:	46bd      	mov	sp, r7
34188312:	f85d 7b04 	ldr.w	r7, [sp], #4
34188316:	4770      	bx	lr
34188318:	56028000 	.word	0x56028000

3418831c <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
3418831c:	b480      	push	{r7}
3418831e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34188320:	4b04      	ldr	r3, [pc, #16]	@ (34188334 <LL_RCC_PLL3_GetSource+0x18>)
34188322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34188326:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418832a:	4618      	mov	r0, r3
3418832c:	46bd      	mov	sp, r7
3418832e:	f85d 7b04 	ldr.w	r7, [sp], #4
34188332:	4770      	bx	lr
34188334:	56028000 	.word	0x56028000

34188338 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
34188338:	b480      	push	{r7}
3418833a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418833c:	4b07      	ldr	r3, [pc, #28]	@ (3418835c <LL_RCC_PLL3_IsReady+0x24>)
3418833e:	685b      	ldr	r3, [r3, #4]
34188340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34188344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34188348:	d101      	bne.n	3418834e <LL_RCC_PLL3_IsReady+0x16>
3418834a:	2301      	movs	r3, #1
3418834c:	e000      	b.n	34188350 <LL_RCC_PLL3_IsReady+0x18>
3418834e:	2300      	movs	r3, #0
}
34188350:	4618      	mov	r0, r3
34188352:	46bd      	mov	sp, r7
34188354:	f85d 7b04 	ldr.w	r7, [sp], #4
34188358:	4770      	bx	lr
3418835a:	bf00      	nop
3418835c:	56028000 	.word	0x56028000

34188360 <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
34188360:	b480      	push	{r7}
34188362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34188364:	4b07      	ldr	r3, [pc, #28]	@ (34188384 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34188366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418836a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418836e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34188372:	d101      	bne.n	34188378 <LL_RCC_PLL3_IsEnabledBypass+0x18>
34188374:	2301      	movs	r3, #1
34188376:	e000      	b.n	3418837a <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34188378:	2300      	movs	r3, #0
}
3418837a:	4618      	mov	r0, r3
3418837c:	46bd      	mov	sp, r7
3418837e:	f85d 7b04 	ldr.w	r7, [sp], #4
34188382:	4770      	bx	lr
34188384:	56028000 	.word	0x56028000

34188388 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
34188388:	b480      	push	{r7}
3418838a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3418838c:	4b04      	ldr	r3, [pc, #16]	@ (341883a0 <LL_RCC_PLL4_GetSource+0x18>)
3418838e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34188392:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34188396:	4618      	mov	r0, r3
34188398:	46bd      	mov	sp, r7
3418839a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418839e:	4770      	bx	lr
341883a0:	56028000 	.word	0x56028000

341883a4 <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
341883a4:	b480      	push	{r7}
341883a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
341883a8:	4b07      	ldr	r3, [pc, #28]	@ (341883c8 <LL_RCC_PLL4_IsReady+0x24>)
341883aa:	685b      	ldr	r3, [r3, #4]
341883ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341883b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
341883b4:	d101      	bne.n	341883ba <LL_RCC_PLL4_IsReady+0x16>
341883b6:	2301      	movs	r3, #1
341883b8:	e000      	b.n	341883bc <LL_RCC_PLL4_IsReady+0x18>
341883ba:	2300      	movs	r3, #0
}
341883bc:	4618      	mov	r0, r3
341883be:	46bd      	mov	sp, r7
341883c0:	f85d 7b04 	ldr.w	r7, [sp], #4
341883c4:	4770      	bx	lr
341883c6:	bf00      	nop
341883c8:	56028000 	.word	0x56028000

341883cc <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
341883cc:	b480      	push	{r7}
341883ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
341883d0:	4b07      	ldr	r3, [pc, #28]	@ (341883f0 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
341883d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341883d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341883da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341883de:	d101      	bne.n	341883e4 <LL_RCC_PLL4_IsEnabledBypass+0x18>
341883e0:	2301      	movs	r3, #1
341883e2:	e000      	b.n	341883e6 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
341883e4:	2300      	movs	r3, #0
}
341883e6:	4618      	mov	r0, r3
341883e8:	46bd      	mov	sp, r7
341883ea:	f85d 7b04 	ldr.w	r7, [sp], #4
341883ee:	4770      	bx	lr
341883f0:	56028000 	.word	0x56028000

341883f4 <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
341883f4:	b480      	push	{r7}
341883f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
341883f8:	4b04      	ldr	r3, [pc, #16]	@ (3418840c <LL_RCC_IC1_Enable+0x18>)
341883fa:	2201      	movs	r2, #1
341883fc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34188400:	bf00      	nop
34188402:	46bd      	mov	sp, r7
34188404:	f85d 7b04 	ldr.w	r7, [sp], #4
34188408:	4770      	bx	lr
3418840a:	bf00      	nop
3418840c:	56028000 	.word	0x56028000

34188410 <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
34188410:	b480      	push	{r7}
34188412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34188414:	4b04      	ldr	r3, [pc, #16]	@ (34188428 <LL_RCC_IC1_GetSource+0x18>)
34188416:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418841a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418841e:	4618      	mov	r0, r3
34188420:	46bd      	mov	sp, r7
34188422:	f85d 7b04 	ldr.w	r7, [sp], #4
34188426:	4770      	bx	lr
34188428:	56028000 	.word	0x56028000

3418842c <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
3418842c:	b480      	push	{r7}
3418842e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34188430:	4b05      	ldr	r3, [pc, #20]	@ (34188448 <LL_RCC_IC1_GetDivider+0x1c>)
34188432:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34188436:	0c1b      	lsrs	r3, r3, #16
34188438:	b2db      	uxtb	r3, r3
3418843a:	3301      	adds	r3, #1
}
3418843c:	4618      	mov	r0, r3
3418843e:	46bd      	mov	sp, r7
34188440:	f85d 7b04 	ldr.w	r7, [sp], #4
34188444:	4770      	bx	lr
34188446:	bf00      	nop
34188448:	56028000 	.word	0x56028000

3418844c <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
3418844c:	b480      	push	{r7}
3418844e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34188450:	4b04      	ldr	r3, [pc, #16]	@ (34188464 <LL_RCC_IC2_GetSource+0x18>)
34188452:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34188456:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418845a:	4618      	mov	r0, r3
3418845c:	46bd      	mov	sp, r7
3418845e:	f85d 7b04 	ldr.w	r7, [sp], #4
34188462:	4770      	bx	lr
34188464:	56028000 	.word	0x56028000

34188468 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
34188468:	b480      	push	{r7}
3418846a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
3418846c:	4b05      	ldr	r3, [pc, #20]	@ (34188484 <LL_RCC_IC2_GetDivider+0x1c>)
3418846e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34188472:	0c1b      	lsrs	r3, r3, #16
34188474:	b2db      	uxtb	r3, r3
34188476:	3301      	adds	r3, #1
}
34188478:	4618      	mov	r0, r3
3418847a:	46bd      	mov	sp, r7
3418847c:	f85d 7b04 	ldr.w	r7, [sp], #4
34188480:	4770      	bx	lr
34188482:	bf00      	nop
34188484:	56028000 	.word	0x56028000

34188488 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
34188488:	b480      	push	{r7}
3418848a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3418848c:	4b04      	ldr	r3, [pc, #16]	@ (341884a0 <LL_RCC_IC6_GetSource+0x18>)
3418848e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34188492:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34188496:	4618      	mov	r0, r3
34188498:	46bd      	mov	sp, r7
3418849a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418849e:	4770      	bx	lr
341884a0:	56028000 	.word	0x56028000

341884a4 <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
341884a4:	b480      	push	{r7}
341884a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
341884a8:	4b04      	ldr	r3, [pc, #16]	@ (341884bc <LL_RCC_IC11_GetSource+0x18>)
341884aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
341884ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341884b2:	4618      	mov	r0, r3
341884b4:	46bd      	mov	sp, r7
341884b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341884ba:	4770      	bx	lr
341884bc:	56028000 	.word	0x56028000

341884c0 <HAL_RCC_OscConfig>:
  * @note   This function activates HSE but does not wait for the startup time defined in the datasheet.
  *         This must be ensured by the application when the HSE is selected as PLL source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
341884c0:	b580      	push	{r7, lr}
341884c2:	b0a2      	sub	sp, #136	@ 0x88
341884c4:	af00      	add	r7, sp, #0
341884c6:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
341884c8:	687b      	ldr	r3, [r7, #4]
341884ca:	2b00      	cmp	r3, #0
341884cc:	d101      	bne.n	341884d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
341884ce:	2301      	movs	r3, #1
341884d0:	e3d1      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  cpuclksrc = LL_RCC_GetCpuClkSource();
341884d2:	f7ff fe7f 	bl	341881d4 <LL_RCC_GetCpuClkSource>
341884d6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
341884da:	f7ff fe89 	bl	341881f0 <LL_RCC_GetSysClkSource>
341884de:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
341884e2:	f7ff feaf 	bl	34188244 <LL_RCC_PLL1_GetSource>
341884e6:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
341884e8:	f7ff fee2 	bl	341882b0 <LL_RCC_PLL2_GetSource>
341884ec:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
341884ee:	f7ff ff15 	bl	3418831c <LL_RCC_PLL3_GetSource>
341884f2:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
341884f4:	f7ff ff48 	bl	34188388 <LL_RCC_PLL4_GetSource>
341884f8:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
341884fa:	4b91      	ldr	r3, [pc, #580]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
341884fc:	685b      	ldr	r3, [r3, #4]
341884fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34188500:	687b      	ldr	r3, [r7, #4]
34188502:	681b      	ldr	r3, [r3, #0]
34188504:	f003 0301 	and.w	r3, r3, #1
34188508:	2b00      	cmp	r3, #0
3418850a:	f000 80a8 	beq.w	3418865e <HAL_RCC_OscConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3418850e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34188512:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34188516:	d028      	beq.n	3418856a <HAL_RCC_OscConfig+0xaa>
34188518:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418851c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188520:	d023      	beq.n	3418856a <HAL_RCC_OscConfig+0xaa>
34188522:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34188524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188528:	d104      	bne.n	34188534 <HAL_RCC_OscConfig+0x74>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418852a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418852c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34188530:	2b00      	cmp	r3, #0
34188532:	d11a      	bne.n	3418856a <HAL_RCC_OscConfig+0xaa>
34188534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34188536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418853a:	d104      	bne.n	34188546 <HAL_RCC_OscConfig+0x86>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3418853c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418853e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34188542:	2b00      	cmp	r3, #0
34188544:	d111      	bne.n	3418856a <HAL_RCC_OscConfig+0xaa>
34188546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34188548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418854c:	d104      	bne.n	34188558 <HAL_RCC_OscConfig+0x98>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418854e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34188550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34188554:	2b00      	cmp	r3, #0
34188556:	d108      	bne.n	3418856a <HAL_RCC_OscConfig+0xaa>
34188558:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
3418855a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418855e:	d10a      	bne.n	34188576 <HAL_RCC_OscConfig+0xb6>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34188560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34188562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34188566:	2b00      	cmp	r3, #0
34188568:	d005      	beq.n	34188576 <HAL_RCC_OscConfig+0xb6>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
3418856a:	687b      	ldr	r3, [r7, #4]
3418856c:	685b      	ldr	r3, [r3, #4]
3418856e:	2b00      	cmp	r3, #0
34188570:	d175      	bne.n	3418865e <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
34188572:	2301      	movs	r3, #1
34188574:	e37f      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34188576:	687b      	ldr	r3, [r7, #4]
34188578:	685b      	ldr	r3, [r3, #4]
3418857a:	2b10      	cmp	r3, #16
3418857c:	d104      	bne.n	34188588 <HAL_RCC_OscConfig+0xc8>
3418857e:	4b70      	ldr	r3, [pc, #448]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
34188580:	2210      	movs	r2, #16
34188582:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34188586:	e043      	b.n	34188610 <HAL_RCC_OscConfig+0x150>
34188588:	687b      	ldr	r3, [r7, #4]
3418858a:	685b      	ldr	r3, [r3, #4]
3418858c:	2b00      	cmp	r3, #0
3418858e:	d10c      	bne.n	341885aa <HAL_RCC_OscConfig+0xea>
34188590:	4b6b      	ldr	r3, [pc, #428]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
34188592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34188596:	461a      	mov	r2, r3
34188598:	2310      	movs	r3, #16
3418859a:	6013      	str	r3, [r2, #0]
3418859c:	4b68      	ldr	r3, [pc, #416]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
3418859e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341885a0:	4a67      	ldr	r2, [pc, #412]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
341885a2:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
341885a6:	6553      	str	r3, [r2, #84]	@ 0x54
341885a8:	e032      	b.n	34188610 <HAL_RCC_OscConfig+0x150>
341885aa:	687b      	ldr	r3, [r7, #4]
341885ac:	685b      	ldr	r3, [r3, #4]
341885ae:	f248 0210 	movw	r2, #32784	@ 0x8010
341885b2:	4293      	cmp	r3, r2
341885b4:	d110      	bne.n	341885d8 <HAL_RCC_OscConfig+0x118>
341885b6:	4b62      	ldr	r3, [pc, #392]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
341885b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341885ba:	4a61      	ldr	r2, [pc, #388]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
341885bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341885c0:	6553      	str	r3, [r2, #84]	@ 0x54
341885c2:	4b5f      	ldr	r3, [pc, #380]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
341885c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341885c6:	4a5e      	ldr	r2, [pc, #376]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
341885c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341885cc:	6553      	str	r3, [r2, #84]	@ 0x54
341885ce:	4b5c      	ldr	r3, [pc, #368]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
341885d0:	2210      	movs	r2, #16
341885d2:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341885d6:	e01b      	b.n	34188610 <HAL_RCC_OscConfig+0x150>
341885d8:	687b      	ldr	r3, [r7, #4]
341885da:	685b      	ldr	r3, [r3, #4]
341885dc:	4a59      	ldr	r2, [pc, #356]	@ (34188744 <HAL_RCC_OscConfig+0x284>)
341885de:	4293      	cmp	r3, r2
341885e0:	d10a      	bne.n	341885f8 <HAL_RCC_OscConfig+0x138>
341885e2:	4b57      	ldr	r3, [pc, #348]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
341885e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341885e6:	4a56      	ldr	r2, [pc, #344]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
341885e8:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
341885ec:	6553      	str	r3, [r2, #84]	@ 0x54
341885ee:	4b54      	ldr	r3, [pc, #336]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
341885f0:	2210      	movs	r2, #16
341885f2:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341885f6:	e00b      	b.n	34188610 <HAL_RCC_OscConfig+0x150>
341885f8:	4b51      	ldr	r3, [pc, #324]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
341885fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341885fe:	461a      	mov	r2, r3
34188600:	2310      	movs	r3, #16
34188602:	6013      	str	r3, [r2, #0]
34188604:	4b4e      	ldr	r3, [pc, #312]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
34188606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34188608:	4a4d      	ldr	r2, [pc, #308]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
3418860a:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
3418860e:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34188610:	f7fa fa14 	bl	34182a3c <HAL_GetTick>
34188614:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34188616:	687b      	ldr	r3, [r7, #4]
34188618:	685b      	ldr	r3, [r3, #4]
3418861a:	2b00      	cmp	r3, #0
3418861c:	d019      	beq.n	34188652 <HAL_RCC_OscConfig+0x192>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3418861e:	e008      	b.n	34188632 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34188620:	f7fa fa0c 	bl	34182a3c <HAL_GetTick>
34188624:	4602      	mov	r2, r0
34188626:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34188628:	1ad3      	subs	r3, r2, r3
3418862a:	2b64      	cmp	r3, #100	@ 0x64
3418862c:	d901      	bls.n	34188632 <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
3418862e:	2303      	movs	r3, #3
34188630:	e321      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34188632:	4b43      	ldr	r3, [pc, #268]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
34188634:	685b      	ldr	r3, [r3, #4]
34188636:	f003 0310 	and.w	r3, r3, #16
3418863a:	2b00      	cmp	r3, #0
3418863c:	d0f0      	beq.n	34188620 <HAL_RCC_OscConfig+0x160>
3418863e:	e00e      	b.n	3418865e <HAL_RCC_OscConfig+0x19e>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34188640:	f7fa f9fc 	bl	34182a3c <HAL_GetTick>
34188644:	4602      	mov	r2, r0
34188646:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34188648:	1ad3      	subs	r3, r2, r3
3418864a:	2b64      	cmp	r3, #100	@ 0x64
3418864c:	d901      	bls.n	34188652 <HAL_RCC_OscConfig+0x192>
          {
            return HAL_TIMEOUT;
3418864e:	2303      	movs	r3, #3
34188650:	e311      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
34188652:	4b3b      	ldr	r3, [pc, #236]	@ (34188740 <HAL_RCC_OscConfig+0x280>)
34188654:	685b      	ldr	r3, [r3, #4]
34188656:	f003 0310 	and.w	r3, r3, #16
3418865a:	2b00      	cmp	r3, #0
3418865c:	d1f0      	bne.n	34188640 <HAL_RCC_OscConfig+0x180>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
3418865e:	687b      	ldr	r3, [r7, #4]
34188660:	681b      	ldr	r3, [r3, #0]
34188662:	f003 0302 	and.w	r3, r3, #2
34188666:	2b00      	cmp	r3, #0
34188668:	d073      	beq.n	34188752 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
3418866a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418866e:	2b00      	cmp	r3, #0
34188670:	d023      	beq.n	341886ba <HAL_RCC_OscConfig+0x1fa>
34188672:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34188676:	2b00      	cmp	r3, #0
34188678:	d01f      	beq.n	341886ba <HAL_RCC_OscConfig+0x1fa>
3418867a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3418867c:	2b00      	cmp	r3, #0
3418867e:	d104      	bne.n	3418868a <HAL_RCC_OscConfig+0x1ca>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34188680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34188682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34188686:	2b00      	cmp	r3, #0
34188688:	d117      	bne.n	341886ba <HAL_RCC_OscConfig+0x1fa>
3418868a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3418868c:	2b00      	cmp	r3, #0
3418868e:	d104      	bne.n	3418869a <HAL_RCC_OscConfig+0x1da>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34188690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34188692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34188696:	2b00      	cmp	r3, #0
34188698:	d10f      	bne.n	341886ba <HAL_RCC_OscConfig+0x1fa>
3418869a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
3418869c:	2b00      	cmp	r3, #0
3418869e:	d104      	bne.n	341886aa <HAL_RCC_OscConfig+0x1ea>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
341886a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341886a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341886a6:	2b00      	cmp	r3, #0
341886a8:	d107      	bne.n	341886ba <HAL_RCC_OscConfig+0x1fa>
341886aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
341886ac:	2b00      	cmp	r3, #0
341886ae:	d115      	bne.n	341886dc <HAL_RCC_OscConfig+0x21c>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
341886b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341886b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341886b6:	2b00      	cmp	r3, #0
341886b8:	d010      	beq.n	341886dc <HAL_RCC_OscConfig+0x21c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
341886ba:	687b      	ldr	r3, [r7, #4]
341886bc:	68db      	ldr	r3, [r3, #12]
341886be:	2b00      	cmp	r3, #0
341886c0:	d101      	bne.n	341886c6 <HAL_RCC_OscConfig+0x206>
      {
        return HAL_ERROR;
341886c2:	2301      	movs	r3, #1
341886c4:	e2d7      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
341886c6:	687b      	ldr	r3, [r7, #4]
341886c8:	691b      	ldr	r3, [r3, #16]
341886ca:	4618      	mov	r0, r3
341886cc:	f7ff fca4 	bl	34188018 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
341886d0:	687b      	ldr	r3, [r7, #4]
341886d2:	695b      	ldr	r3, [r3, #20]
341886d4:	4618      	mov	r0, r3
341886d6:	f7ff fcc1 	bl	3418805c <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
341886da:	e03a      	b.n	34188752 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
341886dc:	687b      	ldr	r3, [r7, #4]
341886de:	68db      	ldr	r3, [r3, #12]
341886e0:	2b00      	cmp	r3, #0
341886e2:	d01e      	beq.n	34188722 <HAL_RCC_OscConfig+0x262>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
341886e4:	f7ff fc68 	bl	34187fb8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
341886e8:	f7fa f9a8 	bl	34182a3c <HAL_GetTick>
341886ec:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
341886ee:	e008      	b.n	34188702 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
341886f0:	f7fa f9a4 	bl	34182a3c <HAL_GetTick>
341886f4:	4602      	mov	r2, r0
341886f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341886f8:	1ad3      	subs	r3, r2, r3
341886fa:	2b01      	cmp	r3, #1
341886fc:	d901      	bls.n	34188702 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
341886fe:	2303      	movs	r3, #3
34188700:	e2b9      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_HSI_IsReady() == 0U)
34188702:	f7ff fc77 	bl	34187ff4 <LL_RCC_HSI_IsReady>
34188706:	4603      	mov	r3, r0
34188708:	2b00      	cmp	r3, #0
3418870a:	d0f1      	beq.n	341886f0 <HAL_RCC_OscConfig+0x230>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
3418870c:	687b      	ldr	r3, [r7, #4]
3418870e:	691b      	ldr	r3, [r3, #16]
34188710:	4618      	mov	r0, r3
34188712:	f7ff fc81 	bl	34188018 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34188716:	687b      	ldr	r3, [r7, #4]
34188718:	695b      	ldr	r3, [r3, #20]
3418871a:	4618      	mov	r0, r3
3418871c:	f7ff fc9e 	bl	3418805c <LL_RCC_HSI_SetCalibTrimming>
34188720:	e017      	b.n	34188752 <HAL_RCC_OscConfig+0x292>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
34188722:	f7ff fc57 	bl	34187fd4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34188726:	f7fa f989 	bl	34182a3c <HAL_GetTick>
3418872a:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
3418872c:	e00c      	b.n	34188748 <HAL_RCC_OscConfig+0x288>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3418872e:	f7fa f985 	bl	34182a3c <HAL_GetTick>
34188732:	4602      	mov	r2, r0
34188734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34188736:	1ad3      	subs	r3, r2, r3
34188738:	2b01      	cmp	r3, #1
3418873a:	d905      	bls.n	34188748 <HAL_RCC_OscConfig+0x288>
          {
            return HAL_TIMEOUT;
3418873c:	2303      	movs	r3, #3
3418873e:	e29a      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
34188740:	56028000 	.word	0x56028000
34188744:	00018010 	.word	0x00018010
        while (LL_RCC_HSI_IsReady() != 0U)
34188748:	f7ff fc54 	bl	34187ff4 <LL_RCC_HSI_IsReady>
3418874c:	4603      	mov	r3, r0
3418874e:	2b00      	cmp	r3, #0
34188750:	d1ed      	bne.n	3418872e <HAL_RCC_OscConfig+0x26e>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34188752:	687b      	ldr	r3, [r7, #4]
34188754:	681b      	ldr	r3, [r3, #0]
34188756:	f003 0310 	and.w	r3, r3, #16
3418875a:	2b00      	cmp	r3, #0
3418875c:	d070      	beq.n	34188840 <HAL_RCC_OscConfig+0x380>
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3418875e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34188762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34188766:	d028      	beq.n	341887ba <HAL_RCC_OscConfig+0x2fa>
34188768:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418876c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188770:	d023      	beq.n	341887ba <HAL_RCC_OscConfig+0x2fa>
34188772:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34188774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188778:	d104      	bne.n	34188784 <HAL_RCC_OscConfig+0x2c4>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418877a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418877c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34188780:	2b00      	cmp	r3, #0
34188782:	d11a      	bne.n	341887ba <HAL_RCC_OscConfig+0x2fa>
34188784:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34188786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418878a:	d104      	bne.n	34188796 <HAL_RCC_OscConfig+0x2d6>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3418878c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418878e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34188792:	2b00      	cmp	r3, #0
34188794:	d111      	bne.n	341887ba <HAL_RCC_OscConfig+0x2fa>
34188796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34188798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418879c:	d104      	bne.n	341887a8 <HAL_RCC_OscConfig+0x2e8>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418879e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341887a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341887a4:	2b00      	cmp	r3, #0
341887a6:	d108      	bne.n	341887ba <HAL_RCC_OscConfig+0x2fa>
341887a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
341887aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341887ae:	d110      	bne.n	341887d2 <HAL_RCC_OscConfig+0x312>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
341887b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341887b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341887b6:	2b00      	cmp	r3, #0
341887b8:	d00b      	beq.n	341887d2 <HAL_RCC_OscConfig+0x312>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
341887ba:	687b      	ldr	r3, [r7, #4]
341887bc:	69db      	ldr	r3, [r3, #28]
341887be:	2b00      	cmp	r3, #0
341887c0:	d101      	bne.n	341887c6 <HAL_RCC_OscConfig+0x306>
      {
        return HAL_ERROR;
341887c2:	2301      	movs	r3, #1
341887c4:	e257      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
341887c6:	687b      	ldr	r3, [r7, #4]
341887c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341887ca:	4618      	mov	r0, r3
341887cc:	f7ff fcae 	bl	3418812c <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
341887d0:	e036      	b.n	34188840 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
341887d2:	687b      	ldr	r3, [r7, #4]
341887d4:	69db      	ldr	r3, [r3, #28]
341887d6:	2b00      	cmp	r3, #0
341887d8:	d01e      	beq.n	34188818 <HAL_RCC_OscConfig+0x358>
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
341887da:	687b      	ldr	r3, [r7, #4]
341887dc:	6a1b      	ldr	r3, [r3, #32]
341887de:	4618      	mov	r0, r3
341887e0:	f7ff fc82 	bl	341880e8 <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
341887e4:	f7ff fc50 	bl	34188088 <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
341887e8:	f7fa f928 	bl	34182a3c <HAL_GetTick>
341887ec:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
341887ee:	e008      	b.n	34188802 <HAL_RCC_OscConfig+0x342>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
341887f0:	f7fa f924 	bl	34182a3c <HAL_GetTick>
341887f4:	4602      	mov	r2, r0
341887f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341887f8:	1ad3      	subs	r3, r2, r3
341887fa:	2b01      	cmp	r3, #1
341887fc:	d901      	bls.n	34188802 <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
341887fe:	2303      	movs	r3, #3
34188800:	e239      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() == 0U)
34188802:	f7ff fc5f 	bl	341880c4 <LL_RCC_MSI_IsReady>
34188806:	4603      	mov	r3, r0
34188808:	2b00      	cmp	r3, #0
3418880a:	d0f1      	beq.n	341887f0 <HAL_RCC_OscConfig+0x330>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
3418880c:	687b      	ldr	r3, [r7, #4]
3418880e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188810:	4618      	mov	r0, r3
34188812:	f7ff fc8b 	bl	3418812c <LL_RCC_MSI_SetCalibTrimming>
34188816:	e013      	b.n	34188840 <HAL_RCC_OscConfig+0x380>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
34188818:	f7ff fc44 	bl	341880a4 <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418881c:	f7fa f90e 	bl	34182a3c <HAL_GetTick>
34188820:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
34188822:	e008      	b.n	34188836 <HAL_RCC_OscConfig+0x376>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34188824:	f7fa f90a 	bl	34182a3c <HAL_GetTick>
34188828:	4602      	mov	r2, r0
3418882a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418882c:	1ad3      	subs	r3, r2, r3
3418882e:	2b01      	cmp	r3, #1
34188830:	d901      	bls.n	34188836 <HAL_RCC_OscConfig+0x376>
          {
            return HAL_TIMEOUT;
34188832:	2303      	movs	r3, #3
34188834:	e21f      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() != 0U)
34188836:	f7ff fc45 	bl	341880c4 <LL_RCC_MSI_IsReady>
3418883a:	4603      	mov	r3, r0
3418883c:	2b00      	cmp	r3, #0
3418883e:	d1f1      	bne.n	34188824 <HAL_RCC_OscConfig+0x364>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
34188840:	687b      	ldr	r3, [r7, #4]
34188842:	681b      	ldr	r3, [r3, #0]
34188844:	f003 0308 	and.w	r3, r3, #8
34188848:	2b00      	cmp	r3, #0
3418884a:	d02c      	beq.n	341888a6 <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
3418884c:	687b      	ldr	r3, [r7, #4]
3418884e:	699b      	ldr	r3, [r3, #24]
34188850:	2b00      	cmp	r3, #0
34188852:	d014      	beq.n	3418887e <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
34188854:	f7ff fc92 	bl	3418817c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34188858:	f7fa f8f0 	bl	34182a3c <HAL_GetTick>
3418885c:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
3418885e:	e008      	b.n	34188872 <HAL_RCC_OscConfig+0x3b2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34188860:	f7fa f8ec 	bl	34182a3c <HAL_GetTick>
34188864:	4602      	mov	r2, r0
34188866:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34188868:	1ad3      	subs	r3, r2, r3
3418886a:	2b01      	cmp	r3, #1
3418886c:	d901      	bls.n	34188872 <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
3418886e:	2303      	movs	r3, #3
34188870:	e201      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() == 0U)
34188872:	f7ff fca1 	bl	341881b8 <LL_RCC_LSI_IsReady>
34188876:	4603      	mov	r3, r0
34188878:	2b00      	cmp	r3, #0
3418887a:	d0f1      	beq.n	34188860 <HAL_RCC_OscConfig+0x3a0>
3418887c:	e013      	b.n	341888a6 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
3418887e:	f7ff fc8b 	bl	34188198 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34188882:	f7fa f8db 	bl	34182a3c <HAL_GetTick>
34188886:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
34188888:	e008      	b.n	3418889c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
3418888a:	f7fa f8d7 	bl	34182a3c <HAL_GetTick>
3418888e:	4602      	mov	r2, r0
34188890:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34188892:	1ad3      	subs	r3, r2, r3
34188894:	2b01      	cmp	r3, #1
34188896:	d901      	bls.n	3418889c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
34188898:	2303      	movs	r3, #3
3418889a:	e1ec      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() != 0U)
3418889c:	f7ff fc8c 	bl	341881b8 <LL_RCC_LSI_IsReady>
341888a0:	4603      	mov	r3, r0
341888a2:	2b00      	cmp	r3, #0
341888a4:	d1f1      	bne.n	3418888a <HAL_RCC_OscConfig+0x3ca>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
341888a6:	687b      	ldr	r3, [r7, #4]
341888a8:	681b      	ldr	r3, [r3, #0]
341888aa:	f003 0304 	and.w	r3, r3, #4
341888ae:	2b00      	cmp	r3, #0
341888b0:	f000 808c 	beq.w	341889cc <HAL_RCC_OscConfig+0x50c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
341888b4:	687b      	ldr	r3, [r7, #4]
341888b6:	689b      	ldr	r3, [r3, #8]
341888b8:	2b02      	cmp	r3, #2
341888ba:	d104      	bne.n	341888c6 <HAL_RCC_OscConfig+0x406>
341888bc:	4b96      	ldr	r3, [pc, #600]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
341888be:	2202      	movs	r2, #2
341888c0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341888c4:	e055      	b.n	34188972 <HAL_RCC_OscConfig+0x4b2>
341888c6:	687b      	ldr	r3, [r7, #4]
341888c8:	689b      	ldr	r3, [r3, #8]
341888ca:	2b00      	cmp	r3, #0
341888cc:	d112      	bne.n	341888f4 <HAL_RCC_OscConfig+0x434>
341888ce:	4b92      	ldr	r3, [pc, #584]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
341888d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341888d4:	461a      	mov	r2, r3
341888d6:	2302      	movs	r3, #2
341888d8:	6013      	str	r3, [r2, #0]
341888da:	4b8f      	ldr	r3, [pc, #572]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
341888dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341888de:	4a8e      	ldr	r2, [pc, #568]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
341888e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341888e4:	6413      	str	r3, [r2, #64]	@ 0x40
341888e6:	4b8c      	ldr	r3, [pc, #560]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
341888e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341888ea:	4a8b      	ldr	r2, [pc, #556]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
341888ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
341888f0:	6413      	str	r3, [r2, #64]	@ 0x40
341888f2:	e03e      	b.n	34188972 <HAL_RCC_OscConfig+0x4b2>
341888f4:	687b      	ldr	r3, [r7, #4]
341888f6:	689b      	ldr	r3, [r3, #8]
341888f8:	f248 0202 	movw	r2, #32770	@ 0x8002
341888fc:	4293      	cmp	r3, r2
341888fe:	d110      	bne.n	34188922 <HAL_RCC_OscConfig+0x462>
34188900:	4b85      	ldr	r3, [pc, #532]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
34188902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34188904:	4a84      	ldr	r2, [pc, #528]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
34188906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3418890a:	6413      	str	r3, [r2, #64]	@ 0x40
3418890c:	4b82      	ldr	r3, [pc, #520]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
3418890e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34188910:	4a81      	ldr	r2, [pc, #516]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
34188912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34188916:	6413      	str	r3, [r2, #64]	@ 0x40
34188918:	4b7f      	ldr	r3, [pc, #508]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
3418891a:	2202      	movs	r2, #2
3418891c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34188920:	e027      	b.n	34188972 <HAL_RCC_OscConfig+0x4b2>
34188922:	687b      	ldr	r3, [r7, #4]
34188924:	689b      	ldr	r3, [r3, #8]
34188926:	4a7d      	ldr	r2, [pc, #500]	@ (34188b1c <HAL_RCC_OscConfig+0x65c>)
34188928:	4293      	cmp	r3, r2
3418892a:	d110      	bne.n	3418894e <HAL_RCC_OscConfig+0x48e>
3418892c:	4b7a      	ldr	r3, [pc, #488]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
3418892e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34188930:	4a79      	ldr	r2, [pc, #484]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
34188932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34188936:	6413      	str	r3, [r2, #64]	@ 0x40
34188938:	4b77      	ldr	r3, [pc, #476]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
3418893a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418893c:	4a76      	ldr	r2, [pc, #472]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
3418893e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34188942:	6413      	str	r3, [r2, #64]	@ 0x40
34188944:	4b74      	ldr	r3, [pc, #464]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
34188946:	2202      	movs	r2, #2
34188948:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418894c:	e011      	b.n	34188972 <HAL_RCC_OscConfig+0x4b2>
3418894e:	4b72      	ldr	r3, [pc, #456]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
34188950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34188954:	461a      	mov	r2, r3
34188956:	2302      	movs	r3, #2
34188958:	6013      	str	r3, [r2, #0]
3418895a:	4b6f      	ldr	r3, [pc, #444]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
3418895c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418895e:	4a6e      	ldr	r2, [pc, #440]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
34188960:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34188964:	6413      	str	r3, [r2, #64]	@ 0x40
34188966:	4b6c      	ldr	r3, [pc, #432]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
34188968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418896a:	4a6b      	ldr	r2, [pc, #428]	@ (34188b18 <HAL_RCC_OscConfig+0x658>)
3418896c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34188970:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34188972:	687b      	ldr	r3, [r7, #4]
34188974:	689b      	ldr	r3, [r3, #8]
34188976:	2b00      	cmp	r3, #0
34188978:	d014      	beq.n	341889a4 <HAL_RCC_OscConfig+0x4e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418897a:	f7fa f85f 	bl	34182a3c <HAL_GetTick>
3418897e:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
34188980:	e00a      	b.n	34188998 <HAL_RCC_OscConfig+0x4d8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34188982:	f7fa f85b 	bl	34182a3c <HAL_GetTick>
34188986:	4602      	mov	r2, r0
34188988:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418898a:	1ad3      	subs	r3, r2, r3
3418898c:	f241 3288 	movw	r2, #5000	@ 0x1388
34188990:	4293      	cmp	r3, r2
34188992:	d901      	bls.n	34188998 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
34188994:	2303      	movs	r3, #3
34188996:	e16e      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() == 0U)
34188998:	f7ff fbde 	bl	34188158 <LL_RCC_LSE_IsReady>
3418899c:	4603      	mov	r3, r0
3418899e:	2b00      	cmp	r3, #0
341889a0:	d0ef      	beq.n	34188982 <HAL_RCC_OscConfig+0x4c2>
341889a2:	e013      	b.n	341889cc <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341889a4:	f7fa f84a 	bl	34182a3c <HAL_GetTick>
341889a8:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
341889aa:	e00a      	b.n	341889c2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
341889ac:	f7fa f846 	bl	34182a3c <HAL_GetTick>
341889b0:	4602      	mov	r2, r0
341889b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341889b4:	1ad3      	subs	r3, r2, r3
341889b6:	f241 3288 	movw	r2, #5000	@ 0x1388
341889ba:	4293      	cmp	r3, r2
341889bc:	d901      	bls.n	341889c2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
341889be:	2303      	movs	r3, #3
341889c0:	e159      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() != 0U)
341889c2:	f7ff fbc9 	bl	34188158 <LL_RCC_LSE_IsReady>
341889c6:	4603      	mov	r3, r0
341889c8:	2b00      	cmp	r3, #0
341889ca:	d1ef      	bne.n	341889ac <HAL_RCC_OscConfig+0x4ec>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
341889cc:	687b      	ldr	r3, [r7, #4]
341889ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
341889d0:	2b00      	cmp	r3, #0
341889d2:	d04c      	beq.n	34188a6e <HAL_RCC_OscConfig+0x5ae>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
341889d4:	687b      	ldr	r3, [r7, #4]
341889d6:	3328      	adds	r3, #40	@ 0x28
341889d8:	4619      	mov	r1, r3
341889da:	2000      	movs	r0, #0
341889dc:	f000 fe38 	bl	34189650 <RCC_PLL_IsNewConfig>
341889e0:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
341889e2:	f7ff fc3d 	bl	34188260 <LL_RCC_PLL1_IsReady>
341889e6:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
341889e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
341889ea:	2b01      	cmp	r3, #1
341889ec:	d130      	bne.n	34188a50 <HAL_RCC_OscConfig+0x590>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
341889ee:	f7ff fd0f 	bl	34188410 <LL_RCC_IC1_GetSource>
341889f2:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
341889f4:	f7ff fd2a 	bl	3418844c <LL_RCC_IC2_GetSource>
341889f8:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
341889fa:	f7ff fd45 	bl	34188488 <LL_RCC_IC6_GetSource>
341889fe:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34188a00:	f7ff fd50 	bl	341884a4 <LL_RCC_IC11_GetSource>
34188a04:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
34188a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34188a0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34188a0e:	d104      	bne.n	34188a1a <HAL_RCC_OscConfig+0x55a>
34188a10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
34188a12:	2b00      	cmp	r3, #0
34188a14:	d101      	bne.n	34188a1a <HAL_RCC_OscConfig+0x55a>
      {
        return HAL_ERROR;
34188a16:	2301      	movs	r3, #1
34188a18:	e12d      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34188a1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34188a1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188a22:	d10a      	bne.n	34188a3a <HAL_RCC_OscConfig+0x57a>
34188a24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
34188a26:	2b00      	cmp	r3, #0
34188a28:	d005      	beq.n	34188a36 <HAL_RCC_OscConfig+0x576>
34188a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34188a2c:	2b00      	cmp	r3, #0
34188a2e:	d002      	beq.n	34188a36 <HAL_RCC_OscConfig+0x576>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34188a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34188a32:	2b00      	cmp	r3, #0
34188a34:	d101      	bne.n	34188a3a <HAL_RCC_OscConfig+0x57a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
34188a36:	2301      	movs	r3, #1
34188a38:	e11d      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34188a3a:	687b      	ldr	r3, [r7, #4]
34188a3c:	3328      	adds	r3, #40	@ 0x28
34188a3e:	4619      	mov	r1, r3
34188a40:	2000      	movs	r0, #0
34188a42:	f000 fca9 	bl	34189398 <RCC_PLL_Config>
34188a46:	4603      	mov	r3, r0
34188a48:	2b00      	cmp	r3, #0
34188a4a:	d010      	beq.n	34188a6e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
34188a4c:	2301      	movs	r3, #1
34188a4e:	e112      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34188a50:	687b      	ldr	r3, [r7, #4]
34188a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34188a54:	2b02      	cmp	r3, #2
34188a56:	d10a      	bne.n	34188a6e <HAL_RCC_OscConfig+0x5ae>
34188a58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
34188a5a:	2b00      	cmp	r3, #0
34188a5c:	d107      	bne.n	34188a6e <HAL_RCC_OscConfig+0x5ae>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34188a5e:	2000      	movs	r0, #0
34188a60:	f000 fdca 	bl	341895f8 <RCC_PLL_Enable>
34188a64:	4603      	mov	r3, r0
34188a66:	2b00      	cmp	r3, #0
34188a68:	d001      	beq.n	34188a6e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
34188a6a:	2301      	movs	r3, #1
34188a6c:	e103      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34188a6e:	687b      	ldr	r3, [r7, #4]
34188a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34188a72:	2b00      	cmp	r3, #0
34188a74:	d054      	beq.n	34188b20 <HAL_RCC_OscConfig+0x660>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34188a76:	687b      	ldr	r3, [r7, #4]
34188a78:	3344      	adds	r3, #68	@ 0x44
34188a7a:	4619      	mov	r1, r3
34188a7c:	2001      	movs	r0, #1
34188a7e:	f000 fde7 	bl	34189650 <RCC_PLL_IsNewConfig>
34188a82:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
34188a84:	f7ff fc22 	bl	341882cc <LL_RCC_PLL2_IsReady>
34188a88:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
34188a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34188a8c:	2b01      	cmp	r3, #1
34188a8e:	d134      	bne.n	34188afa <HAL_RCC_OscConfig+0x63a>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34188a90:	f7ff fcbe 	bl	34188410 <LL_RCC_IC1_GetSource>
34188a94:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34188a96:	f7ff fcd9 	bl	3418844c <LL_RCC_IC2_GetSource>
34188a9a:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34188a9c:	f7ff fcf4 	bl	34188488 <LL_RCC_IC6_GetSource>
34188aa0:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34188aa2:	f7ff fcff 	bl	341884a4 <LL_RCC_IC11_GetSource>
34188aa6:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34188aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34188aac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34188ab0:	d105      	bne.n	34188abe <HAL_RCC_OscConfig+0x5fe>
34188ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34188ab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188ab8:	d101      	bne.n	34188abe <HAL_RCC_OscConfig+0x5fe>
      {
        return HAL_ERROR;
34188aba:	2301      	movs	r3, #1
34188abc:	e0db      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34188abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34188ac2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188ac6:	d10d      	bne.n	34188ae4 <HAL_RCC_OscConfig+0x624>
34188ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34188aca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188ace:	d007      	beq.n	34188ae0 <HAL_RCC_OscConfig+0x620>
34188ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34188ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188ad6:	d003      	beq.n	34188ae0 <HAL_RCC_OscConfig+0x620>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34188ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34188ada:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188ade:	d101      	bne.n	34188ae4 <HAL_RCC_OscConfig+0x624>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
34188ae0:	2301      	movs	r3, #1
34188ae2:	e0c8      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34188ae4:	687b      	ldr	r3, [r7, #4]
34188ae6:	3344      	adds	r3, #68	@ 0x44
34188ae8:	4619      	mov	r1, r3
34188aea:	2001      	movs	r0, #1
34188aec:	f000 fc54 	bl	34189398 <RCC_PLL_Config>
34188af0:	4603      	mov	r3, r0
34188af2:	2b00      	cmp	r3, #0
34188af4:	d014      	beq.n	34188b20 <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
34188af6:	2301      	movs	r3, #1
34188af8:	e0bd      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34188afa:	687b      	ldr	r3, [r7, #4]
34188afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34188afe:	2b02      	cmp	r3, #2
34188b00:	d10e      	bne.n	34188b20 <HAL_RCC_OscConfig+0x660>
34188b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34188b04:	2b00      	cmp	r3, #0
34188b06:	d10b      	bne.n	34188b20 <HAL_RCC_OscConfig+0x660>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34188b08:	2001      	movs	r0, #1
34188b0a:	f000 fd75 	bl	341895f8 <RCC_PLL_Enable>
34188b0e:	4603      	mov	r3, r0
34188b10:	2b00      	cmp	r3, #0
34188b12:	d005      	beq.n	34188b20 <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
34188b14:	2301      	movs	r3, #1
34188b16:	e0ae      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
34188b18:	56028000 	.word	0x56028000
34188b1c:	00018002 	.word	0x00018002

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
34188b20:	687b      	ldr	r3, [r7, #4]
34188b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34188b24:	2b00      	cmp	r3, #0
34188b26:	d050      	beq.n	34188bca <HAL_RCC_OscConfig+0x70a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34188b28:	687b      	ldr	r3, [r7, #4]
34188b2a:	3360      	adds	r3, #96	@ 0x60
34188b2c:	4619      	mov	r1, r3
34188b2e:	2002      	movs	r0, #2
34188b30:	f000 fd8e 	bl	34189650 <RCC_PLL_IsNewConfig>
34188b34:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34188b36:	f7ff fb93 	bl	34188260 <LL_RCC_PLL1_IsReady>
34188b3a:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
34188b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34188b3e:	2b01      	cmp	r3, #1
34188b40:	d134      	bne.n	34188bac <HAL_RCC_OscConfig+0x6ec>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34188b42:	f7ff fc65 	bl	34188410 <LL_RCC_IC1_GetSource>
34188b46:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34188b48:	f7ff fc80 	bl	3418844c <LL_RCC_IC2_GetSource>
34188b4c:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34188b4e:	f7ff fc9b 	bl	34188488 <LL_RCC_IC6_GetSource>
34188b52:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34188b54:	f7ff fca6 	bl	341884a4 <LL_RCC_IC11_GetSource>
34188b58:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34188b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34188b5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34188b62:	d105      	bne.n	34188b70 <HAL_RCC_OscConfig+0x6b0>
34188b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34188b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188b6a:	d101      	bne.n	34188b70 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
34188b6c:	2301      	movs	r3, #1
34188b6e:	e082      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34188b70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34188b74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188b78:	d10d      	bne.n	34188b96 <HAL_RCC_OscConfig+0x6d6>
34188b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34188b7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188b80:	d007      	beq.n	34188b92 <HAL_RCC_OscConfig+0x6d2>
34188b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34188b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188b88:	d003      	beq.n	34188b92 <HAL_RCC_OscConfig+0x6d2>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
34188b8a:	6a3b      	ldr	r3, [r7, #32]
34188b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188b90:	d101      	bne.n	34188b96 <HAL_RCC_OscConfig+0x6d6>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
34188b92:	2301      	movs	r3, #1
34188b94:	e06f      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34188b96:	687b      	ldr	r3, [r7, #4]
34188b98:	3360      	adds	r3, #96	@ 0x60
34188b9a:	4619      	mov	r1, r3
34188b9c:	2002      	movs	r0, #2
34188b9e:	f000 fbfb 	bl	34189398 <RCC_PLL_Config>
34188ba2:	4603      	mov	r3, r0
34188ba4:	2b00      	cmp	r3, #0
34188ba6:	d010      	beq.n	34188bca <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
34188ba8:	2301      	movs	r3, #1
34188baa:	e064      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34188bac:	687b      	ldr	r3, [r7, #4]
34188bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34188bb0:	2b02      	cmp	r3, #2
34188bb2:	d10a      	bne.n	34188bca <HAL_RCC_OscConfig+0x70a>
34188bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34188bb6:	2b00      	cmp	r3, #0
34188bb8:	d107      	bne.n	34188bca <HAL_RCC_OscConfig+0x70a>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34188bba:	2002      	movs	r0, #2
34188bbc:	f000 fd1c 	bl	341895f8 <RCC_PLL_Enable>
34188bc0:	4603      	mov	r3, r0
34188bc2:	2b00      	cmp	r3, #0
34188bc4:	d001      	beq.n	34188bca <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
34188bc6:	2301      	movs	r3, #1
34188bc8:	e055      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34188bca:	687b      	ldr	r3, [r7, #4]
34188bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188bce:	2b00      	cmp	r3, #0
34188bd0:	d050      	beq.n	34188c74 <HAL_RCC_OscConfig+0x7b4>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34188bd2:	687b      	ldr	r3, [r7, #4]
34188bd4:	337c      	adds	r3, #124	@ 0x7c
34188bd6:	4619      	mov	r1, r3
34188bd8:	2003      	movs	r0, #3
34188bda:	f000 fd39 	bl	34189650 <RCC_PLL_IsNewConfig>
34188bde:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
34188be0:	f7ff fbe0 	bl	341883a4 <LL_RCC_PLL4_IsReady>
34188be4:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
34188be6:	69fb      	ldr	r3, [r7, #28]
34188be8:	2b01      	cmp	r3, #1
34188bea:	d134      	bne.n	34188c56 <HAL_RCC_OscConfig+0x796>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34188bec:	f7ff fc10 	bl	34188410 <LL_RCC_IC1_GetSource>
34188bf0:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34188bf2:	f7ff fc2b 	bl	3418844c <LL_RCC_IC2_GetSource>
34188bf6:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34188bf8:	f7ff fc46 	bl	34188488 <LL_RCC_IC6_GetSource>
34188bfc:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34188bfe:	f7ff fc51 	bl	341884a4 <LL_RCC_IC11_GetSource>
34188c02:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34188c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34188c08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34188c0c:	d105      	bne.n	34188c1a <HAL_RCC_OscConfig+0x75a>
34188c0e:	697b      	ldr	r3, [r7, #20]
34188c10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188c14:	d101      	bne.n	34188c1a <HAL_RCC_OscConfig+0x75a>
      {
        return HAL_ERROR;
34188c16:	2301      	movs	r3, #1
34188c18:	e02d      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34188c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34188c1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188c22:	d10d      	bne.n	34188c40 <HAL_RCC_OscConfig+0x780>
34188c24:	693b      	ldr	r3, [r7, #16]
34188c26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188c2a:	d007      	beq.n	34188c3c <HAL_RCC_OscConfig+0x77c>
34188c2c:	68fb      	ldr	r3, [r7, #12]
34188c2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188c32:	d003      	beq.n	34188c3c <HAL_RCC_OscConfig+0x77c>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34188c34:	68bb      	ldr	r3, [r7, #8]
34188c36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188c3a:	d101      	bne.n	34188c40 <HAL_RCC_OscConfig+0x780>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
34188c3c:	2301      	movs	r3, #1
34188c3e:	e01a      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34188c40:	687b      	ldr	r3, [r7, #4]
34188c42:	337c      	adds	r3, #124	@ 0x7c
34188c44:	4619      	mov	r1, r3
34188c46:	2003      	movs	r0, #3
34188c48:	f000 fba6 	bl	34189398 <RCC_PLL_Config>
34188c4c:	4603      	mov	r3, r0
34188c4e:	2b00      	cmp	r3, #0
34188c50:	d010      	beq.n	34188c74 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34188c52:	2301      	movs	r3, #1
34188c54:	e00f      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34188c56:	687b      	ldr	r3, [r7, #4]
34188c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188c5a:	2b02      	cmp	r3, #2
34188c5c:	d10a      	bne.n	34188c74 <HAL_RCC_OscConfig+0x7b4>
34188c5e:	69bb      	ldr	r3, [r7, #24]
34188c60:	2b00      	cmp	r3, #0
34188c62:	d107      	bne.n	34188c74 <HAL_RCC_OscConfig+0x7b4>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34188c64:	2003      	movs	r0, #3
34188c66:	f000 fcc7 	bl	341895f8 <RCC_PLL_Enable>
34188c6a:	4603      	mov	r3, r0
34188c6c:	2b00      	cmp	r3, #0
34188c6e:	d001      	beq.n	34188c74 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34188c70:	2301      	movs	r3, #1
34188c72:	e000      	b.n	34188c76 <HAL_RCC_OscConfig+0x7b6>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
34188c74:	2300      	movs	r3, #0
}
34188c76:	4618      	mov	r0, r3
34188c78:	3788      	adds	r7, #136	@ 0x88
34188c7a:	46bd      	mov	sp, r7
34188c7c:	bd80      	pop	{r7, pc}
34188c7e:	bf00      	nop

34188c80 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34188c80:	b580      	push	{r7, lr}
34188c82:	b084      	sub	sp, #16
34188c84:	af00      	add	r7, sp, #0
34188c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
34188c88:	687b      	ldr	r3, [r7, #4]
34188c8a:	2b00      	cmp	r3, #0
34188c8c:	d101      	bne.n	34188c92 <HAL_RCC_ClockConfig+0x12>
  {
    return HAL_ERROR;
34188c8e:	2301      	movs	r3, #1
34188c90:	e1f2      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34188c92:	687b      	ldr	r3, [r7, #4]
34188c94:	681b      	ldr	r3, [r3, #0]
34188c96:	f003 0308 	and.w	r3, r3, #8
34188c9a:	2b00      	cmp	r3, #0
34188c9c:	d010      	beq.n	34188cc0 <HAL_RCC_ClockConfig+0x40>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34188c9e:	687b      	ldr	r3, [r7, #4]
34188ca0:	691a      	ldr	r2, [r3, #16]
34188ca2:	4ba3      	ldr	r3, [pc, #652]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188ca6:	f003 0307 	and.w	r3, r3, #7
34188caa:	429a      	cmp	r2, r3
34188cac:	d908      	bls.n	34188cc0 <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34188cae:	4ba0      	ldr	r3, [pc, #640]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188cb2:	f023 0207 	bic.w	r2, r3, #7
34188cb6:	687b      	ldr	r3, [r7, #4]
34188cb8:	691b      	ldr	r3, [r3, #16]
34188cba:	499d      	ldr	r1, [pc, #628]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188cbc:	4313      	orrs	r3, r2
34188cbe:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34188cc0:	687b      	ldr	r3, [r7, #4]
34188cc2:	681b      	ldr	r3, [r3, #0]
34188cc4:	f003 0310 	and.w	r3, r3, #16
34188cc8:	2b00      	cmp	r3, #0
34188cca:	d010      	beq.n	34188cee <HAL_RCC_ClockConfig+0x6e>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34188ccc:	687b      	ldr	r3, [r7, #4]
34188cce:	695a      	ldr	r2, [r3, #20]
34188cd0:	4b97      	ldr	r3, [pc, #604]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188cd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34188cd8:	429a      	cmp	r2, r3
34188cda:	d908      	bls.n	34188cee <HAL_RCC_ClockConfig+0x6e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34188cdc:	4b94      	ldr	r3, [pc, #592]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188ce0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34188ce4:	687b      	ldr	r3, [r7, #4]
34188ce6:	695b      	ldr	r3, [r3, #20]
34188ce8:	4991      	ldr	r1, [pc, #580]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188cea:	4313      	orrs	r3, r2
34188cec:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34188cee:	687b      	ldr	r3, [r7, #4]
34188cf0:	681b      	ldr	r3, [r3, #0]
34188cf2:	f003 0320 	and.w	r3, r3, #32
34188cf6:	2b00      	cmp	r3, #0
34188cf8:	d010      	beq.n	34188d1c <HAL_RCC_ClockConfig+0x9c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34188cfa:	687b      	ldr	r3, [r7, #4]
34188cfc:	699a      	ldr	r2, [r3, #24]
34188cfe:	4b8c      	ldr	r3, [pc, #560]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188d02:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34188d06:	429a      	cmp	r2, r3
34188d08:	d908      	bls.n	34188d1c <HAL_RCC_ClockConfig+0x9c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34188d0a:	4b89      	ldr	r3, [pc, #548]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188d0e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34188d12:	687b      	ldr	r3, [r7, #4]
34188d14:	699b      	ldr	r3, [r3, #24]
34188d16:	4986      	ldr	r1, [pc, #536]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188d18:	4313      	orrs	r3, r2
34188d1a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34188d1c:	687b      	ldr	r3, [r7, #4]
34188d1e:	681b      	ldr	r3, [r3, #0]
34188d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34188d24:	2b00      	cmp	r3, #0
34188d26:	d010      	beq.n	34188d4a <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34188d28:	687b      	ldr	r3, [r7, #4]
34188d2a:	69da      	ldr	r2, [r3, #28]
34188d2c:	4b80      	ldr	r3, [pc, #512]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188d30:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34188d34:	429a      	cmp	r2, r3
34188d36:	d908      	bls.n	34188d4a <HAL_RCC_ClockConfig+0xca>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34188d38:	4b7d      	ldr	r3, [pc, #500]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188d3c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34188d40:	687b      	ldr	r3, [r7, #4]
34188d42:	69db      	ldr	r3, [r3, #28]
34188d44:	497a      	ldr	r1, [pc, #488]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188d46:	4313      	orrs	r3, r2
34188d48:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34188d4a:	687b      	ldr	r3, [r7, #4]
34188d4c:	681b      	ldr	r3, [r3, #0]
34188d4e:	f003 0304 	and.w	r3, r3, #4
34188d52:	2b00      	cmp	r3, #0
34188d54:	d010      	beq.n	34188d78 <HAL_RCC_ClockConfig+0xf8>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34188d56:	687b      	ldr	r3, [r7, #4]
34188d58:	68da      	ldr	r2, [r3, #12]
34188d5a:	4b75      	ldr	r3, [pc, #468]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188d5e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34188d62:	429a      	cmp	r2, r3
34188d64:	d908      	bls.n	34188d78 <HAL_RCC_ClockConfig+0xf8>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34188d66:	4b72      	ldr	r3, [pc, #456]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188d6a:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34188d6e:	687b      	ldr	r3, [r7, #4]
34188d70:	68db      	ldr	r3, [r3, #12]
34188d72:	496f      	ldr	r1, [pc, #444]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188d74:	4313      	orrs	r3, r2
34188d76:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34188d78:	687b      	ldr	r3, [r7, #4]
34188d7a:	681b      	ldr	r3, [r3, #0]
34188d7c:	f003 0301 	and.w	r3, r3, #1
34188d80:	2b00      	cmp	r3, #0
34188d82:	d063      	beq.n	34188e4c <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34188d84:	687b      	ldr	r3, [r7, #4]
34188d86:	685b      	ldr	r3, [r3, #4]
34188d88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34188d8c:	d106      	bne.n	34188d9c <HAL_RCC_ClockConfig+0x11c>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34188d8e:	f7ff f901 	bl	34187f94 <LL_RCC_HSE_IsReady>
34188d92:	4603      	mov	r3, r0
34188d94:	2b00      	cmp	r3, #0
34188d96:	d134      	bne.n	34188e02 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34188d98:	2301      	movs	r3, #1
34188d9a:	e16d      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34188d9c:	687b      	ldr	r3, [r7, #4]
34188d9e:	685b      	ldr	r3, [r3, #4]
34188da0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34188da4:	d11a      	bne.n	34188ddc <HAL_RCC_ClockConfig+0x15c>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34188da6:	f7ff fb33 	bl	34188410 <LL_RCC_IC1_GetSource>
34188daa:	4602      	mov	r2, r0
34188dac:	687b      	ldr	r3, [r7, #4]
34188dae:	6a1b      	ldr	r3, [r3, #32]
34188db0:	4619      	mov	r1, r3
34188db2:	4610      	mov	r0, r2
34188db4:	f000 fd00 	bl	341897b8 <RCC_IC_CheckPLLSources>
34188db8:	4603      	mov	r3, r0
34188dba:	2b01      	cmp	r3, #1
34188dbc:	d001      	beq.n	34188dc2 <HAL_RCC_ClockConfig+0x142>
      {
        return HAL_ERROR;
34188dbe:	2301      	movs	r3, #1
34188dc0:	e15a      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34188dc2:	687b      	ldr	r3, [r7, #4]
34188dc4:	6a1a      	ldr	r2, [r3, #32]
34188dc6:	687b      	ldr	r3, [r7, #4]
34188dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188dca:	3b01      	subs	r3, #1
34188dcc:	041b      	lsls	r3, r3, #16
34188dce:	4958      	ldr	r1, [pc, #352]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188dd0:	4313      	orrs	r3, r2
34188dd2:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
34188dd6:	f7ff fb0d 	bl	341883f4 <LL_RCC_IC1_Enable>
34188dda:	e012      	b.n	34188e02 <HAL_RCC_ClockConfig+0x182>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34188ddc:	687b      	ldr	r3, [r7, #4]
34188dde:	685b      	ldr	r3, [r3, #4]
34188de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34188de4:	d106      	bne.n	34188df4 <HAL_RCC_ClockConfig+0x174>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34188de6:	f7ff f96d 	bl	341880c4 <LL_RCC_MSI_IsReady>
34188dea:	4603      	mov	r3, r0
34188dec:	2b00      	cmp	r3, #0
34188dee:	d108      	bne.n	34188e02 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34188df0:	2301      	movs	r3, #1
34188df2:	e141      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34188df4:	f7ff f8fe 	bl	34187ff4 <LL_RCC_HSI_IsReady>
34188df8:	4603      	mov	r3, r0
34188dfa:	2b00      	cmp	r3, #0
34188dfc:	d101      	bne.n	34188e02 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34188dfe:	2301      	movs	r3, #1
34188e00:	e13a      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34188e02:	4b4b      	ldr	r3, [pc, #300]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188e04:	6a1b      	ldr	r3, [r3, #32]
34188e06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
34188e0a:	687b      	ldr	r3, [r7, #4]
34188e0c:	685b      	ldr	r3, [r3, #4]
34188e0e:	4948      	ldr	r1, [pc, #288]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188e10:	4313      	orrs	r3, r2
34188e12:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34188e14:	f7f9 fe12 	bl	34182a3c <HAL_GetTick>
34188e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34188e1a:	e00a      	b.n	34188e32 <HAL_RCC_ClockConfig+0x1b2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34188e1c:	f7f9 fe0e 	bl	34182a3c <HAL_GetTick>
34188e20:	4602      	mov	r2, r0
34188e22:	68fb      	ldr	r3, [r7, #12]
34188e24:	1ad3      	subs	r3, r2, r3
34188e26:	f241 3288 	movw	r2, #5000	@ 0x1388
34188e2a:	4293      	cmp	r3, r2
34188e2c:	d901      	bls.n	34188e32 <HAL_RCC_ClockConfig+0x1b2>
      {
        return HAL_TIMEOUT;
34188e2e:	2303      	movs	r3, #3
34188e30:	e122      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34188e32:	f7ff f9cf 	bl	341881d4 <LL_RCC_GetCpuClkSource>
34188e36:	4602      	mov	r2, r0
34188e38:	687b      	ldr	r3, [r7, #4]
34188e3a:	685b      	ldr	r3, [r3, #4]
34188e3c:	011b      	lsls	r3, r3, #4
34188e3e:	429a      	cmp	r2, r3
34188e40:	d1ec      	bne.n	34188e1c <HAL_RCC_ClockConfig+0x19c>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34188e42:	f000 f921 	bl	34189088 <HAL_RCC_GetCpuClockFreq>
34188e46:	4603      	mov	r3, r0
34188e48:	4a3a      	ldr	r2, [pc, #232]	@ (34188f34 <HAL_RCC_ClockConfig+0x2b4>)
34188e4a:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34188e4c:	687b      	ldr	r3, [r7, #4]
34188e4e:	681b      	ldr	r3, [r3, #0]
34188e50:	f003 0302 	and.w	r3, r3, #2
34188e54:	2b00      	cmp	r3, #0
34188e56:	f000 8096 	beq.w	34188f86 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34188e5a:	687b      	ldr	r3, [r7, #4]
34188e5c:	689b      	ldr	r3, [r3, #8]
34188e5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34188e62:	d106      	bne.n	34188e72 <HAL_RCC_ClockConfig+0x1f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34188e64:	f7ff f896 	bl	34187f94 <LL_RCC_HSE_IsReady>
34188e68:	4603      	mov	r3, r0
34188e6a:	2b00      	cmp	r3, #0
34188e6c:	d16b      	bne.n	34188f46 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34188e6e:	2301      	movs	r3, #1
34188e70:	e102      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34188e72:	687b      	ldr	r3, [r7, #4]
34188e74:	689b      	ldr	r3, [r3, #8]
34188e76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34188e7a:	d14d      	bne.n	34188f18 <HAL_RCC_ClockConfig+0x298>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34188e7c:	f7ff fae6 	bl	3418844c <LL_RCC_IC2_GetSource>
34188e80:	4602      	mov	r2, r0
34188e82:	687b      	ldr	r3, [r7, #4]
34188e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34188e86:	4619      	mov	r1, r3
34188e88:	4610      	mov	r0, r2
34188e8a:	f000 fc95 	bl	341897b8 <RCC_IC_CheckPLLSources>
34188e8e:	4603      	mov	r3, r0
34188e90:	2b01      	cmp	r3, #1
34188e92:	d001      	beq.n	34188e98 <HAL_RCC_ClockConfig+0x218>
      {
        return HAL_ERROR;
34188e94:	2301      	movs	r3, #1
34188e96:	e0ef      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34188e98:	f7ff faf6 	bl	34188488 <LL_RCC_IC6_GetSource>
34188e9c:	4602      	mov	r2, r0
34188e9e:	687b      	ldr	r3, [r7, #4]
34188ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34188ea2:	4619      	mov	r1, r3
34188ea4:	4610      	mov	r0, r2
34188ea6:	f000 fc87 	bl	341897b8 <RCC_IC_CheckPLLSources>
34188eaa:	4603      	mov	r3, r0
34188eac:	2b01      	cmp	r3, #1
34188eae:	d001      	beq.n	34188eb4 <HAL_RCC_ClockConfig+0x234>
      {
        return HAL_ERROR;
34188eb0:	2301      	movs	r3, #1
34188eb2:	e0e1      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34188eb4:	f7ff faf6 	bl	341884a4 <LL_RCC_IC11_GetSource>
34188eb8:	4602      	mov	r2, r0
34188eba:	687b      	ldr	r3, [r7, #4]
34188ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34188ebe:	4619      	mov	r1, r3
34188ec0:	4610      	mov	r0, r2
34188ec2:	f000 fc79 	bl	341897b8 <RCC_IC_CheckPLLSources>
34188ec6:	4603      	mov	r3, r0
34188ec8:	2b01      	cmp	r3, #1
34188eca:	d001      	beq.n	34188ed0 <HAL_RCC_ClockConfig+0x250>
      {
        return HAL_ERROR;
34188ecc:	2301      	movs	r3, #1
34188ece:	e0d3      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34188ed0:	687b      	ldr	r3, [r7, #4]
34188ed2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34188ed4:	687b      	ldr	r3, [r7, #4]
34188ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34188ed8:	3b01      	subs	r3, #1
34188eda:	041b      	lsls	r3, r3, #16
34188edc:	4914      	ldr	r1, [pc, #80]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188ede:	4313      	orrs	r3, r2
34188ee0:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34188ee4:	687b      	ldr	r3, [r7, #4]
34188ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
34188ee8:	687b      	ldr	r3, [r7, #4]
34188eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34188eec:	3b01      	subs	r3, #1
34188eee:	041b      	lsls	r3, r3, #16
34188ef0:	490f      	ldr	r1, [pc, #60]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188ef2:	4313      	orrs	r3, r2
34188ef4:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34188ef8:	687b      	ldr	r3, [r7, #4]
34188efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34188efc:	687b      	ldr	r3, [r7, #4]
34188efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34188f00:	3b01      	subs	r3, #1
34188f02:	041b      	lsls	r3, r3, #16
34188f04:	490a      	ldr	r1, [pc, #40]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188f06:	4313      	orrs	r3, r2
34188f08:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34188f0c:	4b08      	ldr	r3, [pc, #32]	@ (34188f30 <HAL_RCC_ClockConfig+0x2b0>)
34188f0e:	f240 4222 	movw	r2, #1058	@ 0x422
34188f12:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
34188f16:	e016      	b.n	34188f46 <HAL_RCC_ClockConfig+0x2c6>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34188f18:	687b      	ldr	r3, [r7, #4]
34188f1a:	689b      	ldr	r3, [r3, #8]
34188f1c:	2b00      	cmp	r3, #0
34188f1e:	d10b      	bne.n	34188f38 <HAL_RCC_ClockConfig+0x2b8>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34188f20:	f7ff f868 	bl	34187ff4 <LL_RCC_HSI_IsReady>
34188f24:	4603      	mov	r3, r0
34188f26:	2b00      	cmp	r3, #0
34188f28:	d10d      	bne.n	34188f46 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34188f2a:	2301      	movs	r3, #1
34188f2c:	e0a4      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
34188f2e:	bf00      	nop
34188f30:	56028000 	.word	0x56028000
34188f34:	341c00dc 	.word	0x341c00dc
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34188f38:	f7ff f8c4 	bl	341880c4 <LL_RCC_MSI_IsReady>
34188f3c:	4603      	mov	r3, r0
34188f3e:	2b00      	cmp	r3, #0
34188f40:	d101      	bne.n	34188f46 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34188f42:	2301      	movs	r3, #1
34188f44:	e098      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34188f46:	4b4e      	ldr	r3, [pc, #312]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34188f48:	6a1b      	ldr	r3, [r3, #32]
34188f4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34188f4e:	687b      	ldr	r3, [r7, #4]
34188f50:	689b      	ldr	r3, [r3, #8]
34188f52:	494b      	ldr	r1, [pc, #300]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34188f54:	4313      	orrs	r3, r2
34188f56:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34188f58:	f7f9 fd70 	bl	34182a3c <HAL_GetTick>
34188f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34188f5e:	e00a      	b.n	34188f76 <HAL_RCC_ClockConfig+0x2f6>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34188f60:	f7f9 fd6c 	bl	34182a3c <HAL_GetTick>
34188f64:	4602      	mov	r2, r0
34188f66:	68fb      	ldr	r3, [r7, #12]
34188f68:	1ad3      	subs	r3, r2, r3
34188f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
34188f6e:	4293      	cmp	r3, r2
34188f70:	d901      	bls.n	34188f76 <HAL_RCC_ClockConfig+0x2f6>
      {
        return HAL_TIMEOUT;
34188f72:	2303      	movs	r3, #3
34188f74:	e080      	b.n	34189078 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34188f76:	f7ff f93b 	bl	341881f0 <LL_RCC_GetSysClkSource>
34188f7a:	4602      	mov	r2, r0
34188f7c:	687b      	ldr	r3, [r7, #4]
34188f7e:	689b      	ldr	r3, [r3, #8]
34188f80:	011b      	lsls	r3, r3, #4
34188f82:	429a      	cmp	r2, r3
34188f84:	d1ec      	bne.n	34188f60 <HAL_RCC_ClockConfig+0x2e0>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34188f86:	687b      	ldr	r3, [r7, #4]
34188f88:	681b      	ldr	r3, [r3, #0]
34188f8a:	f003 0304 	and.w	r3, r3, #4
34188f8e:	2b00      	cmp	r3, #0
34188f90:	d010      	beq.n	34188fb4 <HAL_RCC_ClockConfig+0x334>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34188f92:	687b      	ldr	r3, [r7, #4]
34188f94:	68da      	ldr	r2, [r3, #12]
34188f96:	4b3a      	ldr	r3, [pc, #232]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34188f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188f9a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34188f9e:	429a      	cmp	r2, r3
34188fa0:	d208      	bcs.n	34188fb4 <HAL_RCC_ClockConfig+0x334>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34188fa2:	4b37      	ldr	r3, [pc, #220]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34188fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188fa6:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34188faa:	687b      	ldr	r3, [r7, #4]
34188fac:	68db      	ldr	r3, [r3, #12]
34188fae:	4934      	ldr	r1, [pc, #208]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34188fb0:	4313      	orrs	r3, r2
34188fb2:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34188fb4:	687b      	ldr	r3, [r7, #4]
34188fb6:	681b      	ldr	r3, [r3, #0]
34188fb8:	f003 0308 	and.w	r3, r3, #8
34188fbc:	2b00      	cmp	r3, #0
34188fbe:	d010      	beq.n	34188fe2 <HAL_RCC_ClockConfig+0x362>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34188fc0:	687b      	ldr	r3, [r7, #4]
34188fc2:	691a      	ldr	r2, [r3, #16]
34188fc4:	4b2e      	ldr	r3, [pc, #184]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34188fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188fc8:	f003 0307 	and.w	r3, r3, #7
34188fcc:	429a      	cmp	r2, r3
34188fce:	d208      	bcs.n	34188fe2 <HAL_RCC_ClockConfig+0x362>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34188fd0:	4b2b      	ldr	r3, [pc, #172]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34188fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188fd4:	f023 0207 	bic.w	r2, r3, #7
34188fd8:	687b      	ldr	r3, [r7, #4]
34188fda:	691b      	ldr	r3, [r3, #16]
34188fdc:	4928      	ldr	r1, [pc, #160]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34188fde:	4313      	orrs	r3, r2
34188fe0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34188fe2:	687b      	ldr	r3, [r7, #4]
34188fe4:	681b      	ldr	r3, [r3, #0]
34188fe6:	f003 0310 	and.w	r3, r3, #16
34188fea:	2b00      	cmp	r3, #0
34188fec:	d010      	beq.n	34189010 <HAL_RCC_ClockConfig+0x390>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34188fee:	687b      	ldr	r3, [r7, #4]
34188ff0:	695a      	ldr	r2, [r3, #20]
34188ff2:	4b23      	ldr	r3, [pc, #140]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34188ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188ff6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34188ffa:	429a      	cmp	r2, r3
34188ffc:	d208      	bcs.n	34189010 <HAL_RCC_ClockConfig+0x390>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34188ffe:	4b20      	ldr	r3, [pc, #128]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34189000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34189002:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34189006:	687b      	ldr	r3, [r7, #4]
34189008:	695b      	ldr	r3, [r3, #20]
3418900a:	491d      	ldr	r1, [pc, #116]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
3418900c:	4313      	orrs	r3, r2
3418900e:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34189010:	687b      	ldr	r3, [r7, #4]
34189012:	681b      	ldr	r3, [r3, #0]
34189014:	f003 0320 	and.w	r3, r3, #32
34189018:	2b00      	cmp	r3, #0
3418901a:	d010      	beq.n	3418903e <HAL_RCC_ClockConfig+0x3be>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
3418901c:	687b      	ldr	r3, [r7, #4]
3418901e:	699a      	ldr	r2, [r3, #24]
34189020:	4b17      	ldr	r3, [pc, #92]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34189022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34189024:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34189028:	429a      	cmp	r2, r3
3418902a:	d208      	bcs.n	3418903e <HAL_RCC_ClockConfig+0x3be>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
3418902c:	4b14      	ldr	r3, [pc, #80]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
3418902e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34189030:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34189034:	687b      	ldr	r3, [r7, #4]
34189036:	699b      	ldr	r3, [r3, #24]
34189038:	4911      	ldr	r1, [pc, #68]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
3418903a:	4313      	orrs	r3, r2
3418903c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
3418903e:	687b      	ldr	r3, [r7, #4]
34189040:	681b      	ldr	r3, [r3, #0]
34189042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34189046:	2b00      	cmp	r3, #0
34189048:	d010      	beq.n	3418906c <HAL_RCC_ClockConfig+0x3ec>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
3418904a:	687b      	ldr	r3, [r7, #4]
3418904c:	69da      	ldr	r2, [r3, #28]
3418904e:	4b0c      	ldr	r3, [pc, #48]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34189050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34189052:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34189056:	429a      	cmp	r2, r3
34189058:	d208      	bcs.n	3418906c <HAL_RCC_ClockConfig+0x3ec>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
3418905a:	4b09      	ldr	r3, [pc, #36]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
3418905c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418905e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34189062:	687b      	ldr	r3, [r7, #4]
34189064:	69db      	ldr	r3, [r3, #28]
34189066:	4906      	ldr	r1, [pc, #24]	@ (34189080 <HAL_RCC_ClockConfig+0x400>)
34189068:	4313      	orrs	r3, r2
3418906a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
3418906c:	4b05      	ldr	r3, [pc, #20]	@ (34189084 <HAL_RCC_ClockConfig+0x404>)
3418906e:	681b      	ldr	r3, [r3, #0]
34189070:	4618      	mov	r0, r3
34189072:	f7f9 fc99 	bl	341829a8 <HAL_InitTick>
34189076:	4603      	mov	r3, r0
}
34189078:	4618      	mov	r0, r3
3418907a:	3710      	adds	r7, #16
3418907c:	46bd      	mov	sp, r7
3418907e:	bd80      	pop	{r7, pc}
34189080:	56028000 	.word	0x56028000
34189084:	341c0008 	.word	0x341c0008

34189088 <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
34189088:	b580      	push	{r7, lr}
3418908a:	b082      	sub	sp, #8
3418908c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
3418908e:	2300      	movs	r3, #0
34189090:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
34189092:	f7ff f89f 	bl	341881d4 <LL_RCC_GetCpuClkSource>
34189096:	4603      	mov	r3, r0
34189098:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418909c:	d025      	beq.n	341890ea <HAL_RCC_GetCpuClockFreq+0x62>
3418909e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341890a2:	d860      	bhi.n	34189166 <HAL_RCC_GetCpuClockFreq+0xde>
341890a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341890a8:	d01c      	beq.n	341890e4 <HAL_RCC_GetCpuClockFreq+0x5c>
341890aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341890ae:	d85a      	bhi.n	34189166 <HAL_RCC_GetCpuClockFreq+0xde>
341890b0:	2b00      	cmp	r3, #0
341890b2:	d003      	beq.n	341890bc <HAL_RCC_GetCpuClockFreq+0x34>
341890b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341890b8:	d009      	beq.n	341890ce <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
341890ba:	e054      	b.n	34189166 <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341890bc:	f7fe ffc0 	bl	34188040 <LL_RCC_HSI_GetDivider>
341890c0:	4603      	mov	r3, r0
341890c2:	09db      	lsrs	r3, r3, #7
341890c4:	4a2b      	ldr	r2, [pc, #172]	@ (34189174 <HAL_RCC_GetCpuClockFreq+0xec>)
341890c6:	fa22 f303 	lsr.w	r3, r2, r3
341890ca:	607b      	str	r3, [r7, #4]
      break;
341890cc:	e04c      	b.n	34189168 <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
341890ce:	f7ff f81f 	bl	34188110 <LL_RCC_MSI_GetFrequency>
341890d2:	4603      	mov	r3, r0
341890d4:	2b00      	cmp	r3, #0
341890d6:	d102      	bne.n	341890de <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
341890d8:	4b27      	ldr	r3, [pc, #156]	@ (34189178 <HAL_RCC_GetCpuClockFreq+0xf0>)
341890da:	607b      	str	r3, [r7, #4]
      break;
341890dc:	e044      	b.n	34189168 <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
341890de:	4b27      	ldr	r3, [pc, #156]	@ (3418917c <HAL_RCC_GetCpuClockFreq+0xf4>)
341890e0:	607b      	str	r3, [r7, #4]
      break;
341890e2:	e041      	b.n	34189168 <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
341890e4:	4b26      	ldr	r3, [pc, #152]	@ (34189180 <HAL_RCC_GetCpuClockFreq+0xf8>)
341890e6:	607b      	str	r3, [r7, #4]
      break;
341890e8:	e03e      	b.n	34189168 <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
341890ea:	f7ff f99f 	bl	3418842c <LL_RCC_IC1_GetDivider>
341890ee:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
341890f0:	f7ff f98e 	bl	34188410 <LL_RCC_IC1_GetSource>
341890f4:	4603      	mov	r3, r0
341890f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341890fa:	d029      	beq.n	34189150 <HAL_RCC_GetCpuClockFreq+0xc8>
341890fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189100:	d82f      	bhi.n	34189162 <HAL_RCC_GetCpuClockFreq+0xda>
34189102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189106:	d01a      	beq.n	3418913e <HAL_RCC_GetCpuClockFreq+0xb6>
34189108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418910c:	d829      	bhi.n	34189162 <HAL_RCC_GetCpuClockFreq+0xda>
3418910e:	2b00      	cmp	r3, #0
34189110:	d003      	beq.n	3418911a <HAL_RCC_GetCpuClockFreq+0x92>
34189112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189116:	d009      	beq.n	3418912c <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
34189118:	e023      	b.n	34189162 <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418911a:	f003 fcd9 	bl	3418cad0 <HAL_RCCEx_GetPLL1CLKFreq>
3418911e:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34189120:	687a      	ldr	r2, [r7, #4]
34189122:	683b      	ldr	r3, [r7, #0]
34189124:	fbb2 f3f3 	udiv	r3, r2, r3
34189128:	607b      	str	r3, [r7, #4]
          break;
3418912a:	e01b      	b.n	34189164 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418912c:	f003 fd16 	bl	3418cb5c <HAL_RCCEx_GetPLL2CLKFreq>
34189130:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34189132:	687a      	ldr	r2, [r7, #4]
34189134:	683b      	ldr	r3, [r7, #0]
34189136:	fbb2 f3f3 	udiv	r3, r2, r3
3418913a:	607b      	str	r3, [r7, #4]
          break;
3418913c:	e012      	b.n	34189164 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418913e:	f003 fd53 	bl	3418cbe8 <HAL_RCCEx_GetPLL3CLKFreq>
34189142:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34189144:	687a      	ldr	r2, [r7, #4]
34189146:	683b      	ldr	r3, [r7, #0]
34189148:	fbb2 f3f3 	udiv	r3, r2, r3
3418914c:	607b      	str	r3, [r7, #4]
          break;
3418914e:	e009      	b.n	34189164 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189150:	f003 fd90 	bl	3418cc74 <HAL_RCCEx_GetPLL4CLKFreq>
34189154:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34189156:	687a      	ldr	r2, [r7, #4]
34189158:	683b      	ldr	r3, [r7, #0]
3418915a:	fbb2 f3f3 	udiv	r3, r2, r3
3418915e:	607b      	str	r3, [r7, #4]
          break;
34189160:	e000      	b.n	34189164 <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
34189162:	bf00      	nop
      break;
34189164:	e000      	b.n	34189168 <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
34189166:	bf00      	nop
  }

  return frequency;
34189168:	687b      	ldr	r3, [r7, #4]
}
3418916a:	4618      	mov	r0, r3
3418916c:	3708      	adds	r7, #8
3418916e:	46bd      	mov	sp, r7
34189170:	bd80      	pop	{r7, pc}
34189172:	bf00      	nop
34189174:	03d09000 	.word	0x03d09000
34189178:	003d0900 	.word	0x003d0900
3418917c:	00f42400 	.word	0x00f42400
34189180:	02dc6c00 	.word	0x02dc6c00

34189184 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
34189184:	b580      	push	{r7, lr}
34189186:	b082      	sub	sp, #8
34189188:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
3418918a:	2300      	movs	r3, #0
3418918c:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
3418918e:	f7ff f82f 	bl	341881f0 <LL_RCC_GetSysClkSource>
34189192:	4603      	mov	r3, r0
34189194:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189198:	d025      	beq.n	341891e6 <HAL_RCC_GetSysClockFreq+0x62>
3418919a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418919e:	d860      	bhi.n	34189262 <HAL_RCC_GetSysClockFreq+0xde>
341891a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341891a4:	d01c      	beq.n	341891e0 <HAL_RCC_GetSysClockFreq+0x5c>
341891a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341891aa:	d85a      	bhi.n	34189262 <HAL_RCC_GetSysClockFreq+0xde>
341891ac:	2b00      	cmp	r3, #0
341891ae:	d003      	beq.n	341891b8 <HAL_RCC_GetSysClockFreq+0x34>
341891b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341891b4:	d009      	beq.n	341891ca <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
341891b6:	e054      	b.n	34189262 <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341891b8:	f7fe ff42 	bl	34188040 <LL_RCC_HSI_GetDivider>
341891bc:	4603      	mov	r3, r0
341891be:	09db      	lsrs	r3, r3, #7
341891c0:	4a2b      	ldr	r2, [pc, #172]	@ (34189270 <HAL_RCC_GetSysClockFreq+0xec>)
341891c2:	fa22 f303 	lsr.w	r3, r2, r3
341891c6:	607b      	str	r3, [r7, #4]
      break;
341891c8:	e04c      	b.n	34189264 <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
341891ca:	f7fe ffa1 	bl	34188110 <LL_RCC_MSI_GetFrequency>
341891ce:	4603      	mov	r3, r0
341891d0:	2b00      	cmp	r3, #0
341891d2:	d102      	bne.n	341891da <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
341891d4:	4b27      	ldr	r3, [pc, #156]	@ (34189274 <HAL_RCC_GetSysClockFreq+0xf0>)
341891d6:	607b      	str	r3, [r7, #4]
      break;
341891d8:	e044      	b.n	34189264 <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
341891da:	4b27      	ldr	r3, [pc, #156]	@ (34189278 <HAL_RCC_GetSysClockFreq+0xf4>)
341891dc:	607b      	str	r3, [r7, #4]
      break;
341891de:	e041      	b.n	34189264 <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
341891e0:	4b26      	ldr	r3, [pc, #152]	@ (3418927c <HAL_RCC_GetSysClockFreq+0xf8>)
341891e2:	607b      	str	r3, [r7, #4]
      break;
341891e4:	e03e      	b.n	34189264 <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
341891e6:	f7ff f93f 	bl	34188468 <LL_RCC_IC2_GetDivider>
341891ea:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
341891ec:	f7ff f92e 	bl	3418844c <LL_RCC_IC2_GetSource>
341891f0:	4603      	mov	r3, r0
341891f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341891f6:	d029      	beq.n	3418924c <HAL_RCC_GetSysClockFreq+0xc8>
341891f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341891fc:	d82f      	bhi.n	3418925e <HAL_RCC_GetSysClockFreq+0xda>
341891fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189202:	d01a      	beq.n	3418923a <HAL_RCC_GetSysClockFreq+0xb6>
34189204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189208:	d829      	bhi.n	3418925e <HAL_RCC_GetSysClockFreq+0xda>
3418920a:	2b00      	cmp	r3, #0
3418920c:	d003      	beq.n	34189216 <HAL_RCC_GetSysClockFreq+0x92>
3418920e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189212:	d009      	beq.n	34189228 <HAL_RCC_GetSysClockFreq+0xa4>
          break;
34189214:	e023      	b.n	3418925e <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189216:	f003 fc5b 	bl	3418cad0 <HAL_RCCEx_GetPLL1CLKFreq>
3418921a:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418921c:	687a      	ldr	r2, [r7, #4]
3418921e:	683b      	ldr	r3, [r7, #0]
34189220:	fbb2 f3f3 	udiv	r3, r2, r3
34189224:	607b      	str	r3, [r7, #4]
          break;
34189226:	e01b      	b.n	34189260 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189228:	f003 fc98 	bl	3418cb5c <HAL_RCCEx_GetPLL2CLKFreq>
3418922c:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418922e:	687a      	ldr	r2, [r7, #4]
34189230:	683b      	ldr	r3, [r7, #0]
34189232:	fbb2 f3f3 	udiv	r3, r2, r3
34189236:	607b      	str	r3, [r7, #4]
          break;
34189238:	e012      	b.n	34189260 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418923a:	f003 fcd5 	bl	3418cbe8 <HAL_RCCEx_GetPLL3CLKFreq>
3418923e:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34189240:	687a      	ldr	r2, [r7, #4]
34189242:	683b      	ldr	r3, [r7, #0]
34189244:	fbb2 f3f3 	udiv	r3, r2, r3
34189248:	607b      	str	r3, [r7, #4]
          break;
3418924a:	e009      	b.n	34189260 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418924c:	f003 fd12 	bl	3418cc74 <HAL_RCCEx_GetPLL4CLKFreq>
34189250:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34189252:	687a      	ldr	r2, [r7, #4]
34189254:	683b      	ldr	r3, [r7, #0]
34189256:	fbb2 f3f3 	udiv	r3, r2, r3
3418925a:	607b      	str	r3, [r7, #4]
          break;
3418925c:	e000      	b.n	34189260 <HAL_RCC_GetSysClockFreq+0xdc>
          break;
3418925e:	bf00      	nop
      break;
34189260:	e000      	b.n	34189264 <HAL_RCC_GetSysClockFreq+0xe0>
      break;
34189262:	bf00      	nop
  }

  return frequency;
34189264:	687b      	ldr	r3, [r7, #4]
}
34189266:	4618      	mov	r0, r3
34189268:	3708      	adds	r7, #8
3418926a:	46bd      	mov	sp, r7
3418926c:	bd80      	pop	{r7, pc}
3418926e:	bf00      	nop
34189270:	03d09000 	.word	0x03d09000
34189274:	003d0900 	.word	0x003d0900
34189278:	00f42400 	.word	0x00f42400
3418927c:	02dc6c00 	.word	0x02dc6c00

34189280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
34189280:	b598      	push	{r3, r4, r7, lr}
34189282:	af00      	add	r7, sp, #0
  return LL_RCC_CALC_PCLK1_FREQ(LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()),
34189284:	f7ff ff7e 	bl	34189184 <HAL_RCC_GetSysClockFreq>
34189288:	4604      	mov	r4, r0
3418928a:	f7fe ffbf 	bl	3418820c <LL_RCC_GetAHBPrescaler>
3418928e:	4603      	mov	r3, r0
34189290:	0d1b      	lsrs	r3, r3, #20
34189292:	f003 0307 	and.w	r3, r3, #7
34189296:	40dc      	lsrs	r4, r3
34189298:	f7fe ffc6 	bl	34188228 <LL_RCC_GetAPB1Prescaler>
3418929c:	4603      	mov	r3, r0
3418929e:	f003 0307 	and.w	r3, r3, #7
341892a2:	fa24 f303 	lsr.w	r3, r4, r3
                                LL_RCC_GetAPB1Prescaler());
}
341892a6:	4618      	mov	r0, r3
341892a8:	bd98      	pop	{r3, r4, r7, pc}
	...

341892ac <HAL_RCC_GetClockConfig>:
  * @param  pRCC_ClkInitStruct  Pointer to an RCC_ClkInitTypeDef structure that
  *         will return the configuration.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
341892ac:	b480      	push	{r7}
341892ae:	b085      	sub	sp, #20
341892b0:	af00      	add	r7, sp, #0
341892b2:	6078      	str	r0, [r7, #4]
  uint32_t cfgr_value;

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK | \
341892b4:	687b      	ldr	r3, [r7, #4]
341892b6:	227f      	movs	r2, #127	@ 0x7f
341892b8:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK   | \
                                  RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                  RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the configuration register 1 value */
  cfgr_value = RCC->CFGR1;
341892ba:	4b36      	ldr	r3, [pc, #216]	@ (34189394 <HAL_RCC_GetClockConfig+0xe8>)
341892bc:	6a1b      	ldr	r3, [r3, #32]
341892be:	60fb      	str	r3, [r7, #12]

  /* Get the active CPU source -----------------------------------------------*/
  pRCC_ClkInitStruct->CPUCLKSource = (cfgr_value & RCC_CFGR1_CPUSWS) >> 4U;
341892c0:	68fb      	ldr	r3, [r7, #12]
341892c2:	091b      	lsrs	r3, r3, #4
341892c4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
341892c8:	687b      	ldr	r3, [r7, #4]
341892ca:	605a      	str	r2, [r3, #4]

  /* Get the active SYSCLK bus source ----------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (cfgr_value & RCC_CFGR1_SYSSWS) >> 4U;
341892cc:	68fb      	ldr	r3, [r7, #12]
341892ce:	091b      	lsrs	r3, r3, #4
341892d0:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
341892d4:	687b      	ldr	r3, [r7, #4]
341892d6:	609a      	str	r2, [r3, #8]

  /* Get the configuration register 2 value */
  cfgr_value = RCC->CFGR2;
341892d8:	4b2e      	ldr	r3, [pc, #184]	@ (34189394 <HAL_RCC_GetClockConfig+0xe8>)
341892da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341892dc:	60fb      	str	r3, [r7, #12]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (cfgr_value & RCC_CFGR2_HPRE);
341892de:	68fb      	ldr	r3, [r7, #12]
341892e0:	f403 02e0 	and.w	r2, r3, #7340032	@ 0x700000
341892e4:	687b      	ldr	r3, [r7, #4]
341892e6:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (cfgr_value & RCC_CFGR2_PPRE1);
341892e8:	68fb      	ldr	r3, [r7, #12]
341892ea:	f003 0207 	and.w	r2, r3, #7
341892ee:	687b      	ldr	r3, [r7, #4]
341892f0:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (cfgr_value & RCC_CFGR2_PPRE2);
341892f2:	68fb      	ldr	r3, [r7, #12]
341892f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
341892f8:	687b      	ldr	r3, [r7, #4]
341892fa:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB4CLKDivider = (cfgr_value & RCC_CFGR2_PPRE4);
341892fc:	68fb      	ldr	r3, [r7, #12]
341892fe:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
34189302:	687b      	ldr	r3, [r7, #4]
34189304:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB5CLKDivider = (cfgr_value & RCC_CFGR2_PPRE5);
34189306:	68fb      	ldr	r3, [r7, #12]
34189308:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
3418930c:	687b      	ldr	r3, [r7, #4]
3418930e:	61da      	str	r2, [r3, #28]

  /* Get the IC1 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC1CFGR;
34189310:	4b20      	ldr	r3, [pc, #128]	@ (34189394 <HAL_RCC_GetClockConfig+0xe8>)
34189312:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34189316:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC1Selection.ClockSelection = cfgr_value & RCC_IC1CFGR_IC1SEL;
34189318:	68fb      	ldr	r3, [r7, #12]
3418931a:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418931e:	687b      	ldr	r3, [r7, #4]
34189320:	621a      	str	r2, [r3, #32]
  pRCC_ClkInitStruct->IC1Selection.ClockDivider = ((cfgr_value & RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1U;
34189322:	68fb      	ldr	r3, [r7, #12]
34189324:	0c1b      	lsrs	r3, r3, #16
34189326:	b2db      	uxtb	r3, r3
34189328:	1c5a      	adds	r2, r3, #1
3418932a:	687b      	ldr	r3, [r7, #4]
3418932c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the IC2 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC2CFGR;
3418932e:	4b19      	ldr	r3, [pc, #100]	@ (34189394 <HAL_RCC_GetClockConfig+0xe8>)
34189330:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34189334:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC2Selection.ClockSelection = cfgr_value & RCC_IC2CFGR_IC2SEL;
34189336:	68fb      	ldr	r3, [r7, #12]
34189338:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418933c:	687b      	ldr	r3, [r7, #4]
3418933e:	629a      	str	r2, [r3, #40]	@ 0x28
  pRCC_ClkInitStruct->IC2Selection.ClockDivider = ((cfgr_value & RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1U;
34189340:	68fb      	ldr	r3, [r7, #12]
34189342:	0c1b      	lsrs	r3, r3, #16
34189344:	b2db      	uxtb	r3, r3
34189346:	1c5a      	adds	r2, r3, #1
34189348:	687b      	ldr	r3, [r7, #4]
3418934a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the IC6 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC6CFGR;
3418934c:	4b11      	ldr	r3, [pc, #68]	@ (34189394 <HAL_RCC_GetClockConfig+0xe8>)
3418934e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34189352:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC6Selection.ClockSelection = cfgr_value & RCC_IC6CFGR_IC6SEL;
34189354:	68fb      	ldr	r3, [r7, #12]
34189356:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418935a:	687b      	ldr	r3, [r7, #4]
3418935c:	631a      	str	r2, [r3, #48]	@ 0x30
  pRCC_ClkInitStruct->IC6Selection.ClockDivider = ((cfgr_value & RCC_IC6CFGR_IC6INT) >> RCC_IC6CFGR_IC6INT_Pos) + 1U;
3418935e:	68fb      	ldr	r3, [r7, #12]
34189360:	0c1b      	lsrs	r3, r3, #16
34189362:	b2db      	uxtb	r3, r3
34189364:	1c5a      	adds	r2, r3, #1
34189366:	687b      	ldr	r3, [r7, #4]
34189368:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the IC11 configuration ----------------------------------------------*/
  cfgr_value = RCC->IC11CFGR;
3418936a:	4b0a      	ldr	r3, [pc, #40]	@ (34189394 <HAL_RCC_GetClockConfig+0xe8>)
3418936c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34189370:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC11Selection.ClockSelection = cfgr_value & RCC_IC11CFGR_IC11SEL;
34189372:	68fb      	ldr	r3, [r7, #12]
34189374:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34189378:	687b      	ldr	r3, [r7, #4]
3418937a:	639a      	str	r2, [r3, #56]	@ 0x38
  pRCC_ClkInitStruct->IC11Selection.ClockDivider = ((cfgr_value & RCC_IC11CFGR_IC11INT) >> RCC_IC11CFGR_IC11INT_Pos) + 1U;
3418937c:	68fb      	ldr	r3, [r7, #12]
3418937e:	0c1b      	lsrs	r3, r3, #16
34189380:	b2db      	uxtb	r3, r3
34189382:	1c5a      	adds	r2, r3, #1
34189384:	687b      	ldr	r3, [r7, #4]
34189386:	63da      	str	r2, [r3, #60]	@ 0x3c
}
34189388:	bf00      	nop
3418938a:	3714      	adds	r7, #20
3418938c:	46bd      	mov	sp, r7
3418938e:	f85d 7b04 	ldr.w	r7, [sp], #4
34189392:	4770      	bx	lr
34189394:	56028000 	.word	0x56028000

34189398 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34189398:	b580      	push	{r7, lr}
3418939a:	b088      	sub	sp, #32
3418939c:	af00      	add	r7, sp, #0
3418939e:	6078      	str	r0, [r7, #4]
341893a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
341893a2:	2300      	movs	r3, #0
341893a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
341893a6:	687b      	ldr	r3, [r7, #4]
341893a8:	011a      	lsls	r2, r3, #4
341893aa:	4b8e      	ldr	r3, [pc, #568]	@ (341895e4 <RCC_PLL_Config+0x24c>)
341893ac:	4413      	add	r3, r2
341893ae:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
341893b0:	687b      	ldr	r3, [r7, #4]
341893b2:	011a      	lsls	r2, r3, #4
341893b4:	4b8c      	ldr	r3, [pc, #560]	@ (341895e8 <RCC_PLL_Config+0x250>)
341893b6:	4413      	add	r3, r2
341893b8:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
341893ba:	687b      	ldr	r3, [r7, #4]
341893bc:	011a      	lsls	r2, r3, #4
341893be:	4b8b      	ldr	r3, [pc, #556]	@ (341895ec <RCC_PLL_Config+0x254>)
341893c0:	4413      	add	r3, r2
341893c2:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
341893c4:	683b      	ldr	r3, [r7, #0]
341893c6:	681b      	ldr	r3, [r3, #0]
341893c8:	2b02      	cmp	r3, #2
341893ca:	f040 8091 	bne.w	341894f0 <RCC_PLL_Config+0x158>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
341893ce:	4a88      	ldr	r2, [pc, #544]	@ (341895f0 <RCC_PLL_Config+0x258>)
341893d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
341893d4:	687b      	ldr	r3, [r7, #4]
341893d6:	fa01 f303 	lsl.w	r3, r1, r3
341893da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341893de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341893e0:	f7f9 fb2c 	bl	34182a3c <HAL_GetTick>
341893e4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341893e6:	e008      	b.n	341893fa <RCC_PLL_Config+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
341893e8:	f7f9 fb28 	bl	34182a3c <HAL_GetTick>
341893ec:	4602      	mov	r2, r0
341893ee:	68fb      	ldr	r3, [r7, #12]
341893f0:	1ad3      	subs	r3, r2, r3
341893f2:	2b01      	cmp	r3, #1
341893f4:	d901      	bls.n	341893fa <RCC_PLL_Config+0x62>
      {
        return HAL_TIMEOUT;
341893f6:	2303      	movs	r3, #3
341893f8:	e0f0      	b.n	341895dc <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341893fa:	4b7d      	ldr	r3, [pc, #500]	@ (341895f0 <RCC_PLL_Config+0x258>)
341893fc:	685a      	ldr	r2, [r3, #4]
341893fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
34189402:	687b      	ldr	r3, [r7, #4]
34189404:	fa01 f303 	lsl.w	r3, r1, r3
34189408:	401a      	ands	r2, r3
3418940a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418940e:	687b      	ldr	r3, [r7, #4]
34189410:	fa01 f303 	lsl.w	r3, r1, r3
34189414:	429a      	cmp	r2, r3
34189416:	d0e7      	beq.n	341893e8 <RCC_PLL_Config+0x50>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34189418:	693b      	ldr	r3, [r7, #16]
3418941a:	681b      	ldr	r3, [r3, #0]
3418941c:	f043 0204 	orr.w	r2, r3, #4
34189420:	693b      	ldr	r3, [r7, #16]
34189422:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34189424:	69bb      	ldr	r3, [r7, #24]
34189426:	681b      	ldr	r3, [r3, #0]
34189428:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3418942c:	69bb      	ldr	r3, [r7, #24]
3418942e:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34189430:	69bb      	ldr	r3, [r7, #24]
34189432:	681a      	ldr	r2, [r3, #0]
34189434:	4b6f      	ldr	r3, [pc, #444]	@ (341895f4 <RCC_PLL_Config+0x25c>)
34189436:	4013      	ands	r3, r2
34189438:	683a      	ldr	r2, [r7, #0]
3418943a:	6851      	ldr	r1, [r2, #4]
3418943c:	683a      	ldr	r2, [r7, #0]
3418943e:	6892      	ldr	r2, [r2, #8]
34189440:	0512      	lsls	r2, r2, #20
34189442:	4311      	orrs	r1, r2
34189444:	683a      	ldr	r2, [r7, #0]
34189446:	6912      	ldr	r2, [r2, #16]
34189448:	0212      	lsls	r2, r2, #8
3418944a:	430a      	orrs	r2, r1
3418944c:	431a      	orrs	r2, r3
3418944e:	69bb      	ldr	r3, [r7, #24]
34189450:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34189452:	693b      	ldr	r3, [r7, #16]
34189454:	681b      	ldr	r3, [r3, #0]
34189456:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
3418945a:	683b      	ldr	r3, [r7, #0]
3418945c:	695b      	ldr	r3, [r3, #20]
3418945e:	06d9      	lsls	r1, r3, #27
34189460:	683b      	ldr	r3, [r7, #0]
34189462:	699b      	ldr	r3, [r3, #24]
34189464:	061b      	lsls	r3, r3, #24
34189466:	430b      	orrs	r3, r1
34189468:	431a      	orrs	r2, r3
3418946a:	693b      	ldr	r3, [r7, #16]
3418946c:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
3418946e:	697b      	ldr	r3, [r7, #20]
34189470:	681b      	ldr	r3, [r3, #0]
34189472:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
34189476:	683b      	ldr	r3, [r7, #0]
34189478:	68db      	ldr	r3, [r3, #12]
3418947a:	431a      	orrs	r2, r3
3418947c:	697b      	ldr	r3, [r7, #20]
3418947e:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34189480:	693b      	ldr	r3, [r7, #16]
34189482:	681b      	ldr	r3, [r3, #0]
34189484:	f023 0208 	bic.w	r2, r3, #8
34189488:	693b      	ldr	r3, [r7, #16]
3418948a:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
3418948c:	683b      	ldr	r3, [r7, #0]
3418948e:	68db      	ldr	r3, [r3, #12]
34189490:	2b00      	cmp	r3, #0
34189492:	d005      	beq.n	341894a0 <RCC_PLL_Config+0x108>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34189494:	693b      	ldr	r3, [r7, #16]
34189496:	681b      	ldr	r3, [r3, #0]
34189498:	f043 020a 	orr.w	r2, r3, #10
3418949c:	693b      	ldr	r3, [r7, #16]
3418949e:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
341894a0:	693b      	ldr	r3, [r7, #16]
341894a2:	681b      	ldr	r3, [r3, #0]
341894a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
341894a8:	f043 0301 	orr.w	r3, r3, #1
341894ac:	693a      	ldr	r2, [r7, #16]
341894ae:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
341894b0:	4a4f      	ldr	r2, [pc, #316]	@ (341895f0 <RCC_PLL_Config+0x258>)
341894b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
341894b6:	687b      	ldr	r3, [r7, #4]
341894b8:	fa01 f303 	lsl.w	r3, r1, r3
341894bc:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341894c0:	f7f9 fabc 	bl	34182a3c <HAL_GetTick>
341894c4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
341894c6:	e008      	b.n	341894da <RCC_PLL_Config+0x142>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
341894c8:	f7f9 fab8 	bl	34182a3c <HAL_GetTick>
341894cc:	4602      	mov	r2, r0
341894ce:	68fb      	ldr	r3, [r7, #12]
341894d0:	1ad3      	subs	r3, r2, r3
341894d2:	2b01      	cmp	r3, #1
341894d4:	d901      	bls.n	341894da <RCC_PLL_Config+0x142>
      {
        return HAL_TIMEOUT;
341894d6:	2303      	movs	r3, #3
341894d8:	e080      	b.n	341895dc <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
341894da:	4b45      	ldr	r3, [pc, #276]	@ (341895f0 <RCC_PLL_Config+0x258>)
341894dc:	685a      	ldr	r2, [r3, #4]
341894de:	f44f 7180 	mov.w	r1, #256	@ 0x100
341894e2:	687b      	ldr	r3, [r7, #4]
341894e4:	fa01 f303 	lsl.w	r3, r1, r3
341894e8:	4013      	ands	r3, r2
341894ea:	2b00      	cmp	r3, #0
341894ec:	d0ec      	beq.n	341894c8 <RCC_PLL_Config+0x130>
341894ee:	e074      	b.n	341895da <RCC_PLL_Config+0x242>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
341894f0:	683b      	ldr	r3, [r7, #0]
341894f2:	681b      	ldr	r3, [r3, #0]
341894f4:	2b03      	cmp	r3, #3
341894f6:	d13b      	bne.n	34189570 <RCC_PLL_Config+0x1d8>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
341894f8:	683b      	ldr	r3, [r7, #0]
341894fa:	685b      	ldr	r3, [r3, #4]
341894fc:	4618      	mov	r0, r3
341894fe:	f000 f921 	bl	34189744 <RCC_PLL_Source_IsReady>
34189502:	4603      	mov	r3, r0
34189504:	2b01      	cmp	r3, #1
34189506:	d130      	bne.n	3418956a <RCC_PLL_Config+0x1d2>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34189508:	4a39      	ldr	r2, [pc, #228]	@ (341895f0 <RCC_PLL_Config+0x258>)
3418950a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418950e:	687b      	ldr	r3, [r7, #4]
34189510:	fa01 f303 	lsl.w	r3, r1, r3
34189514:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34189518:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418951a:	f7f9 fa8f 	bl	34182a3c <HAL_GetTick>
3418951e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34189520:	e008      	b.n	34189534 <RCC_PLL_Config+0x19c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34189522:	f7f9 fa8b 	bl	34182a3c <HAL_GetTick>
34189526:	4602      	mov	r2, r0
34189528:	68fb      	ldr	r3, [r7, #12]
3418952a:	1ad3      	subs	r3, r2, r3
3418952c:	2b01      	cmp	r3, #1
3418952e:	d901      	bls.n	34189534 <RCC_PLL_Config+0x19c>
        {
          return HAL_TIMEOUT;
34189530:	2303      	movs	r3, #3
34189532:	e053      	b.n	341895dc <RCC_PLL_Config+0x244>
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34189534:	4b2e      	ldr	r3, [pc, #184]	@ (341895f0 <RCC_PLL_Config+0x258>)
34189536:	685a      	ldr	r2, [r3, #4]
34189538:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418953c:	687b      	ldr	r3, [r7, #4]
3418953e:	fa01 f303 	lsl.w	r3, r1, r3
34189542:	401a      	ands	r2, r3
34189544:	f44f 7180 	mov.w	r1, #256	@ 0x100
34189548:	687b      	ldr	r3, [r7, #4]
3418954a:	fa01 f303 	lsl.w	r3, r1, r3
3418954e:	429a      	cmp	r2, r3
34189550:	d0e7      	beq.n	34189522 <RCC_PLL_Config+0x18a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34189552:	69bb      	ldr	r3, [r7, #24]
34189554:	681b      	ldr	r3, [r3, #0]
34189556:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
3418955a:	683b      	ldr	r3, [r7, #0]
3418955c:	685b      	ldr	r3, [r3, #4]
3418955e:	4313      	orrs	r3, r2
34189560:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34189564:	69bb      	ldr	r3, [r7, #24]
34189566:	601a      	str	r2, [r3, #0]
34189568:	e037      	b.n	341895da <RCC_PLL_Config+0x242>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
3418956a:	2301      	movs	r3, #1
3418956c:	77fb      	strb	r3, [r7, #31]
3418956e:	e034      	b.n	341895da <RCC_PLL_Config+0x242>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34189570:	683b      	ldr	r3, [r7, #0]
34189572:	681b      	ldr	r3, [r3, #0]
34189574:	2b01      	cmp	r3, #1
34189576:	d130      	bne.n	341895da <RCC_PLL_Config+0x242>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34189578:	693b      	ldr	r3, [r7, #16]
3418957a:	681b      	ldr	r3, [r3, #0]
3418957c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34189580:	693b      	ldr	r3, [r7, #16]
34189582:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34189584:	4a1a      	ldr	r2, [pc, #104]	@ (341895f0 <RCC_PLL_Config+0x258>)
34189586:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418958a:	687b      	ldr	r3, [r7, #4]
3418958c:	fa01 f303 	lsl.w	r3, r1, r3
34189590:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34189594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34189596:	f7f9 fa51 	bl	34182a3c <HAL_GetTick>
3418959a:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418959c:	e008      	b.n	341895b0 <RCC_PLL_Config+0x218>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418959e:	f7f9 fa4d 	bl	34182a3c <HAL_GetTick>
341895a2:	4602      	mov	r2, r0
341895a4:	68fb      	ldr	r3, [r7, #12]
341895a6:	1ad3      	subs	r3, r2, r3
341895a8:	2b01      	cmp	r3, #1
341895aa:	d901      	bls.n	341895b0 <RCC_PLL_Config+0x218>
      {
        return HAL_TIMEOUT;
341895ac:	2303      	movs	r3, #3
341895ae:	e015      	b.n	341895dc <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341895b0:	4b0f      	ldr	r3, [pc, #60]	@ (341895f0 <RCC_PLL_Config+0x258>)
341895b2:	685a      	ldr	r2, [r3, #4]
341895b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
341895b8:	687b      	ldr	r3, [r7, #4]
341895ba:	fa01 f303 	lsl.w	r3, r1, r3
341895be:	401a      	ands	r2, r3
341895c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
341895c4:	687b      	ldr	r3, [r7, #4]
341895c6:	fa01 f303 	lsl.w	r3, r1, r3
341895ca:	429a      	cmp	r2, r3
341895cc:	d0e7      	beq.n	3418959e <RCC_PLL_Config+0x206>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
341895ce:	69bb      	ldr	r3, [r7, #24]
341895d0:	681b      	ldr	r3, [r3, #0]
341895d2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
341895d6:	69bb      	ldr	r3, [r7, #24]
341895d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
341895da:	7ffb      	ldrb	r3, [r7, #31]
}
341895dc:	4618      	mov	r0, r3
341895de:	3720      	adds	r7, #32
341895e0:	46bd      	mov	sp, r7
341895e2:	bd80      	pop	{r7, pc}
341895e4:	56028080 	.word	0x56028080
341895e8:	56028084 	.word	0x56028084
341895ec:	56028088 	.word	0x56028088
341895f0:	56028000 	.word	0x56028000
341895f4:	8c0000ff 	.word	0x8c0000ff

341895f8 <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
341895f8:	b580      	push	{r7, lr}
341895fa:	b084      	sub	sp, #16
341895fc:	af00      	add	r7, sp, #0
341895fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
34189600:	2300      	movs	r3, #0
34189602:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34189604:	4a11      	ldr	r2, [pc, #68]	@ (3418964c <RCC_PLL_Enable+0x54>)
34189606:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418960a:	687b      	ldr	r3, [r7, #4]
3418960c:	fa01 f303 	lsl.w	r3, r1, r3
34189610:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
34189614:	f7f9 fa12 	bl	34182a3c <HAL_GetTick>
34189618:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418961a:	e008      	b.n	3418962e <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418961c:	f7f9 fa0e 	bl	34182a3c <HAL_GetTick>
34189620:	4602      	mov	r2, r0
34189622:	68bb      	ldr	r3, [r7, #8]
34189624:	1ad3      	subs	r3, r2, r3
34189626:	2b01      	cmp	r3, #1
34189628:	d901      	bls.n	3418962e <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
3418962a:	2303      	movs	r3, #3
3418962c:	e00a      	b.n	34189644 <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418962e:	4b07      	ldr	r3, [pc, #28]	@ (3418964c <RCC_PLL_Enable+0x54>)
34189630:	685a      	ldr	r2, [r3, #4]
34189632:	f44f 7180 	mov.w	r1, #256	@ 0x100
34189636:	687b      	ldr	r3, [r7, #4]
34189638:	fa01 f303 	lsl.w	r3, r1, r3
3418963c:	4013      	ands	r3, r2
3418963e:	2b00      	cmp	r3, #0
34189640:	d0ec      	beq.n	3418961c <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
34189642:	7bfb      	ldrb	r3, [r7, #15]
}
34189644:	4618      	mov	r0, r3
34189646:	3710      	adds	r7, #16
34189648:	46bd      	mov	sp, r7
3418964a:	bd80      	pop	{r7, pc}
3418964c:	56028000 	.word	0x56028000

34189650 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34189650:	b480      	push	{r7}
34189652:	b089      	sub	sp, #36	@ 0x24
34189654:	af00      	add	r7, sp, #0
34189656:	6078      	str	r0, [r7, #4]
34189658:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
3418965a:	2300      	movs	r3, #0
3418965c:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
3418965e:	687b      	ldr	r3, [r7, #4]
34189660:	011a      	lsls	r2, r3, #4
34189662:	4b34      	ldr	r3, [pc, #208]	@ (34189734 <RCC_PLL_IsNewConfig+0xe4>)
34189664:	4413      	add	r3, r2
34189666:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34189668:	687b      	ldr	r3, [r7, #4]
3418966a:	011a      	lsls	r2, r3, #4
3418966c:	4b32      	ldr	r3, [pc, #200]	@ (34189738 <RCC_PLL_IsNewConfig+0xe8>)
3418966e:	4413      	add	r3, r2
34189670:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34189672:	687b      	ldr	r3, [r7, #4]
34189674:	011a      	lsls	r2, r3, #4
34189676:	4b31      	ldr	r3, [pc, #196]	@ (3418973c <RCC_PLL_IsNewConfig+0xec>)
34189678:	4413      	add	r3, r2
3418967a:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3418967c:	697b      	ldr	r3, [r7, #20]
3418967e:	681b      	ldr	r3, [r3, #0]
34189680:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
34189684:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34189688:	683a      	ldr	r2, [r7, #0]
3418968a:	6851      	ldr	r1, [r2, #4]
3418968c:	683a      	ldr	r2, [r7, #0]
3418968e:	6892      	ldr	r2, [r2, #8]
34189690:	0512      	lsls	r2, r2, #20
34189692:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34189694:	683a      	ldr	r2, [r7, #0]
34189696:	6912      	ldr	r2, [r2, #16]
34189698:	0212      	lsls	r2, r2, #8
3418969a:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3418969c:	4293      	cmp	r3, r2
3418969e:	d002      	beq.n	341896a6 <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
341896a0:	2301      	movs	r3, #1
341896a2:	61fb      	str	r3, [r7, #28]
341896a4:	e03e      	b.n	34189724 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
341896a6:	693b      	ldr	r3, [r7, #16]
341896a8:	681b      	ldr	r3, [r3, #0]
341896aa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
341896ae:	683b      	ldr	r3, [r7, #0]
341896b0:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
341896b2:	429a      	cmp	r2, r3
341896b4:	d002      	beq.n	341896bc <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
341896b6:	2301      	movs	r3, #1
341896b8:	61fb      	str	r3, [r7, #28]
341896ba:	e033      	b.n	34189724 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
341896bc:	68fb      	ldr	r3, [r7, #12]
341896be:	681b      	ldr	r3, [r3, #0]
341896c0:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
341896c4:	683b      	ldr	r3, [r7, #0]
341896c6:	695b      	ldr	r3, [r3, #20]
341896c8:	06d9      	lsls	r1, r3, #27
341896ca:	683b      	ldr	r3, [r7, #0]
341896cc:	699b      	ldr	r3, [r3, #24]
341896ce:	061b      	lsls	r3, r3, #24
341896d0:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
341896d2:	429a      	cmp	r2, r3
341896d4:	d002      	beq.n	341896dc <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
341896d6:	2301      	movs	r3, #1
341896d8:	61fb      	str	r3, [r7, #28]
341896da:	e023      	b.n	34189724 <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341896dc:	4b18      	ldr	r3, [pc, #96]	@ (34189740 <RCC_PLL_IsNewConfig+0xf0>)
341896de:	685a      	ldr	r2, [r3, #4]
341896e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
341896e4:	687b      	ldr	r3, [r7, #4]
341896e6:	fa01 f303 	lsl.w	r3, r1, r3
341896ea:	401a      	ands	r2, r3
341896ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
341896f0:	687b      	ldr	r3, [r7, #4]
341896f2:	fa01 f303 	lsl.w	r3, r1, r3
341896f6:	429a      	cmp	r2, r3
341896f8:	d102      	bne.n	34189700 <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
341896fa:	2302      	movs	r3, #2
341896fc:	61bb      	str	r3, [r7, #24]
341896fe:	e00a      	b.n	34189716 <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34189700:	697b      	ldr	r3, [r7, #20]
34189702:	681b      	ldr	r3, [r3, #0]
34189704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34189708:	2b00      	cmp	r3, #0
3418970a:	d002      	beq.n	34189712 <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
3418970c:	2303      	movs	r3, #3
3418970e:	61bb      	str	r3, [r7, #24]
34189710:	e001      	b.n	34189716 <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
34189712:	2301      	movs	r3, #1
34189714:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
34189716:	683b      	ldr	r3, [r7, #0]
34189718:	681b      	ldr	r3, [r3, #0]
3418971a:	69ba      	ldr	r2, [r7, #24]
3418971c:	429a      	cmp	r2, r3
3418971e:	d001      	beq.n	34189724 <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
34189720:	2301      	movs	r3, #1
34189722:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
34189724:	69fb      	ldr	r3, [r7, #28]
}
34189726:	4618      	mov	r0, r3
34189728:	3724      	adds	r7, #36	@ 0x24
3418972a:	46bd      	mov	sp, r7
3418972c:	f85d 7b04 	ldr.w	r7, [sp], #4
34189730:	4770      	bx	lr
34189732:	bf00      	nop
34189734:	56028080 	.word	0x56028080
34189738:	56028084 	.word	0x56028084
3418973c:	56028088 	.word	0x56028088
34189740:	56028000 	.word	0x56028000

34189744 <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
34189744:	b580      	push	{r7, lr}
34189746:	b084      	sub	sp, #16
34189748:	af00      	add	r7, sp, #0
3418974a:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
3418974c:	2301      	movs	r3, #1
3418974e:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
34189750:	687b      	ldr	r3, [r7, #4]
34189752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189756:	d01b      	beq.n	34189790 <RCC_PLL_Source_IsReady+0x4c>
34189758:	687b      	ldr	r3, [r7, #4]
3418975a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418975e:	d81f      	bhi.n	341897a0 <RCC_PLL_Source_IsReady+0x5c>
34189760:	687b      	ldr	r3, [r7, #4]
34189762:	2b00      	cmp	r3, #0
34189764:	d004      	beq.n	34189770 <RCC_PLL_Source_IsReady+0x2c>
34189766:	687b      	ldr	r3, [r7, #4]
34189768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418976c:	d008      	beq.n	34189780 <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
3418976e:	e017      	b.n	341897a0 <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
34189770:	f7fe fc40 	bl	34187ff4 <LL_RCC_HSI_IsReady>
34189774:	4603      	mov	r3, r0
34189776:	2b00      	cmp	r3, #0
34189778:	d114      	bne.n	341897a4 <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
3418977a:	2300      	movs	r3, #0
3418977c:	60fb      	str	r3, [r7, #12]
      break;
3418977e:	e011      	b.n	341897a4 <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
34189780:	f7fe fca0 	bl	341880c4 <LL_RCC_MSI_IsReady>
34189784:	4603      	mov	r3, r0
34189786:	2b00      	cmp	r3, #0
34189788:	d10e      	bne.n	341897a8 <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
3418978a:	2300      	movs	r3, #0
3418978c:	60fb      	str	r3, [r7, #12]
      break;
3418978e:	e00b      	b.n	341897a8 <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
34189790:	f7fe fc00 	bl	34187f94 <LL_RCC_HSE_IsReady>
34189794:	4603      	mov	r3, r0
34189796:	2b00      	cmp	r3, #0
34189798:	d108      	bne.n	341897ac <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
3418979a:	2300      	movs	r3, #0
3418979c:	60fb      	str	r3, [r7, #12]
      break;
3418979e:	e005      	b.n	341897ac <RCC_PLL_Source_IsReady+0x68>
      break;
341897a0:	bf00      	nop
341897a2:	e004      	b.n	341897ae <RCC_PLL_Source_IsReady+0x6a>
      break;
341897a4:	bf00      	nop
341897a6:	e002      	b.n	341897ae <RCC_PLL_Source_IsReady+0x6a>
      break;
341897a8:	bf00      	nop
341897aa:	e000      	b.n	341897ae <RCC_PLL_Source_IsReady+0x6a>
      break;
341897ac:	bf00      	nop
  }

  return ret;
341897ae:	68fb      	ldr	r3, [r7, #12]
}
341897b0:	4618      	mov	r0, r3
341897b2:	3710      	adds	r7, #16
341897b4:	46bd      	mov	sp, r7
341897b6:	bd80      	pop	{r7, pc}

341897b8 <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
341897b8:	b580      	push	{r7, lr}
341897ba:	b084      	sub	sp, #16
341897bc:	af00      	add	r7, sp, #0
341897be:	6078      	str	r0, [r7, #4]
341897c0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
341897c2:	2301      	movs	r3, #1
341897c4:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
341897c6:	687b      	ldr	r3, [r7, #4]
341897c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341897cc:	d03a      	beq.n	34189844 <RCC_IC_CheckPLLSources+0x8c>
341897ce:	687b      	ldr	r3, [r7, #4]
341897d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341897d4:	d843      	bhi.n	3418985e <RCC_IC_CheckPLLSources+0xa6>
341897d6:	687b      	ldr	r3, [r7, #4]
341897d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341897dc:	d025      	beq.n	3418982a <RCC_IC_CheckPLLSources+0x72>
341897de:	687b      	ldr	r3, [r7, #4]
341897e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341897e4:	d83b      	bhi.n	3418985e <RCC_IC_CheckPLLSources+0xa6>
341897e6:	687b      	ldr	r3, [r7, #4]
341897e8:	2b00      	cmp	r3, #0
341897ea:	d004      	beq.n	341897f6 <RCC_IC_CheckPLLSources+0x3e>
341897ec:	687b      	ldr	r3, [r7, #4]
341897ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341897f2:	d00d      	beq.n	34189810 <RCC_IC_CheckPLLSources+0x58>
341897f4:	e033      	b.n	3418985e <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
341897f6:	f7fe fd33 	bl	34188260 <LL_RCC_PLL1_IsReady>
341897fa:	4603      	mov	r3, r0
341897fc:	2b00      	cmp	r3, #0
341897fe:	d131      	bne.n	34189864 <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34189800:	f7fe fd42 	bl	34188288 <LL_RCC_PLL1_IsEnabledBypass>
34189804:	4603      	mov	r3, r0
34189806:	2b00      	cmp	r3, #0
34189808:	d12c      	bne.n	34189864 <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
3418980a:	2300      	movs	r3, #0
3418980c:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418980e:	e029      	b.n	34189864 <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34189810:	f7fe fd5c 	bl	341882cc <LL_RCC_PLL2_IsReady>
34189814:	4603      	mov	r3, r0
34189816:	2b00      	cmp	r3, #0
34189818:	d126      	bne.n	34189868 <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3418981a:	f7fe fd6b 	bl	341882f4 <LL_RCC_PLL2_IsEnabledBypass>
3418981e:	4603      	mov	r3, r0
34189820:	2b00      	cmp	r3, #0
34189822:	d121      	bne.n	34189868 <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
34189824:	2300      	movs	r3, #0
34189826:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34189828:	e01e      	b.n	34189868 <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3418982a:	f7fe fd85 	bl	34188338 <LL_RCC_PLL3_IsReady>
3418982e:	4603      	mov	r3, r0
34189830:	2b00      	cmp	r3, #0
34189832:	d11b      	bne.n	3418986c <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34189834:	f7fe fd94 	bl	34188360 <LL_RCC_PLL3_IsEnabledBypass>
34189838:	4603      	mov	r3, r0
3418983a:	2b00      	cmp	r3, #0
3418983c:	d116      	bne.n	3418986c <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
3418983e:	2300      	movs	r3, #0
34189840:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34189842:	e013      	b.n	3418986c <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34189844:	f7fe fdae 	bl	341883a4 <LL_RCC_PLL4_IsReady>
34189848:	4603      	mov	r3, r0
3418984a:	2b00      	cmp	r3, #0
3418984c:	d110      	bne.n	34189870 <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3418984e:	f7fe fdbd 	bl	341883cc <LL_RCC_PLL4_IsEnabledBypass>
34189852:	4603      	mov	r3, r0
34189854:	2b00      	cmp	r3, #0
34189856:	d10b      	bne.n	34189870 <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
34189858:	2300      	movs	r3, #0
3418985a:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418985c:	e008      	b.n	34189870 <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
3418985e:	2300      	movs	r3, #0
34189860:	60fb      	str	r3, [r7, #12]
      break;
34189862:	e006      	b.n	34189872 <RCC_IC_CheckPLLSources+0xba>
      break;
34189864:	bf00      	nop
34189866:	e004      	b.n	34189872 <RCC_IC_CheckPLLSources+0xba>
      break;
34189868:	bf00      	nop
3418986a:	e002      	b.n	34189872 <RCC_IC_CheckPLLSources+0xba>
      break;
3418986c:	bf00      	nop
3418986e:	e000      	b.n	34189872 <RCC_IC_CheckPLLSources+0xba>
      break;
34189870:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
34189872:	683b      	ldr	r3, [r7, #0]
34189874:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189878:	d03a      	beq.n	341898f0 <RCC_IC_CheckPLLSources+0x138>
3418987a:	683b      	ldr	r3, [r7, #0]
3418987c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189880:	d843      	bhi.n	3418990a <RCC_IC_CheckPLLSources+0x152>
34189882:	683b      	ldr	r3, [r7, #0]
34189884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189888:	d025      	beq.n	341898d6 <RCC_IC_CheckPLLSources+0x11e>
3418988a:	683b      	ldr	r3, [r7, #0]
3418988c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189890:	d83b      	bhi.n	3418990a <RCC_IC_CheckPLLSources+0x152>
34189892:	683b      	ldr	r3, [r7, #0]
34189894:	2b00      	cmp	r3, #0
34189896:	d004      	beq.n	341898a2 <RCC_IC_CheckPLLSources+0xea>
34189898:	683b      	ldr	r3, [r7, #0]
3418989a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418989e:	d00d      	beq.n	341898bc <RCC_IC_CheckPLLSources+0x104>
341898a0:	e033      	b.n	3418990a <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
341898a2:	f7fe fcdd 	bl	34188260 <LL_RCC_PLL1_IsReady>
341898a6:	4603      	mov	r3, r0
341898a8:	2b00      	cmp	r3, #0
341898aa:	d131      	bne.n	34189910 <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
341898ac:	f7fe fcec 	bl	34188288 <LL_RCC_PLL1_IsEnabledBypass>
341898b0:	4603      	mov	r3, r0
341898b2:	2b00      	cmp	r3, #0
341898b4:	d12c      	bne.n	34189910 <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
341898b6:	2300      	movs	r3, #0
341898b8:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341898ba:	e029      	b.n	34189910 <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
341898bc:	f7fe fd06 	bl	341882cc <LL_RCC_PLL2_IsReady>
341898c0:	4603      	mov	r3, r0
341898c2:	2b00      	cmp	r3, #0
341898c4:	d126      	bne.n	34189914 <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
341898c6:	f7fe fd15 	bl	341882f4 <LL_RCC_PLL2_IsEnabledBypass>
341898ca:	4603      	mov	r3, r0
341898cc:	2b00      	cmp	r3, #0
341898ce:	d121      	bne.n	34189914 <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
341898d0:	2300      	movs	r3, #0
341898d2:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341898d4:	e01e      	b.n	34189914 <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
341898d6:	f7fe fd2f 	bl	34188338 <LL_RCC_PLL3_IsReady>
341898da:	4603      	mov	r3, r0
341898dc:	2b00      	cmp	r3, #0
341898de:	d11b      	bne.n	34189918 <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
341898e0:	f7fe fd3e 	bl	34188360 <LL_RCC_PLL3_IsEnabledBypass>
341898e4:	4603      	mov	r3, r0
341898e6:	2b00      	cmp	r3, #0
341898e8:	d116      	bne.n	34189918 <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
341898ea:	2300      	movs	r3, #0
341898ec:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341898ee:	e013      	b.n	34189918 <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
341898f0:	f7fe fd58 	bl	341883a4 <LL_RCC_PLL4_IsReady>
341898f4:	4603      	mov	r3, r0
341898f6:	2b00      	cmp	r3, #0
341898f8:	d110      	bne.n	3418991c <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
341898fa:	f7fe fd67 	bl	341883cc <LL_RCC_PLL4_IsEnabledBypass>
341898fe:	4603      	mov	r3, r0
34189900:	2b00      	cmp	r3, #0
34189902:	d10b      	bne.n	3418991c <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
34189904:	2300      	movs	r3, #0
34189906:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34189908:	e008      	b.n	3418991c <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
3418990a:	2300      	movs	r3, #0
3418990c:	60fb      	str	r3, [r7, #12]
      break;
3418990e:	e006      	b.n	3418991e <RCC_IC_CheckPLLSources+0x166>
      break;
34189910:	bf00      	nop
34189912:	e004      	b.n	3418991e <RCC_IC_CheckPLLSources+0x166>
      break;
34189914:	bf00      	nop
34189916:	e002      	b.n	3418991e <RCC_IC_CheckPLLSources+0x166>
      break;
34189918:	bf00      	nop
3418991a:	e000      	b.n	3418991e <RCC_IC_CheckPLLSources+0x166>
      break;
3418991c:	bf00      	nop
  }

  return ret;
3418991e:	68fb      	ldr	r3, [r7, #12]
}
34189920:	4618      	mov	r0, r3
34189922:	3710      	adds	r7, #16
34189924:	46bd      	mov	sp, r7
34189926:	bd80      	pop	{r7, pc}

34189928 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
34189928:	b480      	push	{r7}
3418992a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3418992c:	4b05      	ldr	r3, [pc, #20]	@ (34189944 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3418992e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34189930:	4a04      	ldr	r2, [pc, #16]	@ (34189944 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34189932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34189936:	6553      	str	r3, [r2, #84]	@ 0x54
}
34189938:	bf00      	nop
3418993a:	46bd      	mov	sp, r7
3418993c:	f85d 7b04 	ldr.w	r7, [sp], #4
34189940:	4770      	bx	lr
34189942:	bf00      	nop
34189944:	56028000 	.word	0x56028000

34189948 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
34189948:	b480      	push	{r7}
3418994a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3418994c:	4b05      	ldr	r3, [pc, #20]	@ (34189964 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3418994e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34189950:	4a04      	ldr	r2, [pc, #16]	@ (34189964 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
34189952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34189956:	6553      	str	r3, [r2, #84]	@ 0x54
}
34189958:	bf00      	nop
3418995a:	46bd      	mov	sp, r7
3418995c:	f85d 7b04 	ldr.w	r7, [sp], #4
34189960:	4770      	bx	lr
34189962:	bf00      	nop
34189964:	56028000 	.word	0x56028000

34189968 <LL_RCC_HSE_IsReady>:
{
34189968:	b480      	push	{r7}
3418996a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
3418996c:	4b06      	ldr	r3, [pc, #24]	@ (34189988 <LL_RCC_HSE_IsReady+0x20>)
3418996e:	685b      	ldr	r3, [r3, #4]
34189970:	f003 0310 	and.w	r3, r3, #16
34189974:	2b00      	cmp	r3, #0
34189976:	d001      	beq.n	3418997c <LL_RCC_HSE_IsReady+0x14>
34189978:	2301      	movs	r3, #1
3418997a:	e000      	b.n	3418997e <LL_RCC_HSE_IsReady+0x16>
3418997c:	2300      	movs	r3, #0
}
3418997e:	4618      	mov	r0, r3
34189980:	46bd      	mov	sp, r7
34189982:	f85d 7b04 	ldr.w	r7, [sp], #4
34189986:	4770      	bx	lr
34189988:	56028000 	.word	0x56028000

3418998c <LL_RCC_HSI_IsReady>:
{
3418998c:	b480      	push	{r7}
3418998e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34189990:	4b06      	ldr	r3, [pc, #24]	@ (341899ac <LL_RCC_HSI_IsReady+0x20>)
34189992:	685b      	ldr	r3, [r3, #4]
34189994:	f003 0308 	and.w	r3, r3, #8
34189998:	2b00      	cmp	r3, #0
3418999a:	d001      	beq.n	341899a0 <LL_RCC_HSI_IsReady+0x14>
3418999c:	2301      	movs	r3, #1
3418999e:	e000      	b.n	341899a2 <LL_RCC_HSI_IsReady+0x16>
341899a0:	2300      	movs	r3, #0
}
341899a2:	4618      	mov	r0, r3
341899a4:	46bd      	mov	sp, r7
341899a6:	f85d 7b04 	ldr.w	r7, [sp], #4
341899aa:	4770      	bx	lr
341899ac:	56028000 	.word	0x56028000

341899b0 <LL_RCC_HSI_GetDivider>:
{
341899b0:	b480      	push	{r7}
341899b2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
341899b4:	4b04      	ldr	r3, [pc, #16]	@ (341899c8 <LL_RCC_HSI_GetDivider+0x18>)
341899b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341899b8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
341899bc:	4618      	mov	r0, r3
341899be:	46bd      	mov	sp, r7
341899c0:	f85d 7b04 	ldr.w	r7, [sp], #4
341899c4:	4770      	bx	lr
341899c6:	bf00      	nop
341899c8:	56028000 	.word	0x56028000

341899cc <LL_RCC_MSI_IsReady>:
{
341899cc:	b480      	push	{r7}
341899ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
341899d0:	4b06      	ldr	r3, [pc, #24]	@ (341899ec <LL_RCC_MSI_IsReady+0x20>)
341899d2:	685b      	ldr	r3, [r3, #4]
341899d4:	f003 0304 	and.w	r3, r3, #4
341899d8:	2b00      	cmp	r3, #0
341899da:	d001      	beq.n	341899e0 <LL_RCC_MSI_IsReady+0x14>
341899dc:	2301      	movs	r3, #1
341899de:	e000      	b.n	341899e2 <LL_RCC_MSI_IsReady+0x16>
341899e0:	2300      	movs	r3, #0
}
341899e2:	4618      	mov	r0, r3
341899e4:	46bd      	mov	sp, r7
341899e6:	f85d 7b04 	ldr.w	r7, [sp], #4
341899ea:	4770      	bx	lr
341899ec:	56028000 	.word	0x56028000

341899f0 <LL_RCC_MSI_GetFrequency>:
{
341899f0:	b480      	push	{r7}
341899f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
341899f4:	4b04      	ldr	r3, [pc, #16]	@ (34189a08 <LL_RCC_MSI_GetFrequency+0x18>)
341899f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341899f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
341899fc:	4618      	mov	r0, r3
341899fe:	46bd      	mov	sp, r7
34189a00:	f85d 7b04 	ldr.w	r7, [sp], #4
34189a04:	4770      	bx	lr
34189a06:	bf00      	nop
34189a08:	56028000 	.word	0x56028000

34189a0c <LL_RCC_LSE_IsReady>:
{
34189a0c:	b480      	push	{r7}
34189a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34189a10:	4b06      	ldr	r3, [pc, #24]	@ (34189a2c <LL_RCC_LSE_IsReady+0x20>)
34189a12:	685b      	ldr	r3, [r3, #4]
34189a14:	f003 0302 	and.w	r3, r3, #2
34189a18:	2b00      	cmp	r3, #0
34189a1a:	d001      	beq.n	34189a20 <LL_RCC_LSE_IsReady+0x14>
34189a1c:	2301      	movs	r3, #1
34189a1e:	e000      	b.n	34189a22 <LL_RCC_LSE_IsReady+0x16>
34189a20:	2300      	movs	r3, #0
}
34189a22:	4618      	mov	r0, r3
34189a24:	46bd      	mov	sp, r7
34189a26:	f85d 7b04 	ldr.w	r7, [sp], #4
34189a2a:	4770      	bx	lr
34189a2c:	56028000 	.word	0x56028000

34189a30 <LL_RCC_SetClockSource>:
{
34189a30:	b480      	push	{r7}
34189a32:	b085      	sub	sp, #20
34189a34:	af00      	add	r7, sp, #0
34189a36:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34189a38:	687b      	ldr	r3, [r7, #4]
34189a3a:	b2da      	uxtb	r2, r3
34189a3c:	4b10      	ldr	r3, [pc, #64]	@ (34189a80 <LL_RCC_SetClockSource+0x50>)
34189a3e:	4413      	add	r3, r2
34189a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34189a42:	68fb      	ldr	r3, [r7, #12]
34189a44:	681a      	ldr	r2, [r3, #0]
34189a46:	687b      	ldr	r3, [r7, #4]
34189a48:	0e19      	lsrs	r1, r3, #24
34189a4a:	687b      	ldr	r3, [r7, #4]
34189a4c:	0a1b      	lsrs	r3, r3, #8
34189a4e:	f003 031f 	and.w	r3, r3, #31
34189a52:	fa01 f303 	lsl.w	r3, r1, r3
34189a56:	43db      	mvns	r3, r3
34189a58:	401a      	ands	r2, r3
34189a5a:	687b      	ldr	r3, [r7, #4]
34189a5c:	0c1b      	lsrs	r3, r3, #16
34189a5e:	b2d9      	uxtb	r1, r3
34189a60:	687b      	ldr	r3, [r7, #4]
34189a62:	0a1b      	lsrs	r3, r3, #8
34189a64:	f003 031f 	and.w	r3, r3, #31
34189a68:	fa01 f303 	lsl.w	r3, r1, r3
34189a6c:	431a      	orrs	r2, r3
34189a6e:	68fb      	ldr	r3, [r7, #12]
34189a70:	601a      	str	r2, [r3, #0]
}
34189a72:	bf00      	nop
34189a74:	3714      	adds	r7, #20
34189a76:	46bd      	mov	sp, r7
34189a78:	f85d 7b04 	ldr.w	r7, [sp], #4
34189a7c:	4770      	bx	lr
34189a7e:	bf00      	nop
34189a80:	56028144 	.word	0x56028144

34189a84 <LL_RCC_SetADFClockSource>:
{
34189a84:	b480      	push	{r7}
34189a86:	b083      	sub	sp, #12
34189a88:	af00      	add	r7, sp, #0
34189a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34189a8c:	4b07      	ldr	r3, [pc, #28]	@ (34189aac <LL_RCC_SetADFClockSource+0x28>)
34189a8e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34189a92:	f023 0207 	bic.w	r2, r3, #7
34189a96:	4905      	ldr	r1, [pc, #20]	@ (34189aac <LL_RCC_SetADFClockSource+0x28>)
34189a98:	687b      	ldr	r3, [r7, #4]
34189a9a:	4313      	orrs	r3, r2
34189a9c:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34189aa0:	bf00      	nop
34189aa2:	370c      	adds	r7, #12
34189aa4:	46bd      	mov	sp, r7
34189aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
34189aaa:	4770      	bx	lr
34189aac:	56028000 	.word	0x56028000

34189ab0 <LL_RCC_SetCLKPClockSource>:
{
34189ab0:	b480      	push	{r7}
34189ab2:	b083      	sub	sp, #12
34189ab4:	af00      	add	r7, sp, #0
34189ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
34189ab8:	4b07      	ldr	r3, [pc, #28]	@ (34189ad8 <LL_RCC_SetCLKPClockSource+0x28>)
34189aba:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34189abe:	f023 0207 	bic.w	r2, r3, #7
34189ac2:	4905      	ldr	r1, [pc, #20]	@ (34189ad8 <LL_RCC_SetCLKPClockSource+0x28>)
34189ac4:	687b      	ldr	r3, [r7, #4]
34189ac6:	4313      	orrs	r3, r2
34189ac8:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34189acc:	bf00      	nop
34189ace:	370c      	adds	r7, #12
34189ad0:	46bd      	mov	sp, r7
34189ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
34189ad6:	4770      	bx	lr
34189ad8:	56028000 	.word	0x56028000

34189adc <LL_RCC_SetDCMIPPClockSource>:
{
34189adc:	b480      	push	{r7}
34189ade:	b083      	sub	sp, #12
34189ae0:	af00      	add	r7, sp, #0
34189ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34189ae4:	4b07      	ldr	r3, [pc, #28]	@ (34189b04 <LL_RCC_SetDCMIPPClockSource+0x28>)
34189ae6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34189aea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
34189aee:	4905      	ldr	r1, [pc, #20]	@ (34189b04 <LL_RCC_SetDCMIPPClockSource+0x28>)
34189af0:	687b      	ldr	r3, [r7, #4]
34189af2:	4313      	orrs	r3, r2
34189af4:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34189af8:	bf00      	nop
34189afa:	370c      	adds	r7, #12
34189afc:	46bd      	mov	sp, r7
34189afe:	f85d 7b04 	ldr.w	r7, [sp], #4
34189b02:	4770      	bx	lr
34189b04:	56028000 	.word	0x56028000

34189b08 <LL_RCC_SetETHClockSource>:
{
34189b08:	b480      	push	{r7}
34189b0a:	b083      	sub	sp, #12
34189b0c:	af00      	add	r7, sp, #0
34189b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34189b10:	4b07      	ldr	r3, [pc, #28]	@ (34189b30 <LL_RCC_SetETHClockSource+0x28>)
34189b12:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34189b16:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34189b1a:	4905      	ldr	r1, [pc, #20]	@ (34189b30 <LL_RCC_SetETHClockSource+0x28>)
34189b1c:	687b      	ldr	r3, [r7, #4]
34189b1e:	4313      	orrs	r3, r2
34189b20:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34189b24:	bf00      	nop
34189b26:	370c      	adds	r7, #12
34189b28:	46bd      	mov	sp, r7
34189b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34189b2e:	4770      	bx	lr
34189b30:	56028000 	.word	0x56028000

34189b34 <LL_RCC_SetETHPHYInterface>:
{
34189b34:	b480      	push	{r7}
34189b36:	b083      	sub	sp, #12
34189b38:	af00      	add	r7, sp, #0
34189b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34189b3c:	4b07      	ldr	r3, [pc, #28]	@ (34189b5c <LL_RCC_SetETHPHYInterface+0x28>)
34189b3e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34189b42:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34189b46:	4905      	ldr	r1, [pc, #20]	@ (34189b5c <LL_RCC_SetETHPHYInterface+0x28>)
34189b48:	687b      	ldr	r3, [r7, #4]
34189b4a:	4313      	orrs	r3, r2
34189b4c:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34189b50:	bf00      	nop
34189b52:	370c      	adds	r7, #12
34189b54:	46bd      	mov	sp, r7
34189b56:	f85d 7b04 	ldr.w	r7, [sp], #4
34189b5a:	4770      	bx	lr
34189b5c:	56028000 	.word	0x56028000

34189b60 <LL_RCC_SetETHREFRXClockSource>:
{
34189b60:	b480      	push	{r7}
34189b62:	b083      	sub	sp, #12
34189b64:	af00      	add	r7, sp, #0
34189b66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34189b68:	4b07      	ldr	r3, [pc, #28]	@ (34189b88 <LL_RCC_SetETHREFRXClockSource+0x28>)
34189b6a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34189b6e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
34189b72:	4905      	ldr	r1, [pc, #20]	@ (34189b88 <LL_RCC_SetETHREFRXClockSource+0x28>)
34189b74:	687b      	ldr	r3, [r7, #4]
34189b76:	4313      	orrs	r3, r2
34189b78:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34189b7c:	bf00      	nop
34189b7e:	370c      	adds	r7, #12
34189b80:	46bd      	mov	sp, r7
34189b82:	f85d 7b04 	ldr.w	r7, [sp], #4
34189b86:	4770      	bx	lr
34189b88:	56028000 	.word	0x56028000

34189b8c <LL_RCC_SetETHREFTXClockSource>:
{
34189b8c:	b480      	push	{r7}
34189b8e:	b083      	sub	sp, #12
34189b90:	af00      	add	r7, sp, #0
34189b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34189b94:	4b07      	ldr	r3, [pc, #28]	@ (34189bb4 <LL_RCC_SetETHREFTXClockSource+0x28>)
34189b96:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34189b9a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34189b9e:	4905      	ldr	r1, [pc, #20]	@ (34189bb4 <LL_RCC_SetETHREFTXClockSource+0x28>)
34189ba0:	687b      	ldr	r3, [r7, #4]
34189ba2:	4313      	orrs	r3, r2
34189ba4:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34189ba8:	bf00      	nop
34189baa:	370c      	adds	r7, #12
34189bac:	46bd      	mov	sp, r7
34189bae:	f85d 7b04 	ldr.w	r7, [sp], #4
34189bb2:	4770      	bx	lr
34189bb4:	56028000 	.word	0x56028000

34189bb8 <LL_RCC_SetFDCANClockSource>:
{
34189bb8:	b480      	push	{r7}
34189bba:	b083      	sub	sp, #12
34189bbc:	af00      	add	r7, sp, #0
34189bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34189bc0:	4b07      	ldr	r3, [pc, #28]	@ (34189be0 <LL_RCC_SetFDCANClockSource+0x28>)
34189bc2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34189bc6:	f023 0203 	bic.w	r2, r3, #3
34189bca:	4905      	ldr	r1, [pc, #20]	@ (34189be0 <LL_RCC_SetFDCANClockSource+0x28>)
34189bcc:	687b      	ldr	r3, [r7, #4]
34189bce:	4313      	orrs	r3, r2
34189bd0:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34189bd4:	bf00      	nop
34189bd6:	370c      	adds	r7, #12
34189bd8:	46bd      	mov	sp, r7
34189bda:	f85d 7b04 	ldr.w	r7, [sp], #4
34189bde:	4770      	bx	lr
34189be0:	56028000 	.word	0x56028000

34189be4 <LL_RCC_SetFMCClockSource>:
{
34189be4:	b480      	push	{r7}
34189be6:	b083      	sub	sp, #12
34189be8:	af00      	add	r7, sp, #0
34189bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34189bec:	4b07      	ldr	r3, [pc, #28]	@ (34189c0c <LL_RCC_SetFMCClockSource+0x28>)
34189bee:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34189bf2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34189bf6:	4905      	ldr	r1, [pc, #20]	@ (34189c0c <LL_RCC_SetFMCClockSource+0x28>)
34189bf8:	687b      	ldr	r3, [r7, #4]
34189bfa:	4313      	orrs	r3, r2
34189bfc:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34189c00:	bf00      	nop
34189c02:	370c      	adds	r7, #12
34189c04:	46bd      	mov	sp, r7
34189c06:	f85d 7b04 	ldr.w	r7, [sp], #4
34189c0a:	4770      	bx	lr
34189c0c:	56028000 	.word	0x56028000

34189c10 <LL_RCC_SetI2CClockSource>:
{
34189c10:	b580      	push	{r7, lr}
34189c12:	b082      	sub	sp, #8
34189c14:	af00      	add	r7, sp, #0
34189c16:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34189c18:	6878      	ldr	r0, [r7, #4]
34189c1a:	f7ff ff09 	bl	34189a30 <LL_RCC_SetClockSource>
}
34189c1e:	bf00      	nop
34189c20:	3708      	adds	r7, #8
34189c22:	46bd      	mov	sp, r7
34189c24:	bd80      	pop	{r7, pc}

34189c26 <LL_RCC_SetI3CClockSource>:
{
34189c26:	b580      	push	{r7, lr}
34189c28:	b082      	sub	sp, #8
34189c2a:	af00      	add	r7, sp, #0
34189c2c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34189c2e:	6878      	ldr	r0, [r7, #4]
34189c30:	f7ff fefe 	bl	34189a30 <LL_RCC_SetClockSource>
}
34189c34:	bf00      	nop
34189c36:	3708      	adds	r7, #8
34189c38:	46bd      	mov	sp, r7
34189c3a:	bd80      	pop	{r7, pc}

34189c3c <LL_RCC_SetLPTIMClockSource>:
{
34189c3c:	b580      	push	{r7, lr}
34189c3e:	b082      	sub	sp, #8
34189c40:	af00      	add	r7, sp, #0
34189c42:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34189c44:	6878      	ldr	r0, [r7, #4]
34189c46:	f7ff fef3 	bl	34189a30 <LL_RCC_SetClockSource>
}
34189c4a:	bf00      	nop
34189c4c:	3708      	adds	r7, #8
34189c4e:	46bd      	mov	sp, r7
34189c50:	bd80      	pop	{r7, pc}
	...

34189c54 <LL_RCC_SetLPUARTClockSource>:
{
34189c54:	b480      	push	{r7}
34189c56:	b083      	sub	sp, #12
34189c58:	af00      	add	r7, sp, #0
34189c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34189c5c:	4b07      	ldr	r3, [pc, #28]	@ (34189c7c <LL_RCC_SetLPUARTClockSource+0x28>)
34189c5e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34189c62:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
34189c66:	4905      	ldr	r1, [pc, #20]	@ (34189c7c <LL_RCC_SetLPUARTClockSource+0x28>)
34189c68:	687b      	ldr	r3, [r7, #4]
34189c6a:	4313      	orrs	r3, r2
34189c6c:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
34189c70:	bf00      	nop
34189c72:	370c      	adds	r7, #12
34189c74:	46bd      	mov	sp, r7
34189c76:	f85d 7b04 	ldr.w	r7, [sp], #4
34189c7a:	4770      	bx	lr
34189c7c:	56028000 	.word	0x56028000

34189c80 <LL_RCC_SetLTDCClockSource>:
{
34189c80:	b480      	push	{r7}
34189c82:	b083      	sub	sp, #12
34189c84:	af00      	add	r7, sp, #0
34189c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
34189c88:	4b07      	ldr	r3, [pc, #28]	@ (34189ca8 <LL_RCC_SetLTDCClockSource+0x28>)
34189c8a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34189c8e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34189c92:	4905      	ldr	r1, [pc, #20]	@ (34189ca8 <LL_RCC_SetLTDCClockSource+0x28>)
34189c94:	687b      	ldr	r3, [r7, #4]
34189c96:	4313      	orrs	r3, r2
34189c98:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
34189c9c:	bf00      	nop
34189c9e:	370c      	adds	r7, #12
34189ca0:	46bd      	mov	sp, r7
34189ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
34189ca6:	4770      	bx	lr
34189ca8:	56028000 	.word	0x56028000

34189cac <LL_RCC_SetMDFClockSource>:
{
34189cac:	b480      	push	{r7}
34189cae:	b083      	sub	sp, #12
34189cb0:	af00      	add	r7, sp, #0
34189cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34189cb4:	4b07      	ldr	r3, [pc, #28]	@ (34189cd4 <LL_RCC_SetMDFClockSource+0x28>)
34189cb6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34189cba:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34189cbe:	4905      	ldr	r1, [pc, #20]	@ (34189cd4 <LL_RCC_SetMDFClockSource+0x28>)
34189cc0:	687b      	ldr	r3, [r7, #4]
34189cc2:	4313      	orrs	r3, r2
34189cc4:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
34189cc8:	bf00      	nop
34189cca:	370c      	adds	r7, #12
34189ccc:	46bd      	mov	sp, r7
34189cce:	f85d 7b04 	ldr.w	r7, [sp], #4
34189cd2:	4770      	bx	lr
34189cd4:	56028000 	.word	0x56028000

34189cd8 <LL_RCC_SetOTGPHYClockSource>:
{
34189cd8:	b580      	push	{r7, lr}
34189cda:	b082      	sub	sp, #8
34189cdc:	af00      	add	r7, sp, #0
34189cde:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34189ce0:	6878      	ldr	r0, [r7, #4]
34189ce2:	f7ff fea5 	bl	34189a30 <LL_RCC_SetClockSource>
}
34189ce6:	bf00      	nop
34189ce8:	3708      	adds	r7, #8
34189cea:	46bd      	mov	sp, r7
34189cec:	bd80      	pop	{r7, pc}

34189cee <LL_RCC_SetOTGPHYCKREFClockSource>:
{
34189cee:	b580      	push	{r7, lr}
34189cf0:	b082      	sub	sp, #8
34189cf2:	af00      	add	r7, sp, #0
34189cf4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34189cf6:	6878      	ldr	r0, [r7, #4]
34189cf8:	f7ff fe9a 	bl	34189a30 <LL_RCC_SetClockSource>
}
34189cfc:	bf00      	nop
34189cfe:	3708      	adds	r7, #8
34189d00:	46bd      	mov	sp, r7
34189d02:	bd80      	pop	{r7, pc}

34189d04 <LL_RCC_SetPSSIClockSource>:
{
34189d04:	b480      	push	{r7}
34189d06:	b083      	sub	sp, #12
34189d08:	af00      	add	r7, sp, #0
34189d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34189d0c:	4b07      	ldr	r3, [pc, #28]	@ (34189d2c <LL_RCC_SetPSSIClockSource+0x28>)
34189d0e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34189d12:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34189d16:	4905      	ldr	r1, [pc, #20]	@ (34189d2c <LL_RCC_SetPSSIClockSource+0x28>)
34189d18:	687b      	ldr	r3, [r7, #4]
34189d1a:	4313      	orrs	r3, r2
34189d1c:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34189d20:	bf00      	nop
34189d22:	370c      	adds	r7, #12
34189d24:	46bd      	mov	sp, r7
34189d26:	f85d 7b04 	ldr.w	r7, [sp], #4
34189d2a:	4770      	bx	lr
34189d2c:	56028000 	.word	0x56028000

34189d30 <LL_RCC_SetSAIClockSource>:
{
34189d30:	b580      	push	{r7, lr}
34189d32:	b082      	sub	sp, #8
34189d34:	af00      	add	r7, sp, #0
34189d36:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34189d38:	6878      	ldr	r0, [r7, #4]
34189d3a:	f7ff fe79 	bl	34189a30 <LL_RCC_SetClockSource>
}
34189d3e:	bf00      	nop
34189d40:	3708      	adds	r7, #8
34189d42:	46bd      	mov	sp, r7
34189d44:	bd80      	pop	{r7, pc}

34189d46 <LL_RCC_SetSDMMCClockSource>:
{
34189d46:	b580      	push	{r7, lr}
34189d48:	b082      	sub	sp, #8
34189d4a:	af00      	add	r7, sp, #0
34189d4c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34189d4e:	6878      	ldr	r0, [r7, #4]
34189d50:	f7ff fe6e 	bl	34189a30 <LL_RCC_SetClockSource>
}
34189d54:	bf00      	nop
34189d56:	3708      	adds	r7, #8
34189d58:	46bd      	mov	sp, r7
34189d5a:	bd80      	pop	{r7, pc}

34189d5c <LL_RCC_SetSPDIFRXClockSource>:
{
34189d5c:	b480      	push	{r7}
34189d5e:	b083      	sub	sp, #12
34189d60:	af00      	add	r7, sp, #0
34189d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34189d64:	4b07      	ldr	r3, [pc, #28]	@ (34189d84 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34189d66:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34189d6a:	f023 0207 	bic.w	r2, r3, #7
34189d6e:	4905      	ldr	r1, [pc, #20]	@ (34189d84 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34189d70:	687b      	ldr	r3, [r7, #4]
34189d72:	4313      	orrs	r3, r2
34189d74:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
34189d78:	bf00      	nop
34189d7a:	370c      	adds	r7, #12
34189d7c:	46bd      	mov	sp, r7
34189d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
34189d82:	4770      	bx	lr
34189d84:	56028000 	.word	0x56028000

34189d88 <LL_RCC_SetSPIClockSource>:
{
34189d88:	b580      	push	{r7, lr}
34189d8a:	b082      	sub	sp, #8
34189d8c:	af00      	add	r7, sp, #0
34189d8e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34189d90:	6878      	ldr	r0, [r7, #4]
34189d92:	f7ff fe4d 	bl	34189a30 <LL_RCC_SetClockSource>
}
34189d96:	bf00      	nop
34189d98:	3708      	adds	r7, #8
34189d9a:	46bd      	mov	sp, r7
34189d9c:	bd80      	pop	{r7, pc}

34189d9e <LL_RCC_SetUSARTClockSource>:
{
34189d9e:	b580      	push	{r7, lr}
34189da0:	b082      	sub	sp, #8
34189da2:	af00      	add	r7, sp, #0
34189da4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34189da6:	6878      	ldr	r0, [r7, #4]
34189da8:	f7ff fe42 	bl	34189a30 <LL_RCC_SetClockSource>
}
34189dac:	bf00      	nop
34189dae:	3708      	adds	r7, #8
34189db0:	46bd      	mov	sp, r7
34189db2:	bd80      	pop	{r7, pc}

34189db4 <LL_RCC_SetXSPIClockSource>:
{
34189db4:	b580      	push	{r7, lr}
34189db6:	b082      	sub	sp, #8
34189db8:	af00      	add	r7, sp, #0
34189dba:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34189dbc:	6878      	ldr	r0, [r7, #4]
34189dbe:	f7ff fe37 	bl	34189a30 <LL_RCC_SetClockSource>
}
34189dc2:	bf00      	nop
34189dc4:	3708      	adds	r7, #8
34189dc6:	46bd      	mov	sp, r7
34189dc8:	bd80      	pop	{r7, pc}
	...

34189dcc <LL_RCC_SetRTCClockSource>:
{
34189dcc:	b480      	push	{r7}
34189dce:	b083      	sub	sp, #12
34189dd0:	af00      	add	r7, sp, #0
34189dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34189dd4:	4b07      	ldr	r3, [pc, #28]	@ (34189df4 <LL_RCC_SetRTCClockSource+0x28>)
34189dd6:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34189dda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
34189dde:	4905      	ldr	r1, [pc, #20]	@ (34189df4 <LL_RCC_SetRTCClockSource+0x28>)
34189de0:	687b      	ldr	r3, [r7, #4]
34189de2:	4313      	orrs	r3, r2
34189de4:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34189de8:	bf00      	nop
34189dea:	370c      	adds	r7, #12
34189dec:	46bd      	mov	sp, r7
34189dee:	f85d 7b04 	ldr.w	r7, [sp], #4
34189df2:	4770      	bx	lr
34189df4:	56028000 	.word	0x56028000

34189df8 <LL_RCC_GetRTCClockSource>:
{
34189df8:	b480      	push	{r7}
34189dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34189dfc:	4b04      	ldr	r3, [pc, #16]	@ (34189e10 <LL_RCC_GetRTCClockSource+0x18>)
34189dfe:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34189e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
34189e06:	4618      	mov	r0, r3
34189e08:	46bd      	mov	sp, r7
34189e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34189e0e:	4770      	bx	lr
34189e10:	56028000 	.word	0x56028000

34189e14 <LL_RCC_SetRTC_HSEPrescaler>:
{
34189e14:	b480      	push	{r7}
34189e16:	b083      	sub	sp, #12
34189e18:	af00      	add	r7, sp, #0
34189e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34189e1c:	4b07      	ldr	r3, [pc, #28]	@ (34189e3c <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34189e1e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34189e22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
34189e26:	4905      	ldr	r1, [pc, #20]	@ (34189e3c <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34189e28:	687b      	ldr	r3, [r7, #4]
34189e2a:	4313      	orrs	r3, r2
34189e2c:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34189e30:	bf00      	nop
34189e32:	370c      	adds	r7, #12
34189e34:	46bd      	mov	sp, r7
34189e36:	f85d 7b04 	ldr.w	r7, [sp], #4
34189e3a:	4770      	bx	lr
34189e3c:	56028000 	.word	0x56028000

34189e40 <LL_RCC_SetTIMPrescaler>:
{
34189e40:	b480      	push	{r7}
34189e42:	b083      	sub	sp, #12
34189e44:	af00      	add	r7, sp, #0
34189e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34189e48:	4b07      	ldr	r3, [pc, #28]	@ (34189e68 <LL_RCC_SetTIMPrescaler+0x28>)
34189e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34189e4c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34189e50:	687b      	ldr	r3, [r7, #4]
34189e52:	061b      	lsls	r3, r3, #24
34189e54:	4904      	ldr	r1, [pc, #16]	@ (34189e68 <LL_RCC_SetTIMPrescaler+0x28>)
34189e56:	4313      	orrs	r3, r2
34189e58:	624b      	str	r3, [r1, #36]	@ 0x24
}
34189e5a:	bf00      	nop
34189e5c:	370c      	adds	r7, #12
34189e5e:	46bd      	mov	sp, r7
34189e60:	f85d 7b04 	ldr.w	r7, [sp], #4
34189e64:	4770      	bx	lr
34189e66:	bf00      	nop
34189e68:	56028000 	.word	0x56028000

34189e6c <LL_RCC_PLL1_GetSource>:
{
34189e6c:	b480      	push	{r7}
34189e6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34189e70:	4b04      	ldr	r3, [pc, #16]	@ (34189e84 <LL_RCC_PLL1_GetSource+0x18>)
34189e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34189e76:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34189e7a:	4618      	mov	r0, r3
34189e7c:	46bd      	mov	sp, r7
34189e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
34189e82:	4770      	bx	lr
34189e84:	56028000 	.word	0x56028000

34189e88 <LL_RCC_PLL1_IsReady>:
{
34189e88:	b480      	push	{r7}
34189e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34189e8c:	4b07      	ldr	r3, [pc, #28]	@ (34189eac <LL_RCC_PLL1_IsReady+0x24>)
34189e8e:	685b      	ldr	r3, [r3, #4]
34189e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34189e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34189e98:	d101      	bne.n	34189e9e <LL_RCC_PLL1_IsReady+0x16>
34189e9a:	2301      	movs	r3, #1
34189e9c:	e000      	b.n	34189ea0 <LL_RCC_PLL1_IsReady+0x18>
34189e9e:	2300      	movs	r3, #0
}
34189ea0:	4618      	mov	r0, r3
34189ea2:	46bd      	mov	sp, r7
34189ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
34189ea8:	4770      	bx	lr
34189eaa:	bf00      	nop
34189eac:	56028000 	.word	0x56028000

34189eb0 <LL_RCC_PLL1_IsEnabledBypass>:
{
34189eb0:	b480      	push	{r7}
34189eb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34189eb4:	4b07      	ldr	r3, [pc, #28]	@ (34189ed4 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34189eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34189eba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34189ebe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34189ec2:	d101      	bne.n	34189ec8 <LL_RCC_PLL1_IsEnabledBypass+0x18>
34189ec4:	2301      	movs	r3, #1
34189ec6:	e000      	b.n	34189eca <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34189ec8:	2300      	movs	r3, #0
}
34189eca:	4618      	mov	r0, r3
34189ecc:	46bd      	mov	sp, r7
34189ece:	f85d 7b04 	ldr.w	r7, [sp], #4
34189ed2:	4770      	bx	lr
34189ed4:	56028000 	.word	0x56028000

34189ed8 <LL_RCC_PLL1_GetN>:
{
34189ed8:	b480      	push	{r7}
34189eda:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34189edc:	4b05      	ldr	r3, [pc, #20]	@ (34189ef4 <LL_RCC_PLL1_GetN+0x1c>)
34189ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34189ee2:	0a1b      	lsrs	r3, r3, #8
34189ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34189ee8:	4618      	mov	r0, r3
34189eea:	46bd      	mov	sp, r7
34189eec:	f85d 7b04 	ldr.w	r7, [sp], #4
34189ef0:	4770      	bx	lr
34189ef2:	bf00      	nop
34189ef4:	56028000 	.word	0x56028000

34189ef8 <LL_RCC_PLL1_GetM>:
{
34189ef8:	b480      	push	{r7}
34189efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34189efc:	4b05      	ldr	r3, [pc, #20]	@ (34189f14 <LL_RCC_PLL1_GetM+0x1c>)
34189efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34189f02:	0d1b      	lsrs	r3, r3, #20
34189f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34189f08:	4618      	mov	r0, r3
34189f0a:	46bd      	mov	sp, r7
34189f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
34189f10:	4770      	bx	lr
34189f12:	bf00      	nop
34189f14:	56028000 	.word	0x56028000

34189f18 <LL_RCC_PLL1_GetP1>:
{
34189f18:	b480      	push	{r7}
34189f1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34189f1c:	4b05      	ldr	r3, [pc, #20]	@ (34189f34 <LL_RCC_PLL1_GetP1+0x1c>)
34189f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34189f22:	0edb      	lsrs	r3, r3, #27
34189f24:	f003 0307 	and.w	r3, r3, #7
}
34189f28:	4618      	mov	r0, r3
34189f2a:	46bd      	mov	sp, r7
34189f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
34189f30:	4770      	bx	lr
34189f32:	bf00      	nop
34189f34:	56028000 	.word	0x56028000

34189f38 <LL_RCC_PLL1_GetP2>:
{
34189f38:	b480      	push	{r7}
34189f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34189f3c:	4b05      	ldr	r3, [pc, #20]	@ (34189f54 <LL_RCC_PLL1_GetP2+0x1c>)
34189f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34189f42:	0e1b      	lsrs	r3, r3, #24
34189f44:	f003 0307 	and.w	r3, r3, #7
}
34189f48:	4618      	mov	r0, r3
34189f4a:	46bd      	mov	sp, r7
34189f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
34189f50:	4770      	bx	lr
34189f52:	bf00      	nop
34189f54:	56028000 	.word	0x56028000

34189f58 <LL_RCC_PLL1P_IsEnabled>:
{
34189f58:	b480      	push	{r7}
34189f5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34189f5c:	4b07      	ldr	r3, [pc, #28]	@ (34189f7c <LL_RCC_PLL1P_IsEnabled+0x24>)
34189f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34189f62:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34189f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34189f6a:	d101      	bne.n	34189f70 <LL_RCC_PLL1P_IsEnabled+0x18>
34189f6c:	2301      	movs	r3, #1
34189f6e:	e000      	b.n	34189f72 <LL_RCC_PLL1P_IsEnabled+0x1a>
34189f70:	2300      	movs	r3, #0
}
34189f72:	4618      	mov	r0, r3
34189f74:	46bd      	mov	sp, r7
34189f76:	f85d 7b04 	ldr.w	r7, [sp], #4
34189f7a:	4770      	bx	lr
34189f7c:	56028000 	.word	0x56028000

34189f80 <LL_RCC_PLL1_GetFRACN>:
{
34189f80:	b480      	push	{r7}
34189f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34189f84:	4b04      	ldr	r3, [pc, #16]	@ (34189f98 <LL_RCC_PLL1_GetFRACN+0x18>)
34189f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34189f8a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34189f8e:	4618      	mov	r0, r3
34189f90:	46bd      	mov	sp, r7
34189f92:	f85d 7b04 	ldr.w	r7, [sp], #4
34189f96:	4770      	bx	lr
34189f98:	56028000 	.word	0x56028000

34189f9c <LL_RCC_PLL2_GetSource>:
{
34189f9c:	b480      	push	{r7}
34189f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34189fa0:	4b04      	ldr	r3, [pc, #16]	@ (34189fb4 <LL_RCC_PLL2_GetSource+0x18>)
34189fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34189fa6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34189faa:	4618      	mov	r0, r3
34189fac:	46bd      	mov	sp, r7
34189fae:	f85d 7b04 	ldr.w	r7, [sp], #4
34189fb2:	4770      	bx	lr
34189fb4:	56028000 	.word	0x56028000

34189fb8 <LL_RCC_PLL2_IsReady>:
{
34189fb8:	b480      	push	{r7}
34189fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34189fbc:	4b07      	ldr	r3, [pc, #28]	@ (34189fdc <LL_RCC_PLL2_IsReady+0x24>)
34189fbe:	685b      	ldr	r3, [r3, #4]
34189fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34189fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34189fc8:	d101      	bne.n	34189fce <LL_RCC_PLL2_IsReady+0x16>
34189fca:	2301      	movs	r3, #1
34189fcc:	e000      	b.n	34189fd0 <LL_RCC_PLL2_IsReady+0x18>
34189fce:	2300      	movs	r3, #0
}
34189fd0:	4618      	mov	r0, r3
34189fd2:	46bd      	mov	sp, r7
34189fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
34189fd8:	4770      	bx	lr
34189fda:	bf00      	nop
34189fdc:	56028000 	.word	0x56028000

34189fe0 <LL_RCC_PLL2_IsEnabledBypass>:
{
34189fe0:	b480      	push	{r7}
34189fe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34189fe4:	4b07      	ldr	r3, [pc, #28]	@ (3418a004 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34189fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34189fea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34189fee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34189ff2:	d101      	bne.n	34189ff8 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34189ff4:	2301      	movs	r3, #1
34189ff6:	e000      	b.n	34189ffa <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34189ff8:	2300      	movs	r3, #0
}
34189ffa:	4618      	mov	r0, r3
34189ffc:	46bd      	mov	sp, r7
34189ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a002:	4770      	bx	lr
3418a004:	56028000 	.word	0x56028000

3418a008 <LL_RCC_PLL2_GetN>:
{
3418a008:	b480      	push	{r7}
3418a00a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
3418a00c:	4b05      	ldr	r3, [pc, #20]	@ (3418a024 <LL_RCC_PLL2_GetN+0x1c>)
3418a00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418a012:	0a1b      	lsrs	r3, r3, #8
3418a014:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3418a018:	4618      	mov	r0, r3
3418a01a:	46bd      	mov	sp, r7
3418a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a020:	4770      	bx	lr
3418a022:	bf00      	nop
3418a024:	56028000 	.word	0x56028000

3418a028 <LL_RCC_PLL2_GetM>:
{
3418a028:	b480      	push	{r7}
3418a02a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
3418a02c:	4b05      	ldr	r3, [pc, #20]	@ (3418a044 <LL_RCC_PLL2_GetM+0x1c>)
3418a02e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418a032:	0d1b      	lsrs	r3, r3, #20
3418a034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3418a038:	4618      	mov	r0, r3
3418a03a:	46bd      	mov	sp, r7
3418a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a040:	4770      	bx	lr
3418a042:	bf00      	nop
3418a044:	56028000 	.word	0x56028000

3418a048 <LL_RCC_PLL2_GetP1>:
{
3418a048:	b480      	push	{r7}
3418a04a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
3418a04c:	4b05      	ldr	r3, [pc, #20]	@ (3418a064 <LL_RCC_PLL2_GetP1+0x1c>)
3418a04e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418a052:	0edb      	lsrs	r3, r3, #27
3418a054:	f003 0307 	and.w	r3, r3, #7
}
3418a058:	4618      	mov	r0, r3
3418a05a:	46bd      	mov	sp, r7
3418a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a060:	4770      	bx	lr
3418a062:	bf00      	nop
3418a064:	56028000 	.word	0x56028000

3418a068 <LL_RCC_PLL2_GetP2>:
{
3418a068:	b480      	push	{r7}
3418a06a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
3418a06c:	4b05      	ldr	r3, [pc, #20]	@ (3418a084 <LL_RCC_PLL2_GetP2+0x1c>)
3418a06e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418a072:	0e1b      	lsrs	r3, r3, #24
3418a074:	f003 0307 	and.w	r3, r3, #7
}
3418a078:	4618      	mov	r0, r3
3418a07a:	46bd      	mov	sp, r7
3418a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a080:	4770      	bx	lr
3418a082:	bf00      	nop
3418a084:	56028000 	.word	0x56028000

3418a088 <LL_RCC_PLL2P_IsEnabled>:
{
3418a088:	b480      	push	{r7}
3418a08a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
3418a08c:	4b07      	ldr	r3, [pc, #28]	@ (3418a0ac <LL_RCC_PLL2P_IsEnabled+0x24>)
3418a08e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418a092:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418a096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418a09a:	d101      	bne.n	3418a0a0 <LL_RCC_PLL2P_IsEnabled+0x18>
3418a09c:	2301      	movs	r3, #1
3418a09e:	e000      	b.n	3418a0a2 <LL_RCC_PLL2P_IsEnabled+0x1a>
3418a0a0:	2300      	movs	r3, #0
}
3418a0a2:	4618      	mov	r0, r3
3418a0a4:	46bd      	mov	sp, r7
3418a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a0aa:	4770      	bx	lr
3418a0ac:	56028000 	.word	0x56028000

3418a0b0 <LL_RCC_PLL2_GetFRACN>:
{
3418a0b0:	b480      	push	{r7}
3418a0b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
3418a0b4:	4b04      	ldr	r3, [pc, #16]	@ (3418a0c8 <LL_RCC_PLL2_GetFRACN+0x18>)
3418a0b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418a0ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418a0be:	4618      	mov	r0, r3
3418a0c0:	46bd      	mov	sp, r7
3418a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a0c6:	4770      	bx	lr
3418a0c8:	56028000 	.word	0x56028000

3418a0cc <LL_RCC_PLL3_GetSource>:
{
3418a0cc:	b480      	push	{r7}
3418a0ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
3418a0d0:	4b04      	ldr	r3, [pc, #16]	@ (3418a0e4 <LL_RCC_PLL3_GetSource+0x18>)
3418a0d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418a0d6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418a0da:	4618      	mov	r0, r3
3418a0dc:	46bd      	mov	sp, r7
3418a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a0e2:	4770      	bx	lr
3418a0e4:	56028000 	.word	0x56028000

3418a0e8 <LL_RCC_PLL3_IsReady>:
{
3418a0e8:	b480      	push	{r7}
3418a0ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418a0ec:	4b07      	ldr	r3, [pc, #28]	@ (3418a10c <LL_RCC_PLL3_IsReady+0x24>)
3418a0ee:	685b      	ldr	r3, [r3, #4]
3418a0f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418a0f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418a0f8:	d101      	bne.n	3418a0fe <LL_RCC_PLL3_IsReady+0x16>
3418a0fa:	2301      	movs	r3, #1
3418a0fc:	e000      	b.n	3418a100 <LL_RCC_PLL3_IsReady+0x18>
3418a0fe:	2300      	movs	r3, #0
}
3418a100:	4618      	mov	r0, r3
3418a102:	46bd      	mov	sp, r7
3418a104:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a108:	4770      	bx	lr
3418a10a:	bf00      	nop
3418a10c:	56028000 	.word	0x56028000

3418a110 <LL_RCC_PLL3_IsEnabledBypass>:
{
3418a110:	b480      	push	{r7}
3418a112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3418a114:	4b07      	ldr	r3, [pc, #28]	@ (3418a134 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
3418a116:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418a11a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418a11e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418a122:	d101      	bne.n	3418a128 <LL_RCC_PLL3_IsEnabledBypass+0x18>
3418a124:	2301      	movs	r3, #1
3418a126:	e000      	b.n	3418a12a <LL_RCC_PLL3_IsEnabledBypass+0x1a>
3418a128:	2300      	movs	r3, #0
}
3418a12a:	4618      	mov	r0, r3
3418a12c:	46bd      	mov	sp, r7
3418a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a132:	4770      	bx	lr
3418a134:	56028000 	.word	0x56028000

3418a138 <LL_RCC_PLL3_GetN>:
{
3418a138:	b480      	push	{r7}
3418a13a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
3418a13c:	4b05      	ldr	r3, [pc, #20]	@ (3418a154 <LL_RCC_PLL3_GetN+0x1c>)
3418a13e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418a142:	0a1b      	lsrs	r3, r3, #8
3418a144:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3418a148:	4618      	mov	r0, r3
3418a14a:	46bd      	mov	sp, r7
3418a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a150:	4770      	bx	lr
3418a152:	bf00      	nop
3418a154:	56028000 	.word	0x56028000

3418a158 <LL_RCC_PLL3_GetM>:
{
3418a158:	b480      	push	{r7}
3418a15a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
3418a15c:	4b05      	ldr	r3, [pc, #20]	@ (3418a174 <LL_RCC_PLL3_GetM+0x1c>)
3418a15e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418a162:	0d1b      	lsrs	r3, r3, #20
3418a164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3418a168:	4618      	mov	r0, r3
3418a16a:	46bd      	mov	sp, r7
3418a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a170:	4770      	bx	lr
3418a172:	bf00      	nop
3418a174:	56028000 	.word	0x56028000

3418a178 <LL_RCC_PLL3_GetP1>:
{
3418a178:	b480      	push	{r7}
3418a17a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
3418a17c:	4b05      	ldr	r3, [pc, #20]	@ (3418a194 <LL_RCC_PLL3_GetP1+0x1c>)
3418a17e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418a182:	0edb      	lsrs	r3, r3, #27
3418a184:	f003 0307 	and.w	r3, r3, #7
}
3418a188:	4618      	mov	r0, r3
3418a18a:	46bd      	mov	sp, r7
3418a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a190:	4770      	bx	lr
3418a192:	bf00      	nop
3418a194:	56028000 	.word	0x56028000

3418a198 <LL_RCC_PLL3_GetP2>:
{
3418a198:	b480      	push	{r7}
3418a19a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
3418a19c:	4b05      	ldr	r3, [pc, #20]	@ (3418a1b4 <LL_RCC_PLL3_GetP2+0x1c>)
3418a19e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418a1a2:	0e1b      	lsrs	r3, r3, #24
3418a1a4:	f003 0307 	and.w	r3, r3, #7
}
3418a1a8:	4618      	mov	r0, r3
3418a1aa:	46bd      	mov	sp, r7
3418a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a1b0:	4770      	bx	lr
3418a1b2:	bf00      	nop
3418a1b4:	56028000 	.word	0x56028000

3418a1b8 <LL_RCC_PLL3P_IsEnabled>:
{
3418a1b8:	b480      	push	{r7}
3418a1ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
3418a1bc:	4b07      	ldr	r3, [pc, #28]	@ (3418a1dc <LL_RCC_PLL3P_IsEnabled+0x24>)
3418a1be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418a1c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418a1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418a1ca:	d101      	bne.n	3418a1d0 <LL_RCC_PLL3P_IsEnabled+0x18>
3418a1cc:	2301      	movs	r3, #1
3418a1ce:	e000      	b.n	3418a1d2 <LL_RCC_PLL3P_IsEnabled+0x1a>
3418a1d0:	2300      	movs	r3, #0
}
3418a1d2:	4618      	mov	r0, r3
3418a1d4:	46bd      	mov	sp, r7
3418a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a1da:	4770      	bx	lr
3418a1dc:	56028000 	.word	0x56028000

3418a1e0 <LL_RCC_PLL3_GetFRACN>:
{
3418a1e0:	b480      	push	{r7}
3418a1e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
3418a1e4:	4b04      	ldr	r3, [pc, #16]	@ (3418a1f8 <LL_RCC_PLL3_GetFRACN+0x18>)
3418a1e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418a1ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418a1ee:	4618      	mov	r0, r3
3418a1f0:	46bd      	mov	sp, r7
3418a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a1f6:	4770      	bx	lr
3418a1f8:	56028000 	.word	0x56028000

3418a1fc <LL_RCC_PLL4_GetSource>:
{
3418a1fc:	b480      	push	{r7}
3418a1fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3418a200:	4b04      	ldr	r3, [pc, #16]	@ (3418a214 <LL_RCC_PLL4_GetSource+0x18>)
3418a202:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418a206:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418a20a:	4618      	mov	r0, r3
3418a20c:	46bd      	mov	sp, r7
3418a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a212:	4770      	bx	lr
3418a214:	56028000 	.word	0x56028000

3418a218 <LL_RCC_PLL4_IsReady>:
{
3418a218:	b480      	push	{r7}
3418a21a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3418a21c:	4b07      	ldr	r3, [pc, #28]	@ (3418a23c <LL_RCC_PLL4_IsReady+0x24>)
3418a21e:	685b      	ldr	r3, [r3, #4]
3418a220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418a224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418a228:	d101      	bne.n	3418a22e <LL_RCC_PLL4_IsReady+0x16>
3418a22a:	2301      	movs	r3, #1
3418a22c:	e000      	b.n	3418a230 <LL_RCC_PLL4_IsReady+0x18>
3418a22e:	2300      	movs	r3, #0
}
3418a230:	4618      	mov	r0, r3
3418a232:	46bd      	mov	sp, r7
3418a234:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a238:	4770      	bx	lr
3418a23a:	bf00      	nop
3418a23c:	56028000 	.word	0x56028000

3418a240 <LL_RCC_PLL4_IsEnabledBypass>:
{
3418a240:	b480      	push	{r7}
3418a242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3418a244:	4b07      	ldr	r3, [pc, #28]	@ (3418a264 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
3418a246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418a24a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418a24e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418a252:	d101      	bne.n	3418a258 <LL_RCC_PLL4_IsEnabledBypass+0x18>
3418a254:	2301      	movs	r3, #1
3418a256:	e000      	b.n	3418a25a <LL_RCC_PLL4_IsEnabledBypass+0x1a>
3418a258:	2300      	movs	r3, #0
}
3418a25a:	4618      	mov	r0, r3
3418a25c:	46bd      	mov	sp, r7
3418a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a262:	4770      	bx	lr
3418a264:	56028000 	.word	0x56028000

3418a268 <LL_RCC_PLL4_GetN>:
{
3418a268:	b480      	push	{r7}
3418a26a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
3418a26c:	4b05      	ldr	r3, [pc, #20]	@ (3418a284 <LL_RCC_PLL4_GetN+0x1c>)
3418a26e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418a272:	0a1b      	lsrs	r3, r3, #8
3418a274:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3418a278:	4618      	mov	r0, r3
3418a27a:	46bd      	mov	sp, r7
3418a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a280:	4770      	bx	lr
3418a282:	bf00      	nop
3418a284:	56028000 	.word	0x56028000

3418a288 <LL_RCC_PLL4_GetM>:
{
3418a288:	b480      	push	{r7}
3418a28a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
3418a28c:	4b05      	ldr	r3, [pc, #20]	@ (3418a2a4 <LL_RCC_PLL4_GetM+0x1c>)
3418a28e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418a292:	0d1b      	lsrs	r3, r3, #20
3418a294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3418a298:	4618      	mov	r0, r3
3418a29a:	46bd      	mov	sp, r7
3418a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a2a0:	4770      	bx	lr
3418a2a2:	bf00      	nop
3418a2a4:	56028000 	.word	0x56028000

3418a2a8 <LL_RCC_PLL4_GetP1>:
{
3418a2a8:	b480      	push	{r7}
3418a2aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
3418a2ac:	4b05      	ldr	r3, [pc, #20]	@ (3418a2c4 <LL_RCC_PLL4_GetP1+0x1c>)
3418a2ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418a2b2:	0edb      	lsrs	r3, r3, #27
3418a2b4:	f003 0307 	and.w	r3, r3, #7
}
3418a2b8:	4618      	mov	r0, r3
3418a2ba:	46bd      	mov	sp, r7
3418a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a2c0:	4770      	bx	lr
3418a2c2:	bf00      	nop
3418a2c4:	56028000 	.word	0x56028000

3418a2c8 <LL_RCC_PLL4_GetP2>:
{
3418a2c8:	b480      	push	{r7}
3418a2ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
3418a2cc:	4b05      	ldr	r3, [pc, #20]	@ (3418a2e4 <LL_RCC_PLL4_GetP2+0x1c>)
3418a2ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418a2d2:	0e1b      	lsrs	r3, r3, #24
3418a2d4:	f003 0307 	and.w	r3, r3, #7
}
3418a2d8:	4618      	mov	r0, r3
3418a2da:	46bd      	mov	sp, r7
3418a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a2e0:	4770      	bx	lr
3418a2e2:	bf00      	nop
3418a2e4:	56028000 	.word	0x56028000

3418a2e8 <LL_RCC_PLL4P_IsEnabled>:
{
3418a2e8:	b480      	push	{r7}
3418a2ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
3418a2ec:	4b07      	ldr	r3, [pc, #28]	@ (3418a30c <LL_RCC_PLL4P_IsEnabled+0x24>)
3418a2ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418a2f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418a2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418a2fa:	d101      	bne.n	3418a300 <LL_RCC_PLL4P_IsEnabled+0x18>
3418a2fc:	2301      	movs	r3, #1
3418a2fe:	e000      	b.n	3418a302 <LL_RCC_PLL4P_IsEnabled+0x1a>
3418a300:	2300      	movs	r3, #0
}
3418a302:	4618      	mov	r0, r3
3418a304:	46bd      	mov	sp, r7
3418a306:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a30a:	4770      	bx	lr
3418a30c:	56028000 	.word	0x56028000

3418a310 <LL_RCC_PLL4_GetFRACN>:
{
3418a310:	b480      	push	{r7}
3418a312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
3418a314:	4b04      	ldr	r3, [pc, #16]	@ (3418a328 <LL_RCC_PLL4_GetFRACN+0x18>)
3418a316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3418a31a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418a31e:	4618      	mov	r0, r3
3418a320:	46bd      	mov	sp, r7
3418a322:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a326:	4770      	bx	lr
3418a328:	56028000 	.word	0x56028000

3418a32c <LL_RCC_IC3_Enable>:
{
3418a32c:	b480      	push	{r7}
3418a32e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
3418a330:	4b04      	ldr	r3, [pc, #16]	@ (3418a344 <LL_RCC_IC3_Enable+0x18>)
3418a332:	2204      	movs	r2, #4
3418a334:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a338:	bf00      	nop
3418a33a:	46bd      	mov	sp, r7
3418a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a340:	4770      	bx	lr
3418a342:	bf00      	nop
3418a344:	56028000 	.word	0x56028000

3418a348 <LL_RCC_IC4_Enable>:
{
3418a348:	b480      	push	{r7}
3418a34a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3418a34c:	4b04      	ldr	r3, [pc, #16]	@ (3418a360 <LL_RCC_IC4_Enable+0x18>)
3418a34e:	2208      	movs	r2, #8
3418a350:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a354:	bf00      	nop
3418a356:	46bd      	mov	sp, r7
3418a358:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a35c:	4770      	bx	lr
3418a35e:	bf00      	nop
3418a360:	56028000 	.word	0x56028000

3418a364 <LL_RCC_IC5_Enable>:
{
3418a364:	b480      	push	{r7}
3418a366:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3418a368:	4b04      	ldr	r3, [pc, #16]	@ (3418a37c <LL_RCC_IC5_Enable+0x18>)
3418a36a:	2210      	movs	r2, #16
3418a36c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a370:	bf00      	nop
3418a372:	46bd      	mov	sp, r7
3418a374:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a378:	4770      	bx	lr
3418a37a:	bf00      	nop
3418a37c:	56028000 	.word	0x56028000

3418a380 <LL_RCC_IC7_Enable>:
{
3418a380:	b480      	push	{r7}
3418a382:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3418a384:	4b04      	ldr	r3, [pc, #16]	@ (3418a398 <LL_RCC_IC7_Enable+0x18>)
3418a386:	2240      	movs	r2, #64	@ 0x40
3418a388:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a38c:	bf00      	nop
3418a38e:	46bd      	mov	sp, r7
3418a390:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a394:	4770      	bx	lr
3418a396:	bf00      	nop
3418a398:	56028000 	.word	0x56028000

3418a39c <LL_RCC_IC8_Enable>:
{
3418a39c:	b480      	push	{r7}
3418a39e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3418a3a0:	4b04      	ldr	r3, [pc, #16]	@ (3418a3b4 <LL_RCC_IC8_Enable+0x18>)
3418a3a2:	2280      	movs	r2, #128	@ 0x80
3418a3a4:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a3a8:	bf00      	nop
3418a3aa:	46bd      	mov	sp, r7
3418a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a3b0:	4770      	bx	lr
3418a3b2:	bf00      	nop
3418a3b4:	56028000 	.word	0x56028000

3418a3b8 <LL_RCC_IC9_Enable>:
{
3418a3b8:	b480      	push	{r7}
3418a3ba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3418a3bc:	4b04      	ldr	r3, [pc, #16]	@ (3418a3d0 <LL_RCC_IC9_Enable+0x18>)
3418a3be:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418a3c2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a3c6:	bf00      	nop
3418a3c8:	46bd      	mov	sp, r7
3418a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a3ce:	4770      	bx	lr
3418a3d0:	56028000 	.word	0x56028000

3418a3d4 <LL_RCC_IC10_Enable>:
{
3418a3d4:	b480      	push	{r7}
3418a3d6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
3418a3d8:	4b04      	ldr	r3, [pc, #16]	@ (3418a3ec <LL_RCC_IC10_Enable+0x18>)
3418a3da:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418a3de:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a3e2:	bf00      	nop
3418a3e4:	46bd      	mov	sp, r7
3418a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a3ea:	4770      	bx	lr
3418a3ec:	56028000 	.word	0x56028000

3418a3f0 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
3418a3f0:	b480      	push	{r7}
3418a3f2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
3418a3f4:	4b04      	ldr	r3, [pc, #16]	@ (3418a408 <LL_RCC_IC12_Enable+0x18>)
3418a3f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418a3fa:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a3fe:	bf00      	nop
3418a400:	46bd      	mov	sp, r7
3418a402:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a406:	4770      	bx	lr
3418a408:	56028000 	.word	0x56028000

3418a40c <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
3418a40c:	b480      	push	{r7}
3418a40e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
3418a410:	4b04      	ldr	r3, [pc, #16]	@ (3418a424 <LL_RCC_IC13_Enable+0x18>)
3418a412:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3418a416:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a41a:	bf00      	nop
3418a41c:	46bd      	mov	sp, r7
3418a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a422:	4770      	bx	lr
3418a424:	56028000 	.word	0x56028000

3418a428 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
3418a428:	b480      	push	{r7}
3418a42a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3418a42c:	4b04      	ldr	r3, [pc, #16]	@ (3418a440 <LL_RCC_IC14_Enable+0x18>)
3418a42e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418a432:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a436:	bf00      	nop
3418a438:	46bd      	mov	sp, r7
3418a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a43e:	4770      	bx	lr
3418a440:	56028000 	.word	0x56028000

3418a444 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
3418a444:	b480      	push	{r7}
3418a446:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3418a448:	4b04      	ldr	r3, [pc, #16]	@ (3418a45c <LL_RCC_IC15_Enable+0x18>)
3418a44a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3418a44e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a452:	bf00      	nop
3418a454:	46bd      	mov	sp, r7
3418a456:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a45a:	4770      	bx	lr
3418a45c:	56028000 	.word	0x56028000

3418a460 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
3418a460:	b480      	push	{r7}
3418a462:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
3418a464:	4b04      	ldr	r3, [pc, #16]	@ (3418a478 <LL_RCC_IC16_Enable+0x18>)
3418a466:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3418a46a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a46e:	bf00      	nop
3418a470:	46bd      	mov	sp, r7
3418a472:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a476:	4770      	bx	lr
3418a478:	56028000 	.word	0x56028000

3418a47c <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
3418a47c:	b480      	push	{r7}
3418a47e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
3418a480:	4b04      	ldr	r3, [pc, #16]	@ (3418a494 <LL_RCC_IC17_Enable+0x18>)
3418a482:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3418a486:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a48a:	bf00      	nop
3418a48c:	46bd      	mov	sp, r7
3418a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a492:	4770      	bx	lr
3418a494:	56028000 	.word	0x56028000

3418a498 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
3418a498:	b480      	push	{r7}
3418a49a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
3418a49c:	4b04      	ldr	r3, [pc, #16]	@ (3418a4b0 <LL_RCC_IC18_Enable+0x18>)
3418a49e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3418a4a2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a4a6:	bf00      	nop
3418a4a8:	46bd      	mov	sp, r7
3418a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a4ae:	4770      	bx	lr
3418a4b0:	56028000 	.word	0x56028000

3418a4b4 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
3418a4b4:	b480      	push	{r7}
3418a4b6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
3418a4b8:	4b04      	ldr	r3, [pc, #16]	@ (3418a4cc <LL_RCC_IC19_Enable+0x18>)
3418a4ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
3418a4be:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a4c2:	bf00      	nop
3418a4c4:	46bd      	mov	sp, r7
3418a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a4ca:	4770      	bx	lr
3418a4cc:	56028000 	.word	0x56028000

3418a4d0 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
3418a4d0:	b480      	push	{r7}
3418a4d2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
3418a4d4:	4b04      	ldr	r3, [pc, #16]	@ (3418a4e8 <LL_RCC_IC20_Enable+0x18>)
3418a4d6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3418a4da:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418a4de:	bf00      	nop
3418a4e0:	46bd      	mov	sp, r7
3418a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a4e6:	4770      	bx	lr
3418a4e8:	56028000 	.word	0x56028000

3418a4ec <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
3418a4ec:	b480      	push	{r7}
3418a4ee:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3418a4f0:	4b04      	ldr	r3, [pc, #16]	@ (3418a504 <LL_RCC_CLKP_Enable+0x18>)
3418a4f2:	2240      	movs	r2, #64	@ 0x40
3418a4f4:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
3418a4f8:	bf00      	nop
3418a4fa:	46bd      	mov	sp, r7
3418a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
3418a500:	4770      	bx	lr
3418a502:	bf00      	nop
3418a504:	56028000 	.word	0x56028000

3418a508 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
3418a508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3418a50c:	b0f2      	sub	sp, #456	@ 0x1c8
3418a50e:	af00      	add	r7, sp, #0
3418a510:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
3418a514:	2300      	movs	r3, #0
3418a516:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
3418a51a:	2300      	movs	r3, #0
3418a51c:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
3418a520:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a524:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a528:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
3418a52c:	2500      	movs	r5, #0
3418a52e:	ea54 0305 	orrs.w	r3, r4, r5
3418a532:	d06c      	beq.n	3418a60e <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
3418a534:	f7ff fc60 	bl	34189df8 <LL_RCC_GetRTCClockSource>
3418a538:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3418a53c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
3418a540:	2b00      	cmp	r3, #0
3418a542:	d018      	beq.n	3418a576 <HAL_RCCEx_PeriphCLKConfig+0x6e>
3418a544:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a548:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418a54c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
3418a550:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
3418a554:	4293      	cmp	r3, r2
3418a556:	d00e      	beq.n	3418a576 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
3418a558:	4bc3      	ldr	r3, [pc, #780]	@ (3418a868 <HAL_RCCEx_PeriphCLKConfig+0x360>)
3418a55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418a55c:	4ac2      	ldr	r2, [pc, #776]	@ (3418a868 <HAL_RCCEx_PeriphCLKConfig+0x360>)
3418a55e:	f043 0301 	orr.w	r3, r3, #1
3418a562:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
3418a564:	4bc0      	ldr	r3, [pc, #768]	@ (3418a868 <HAL_RCCEx_PeriphCLKConfig+0x360>)
3418a566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418a568:	f003 0301 	and.w	r3, r3, #1
3418a56c:	2b00      	cmp	r3, #0
3418a56e:	d102      	bne.n	3418a576 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        ret = HAL_ERROR;
3418a570:	2301      	movs	r3, #1
3418a572:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
3418a576:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
3418a57a:	2b00      	cmp	r3, #0
3418a57c:	d143      	bne.n	3418a606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
3418a57e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a582:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418a586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418a58a:	d117      	bne.n	3418a5bc <HAL_RCCEx_PeriphCLKConfig+0xb4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418a58c:	f7f8 fa56 	bl	34182a3c <HAL_GetTick>
3418a590:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
3418a594:	e00d      	b.n	3418a5b2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3418a596:	f7f8 fa51 	bl	34182a3c <HAL_GetTick>
3418a59a:	4602      	mov	r2, r0
3418a59c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
3418a5a0:	1ad2      	subs	r2, r2, r3
3418a5a2:	f241 3388 	movw	r3, #5000	@ 0x1388
3418a5a6:	429a      	cmp	r2, r3
3418a5a8:	d903      	bls.n	3418a5b2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
          {
            ret = HAL_TIMEOUT;
3418a5aa:	2303      	movs	r3, #3
3418a5ac:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
            break;
3418a5b0:	e004      	b.n	3418a5bc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        while (LL_RCC_LSE_IsReady() == 0U)
3418a5b2:	f7ff fa2b 	bl	34189a0c <LL_RCC_LSE_IsReady>
3418a5b6:	4603      	mov	r3, r0
3418a5b8:	2b00      	cmp	r3, #0
3418a5ba:	d0ec      	beq.n	3418a596 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          }
        }
      }

      if (ret == HAL_OK)
3418a5bc:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
3418a5c0:	2b00      	cmp	r3, #0
3418a5c2:	d11b      	bne.n	3418a5fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
3418a5c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a5c8:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418a5cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3418a5d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418a5d4:	d108      	bne.n	3418a5e8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
3418a5d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a5da:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418a5de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3418a5e2:	4618      	mov	r0, r3
3418a5e4:	f7ff fc16 	bl	34189e14 <LL_RCC_SetRTC_HSEPrescaler>
3418a5e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a5ec:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418a5f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3418a5f4:	4618      	mov	r0, r3
3418a5f6:	f7ff fbe9 	bl	34189dcc <LL_RCC_SetRTCClockSource>
3418a5fa:	e008      	b.n	3418a60e <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
      else
      {
        /* set overall return value */
        status = ret;
3418a5fc:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
3418a600:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
3418a604:	e003      	b.n	3418a60e <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
3418a606:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
3418a60a:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3418a60e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a612:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a616:	f002 0804 	and.w	r8, r2, #4
3418a61a:	f04f 0900 	mov.w	r9, #0
3418a61e:	ea58 0309 	orrs.w	r3, r8, r9
3418a622:	f000 809b 	beq.w	3418a75c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
3418a626:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a62a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418a62e:	2b04      	cmp	r3, #4
3418a630:	d116      	bne.n	3418a660 <HAL_RCCEx_PeriphCLKConfig+0x158>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3418a632:	4b8e      	ldr	r3, [pc, #568]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a634:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418a638:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a63c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a640:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a644:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418a646:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418a64c:	3b01      	subs	r3, #1
3418a64e:	041b      	lsls	r3, r3, #16
3418a650:	4313      	orrs	r3, r2
3418a652:	4a86      	ldr	r2, [pc, #536]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a654:	430b      	orrs	r3, r1
3418a656:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3418a65a:	f7ff fe83 	bl	3418a364 <LL_RCC_IC5_Enable>
3418a65e:	e076      	b.n	3418a74e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
3418a660:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a664:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418a668:	2b05      	cmp	r3, #5
3418a66a:	d116      	bne.n	3418a69a <HAL_RCCEx_PeriphCLKConfig+0x192>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418a66c:	4b7f      	ldr	r3, [pc, #508]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a66e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418a672:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a676:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a67a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a67e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418a680:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418a686:	3b01      	subs	r3, #1
3418a688:	041b      	lsls	r3, r3, #16
3418a68a:	4313      	orrs	r3, r2
3418a68c:	4a77      	ldr	r2, [pc, #476]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a68e:	430b      	orrs	r3, r1
3418a690:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418a694:	f7ff fe9e 	bl	3418a3d4 <LL_RCC_IC10_Enable>
3418a698:	e059      	b.n	3418a74e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
3418a69a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a69e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418a6a2:	2b06      	cmp	r3, #6
3418a6a4:	d116      	bne.n	3418a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418a6a6:	4b71      	ldr	r3, [pc, #452]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a6a8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418a6ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a6b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a6b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a6b8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418a6ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a6be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418a6c0:	3b01      	subs	r3, #1
3418a6c2:	041b      	lsls	r3, r3, #16
3418a6c4:	4313      	orrs	r3, r2
3418a6c6:	4a69      	ldr	r2, [pc, #420]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a6c8:	430b      	orrs	r3, r1
3418a6ca:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418a6ce:	f7ff feb9 	bl	3418a444 <LL_RCC_IC15_Enable>
3418a6d2:	e03c      	b.n	3418a74e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
3418a6d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a6d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418a6dc:	2b03      	cmp	r3, #3
3418a6de:	d118      	bne.n	3418a712 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3418a6e0:	4b62      	ldr	r3, [pc, #392]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a6e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3418a6e6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a6ea:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a6ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a6f2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3418a6f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a6fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3418a6fe:	3b01      	subs	r3, #1
3418a700:	041b      	lsls	r3, r3, #16
3418a702:	4313      	orrs	r3, r2
3418a704:	4a59      	ldr	r2, [pc, #356]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a706:	430b      	orrs	r3, r1
3418a708:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3418a70c:	f7ff fed2 	bl	3418a4b4 <LL_RCC_IC19_Enable>
3418a710:	e01d      	b.n	3418a74e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
3418a712:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a716:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418a71a:	2b07      	cmp	r3, #7
3418a71c:	d117      	bne.n	3418a74e <HAL_RCCEx_PeriphCLKConfig+0x246>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3418a71e:	4b53      	ldr	r3, [pc, #332]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a720:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418a724:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a728:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a72c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a730:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3418a734:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418a73c:	3b01      	subs	r3, #1
3418a73e:	041b      	lsls	r3, r3, #16
3418a740:	4313      	orrs	r3, r2
3418a742:	4a4a      	ldr	r2, [pc, #296]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a744:	430b      	orrs	r3, r1
3418a746:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3418a74a:	f7ff fec1 	bl	3418a4d0 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
3418a74e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a752:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418a756:	4618      	mov	r0, r3
3418a758:	f7ff f9aa 	bl	34189ab0 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
3418a75c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a760:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a764:	f04f 0a00 	mov.w	sl, #0
3418a768:	f403 0b80 	and.w	fp, r3, #4194304	@ 0x400000
3418a76c:	ea5a 030b 	orrs.w	r3, sl, fp
3418a770:	d04b      	beq.n	3418a80a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3418a772:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a776:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3418a77a:	4b3d      	ldr	r3, [pc, #244]	@ (3418a870 <HAL_RCCEx_PeriphCLKConfig+0x368>)
3418a77c:	429a      	cmp	r2, r3
3418a77e:	d116      	bne.n	3418a7ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3418a780:	4b3a      	ldr	r3, [pc, #232]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a782:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418a786:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a78a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a78e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a792:	699a      	ldr	r2, [r3, #24]
3418a794:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a798:	69db      	ldr	r3, [r3, #28]
3418a79a:	3b01      	subs	r3, #1
3418a79c:	041b      	lsls	r3, r3, #16
3418a79e:	4313      	orrs	r3, r2
3418a7a0:	4a32      	ldr	r2, [pc, #200]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a7a2:	430b      	orrs	r3, r1
3418a7a4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3418a7a8:	f7ff fdc0 	bl	3418a32c <LL_RCC_IC3_Enable>
3418a7ac:	e026      	b.n	3418a7fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
3418a7ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a7b2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3418a7b6:	4b2f      	ldr	r3, [pc, #188]	@ (3418a874 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
3418a7b8:	429a      	cmp	r2, r3
3418a7ba:	d116      	bne.n	3418a7ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418a7bc:	4b2b      	ldr	r3, [pc, #172]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a7be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418a7c2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a7c6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a7ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a7ce:	6a1a      	ldr	r2, [r3, #32]
3418a7d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418a7d6:	3b01      	subs	r3, #1
3418a7d8:	041b      	lsls	r3, r3, #16
3418a7da:	4313      	orrs	r3, r2
3418a7dc:	4a23      	ldr	r2, [pc, #140]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a7de:	430b      	orrs	r3, r1
3418a7e0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418a7e4:	f7ff fdb0 	bl	3418a348 <LL_RCC_IC4_Enable>
3418a7e8:	e008      	b.n	3418a7fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
3418a7ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a7ee:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3418a7f2:	4b21      	ldr	r3, [pc, #132]	@ (3418a878 <HAL_RCCEx_PeriphCLKConfig+0x370>)
3418a7f4:	429a      	cmp	r2, r3
3418a7f6:	d101      	bne.n	3418a7fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      LL_RCC_CLKP_Enable();
3418a7f8:	f7ff fe78 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
3418a7fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a800:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
3418a804:	4618      	mov	r0, r3
3418a806:	f7ff fad5 	bl	34189db4 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3418a80a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a80e:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a812:	2100      	movs	r1, #0
3418a814:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
3418a818:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3418a81c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
3418a820:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
3418a824:	4603      	mov	r3, r0
3418a826:	460a      	mov	r2, r1
3418a828:	4313      	orrs	r3, r2
3418a82a:	d057      	beq.n	3418a8dc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
3418a82c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a830:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3418a834:	4b11      	ldr	r3, [pc, #68]	@ (3418a87c <HAL_RCCEx_PeriphCLKConfig+0x374>)
3418a836:	429a      	cmp	r2, r3
3418a838:	d122      	bne.n	3418a880 <HAL_RCCEx_PeriphCLKConfig+0x378>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3418a83a:	4b0c      	ldr	r3, [pc, #48]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a83c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418a840:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a844:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a848:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a84c:	699a      	ldr	r2, [r3, #24]
3418a84e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a852:	69db      	ldr	r3, [r3, #28]
3418a854:	3b01      	subs	r3, #1
3418a856:	041b      	lsls	r3, r3, #16
3418a858:	4313      	orrs	r3, r2
3418a85a:	4a04      	ldr	r2, [pc, #16]	@ (3418a86c <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418a85c:	430b      	orrs	r3, r1
3418a85e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3418a862:	f7ff fd63 	bl	3418a32c <LL_RCC_IC3_Enable>
3418a866:	e032      	b.n	3418a8ce <HAL_RCCEx_PeriphCLKConfig+0x3c6>
3418a868:	56024800 	.word	0x56024800
3418a86c:	56028000 	.word	0x56028000
3418a870:	03020014 	.word	0x03020014
3418a874:	03030014 	.word	0x03030014
3418a878:	03010014 	.word	0x03010014
3418a87c:	03020414 	.word	0x03020414
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
3418a880:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a884:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3418a888:	4bc5      	ldr	r3, [pc, #788]	@ (3418aba0 <HAL_RCCEx_PeriphCLKConfig+0x698>)
3418a88a:	429a      	cmp	r2, r3
3418a88c:	d116      	bne.n	3418a8bc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418a88e:	4bc5      	ldr	r3, [pc, #788]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418a890:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418a894:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a898:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a89c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a8a0:	6a1a      	ldr	r2, [r3, #32]
3418a8a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418a8a8:	3b01      	subs	r3, #1
3418a8aa:	041b      	lsls	r3, r3, #16
3418a8ac:	4313      	orrs	r3, r2
3418a8ae:	4abd      	ldr	r2, [pc, #756]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418a8b0:	430b      	orrs	r3, r1
3418a8b2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418a8b6:	f7ff fd47 	bl	3418a348 <LL_RCC_IC4_Enable>
3418a8ba:	e008      	b.n	3418a8ce <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
3418a8bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a8c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3418a8c4:	4bb8      	ldr	r3, [pc, #736]	@ (3418aba8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
3418a8c6:	429a      	cmp	r2, r3
3418a8c8:	d101      	bne.n	3418a8ce <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    {
      LL_RCC_CLKP_Enable();
3418a8ca:	f7ff fe0f 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
3418a8ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a8d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418a8d6:	4618      	mov	r0, r3
3418a8d8:	f7ff fa6c 	bl	34189db4 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
3418a8dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a8e4:	2100      	movs	r1, #0
3418a8e6:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
3418a8ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3418a8ee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
3418a8f2:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
3418a8f6:	4603      	mov	r3, r0
3418a8f8:	460a      	mov	r2, r1
3418a8fa:	4313      	orrs	r3, r2
3418a8fc:	d04b      	beq.n	3418a996 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
3418a8fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a902:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3418a906:	4ba9      	ldr	r3, [pc, #676]	@ (3418abac <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
3418a908:	429a      	cmp	r2, r3
3418a90a:	d116      	bne.n	3418a93a <HAL_RCCEx_PeriphCLKConfig+0x432>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3418a90c:	4ba5      	ldr	r3, [pc, #660]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418a90e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418a912:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a916:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a91a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a91e:	699a      	ldr	r2, [r3, #24]
3418a920:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a924:	69db      	ldr	r3, [r3, #28]
3418a926:	3b01      	subs	r3, #1
3418a928:	041b      	lsls	r3, r3, #16
3418a92a:	4313      	orrs	r3, r2
3418a92c:	4a9d      	ldr	r2, [pc, #628]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418a92e:	430b      	orrs	r3, r1
3418a930:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3418a934:	f7ff fcfa 	bl	3418a32c <LL_RCC_IC3_Enable>
3418a938:	e026      	b.n	3418a988 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
3418a93a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a93e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3418a942:	4b9b      	ldr	r3, [pc, #620]	@ (3418abb0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
3418a944:	429a      	cmp	r2, r3
3418a946:	d116      	bne.n	3418a976 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418a948:	4b96      	ldr	r3, [pc, #600]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418a94a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418a94e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a952:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a956:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a95a:	6a1a      	ldr	r2, [r3, #32]
3418a95c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418a962:	3b01      	subs	r3, #1
3418a964:	041b      	lsls	r3, r3, #16
3418a966:	4313      	orrs	r3, r2
3418a968:	4a8e      	ldr	r2, [pc, #568]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418a96a:	430b      	orrs	r3, r1
3418a96c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418a970:	f7ff fcea 	bl	3418a348 <LL_RCC_IC4_Enable>
3418a974:	e008      	b.n	3418a988 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
3418a976:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a97a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3418a97e:	4b8d      	ldr	r3, [pc, #564]	@ (3418abb4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
3418a980:	429a      	cmp	r2, r3
3418a982:	d101      	bne.n	3418a988 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      LL_RCC_CLKP_Enable();
3418a984:	f7ff fdb2 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
3418a988:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a98c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3418a990:	4618      	mov	r0, r3
3418a992:	f7ff fa0f 	bl	34189db4 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3418a996:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a99e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
3418a9a2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
3418a9a6:	2300      	movs	r3, #0
3418a9a8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
3418a9ac:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
3418a9b0:	4603      	mov	r3, r0
3418a9b2:	460a      	mov	r2, r1
3418a9b4:	4313      	orrs	r3, r2
3418a9b6:	d048      	beq.n	3418aa4a <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
3418a9b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a9bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418a9c0:	2b20      	cmp	r3, #32
3418a9c2:	d116      	bne.n	3418a9f2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3418a9c4:	4b77      	ldr	r3, [pc, #476]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418a9c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418a9ca:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a9ce:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a9d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a9d6:	699a      	ldr	r2, [r3, #24]
3418a9d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a9dc:	69db      	ldr	r3, [r3, #28]
3418a9de:	3b01      	subs	r3, #1
3418a9e0:	041b      	lsls	r3, r3, #16
3418a9e2:	4313      	orrs	r3, r2
3418a9e4:	4a6f      	ldr	r2, [pc, #444]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418a9e6:	430b      	orrs	r3, r1
3418a9e8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3418a9ec:	f7ff fc9e 	bl	3418a32c <LL_RCC_IC3_Enable>
3418a9f0:	e024      	b.n	3418aa3c <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
3418a9f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a9f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418a9fa:	2b30      	cmp	r3, #48	@ 0x30
3418a9fc:	d116      	bne.n	3418aa2c <HAL_RCCEx_PeriphCLKConfig+0x524>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418a9fe:	4b69      	ldr	r3, [pc, #420]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418aa00:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418aa04:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418aa08:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418aa0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aa10:	6a1a      	ldr	r2, [r3, #32]
3418aa12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aa16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418aa18:	3b01      	subs	r3, #1
3418aa1a:	041b      	lsls	r3, r3, #16
3418aa1c:	4313      	orrs	r3, r2
3418aa1e:	4a61      	ldr	r2, [pc, #388]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418aa20:	430b      	orrs	r3, r1
3418aa22:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418aa26:	f7ff fc8f 	bl	3418a348 <LL_RCC_IC4_Enable>
3418aa2a:	e007      	b.n	3418aa3c <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
3418aa2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aa30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418aa34:	2b10      	cmp	r3, #16
3418aa36:	d101      	bne.n	3418aa3c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      LL_RCC_CLKP_Enable();
3418aa38:	f7ff fd58 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
3418aa3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aa40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418aa44:	4618      	mov	r0, r3
3418aa46:	f7ff f8cd 	bl	34189be4 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
3418aa4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
3418aa52:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
3418aa56:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
3418aa5a:	2300      	movs	r3, #0
3418aa5c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
3418aa60:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
3418aa64:	4603      	mov	r3, r0
3418aa66:	460a      	mov	r2, r1
3418aa68:	4313      	orrs	r3, r2
3418aa6a:	d04b      	beq.n	3418ab04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
3418aa6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aa70:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3418aa74:	4b50      	ldr	r3, [pc, #320]	@ (3418abb8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
3418aa76:	429a      	cmp	r2, r3
3418aa78:	d116      	bne.n	3418aaa8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418aa7a:	4b4a      	ldr	r3, [pc, #296]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418aa7c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418aa80:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418aa84:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418aa88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aa8c:	6a1a      	ldr	r2, [r3, #32]
3418aa8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aa92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418aa94:	3b01      	subs	r3, #1
3418aa96:	041b      	lsls	r3, r3, #16
3418aa98:	4313      	orrs	r3, r2
3418aa9a:	4a42      	ldr	r2, [pc, #264]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418aa9c:	430b      	orrs	r3, r1
3418aa9e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418aaa2:	f7ff fc51 	bl	3418a348 <LL_RCC_IC4_Enable>
3418aaa6:	e026      	b.n	3418aaf6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
3418aaa8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aaac:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3418aab0:	4b42      	ldr	r3, [pc, #264]	@ (3418abbc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
3418aab2:	429a      	cmp	r2, r3
3418aab4:	d116      	bne.n	3418aae4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3418aab6:	4b3b      	ldr	r3, [pc, #236]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418aab8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418aabc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418aac0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418aac4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aac8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418aaca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418aad0:	3b01      	subs	r3, #1
3418aad2:	041b      	lsls	r3, r3, #16
3418aad4:	4313      	orrs	r3, r2
3418aad6:	4a33      	ldr	r2, [pc, #204]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418aad8:	430b      	orrs	r3, r1
3418aada:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3418aade:	f7ff fc41 	bl	3418a364 <LL_RCC_IC5_Enable>
3418aae2:	e008      	b.n	3418aaf6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3418aae4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aae8:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3418aaec:	4b34      	ldr	r3, [pc, #208]	@ (3418abc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
3418aaee:	429a      	cmp	r2, r3
3418aaf0:	d101      	bne.n	3418aaf6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      LL_RCC_CLKP_Enable();
3418aaf2:	f7ff fcfb 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
3418aaf6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aafa:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
3418aafe:	4618      	mov	r0, r3
3418ab00:	f7ff f921 	bl	34189d46 <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
3418ab04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
3418ab0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
3418ab10:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
3418ab14:	2300      	movs	r3, #0
3418ab16:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
3418ab1a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
3418ab1e:	4603      	mov	r3, r0
3418ab20:	460a      	mov	r2, r1
3418ab22:	4313      	orrs	r3, r2
3418ab24:	d062      	beq.n	3418abec <HAL_RCCEx_PeriphCLKConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
3418ab26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ab2a:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3418ab2e:	4b25      	ldr	r3, [pc, #148]	@ (3418abc4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
3418ab30:	429a      	cmp	r2, r3
3418ab32:	d116      	bne.n	3418ab62 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418ab34:	4b1b      	ldr	r3, [pc, #108]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418ab36:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418ab3a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ab3e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ab42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ab46:	6a1a      	ldr	r2, [r3, #32]
3418ab48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ab4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ab4e:	3b01      	subs	r3, #1
3418ab50:	041b      	lsls	r3, r3, #16
3418ab52:	4313      	orrs	r3, r2
3418ab54:	4a13      	ldr	r2, [pc, #76]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418ab56:	430b      	orrs	r3, r1
3418ab58:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418ab5c:	f7ff fbf4 	bl	3418a348 <LL_RCC_IC4_Enable>
3418ab60:	e03d      	b.n	3418abde <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
3418ab62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ab66:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3418ab6a:	4b17      	ldr	r3, [pc, #92]	@ (3418abc8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
3418ab6c:	429a      	cmp	r2, r3
3418ab6e:	d12d      	bne.n	3418abcc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3418ab70:	4b0c      	ldr	r3, [pc, #48]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418ab72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418ab76:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ab7a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ab7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ab82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418ab84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ab88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418ab8a:	3b01      	subs	r3, #1
3418ab8c:	041b      	lsls	r3, r3, #16
3418ab8e:	4313      	orrs	r3, r2
3418ab90:	4a04      	ldr	r2, [pc, #16]	@ (3418aba4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418ab92:	430b      	orrs	r3, r1
3418ab94:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3418ab98:	f7ff fbe4 	bl	3418a364 <LL_RCC_IC5_Enable>
3418ab9c:	e01f      	b.n	3418abde <HAL_RCCEx_PeriphCLKConfig+0x6d6>
3418ab9e:	bf00      	nop
3418aba0:	03030414 	.word	0x03030414
3418aba4:	56028000 	.word	0x56028000
3418aba8:	03010414 	.word	0x03010414
3418abac:	03020814 	.word	0x03020814
3418abb0:	03030814 	.word	0x03030814
3418abb4:	03010814 	.word	0x03010814
3418abb8:	0302001c 	.word	0x0302001c
3418abbc:	0303001c 	.word	0x0303001c
3418abc0:	0301001c 	.word	0x0301001c
3418abc4:	0302041c 	.word	0x0302041c
3418abc8:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
3418abcc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418abd0:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3418abd4:	4bb3      	ldr	r3, [pc, #716]	@ (3418aea4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
3418abd6:	429a      	cmp	r2, r3
3418abd8:	d101      	bne.n	3418abde <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      LL_RCC_CLKP_Enable();
3418abda:	f7ff fc87 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
3418abde:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418abe2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
3418abe6:	4618      	mov	r0, r3
3418abe8:	f7ff f8ad 	bl	34189d46 <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
3418abec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418abf4:	f002 0301 	and.w	r3, r2, #1
3418abf8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
3418abfc:	2300      	movs	r3, #0
3418abfe:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
3418ac02:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
3418ac06:	4603      	mov	r3, r0
3418ac08:	460a      	mov	r2, r1
3418ac0a:	4313      	orrs	r3, r2
3418ac0c:	d057      	beq.n	3418acbe <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
3418ac0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ac12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418ac16:	2b20      	cmp	r3, #32
3418ac18:	d116      	bne.n	3418ac48 <HAL_RCCEx_PeriphCLKConfig+0x740>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418ac1a:	4ba3      	ldr	r3, [pc, #652]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ac1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418ac20:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ac24:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ac28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ac2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418ac2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ac32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418ac34:	3b01      	subs	r3, #1
3418ac36:	041b      	lsls	r3, r3, #16
3418ac38:	4313      	orrs	r3, r2
3418ac3a:	4a9b      	ldr	r2, [pc, #620]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ac3c:	430b      	orrs	r3, r1
3418ac3e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418ac42:	f7ff fb9d 	bl	3418a380 <LL_RCC_IC7_Enable>
3418ac46:	e024      	b.n	3418ac92 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
3418ac48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ac4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418ac50:	2b30      	cmp	r3, #48	@ 0x30
3418ac52:	d116      	bne.n	3418ac82 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418ac54:	4b94      	ldr	r3, [pc, #592]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ac56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418ac5a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ac5e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ac62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ac66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418ac68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ac6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418ac6e:	3b01      	subs	r3, #1
3418ac70:	041b      	lsls	r3, r3, #16
3418ac72:	4313      	orrs	r3, r2
3418ac74:	4a8c      	ldr	r2, [pc, #560]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ac76:	430b      	orrs	r3, r1
3418ac78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418ac7c:	f7ff fb8e 	bl	3418a39c <LL_RCC_IC8_Enable>
3418ac80:	e007      	b.n	3418ac92 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
3418ac82:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ac86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418ac8a:	2b10      	cmp	r3, #16
3418ac8c:	d101      	bne.n	3418ac92 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      LL_RCC_CLKP_Enable();
3418ac8e:	f7ff fc2d 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3418ac92:	4b85      	ldr	r3, [pc, #532]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ac94:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418ac98:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
3418ac9c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
3418aca0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aca4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3418aca8:	3b01      	subs	r3, #1
3418acaa:	021a      	lsls	r2, r3, #8
3418acac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418acb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418acb4:	4313      	orrs	r3, r2
3418acb6:	4a7c      	ldr	r2, [pc, #496]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418acb8:	430b      	orrs	r3, r1
3418acba:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
3418acbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
3418acc6:	f002 0302 	and.w	r3, r2, #2
3418acca:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
3418acce:	2300      	movs	r3, #0
3418acd0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
3418acd4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
3418acd8:	4603      	mov	r3, r0
3418acda:	460a      	mov	r2, r1
3418acdc:	4313      	orrs	r3, r2
3418acde:	d048      	beq.n	3418ad72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
3418ace0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ace4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418ace8:	2b02      	cmp	r3, #2
3418acea:	d116      	bne.n	3418ad1a <HAL_RCCEx_PeriphCLKConfig+0x812>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418acec:	4b6e      	ldr	r3, [pc, #440]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418acee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418acf2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418acf6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418acfa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418acfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418ad00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ad04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418ad06:	3b01      	subs	r3, #1
3418ad08:	041b      	lsls	r3, r3, #16
3418ad0a:	4313      	orrs	r3, r2
3418ad0c:	4a66      	ldr	r2, [pc, #408]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ad0e:	430b      	orrs	r3, r1
3418ad10:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418ad14:	f7ff fb34 	bl	3418a380 <LL_RCC_IC7_Enable>
3418ad18:	e024      	b.n	3418ad64 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
3418ad1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ad1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418ad22:	2b03      	cmp	r3, #3
3418ad24:	d116      	bne.n	3418ad54 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418ad26:	4b60      	ldr	r3, [pc, #384]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ad28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418ad2c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ad30:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ad34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ad38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418ad3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ad3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418ad40:	3b01      	subs	r3, #1
3418ad42:	041b      	lsls	r3, r3, #16
3418ad44:	4313      	orrs	r3, r2
3418ad46:	4a58      	ldr	r2, [pc, #352]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ad48:	430b      	orrs	r3, r1
3418ad4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418ad4e:	f7ff fb25 	bl	3418a39c <LL_RCC_IC8_Enable>
3418ad52:	e007      	b.n	3418ad64 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
3418ad54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ad58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418ad5c:	2b01      	cmp	r3, #1
3418ad5e:	d101      	bne.n	3418ad64 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      LL_RCC_CLKP_Enable();
3418ad60:	f7ff fbc4 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
3418ad64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ad68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418ad6c:	4618      	mov	r0, r3
3418ad6e:	f7fe fe89 	bl	34189a84 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3418ad72:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
3418ad7a:	f002 0308 	and.w	r3, r2, #8
3418ad7e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
3418ad82:	2300      	movs	r3, #0
3418ad84:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
3418ad88:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
3418ad8c:	4603      	mov	r3, r0
3418ad8e:	460a      	mov	r2, r1
3418ad90:	4313      	orrs	r3, r2
3418ad92:	d017      	beq.n	3418adc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
3418ad94:	4b44      	ldr	r3, [pc, #272]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ad96:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418ad9a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ad9e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ada2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ada6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3418adaa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418adae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418adb2:	3b01      	subs	r3, #1
3418adb4:	041b      	lsls	r3, r3, #16
3418adb6:	4313      	orrs	r3, r2
3418adb8:	4a3b      	ldr	r2, [pc, #236]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418adba:	430b      	orrs	r3, r1
3418adbc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
3418adc0:	f7ff fb6a 	bl	3418a498 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
3418adc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418adc8:	e9d3 2300 	ldrd	r2, r3, [r3]
3418adcc:	f002 0310 	and.w	r3, r2, #16
3418add0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
3418add4:	2300      	movs	r3, #0
3418add6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
3418adda:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
3418adde:	4603      	mov	r3, r0
3418ade0:	460a      	mov	r2, r1
3418ade2:	4313      	orrs	r3, r2
3418ade4:	d02f      	beq.n	3418ae46 <HAL_RCCEx_PeriphCLKConfig+0x93e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
3418ade6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418adea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418adee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418adf2:	d118      	bne.n	3418ae26 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
3418adf4:	4b2c      	ldr	r3, [pc, #176]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418adf6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3418adfa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418adfe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ae02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ae06:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3418ae0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ae0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3418ae12:	3b01      	subs	r3, #1
3418ae14:	041b      	lsls	r3, r3, #16
3418ae16:	4313      	orrs	r3, r2
3418ae18:	4a23      	ldr	r2, [pc, #140]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ae1a:	430b      	orrs	r3, r1
3418ae1c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
3418ae20:	f7ff fb2c 	bl	3418a47c <LL_RCC_IC17_Enable>
3418ae24:	e008      	b.n	3418ae38 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
3418ae26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ae2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418ae2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418ae32:	d101      	bne.n	3418ae38 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      LL_RCC_CLKP_Enable();
3418ae34:	f7ff fb5a 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
3418ae38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ae3c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418ae40:	4618      	mov	r0, r3
3418ae42:	f7fe fe4b 	bl	34189adc <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
3418ae46:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418ae4e:	f002 0320 	and.w	r3, r2, #32
3418ae52:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
3418ae56:	2300      	movs	r3, #0
3418ae58:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
3418ae5c:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
3418ae60:	4603      	mov	r3, r0
3418ae62:	460a      	mov	r2, r1
3418ae64:	4313      	orrs	r3, r2
3418ae66:	d031      	beq.n	3418aecc <HAL_RCCEx_PeriphCLKConfig+0x9c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
3418ae68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ae6c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418ae70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418ae74:	d11a      	bne.n	3418aeac <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
3418ae76:	4b0c      	ldr	r3, [pc, #48]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ae78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3418ae7c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ae80:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ae84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ae88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
3418ae8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ae8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418ae90:	3b01      	subs	r3, #1
3418ae92:	041b      	lsls	r3, r3, #16
3418ae94:	4313      	orrs	r3, r2
3418ae96:	4a04      	ldr	r2, [pc, #16]	@ (3418aea8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418ae98:	430b      	orrs	r3, r1
3418ae9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
3418ae9e:	f7ff faa7 	bl	3418a3f0 <LL_RCC_IC12_Enable>
3418aea2:	e00c      	b.n	3418aebe <HAL_RCCEx_PeriphCLKConfig+0x9b6>
3418aea4:	0301041c 	.word	0x0301041c
3418aea8:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
3418aeac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aeb0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418aeb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418aeb8:	d101      	bne.n	3418aebe <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      LL_RCC_CLKP_Enable();
3418aeba:	f7ff fb17 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
3418aebe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aec2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418aec6:	4618      	mov	r0, r3
3418aec8:	f7fe fe1e 	bl	34189b08 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
3418aecc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418aed4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
3418aed8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
3418aedc:	2300      	movs	r3, #0
3418aede:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
3418aee2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
3418aee6:	4603      	mov	r3, r0
3418aee8:	460a      	mov	r2, r1
3418aeea:	4313      	orrs	r3, r2
3418aeec:	d006      	beq.n	3418aefc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
3418aeee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aef2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418aef6:	4618      	mov	r0, r3
3418aef8:	f7fe fe1c 	bl	34189b34 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
3418aefc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418af00:	e9d3 2300 	ldrd	r2, r3, [r3]
3418af04:	f002 0380 	and.w	r3, r2, #128	@ 0x80
3418af08:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
3418af0c:	2300      	movs	r3, #0
3418af0e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
3418af12:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
3418af16:	4603      	mov	r3, r0
3418af18:	460a      	mov	r2, r1
3418af1a:	4313      	orrs	r3, r2
3418af1c:	d006      	beq.n	3418af2c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
3418af1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418af22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418af26:	4618      	mov	r0, r3
3418af28:	f7fe fe1a 	bl	34189b60 <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
3418af2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418af30:	e9d3 2300 	ldrd	r2, r3, [r3]
3418af34:	f402 7380 	and.w	r3, r2, #256	@ 0x100
3418af38:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
3418af3c:	2300      	movs	r3, #0
3418af3e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
3418af42:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
3418af46:	4603      	mov	r3, r0
3418af48:	460a      	mov	r2, r1
3418af4a:	4313      	orrs	r3, r2
3418af4c:	d006      	beq.n	3418af5c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
3418af4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418af52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3418af56:	4618      	mov	r0, r3
3418af58:	f7fe fe18 	bl	34189b8c <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
3418af5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418af60:	e9d3 2300 	ldrd	r2, r3, [r3]
3418af64:	f402 7300 	and.w	r3, r2, #512	@ 0x200
3418af68:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
3418af6c:	2300      	movs	r3, #0
3418af6e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
3418af72:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
3418af76:	4603      	mov	r3, r0
3418af78:	460a      	mov	r2, r1
3418af7a:	4313      	orrs	r3, r2
3418af7c:	d038      	beq.n	3418aff0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
3418af7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418af82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418af86:	2b02      	cmp	r3, #2
3418af88:	d116      	bne.n	3418afb8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
3418af8a:	4bbc      	ldr	r3, [pc, #752]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418af8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3418af90:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418af94:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418af98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418af9c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
3418af9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418afa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418afa4:	3b01      	subs	r3, #1
3418afa6:	041b      	lsls	r3, r3, #16
3418afa8:	4313      	orrs	r3, r2
3418afaa:	4ab4      	ldr	r2, [pc, #720]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418afac:	430b      	orrs	r3, r1
3418afae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
3418afb2:	f7ff fa2b 	bl	3418a40c <LL_RCC_IC13_Enable>
3418afb6:	e007      	b.n	3418afc8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
3418afb8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418afbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418afc0:	2b01      	cmp	r3, #1
3418afc2:	d101      	bne.n	3418afc8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    {
      LL_RCC_CLKP_Enable();
3418afc4:	f7ff fa92 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
3418afc8:	4bac      	ldr	r3, [pc, #688]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418afca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418afce:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
3418afd2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418afd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418afda:	3b01      	subs	r3, #1
3418afdc:	011a      	lsls	r2, r3, #4
3418afde:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418afe2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418afe6:	4313      	orrs	r3, r2
3418afe8:	4aa4      	ldr	r2, [pc, #656]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418afea:	430b      	orrs	r3, r1
3418afec:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
3418aff0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
3418aff8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
3418affc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
3418b000:	2300      	movs	r3, #0
3418b002:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
3418b006:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
3418b00a:	4603      	mov	r3, r0
3418b00c:	460a      	mov	r2, r1
3418b00e:	4313      	orrs	r3, r2
3418b010:	d02d      	beq.n	3418b06e <HAL_RCCEx_PeriphCLKConfig+0xb66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
3418b012:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b016:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418b01a:	2b02      	cmp	r3, #2
3418b01c:	d118      	bne.n	3418b050 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3418b01e:	4b97      	ldr	r3, [pc, #604]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b020:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3418b024:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b028:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b02c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b030:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3418b034:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b038:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3418b03c:	3b01      	subs	r3, #1
3418b03e:	041b      	lsls	r3, r3, #16
3418b040:	4313      	orrs	r3, r2
3418b042:	4a8e      	ldr	r2, [pc, #568]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b044:	430b      	orrs	r3, r1
3418b046:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3418b04a:	f7ff fa33 	bl	3418a4b4 <LL_RCC_IC19_Enable>
3418b04e:	e007      	b.n	3418b060 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
3418b050:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b054:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418b058:	2b01      	cmp	r3, #1
3418b05a:	d101      	bne.n	3418b060 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
      LL_RCC_CLKP_Enable();
3418b05c:	f7ff fa46 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
3418b060:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b064:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418b068:	4618      	mov	r0, r3
3418b06a:	f7fe fda5 	bl	34189bb8 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
3418b06e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b072:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b076:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
3418b07a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
3418b07e:	2300      	movs	r3, #0
3418b080:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
3418b084:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
3418b088:	4603      	mov	r3, r0
3418b08a:	460a      	mov	r2, r1
3418b08c:	4313      	orrs	r3, r2
3418b08e:	d04b      	beq.n	3418b128 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
3418b090:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b094:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3418b098:	4b79      	ldr	r3, [pc, #484]	@ (3418b280 <HAL_RCCEx_PeriphCLKConfig+0xd78>)
3418b09a:	429a      	cmp	r2, r3
3418b09c:	d116      	bne.n	3418b0cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418b09e:	4b77      	ldr	r3, [pc, #476]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b0a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418b0a4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b0a8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b0ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b0b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418b0b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b0b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418b0b8:	3b01      	subs	r3, #1
3418b0ba:	041b      	lsls	r3, r3, #16
3418b0bc:	4313      	orrs	r3, r2
3418b0be:	4a6f      	ldr	r2, [pc, #444]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b0c0:	430b      	orrs	r3, r1
3418b0c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418b0c6:	f7ff f985 	bl	3418a3d4 <LL_RCC_IC10_Enable>
3418b0ca:	e026      	b.n	3418b11a <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
3418b0cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b0d0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3418b0d4:	4b6b      	ldr	r3, [pc, #428]	@ (3418b284 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
3418b0d6:	429a      	cmp	r2, r3
3418b0d8:	d116      	bne.n	3418b108 <HAL_RCCEx_PeriphCLKConfig+0xc00>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418b0da:	4b68      	ldr	r3, [pc, #416]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b0dc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418b0e0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b0e4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b0e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b0ec:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418b0ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b0f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418b0f4:	3b01      	subs	r3, #1
3418b0f6:	041b      	lsls	r3, r3, #16
3418b0f8:	4313      	orrs	r3, r2
3418b0fa:	4a60      	ldr	r2, [pc, #384]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b0fc:	430b      	orrs	r3, r1
3418b0fe:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418b102:	f7ff f99f 	bl	3418a444 <LL_RCC_IC15_Enable>
3418b106:	e008      	b.n	3418b11a <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
3418b108:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b10c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3418b110:	4b5d      	ldr	r3, [pc, #372]	@ (3418b288 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
3418b112:	429a      	cmp	r2, r3
3418b114:	d101      	bne.n	3418b11a <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      LL_RCC_CLKP_Enable();
3418b116:	f7ff f9e9 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
3418b11a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b11e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418b122:	4618      	mov	r0, r3
3418b124:	f7fe fd74 	bl	34189c10 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
3418b128:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b12c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b130:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
3418b134:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
3418b138:	2300      	movs	r3, #0
3418b13a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
3418b13e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
3418b142:	4603      	mov	r3, r0
3418b144:	460a      	mov	r2, r1
3418b146:	4313      	orrs	r3, r2
3418b148:	d04b      	beq.n	3418b1e2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
3418b14a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b14e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3418b152:	4b4e      	ldr	r3, [pc, #312]	@ (3418b28c <HAL_RCCEx_PeriphCLKConfig+0xd84>)
3418b154:	429a      	cmp	r2, r3
3418b156:	d116      	bne.n	3418b186 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418b158:	4b48      	ldr	r3, [pc, #288]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b15a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418b15e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b162:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b166:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b16a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418b16c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418b172:	3b01      	subs	r3, #1
3418b174:	041b      	lsls	r3, r3, #16
3418b176:	4313      	orrs	r3, r2
3418b178:	4a40      	ldr	r2, [pc, #256]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b17a:	430b      	orrs	r3, r1
3418b17c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418b180:	f7ff f928 	bl	3418a3d4 <LL_RCC_IC10_Enable>
3418b184:	e026      	b.n	3418b1d4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
3418b186:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b18a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3418b18e:	4b40      	ldr	r3, [pc, #256]	@ (3418b290 <HAL_RCCEx_PeriphCLKConfig+0xd88>)
3418b190:	429a      	cmp	r2, r3
3418b192:	d116      	bne.n	3418b1c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418b194:	4b39      	ldr	r3, [pc, #228]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b196:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418b19a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b19e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b1a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b1a6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418b1a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b1ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418b1ae:	3b01      	subs	r3, #1
3418b1b0:	041b      	lsls	r3, r3, #16
3418b1b2:	4313      	orrs	r3, r2
3418b1b4:	4a31      	ldr	r2, [pc, #196]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b1b6:	430b      	orrs	r3, r1
3418b1b8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418b1bc:	f7ff f942 	bl	3418a444 <LL_RCC_IC15_Enable>
3418b1c0:	e008      	b.n	3418b1d4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
3418b1c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b1c6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3418b1ca:	4b32      	ldr	r3, [pc, #200]	@ (3418b294 <HAL_RCCEx_PeriphCLKConfig+0xd8c>)
3418b1cc:	429a      	cmp	r2, r3
3418b1ce:	d101      	bne.n	3418b1d4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      LL_RCC_CLKP_Enable();
3418b1d0:	f7ff f98c 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
3418b1d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b1d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3418b1dc:	4618      	mov	r0, r3
3418b1de:	f7fe fd17 	bl	34189c10 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
3418b1e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b1ea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
3418b1ee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
3418b1f2:	2300      	movs	r3, #0
3418b1f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
3418b1f8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
3418b1fc:	4603      	mov	r3, r0
3418b1fe:	460a      	mov	r2, r1
3418b200:	4313      	orrs	r3, r2
3418b202:	d05d      	beq.n	3418b2c0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
3418b204:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b208:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3418b20c:	4b22      	ldr	r3, [pc, #136]	@ (3418b298 <HAL_RCCEx_PeriphCLKConfig+0xd90>)
3418b20e:	429a      	cmp	r2, r3
3418b210:	d116      	bne.n	3418b240 <HAL_RCCEx_PeriphCLKConfig+0xd38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418b212:	4b1a      	ldr	r3, [pc, #104]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418b218:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b21c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b220:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b224:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418b226:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b22a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418b22c:	3b01      	subs	r3, #1
3418b22e:	041b      	lsls	r3, r3, #16
3418b230:	4313      	orrs	r3, r2
3418b232:	4a12      	ldr	r2, [pc, #72]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b234:	430b      	orrs	r3, r1
3418b236:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418b23a:	f7ff f8cb 	bl	3418a3d4 <LL_RCC_IC10_Enable>
3418b23e:	e038      	b.n	3418b2b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
3418b240:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b244:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3418b248:	4b14      	ldr	r3, [pc, #80]	@ (3418b29c <HAL_RCCEx_PeriphCLKConfig+0xd94>)
3418b24a:	429a      	cmp	r2, r3
3418b24c:	d128      	bne.n	3418b2a0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418b24e:	4b0b      	ldr	r3, [pc, #44]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b250:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418b254:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b258:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b25c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b260:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418b262:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418b268:	3b01      	subs	r3, #1
3418b26a:	041b      	lsls	r3, r3, #16
3418b26c:	4313      	orrs	r3, r2
3418b26e:	4a03      	ldr	r2, [pc, #12]	@ (3418b27c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418b270:	430b      	orrs	r3, r1
3418b272:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418b276:	f7ff f8e5 	bl	3418a444 <LL_RCC_IC15_Enable>
3418b27a:	e01a      	b.n	3418b2b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
3418b27c:	56028000 	.word	0x56028000
3418b280:	0702000c 	.word	0x0702000c
3418b284:	0703000c 	.word	0x0703000c
3418b288:	0701000c 	.word	0x0701000c
3418b28c:	0702040c 	.word	0x0702040c
3418b290:	0703040c 	.word	0x0703040c
3418b294:	0701040c 	.word	0x0701040c
3418b298:	0702080c 	.word	0x0702080c
3418b29c:	0703080c 	.word	0x0703080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
3418b2a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b2a4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3418b2a8:	4bc8      	ldr	r3, [pc, #800]	@ (3418b5cc <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
3418b2aa:	429a      	cmp	r2, r3
3418b2ac:	d101      	bne.n	3418b2b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      LL_RCC_CLKP_Enable();
3418b2ae:	f7ff f91d 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
3418b2b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b2b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3418b2ba:	4618      	mov	r0, r3
3418b2bc:	f7fe fca8 	bl	34189c10 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
3418b2c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b2c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
3418b2cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
3418b2d0:	2300      	movs	r3, #0
3418b2d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
3418b2d6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
3418b2da:	4603      	mov	r3, r0
3418b2dc:	460a      	mov	r2, r1
3418b2de:	4313      	orrs	r3, r2
3418b2e0:	d04b      	beq.n	3418b37a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
3418b2e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b2e6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3418b2ea:	4bb9      	ldr	r3, [pc, #740]	@ (3418b5d0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>)
3418b2ec:	429a      	cmp	r2, r3
3418b2ee:	d116      	bne.n	3418b31e <HAL_RCCEx_PeriphCLKConfig+0xe16>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418b2f0:	4bb8      	ldr	r3, [pc, #736]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b2f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418b2f6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b2fa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b2fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b302:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418b304:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418b30a:	3b01      	subs	r3, #1
3418b30c:	041b      	lsls	r3, r3, #16
3418b30e:	4313      	orrs	r3, r2
3418b310:	4ab0      	ldr	r2, [pc, #704]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b312:	430b      	orrs	r3, r1
3418b314:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418b318:	f7ff f85c 	bl	3418a3d4 <LL_RCC_IC10_Enable>
3418b31c:	e026      	b.n	3418b36c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
3418b31e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b322:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3418b326:	4bac      	ldr	r3, [pc, #688]	@ (3418b5d8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
3418b328:	429a      	cmp	r2, r3
3418b32a:	d116      	bne.n	3418b35a <HAL_RCCEx_PeriphCLKConfig+0xe52>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418b32c:	4ba9      	ldr	r3, [pc, #676]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b32e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418b332:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b336:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b33a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b33e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418b340:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b344:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418b346:	3b01      	subs	r3, #1
3418b348:	041b      	lsls	r3, r3, #16
3418b34a:	4313      	orrs	r3, r2
3418b34c:	4aa1      	ldr	r2, [pc, #644]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b34e:	430b      	orrs	r3, r1
3418b350:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418b354:	f7ff f876 	bl	3418a444 <LL_RCC_IC15_Enable>
3418b358:	e008      	b.n	3418b36c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
3418b35a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b35e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3418b362:	4b9e      	ldr	r3, [pc, #632]	@ (3418b5dc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
3418b364:	429a      	cmp	r2, r3
3418b366:	d101      	bne.n	3418b36c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      LL_RCC_CLKP_Enable();
3418b368:	f7ff f8c0 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
3418b36c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3418b374:	4618      	mov	r0, r3
3418b376:	f7fe fc4b 	bl	34189c10 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
3418b37a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b382:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
3418b386:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
3418b38a:	2300      	movs	r3, #0
3418b38c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
3418b390:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
3418b394:	4603      	mov	r3, r0
3418b396:	460a      	mov	r2, r1
3418b398:	4313      	orrs	r3, r2
3418b39a:	d04b      	beq.n	3418b434 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
3418b39c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b3a0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3418b3a4:	4b8e      	ldr	r3, [pc, #568]	@ (3418b5e0 <HAL_RCCEx_PeriphCLKConfig+0x10d8>)
3418b3a6:	429a      	cmp	r2, r3
3418b3a8:	d116      	bne.n	3418b3d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418b3aa:	4b8a      	ldr	r3, [pc, #552]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b3ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418b3b0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b3b4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b3b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b3bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418b3be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b3c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418b3c4:	3b01      	subs	r3, #1
3418b3c6:	041b      	lsls	r3, r3, #16
3418b3c8:	4313      	orrs	r3, r2
3418b3ca:	4a82      	ldr	r2, [pc, #520]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b3cc:	430b      	orrs	r3, r1
3418b3ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418b3d2:	f7fe ffff 	bl	3418a3d4 <LL_RCC_IC10_Enable>
3418b3d6:	e026      	b.n	3418b426 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
3418b3d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b3dc:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3418b3e0:	4b80      	ldr	r3, [pc, #512]	@ (3418b5e4 <HAL_RCCEx_PeriphCLKConfig+0x10dc>)
3418b3e2:	429a      	cmp	r2, r3
3418b3e4:	d116      	bne.n	3418b414 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418b3e6:	4b7b      	ldr	r3, [pc, #492]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b3e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418b3ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b3f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b3f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b3f8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418b3fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b3fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418b400:	3b01      	subs	r3, #1
3418b402:	041b      	lsls	r3, r3, #16
3418b404:	4313      	orrs	r3, r2
3418b406:	4a73      	ldr	r2, [pc, #460]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b408:	430b      	orrs	r3, r1
3418b40a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418b40e:	f7ff f819 	bl	3418a444 <LL_RCC_IC15_Enable>
3418b412:	e008      	b.n	3418b426 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
3418b414:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b418:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3418b41c:	4b72      	ldr	r3, [pc, #456]	@ (3418b5e8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
3418b41e:	429a      	cmp	r2, r3
3418b420:	d101      	bne.n	3418b426 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    {
      LL_RCC_CLKP_Enable();
3418b422:	f7ff f863 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
3418b426:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b42a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418b42e:	4618      	mov	r0, r3
3418b430:	f7fe fbf9 	bl	34189c26 <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
3418b434:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b438:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b43c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
3418b440:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
3418b444:	2300      	movs	r3, #0
3418b446:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
3418b44a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
3418b44e:	4603      	mov	r3, r0
3418b450:	460a      	mov	r2, r1
3418b452:	4313      	orrs	r3, r2
3418b454:	d04b      	beq.n	3418b4ee <HAL_RCCEx_PeriphCLKConfig+0xfe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
3418b456:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b45a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3418b45e:	4b63      	ldr	r3, [pc, #396]	@ (3418b5ec <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
3418b460:	429a      	cmp	r2, r3
3418b462:	d116      	bne.n	3418b492 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3418b464:	4b5b      	ldr	r3, [pc, #364]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418b46a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b46e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b472:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b476:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418b478:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b47c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418b47e:	3b01      	subs	r3, #1
3418b480:	041b      	lsls	r3, r3, #16
3418b482:	4313      	orrs	r3, r2
3418b484:	4a53      	ldr	r2, [pc, #332]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b486:	430b      	orrs	r3, r1
3418b488:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418b48c:	f7fe ffa2 	bl	3418a3d4 <LL_RCC_IC10_Enable>
3418b490:	e026      	b.n	3418b4e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
3418b492:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b496:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3418b49a:	4b55      	ldr	r3, [pc, #340]	@ (3418b5f0 <HAL_RCCEx_PeriphCLKConfig+0x10e8>)
3418b49c:	429a      	cmp	r2, r3
3418b49e:	d116      	bne.n	3418b4ce <HAL_RCCEx_PeriphCLKConfig+0xfc6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418b4a0:	4b4c      	ldr	r3, [pc, #304]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b4a2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418b4a6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b4aa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b4ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b4b2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418b4b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b4b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418b4ba:	3b01      	subs	r3, #1
3418b4bc:	041b      	lsls	r3, r3, #16
3418b4be:	4313      	orrs	r3, r2
3418b4c0:	4a44      	ldr	r2, [pc, #272]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b4c2:	430b      	orrs	r3, r1
3418b4c4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418b4c8:	f7fe ffbc 	bl	3418a444 <LL_RCC_IC15_Enable>
3418b4cc:	e008      	b.n	3418b4e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
3418b4ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b4d2:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3418b4d6:	4b47      	ldr	r3, [pc, #284]	@ (3418b5f4 <HAL_RCCEx_PeriphCLKConfig+0x10ec>)
3418b4d8:	429a      	cmp	r2, r3
3418b4da:	d101      	bne.n	3418b4e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    {
      LL_RCC_CLKP_Enable();
3418b4dc:	f7ff f806 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
3418b4e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b4e4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418b4e8:	4618      	mov	r0, r3
3418b4ea:	f7fe fb9c 	bl	34189c26 <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
3418b4ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b4f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
3418b4fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
3418b4fe:	2300      	movs	r3, #0
3418b500:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
3418b504:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
3418b508:	4603      	mov	r3, r0
3418b50a:	460a      	mov	r2, r1
3418b50c:	4313      	orrs	r3, r2
3418b50e:	d02d      	beq.n	3418b56c <HAL_RCCEx_PeriphCLKConfig+0x1064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
3418b510:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b514:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3418b518:	4b37      	ldr	r3, [pc, #220]	@ (3418b5f8 <HAL_RCCEx_PeriphCLKConfig+0x10f0>)
3418b51a:	429a      	cmp	r2, r3
3418b51c:	d116      	bne.n	3418b54c <HAL_RCCEx_PeriphCLKConfig+0x1044>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418b51e:	4b2d      	ldr	r3, [pc, #180]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b520:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418b524:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b528:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b52c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b530:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418b532:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b536:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418b538:	3b01      	subs	r3, #1
3418b53a:	041b      	lsls	r3, r3, #16
3418b53c:	4313      	orrs	r3, r2
3418b53e:	4a25      	ldr	r2, [pc, #148]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b540:	430b      	orrs	r3, r1
3418b542:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418b546:	f7fe ff7d 	bl	3418a444 <LL_RCC_IC15_Enable>
3418b54a:	e008      	b.n	3418b55e <HAL_RCCEx_PeriphCLKConfig+0x1056>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
3418b54c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b550:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3418b554:	4b29      	ldr	r3, [pc, #164]	@ (3418b5fc <HAL_RCCEx_PeriphCLKConfig+0x10f4>)
3418b556:	429a      	cmp	r2, r3
3418b558:	d101      	bne.n	3418b55e <HAL_RCCEx_PeriphCLKConfig+0x1056>
    {
      LL_RCC_CLKP_Enable();
3418b55a:	f7fe ffc7 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
3418b55e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b562:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418b566:	4618      	mov	r0, r3
3418b568:	f7fe fb68 	bl	34189c3c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
3418b56c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b570:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b574:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
3418b578:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
3418b57c:	2300      	movs	r3, #0
3418b57e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
3418b582:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
3418b586:	4603      	mov	r3, r0
3418b588:	460a      	mov	r2, r1
3418b58a:	4313      	orrs	r3, r2
3418b58c:	d04a      	beq.n	3418b624 <HAL_RCCEx_PeriphCLKConfig+0x111c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
3418b58e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b592:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3418b596:	4b1a      	ldr	r3, [pc, #104]	@ (3418b600 <HAL_RCCEx_PeriphCLKConfig+0x10f8>)
3418b598:	429a      	cmp	r2, r3
3418b59a:	d133      	bne.n	3418b604 <HAL_RCCEx_PeriphCLKConfig+0x10fc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418b59c:	4b0d      	ldr	r3, [pc, #52]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b59e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418b5a2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b5a6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b5aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b5ae:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418b5b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b5b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418b5b6:	3b01      	subs	r3, #1
3418b5b8:	041b      	lsls	r3, r3, #16
3418b5ba:	4313      	orrs	r3, r2
3418b5bc:	4a05      	ldr	r2, [pc, #20]	@ (3418b5d4 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418b5be:	430b      	orrs	r3, r1
3418b5c0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418b5c4:	f7fe ff3e 	bl	3418a444 <LL_RCC_IC15_Enable>
3418b5c8:	e025      	b.n	3418b616 <HAL_RCCEx_PeriphCLKConfig+0x110e>
3418b5ca:	bf00      	nop
3418b5cc:	0701080c 	.word	0x0701080c
3418b5d0:	07020c0c 	.word	0x07020c0c
3418b5d4:	56028000 	.word	0x56028000
3418b5d8:	07030c0c 	.word	0x07030c0c
3418b5dc:	07010c0c 	.word	0x07010c0c
3418b5e0:	0702100c 	.word	0x0702100c
3418b5e4:	0703100c 	.word	0x0703100c
3418b5e8:	0701100c 	.word	0x0701100c
3418b5ec:	0702140c 	.word	0x0702140c
3418b5f0:	0703140c 	.word	0x0703140c
3418b5f4:	0701140c 	.word	0x0701140c
3418b5f8:	0702082c 	.word	0x0702082c
3418b5fc:	0701082c 	.word	0x0701082c
3418b600:	07020c2c 	.word	0x07020c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
3418b604:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b608:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3418b60c:	4bca      	ldr	r3, [pc, #808]	@ (3418b938 <HAL_RCCEx_PeriphCLKConfig+0x1430>)
3418b60e:	429a      	cmp	r2, r3
3418b610:	d101      	bne.n	3418b616 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      LL_RCC_CLKP_Enable();
3418b612:	f7fe ff6b 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
3418b616:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b61a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3418b61e:	4618      	mov	r0, r3
3418b620:	f7fe fb0c 	bl	34189c3c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
3418b624:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b628:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b62c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
3418b630:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
3418b634:	2300      	movs	r3, #0
3418b636:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
3418b63a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
3418b63e:	4603      	mov	r3, r0
3418b640:	460a      	mov	r2, r1
3418b642:	4313      	orrs	r3, r2
3418b644:	d02d      	beq.n	3418b6a2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
3418b646:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b64a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418b64e:	4bbb      	ldr	r3, [pc, #748]	@ (3418b93c <HAL_RCCEx_PeriphCLKConfig+0x1434>)
3418b650:	429a      	cmp	r2, r3
3418b652:	d116      	bne.n	3418b682 <HAL_RCCEx_PeriphCLKConfig+0x117a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418b654:	4bba      	ldr	r3, [pc, #744]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b656:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418b65a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b65e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b662:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b666:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418b668:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b66c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418b66e:	3b01      	subs	r3, #1
3418b670:	041b      	lsls	r3, r3, #16
3418b672:	4313      	orrs	r3, r2
3418b674:	4ab2      	ldr	r2, [pc, #712]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b676:	430b      	orrs	r3, r1
3418b678:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418b67c:	f7fe fee2 	bl	3418a444 <LL_RCC_IC15_Enable>
3418b680:	e008      	b.n	3418b694 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
3418b682:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b686:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418b68a:	4bae      	ldr	r3, [pc, #696]	@ (3418b944 <HAL_RCCEx_PeriphCLKConfig+0x143c>)
3418b68c:	429a      	cmp	r2, r3
3418b68e:	d101      	bne.n	3418b694 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    {
      LL_RCC_CLKP_Enable();
3418b690:	f7fe ff2c 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
3418b694:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b698:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418b69c:	4618      	mov	r0, r3
3418b69e:	f7fe facd 	bl	34189c3c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
3418b6a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b6aa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
3418b6ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
3418b6b2:	2300      	movs	r3, #0
3418b6b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
3418b6b8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
3418b6bc:	4603      	mov	r3, r0
3418b6be:	460a      	mov	r2, r1
3418b6c0:	4313      	orrs	r3, r2
3418b6c2:	d02d      	beq.n	3418b720 <HAL_RCCEx_PeriphCLKConfig+0x1218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
3418b6c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b6c8:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3418b6cc:	4b9e      	ldr	r3, [pc, #632]	@ (3418b948 <HAL_RCCEx_PeriphCLKConfig+0x1440>)
3418b6ce:	429a      	cmp	r2, r3
3418b6d0:	d116      	bne.n	3418b700 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418b6d2:	4b9b      	ldr	r3, [pc, #620]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b6d4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418b6d8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b6dc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b6e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b6e4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418b6e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b6ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418b6ec:	3b01      	subs	r3, #1
3418b6ee:	041b      	lsls	r3, r3, #16
3418b6f0:	4313      	orrs	r3, r2
3418b6f2:	4a93      	ldr	r2, [pc, #588]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b6f4:	430b      	orrs	r3, r1
3418b6f6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418b6fa:	f7fe fea3 	bl	3418a444 <LL_RCC_IC15_Enable>
3418b6fe:	e008      	b.n	3418b712 <HAL_RCCEx_PeriphCLKConfig+0x120a>
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
3418b700:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b704:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3418b708:	4b90      	ldr	r3, [pc, #576]	@ (3418b94c <HAL_RCCEx_PeriphCLKConfig+0x1444>)
3418b70a:	429a      	cmp	r2, r3
3418b70c:	d101      	bne.n	3418b712 <HAL_RCCEx_PeriphCLKConfig+0x120a>
    {
      LL_RCC_CLKP_Enable();
3418b70e:	f7fe feed 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
3418b712:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b716:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3418b71a:	4618      	mov	r0, r3
3418b71c:	f7fe fa8e 	bl	34189c3c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
3418b720:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b724:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b728:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
3418b72c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
3418b730:	2300      	movs	r3, #0
3418b732:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
3418b736:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
3418b73a:	4603      	mov	r3, r0
3418b73c:	460a      	mov	r2, r1
3418b73e:	4313      	orrs	r3, r2
3418b740:	d02d      	beq.n	3418b79e <HAL_RCCEx_PeriphCLKConfig+0x1296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
3418b742:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b746:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3418b74a:	4b81      	ldr	r3, [pc, #516]	@ (3418b950 <HAL_RCCEx_PeriphCLKConfig+0x1448>)
3418b74c:	429a      	cmp	r2, r3
3418b74e:	d116      	bne.n	3418b77e <HAL_RCCEx_PeriphCLKConfig+0x1276>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418b750:	4b7b      	ldr	r3, [pc, #492]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b752:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418b756:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b75a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b75e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b762:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418b764:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b768:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418b76a:	3b01      	subs	r3, #1
3418b76c:	041b      	lsls	r3, r3, #16
3418b76e:	4313      	orrs	r3, r2
3418b770:	4a73      	ldr	r2, [pc, #460]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b772:	430b      	orrs	r3, r1
3418b774:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418b778:	f7fe fe64 	bl	3418a444 <LL_RCC_IC15_Enable>
3418b77c:	e008      	b.n	3418b790 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
3418b77e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b782:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3418b786:	4b73      	ldr	r3, [pc, #460]	@ (3418b954 <HAL_RCCEx_PeriphCLKConfig+0x144c>)
3418b788:	429a      	cmp	r2, r3
3418b78a:	d101      	bne.n	3418b790 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    {
      LL_RCC_CLKP_Enable();
3418b78c:	f7fe feae 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
3418b790:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b794:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418b798:	4618      	mov	r0, r3
3418b79a:	f7fe fa4f 	bl	34189c3c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
3418b79e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b7a6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
3418b7aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
3418b7ae:	2300      	movs	r3, #0
3418b7b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3418b7b4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
3418b7b8:	4603      	mov	r3, r0
3418b7ba:	460a      	mov	r2, r1
3418b7bc:	4313      	orrs	r3, r2
3418b7be:	d04b      	beq.n	3418b858 <HAL_RCCEx_PeriphCLKConfig+0x1350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
3418b7c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b7c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3418b7c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418b7cc:	d116      	bne.n	3418b7fc <HAL_RCCEx_PeriphCLKConfig+0x12f4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418b7ce:	4b5c      	ldr	r3, [pc, #368]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b7d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418b7d4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b7d8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b7dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b7e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418b7e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b7e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418b7e8:	3b01      	subs	r3, #1
3418b7ea:	041b      	lsls	r3, r3, #16
3418b7ec:	4313      	orrs	r3, r2
3418b7ee:	4a54      	ldr	r2, [pc, #336]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b7f0:	430b      	orrs	r3, r1
3418b7f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418b7f6:	f7fe fddf 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418b7fa:	e026      	b.n	3418b84a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
3418b7fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b800:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3418b804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418b808:	d116      	bne.n	3418b838 <HAL_RCCEx_PeriphCLKConfig+0x1330>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418b80a:	4b4d      	ldr	r3, [pc, #308]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b80c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418b810:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b814:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b818:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b81c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418b81e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418b824:	3b01      	subs	r3, #1
3418b826:	041b      	lsls	r3, r3, #16
3418b828:	4313      	orrs	r3, r2
3418b82a:	4a45      	ldr	r2, [pc, #276]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b82c:	430b      	orrs	r3, r1
3418b82e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418b832:	f7fe fdf9 	bl	3418a428 <LL_RCC_IC14_Enable>
3418b836:	e008      	b.n	3418b84a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
3418b838:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b83c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3418b840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418b844:	d101      	bne.n	3418b84a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    {
      LL_RCC_CLKP_Enable();
3418b846:	f7fe fe51 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
3418b84a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b84e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3418b852:	4618      	mov	r0, r3
3418b854:	f7fe f9fe 	bl	34189c54 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
3418b858:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b860:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
3418b864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
3418b868:	2300      	movs	r3, #0
3418b86a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
3418b86e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3418b872:	4603      	mov	r3, r0
3418b874:	460a      	mov	r2, r1
3418b876:	4313      	orrs	r3, r2
3418b878:	d02f      	beq.n	3418b8da <HAL_RCCEx_PeriphCLKConfig+0x13d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3418b87a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b87e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418b882:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418b886:	d118      	bne.n	3418b8ba <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3418b888:	4b2d      	ldr	r3, [pc, #180]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b88a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418b88e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b892:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b896:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b89a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3418b89e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3418b8a6:	3b01      	subs	r3, #1
3418b8a8:	041b      	lsls	r3, r3, #16
3418b8aa:	4313      	orrs	r3, r2
3418b8ac:	4a24      	ldr	r2, [pc, #144]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b8ae:	430b      	orrs	r3, r1
3418b8b0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
3418b8b4:	f7fe fdd4 	bl	3418a460 <LL_RCC_IC16_Enable>
3418b8b8:	e008      	b.n	3418b8cc <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
3418b8ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b8be:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418b8c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418b8c6:	d101      	bne.n	3418b8cc <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    {
      LL_RCC_CLKP_Enable();
3418b8c8:	f7fe fe10 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
3418b8cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b8d0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418b8d4:	4618      	mov	r0, r3
3418b8d6:	f7fe f9d3 	bl	34189c80 <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
3418b8da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b8e2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
3418b8e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
3418b8ea:	2300      	movs	r3, #0
3418b8ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
3418b8f0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
3418b8f4:	4603      	mov	r3, r0
3418b8f6:	460a      	mov	r2, r1
3418b8f8:	4313      	orrs	r3, r2
3418b8fa:	d05b      	beq.n	3418b9b4 <HAL_RCCEx_PeriphCLKConfig+0x14ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
3418b8fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b900:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3418b904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418b908:	d126      	bne.n	3418b958 <HAL_RCCEx_PeriphCLKConfig+0x1450>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418b90a:	4b0d      	ldr	r3, [pc, #52]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b90c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418b910:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b914:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b918:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b91c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418b91e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418b924:	3b01      	subs	r3, #1
3418b926:	041b      	lsls	r3, r3, #16
3418b928:	4313      	orrs	r3, r2
3418b92a:	4a05      	ldr	r2, [pc, #20]	@ (3418b940 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418b92c:	430b      	orrs	r3, r1
3418b92e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418b932:	f7fe fd25 	bl	3418a380 <LL_RCC_IC7_Enable>
3418b936:	e036      	b.n	3418b9a6 <HAL_RCCEx_PeriphCLKConfig+0x149e>
3418b938:	07010c2c 	.word	0x07010c2c
3418b93c:	0702102c 	.word	0x0702102c
3418b940:	56028000 	.word	0x56028000
3418b944:	0701102c 	.word	0x0701102c
3418b948:	0702142c 	.word	0x0702142c
3418b94c:	0701142c 	.word	0x0701142c
3418b950:	0702182c 	.word	0x0702182c
3418b954:	0701182c 	.word	0x0701182c
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
3418b958:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b95c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3418b960:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418b964:	d116      	bne.n	3418b994 <HAL_RCCEx_PeriphCLKConfig+0x148c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418b966:	4bb5      	ldr	r3, [pc, #724]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418b968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418b96c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b970:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b974:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418b97a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b97e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418b980:	3b01      	subs	r3, #1
3418b982:	041b      	lsls	r3, r3, #16
3418b984:	4313      	orrs	r3, r2
3418b986:	4aad      	ldr	r2, [pc, #692]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418b988:	430b      	orrs	r3, r1
3418b98a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418b98e:	f7fe fd05 	bl	3418a39c <LL_RCC_IC8_Enable>
3418b992:	e008      	b.n	3418b9a6 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
3418b994:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b998:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3418b99c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418b9a0:	d101      	bne.n	3418b9a6 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    {
      LL_RCC_CLKP_Enable();
3418b9a2:	f7fe fda3 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
3418b9a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b9aa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3418b9ae:	4618      	mov	r0, r3
3418b9b0:	f7fe f97c 	bl	34189cac <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
3418b9b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
3418b9bc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
3418b9c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3418b9c4:	2300      	movs	r3, #0
3418b9c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
3418b9ca:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
3418b9ce:	4603      	mov	r3, r0
3418b9d0:	460a      	mov	r2, r1
3418b9d2:	4313      	orrs	r3, r2
3418b9d4:	d02d      	beq.n	3418ba32 <HAL_RCCEx_PeriphCLKConfig+0x152a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3418b9d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b9da:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3418b9de:	2b20      	cmp	r3, #32
3418b9e0:	d118      	bne.n	3418ba14 <HAL_RCCEx_PeriphCLKConfig+0x150c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3418b9e2:	4b96      	ldr	r3, [pc, #600]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418b9e4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418b9e8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418b9ec:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418b9f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b9f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3418b9f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418b9fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418ba00:	3b01      	subs	r3, #1
3418ba02:	041b      	lsls	r3, r3, #16
3418ba04:	4313      	orrs	r3, r2
3418ba06:	4a8d      	ldr	r2, [pc, #564]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418ba08:	430b      	orrs	r3, r1
3418ba0a:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3418ba0e:	f7fe fd5f 	bl	3418a4d0 <LL_RCC_IC20_Enable>
3418ba12:	e007      	b.n	3418ba24 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
3418ba14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ba18:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3418ba1c:	2b10      	cmp	r3, #16
3418ba1e:	d101      	bne.n	3418ba24 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    {
      LL_RCC_CLKP_Enable();
3418ba20:	f7fe fd64 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
3418ba24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ba28:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3418ba2c:	4618      	mov	r0, r3
3418ba2e:	f7fe f969 	bl	34189d04 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
3418ba32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ba36:	e9d3 2300 	ldrd	r2, r3, [r3]
3418ba3a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
3418ba3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3418ba42:	2300      	movs	r3, #0
3418ba44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3418ba48:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
3418ba4c:	4603      	mov	r3, r0
3418ba4e:	460a      	mov	r2, r1
3418ba50:	4313      	orrs	r3, r2
3418ba52:	d04b      	beq.n	3418baec <HAL_RCCEx_PeriphCLKConfig+0x15e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
3418ba54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ba58:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3418ba5c:	4b78      	ldr	r3, [pc, #480]	@ (3418bc40 <HAL_RCCEx_PeriphCLKConfig+0x1738>)
3418ba5e:	429a      	cmp	r2, r3
3418ba60:	d116      	bne.n	3418ba90 <HAL_RCCEx_PeriphCLKConfig+0x1588>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418ba62:	4b76      	ldr	r3, [pc, #472]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418ba64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418ba68:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418ba6c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418ba70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ba74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418ba76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ba7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418ba7c:	3b01      	subs	r3, #1
3418ba7e:	041b      	lsls	r3, r3, #16
3418ba80:	4313      	orrs	r3, r2
3418ba82:	4a6e      	ldr	r2, [pc, #440]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418ba84:	430b      	orrs	r3, r1
3418ba86:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418ba8a:	f7fe fc79 	bl	3418a380 <LL_RCC_IC7_Enable>
3418ba8e:	e026      	b.n	3418bade <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
3418ba90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ba94:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3418ba98:	4b6a      	ldr	r3, [pc, #424]	@ (3418bc44 <HAL_RCCEx_PeriphCLKConfig+0x173c>)
3418ba9a:	429a      	cmp	r2, r3
3418ba9c:	d116      	bne.n	3418bacc <HAL_RCCEx_PeriphCLKConfig+0x15c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418ba9e:	4b67      	ldr	r3, [pc, #412]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418baa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418baa4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418baa8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418baac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bab0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418bab2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bab8:	3b01      	subs	r3, #1
3418baba:	041b      	lsls	r3, r3, #16
3418babc:	4313      	orrs	r3, r2
3418babe:	4a5f      	ldr	r2, [pc, #380]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418bac0:	430b      	orrs	r3, r1
3418bac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418bac6:	f7fe fc69 	bl	3418a39c <LL_RCC_IC8_Enable>
3418baca:	e008      	b.n	3418bade <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
3418bacc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bad0:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3418bad4:	4b5c      	ldr	r3, [pc, #368]	@ (3418bc48 <HAL_RCCEx_PeriphCLKConfig+0x1740>)
3418bad6:	429a      	cmp	r2, r3
3418bad8:	d101      	bne.n	3418bade <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    {
      LL_RCC_CLKP_Enable();
3418bada:	f7fe fd07 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
3418bade:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bae2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
3418bae6:	4618      	mov	r0, r3
3418bae8:	f7fe f922 	bl	34189d30 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
3418baec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418baf4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
3418baf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
3418bafc:	2300      	movs	r3, #0
3418bafe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
3418bb02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
3418bb06:	4603      	mov	r3, r0
3418bb08:	460a      	mov	r2, r1
3418bb0a:	4313      	orrs	r3, r2
3418bb0c:	d04b      	beq.n	3418bba6 <HAL_RCCEx_PeriphCLKConfig+0x169e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
3418bb0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bb12:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3418bb16:	4b4d      	ldr	r3, [pc, #308]	@ (3418bc4c <HAL_RCCEx_PeriphCLKConfig+0x1744>)
3418bb18:	429a      	cmp	r2, r3
3418bb1a:	d116      	bne.n	3418bb4a <HAL_RCCEx_PeriphCLKConfig+0x1642>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418bb1c:	4b47      	ldr	r3, [pc, #284]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418bb1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418bb22:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418bb26:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418bb2a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bb2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418bb30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bb34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418bb36:	3b01      	subs	r3, #1
3418bb38:	041b      	lsls	r3, r3, #16
3418bb3a:	4313      	orrs	r3, r2
3418bb3c:	4a3f      	ldr	r2, [pc, #252]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418bb3e:	430b      	orrs	r3, r1
3418bb40:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418bb44:	f7fe fc1c 	bl	3418a380 <LL_RCC_IC7_Enable>
3418bb48:	e026      	b.n	3418bb98 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
3418bb4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bb4e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3418bb52:	4b3f      	ldr	r3, [pc, #252]	@ (3418bc50 <HAL_RCCEx_PeriphCLKConfig+0x1748>)
3418bb54:	429a      	cmp	r2, r3
3418bb56:	d116      	bne.n	3418bb86 <HAL_RCCEx_PeriphCLKConfig+0x167e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418bb58:	4b38      	ldr	r3, [pc, #224]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418bb5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418bb5e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418bb62:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418bb66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bb6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418bb6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bb70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bb72:	3b01      	subs	r3, #1
3418bb74:	041b      	lsls	r3, r3, #16
3418bb76:	4313      	orrs	r3, r2
3418bb78:	4a30      	ldr	r2, [pc, #192]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418bb7a:	430b      	orrs	r3, r1
3418bb7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418bb80:	f7fe fc0c 	bl	3418a39c <LL_RCC_IC8_Enable>
3418bb84:	e008      	b.n	3418bb98 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
3418bb86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bb8a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3418bb8e:	4b31      	ldr	r3, [pc, #196]	@ (3418bc54 <HAL_RCCEx_PeriphCLKConfig+0x174c>)
3418bb90:	429a      	cmp	r2, r3
3418bb92:	d101      	bne.n	3418bb98 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    {
      LL_RCC_CLKP_Enable();
3418bb94:	f7fe fcaa 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
3418bb98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bb9c:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
3418bba0:	4618      	mov	r0, r3
3418bba2:	f7fe f8c5 	bl	34189d30 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
3418bba6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
3418bbae:	2100      	movs	r1, #0
3418bbb0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
3418bbb4:	f003 0301 	and.w	r3, r3, #1
3418bbb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
3418bbbc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
3418bbc0:	4603      	mov	r3, r0
3418bbc2:	460a      	mov	r2, r1
3418bbc4:	4313      	orrs	r3, r2
3418bbc6:	d056      	beq.n	3418bc76 <HAL_RCCEx_PeriphCLKConfig+0x176e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
3418bbc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bbcc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418bbd0:	2b02      	cmp	r3, #2
3418bbd2:	d116      	bne.n	3418bc02 <HAL_RCCEx_PeriphCLKConfig+0x16fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418bbd4:	4b19      	ldr	r3, [pc, #100]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418bbd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418bbda:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418bbde:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418bbe2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bbe6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418bbe8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bbec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418bbee:	3b01      	subs	r3, #1
3418bbf0:	041b      	lsls	r3, r3, #16
3418bbf2:	4313      	orrs	r3, r2
3418bbf4:	4a11      	ldr	r2, [pc, #68]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418bbf6:	430b      	orrs	r3, r1
3418bbf8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418bbfc:	f7fe fbc0 	bl	3418a380 <LL_RCC_IC7_Enable>
3418bc00:	e032      	b.n	3418bc68 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
3418bc02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bc06:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418bc0a:	2b03      	cmp	r3, #3
3418bc0c:	d124      	bne.n	3418bc58 <HAL_RCCEx_PeriphCLKConfig+0x1750>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418bc0e:	4b0b      	ldr	r3, [pc, #44]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418bc10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418bc14:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418bc18:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418bc1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bc20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418bc22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bc26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bc28:	3b01      	subs	r3, #1
3418bc2a:	041b      	lsls	r3, r3, #16
3418bc2c:	4313      	orrs	r3, r2
3418bc2e:	4a03      	ldr	r2, [pc, #12]	@ (3418bc3c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418bc30:	430b      	orrs	r3, r1
3418bc32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418bc36:	f7fe fbb1 	bl	3418a39c <LL_RCC_IC8_Enable>
3418bc3a:	e015      	b.n	3418bc68 <HAL_RCCEx_PeriphCLKConfig+0x1760>
3418bc3c:	56028000 	.word	0x56028000
3418bc40:	07021418 	.word	0x07021418
3418bc44:	07031418 	.word	0x07031418
3418bc48:	07011418 	.word	0x07011418
3418bc4c:	07021818 	.word	0x07021818
3418bc50:	07031818 	.word	0x07031818
3418bc54:	07011818 	.word	0x07011818
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
3418bc58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bc5c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418bc60:	2b01      	cmp	r3, #1
3418bc62:	d101      	bne.n	3418bc68 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    {
      LL_RCC_CLKP_Enable();
3418bc64:	f7fe fc42 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
3418bc68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bc6c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418bc70:	4618      	mov	r0, r3
3418bc72:	f7fe f873 	bl	34189d5c <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3418bc76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418bc7e:	2100      	movs	r1, #0
3418bc80:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
3418bc84:	f003 0302 	and.w	r3, r3, #2
3418bc88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
3418bc8c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
3418bc90:	4603      	mov	r3, r0
3418bc92:	460a      	mov	r2, r1
3418bc94:	4313      	orrs	r3, r2
3418bc96:	d04b      	beq.n	3418bd30 <HAL_RCCEx_PeriphCLKConfig+0x1828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
3418bc98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bc9c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3418bca0:	4bc6      	ldr	r3, [pc, #792]	@ (3418bfbc <HAL_RCCEx_PeriphCLKConfig+0x1ab4>)
3418bca2:	429a      	cmp	r2, r3
3418bca4:	d116      	bne.n	3418bcd4 <HAL_RCCEx_PeriphCLKConfig+0x17cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418bca6:	4bc6      	ldr	r3, [pc, #792]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418bcac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418bcb0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418bcb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bcb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418bcba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bcbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bcc0:	3b01      	subs	r3, #1
3418bcc2:	041b      	lsls	r3, r3, #16
3418bcc4:	4313      	orrs	r3, r2
3418bcc6:	4abe      	ldr	r2, [pc, #760]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bcc8:	430b      	orrs	r3, r1
3418bcca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418bcce:	f7fe fb65 	bl	3418a39c <LL_RCC_IC8_Enable>
3418bcd2:	e026      	b.n	3418bd22 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
3418bcd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bcd8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3418bcdc:	4bb9      	ldr	r3, [pc, #740]	@ (3418bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1abc>)
3418bcde:	429a      	cmp	r2, r3
3418bce0:	d116      	bne.n	3418bd10 <HAL_RCCEx_PeriphCLKConfig+0x1808>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418bce2:	4bb7      	ldr	r3, [pc, #732]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bce4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418bce8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418bcec:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418bcf0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bcf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418bcf6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bcfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418bcfc:	3b01      	subs	r3, #1
3418bcfe:	041b      	lsls	r3, r3, #16
3418bd00:	4313      	orrs	r3, r2
3418bd02:	4aaf      	ldr	r2, [pc, #700]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bd04:	430b      	orrs	r3, r1
3418bd06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418bd0a:	f7fe fb55 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418bd0e:	e008      	b.n	3418bd22 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
3418bd10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bd14:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3418bd18:	4bab      	ldr	r3, [pc, #684]	@ (3418bfc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>)
3418bd1a:	429a      	cmp	r2, r3
3418bd1c:	d101      	bne.n	3418bd22 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    {
      LL_RCC_CLKP_Enable();
3418bd1e:	f7fe fbe5 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
3418bd22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bd26:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
3418bd2a:	4618      	mov	r0, r3
3418bd2c:	f7fe f82c 	bl	34189d88 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
3418bd30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
3418bd38:	2100      	movs	r1, #0
3418bd3a:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
3418bd3e:	f003 0304 	and.w	r3, r3, #4
3418bd42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
3418bd46:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
3418bd4a:	4603      	mov	r3, r0
3418bd4c:	460a      	mov	r2, r1
3418bd4e:	4313      	orrs	r3, r2
3418bd50:	d04b      	beq.n	3418bdea <HAL_RCCEx_PeriphCLKConfig+0x18e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
3418bd52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bd56:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418bd5a:	4b9c      	ldr	r3, [pc, #624]	@ (3418bfcc <HAL_RCCEx_PeriphCLKConfig+0x1ac4>)
3418bd5c:	429a      	cmp	r2, r3
3418bd5e:	d116      	bne.n	3418bd8e <HAL_RCCEx_PeriphCLKConfig+0x1886>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418bd60:	4b97      	ldr	r3, [pc, #604]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bd62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418bd66:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418bd6a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418bd6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bd72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418bd74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bd78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bd7a:	3b01      	subs	r3, #1
3418bd7c:	041b      	lsls	r3, r3, #16
3418bd7e:	4313      	orrs	r3, r2
3418bd80:	4a8f      	ldr	r2, [pc, #572]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bd82:	430b      	orrs	r3, r1
3418bd84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418bd88:	f7fe fb08 	bl	3418a39c <LL_RCC_IC8_Enable>
3418bd8c:	e026      	b.n	3418bddc <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
3418bd8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bd92:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418bd96:	4b8e      	ldr	r3, [pc, #568]	@ (3418bfd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac8>)
3418bd98:	429a      	cmp	r2, r3
3418bd9a:	d116      	bne.n	3418bdca <HAL_RCCEx_PeriphCLKConfig+0x18c2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418bd9c:	4b88      	ldr	r3, [pc, #544]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bd9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418bda2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418bda6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418bdaa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bdae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418bdb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bdb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418bdb6:	3b01      	subs	r3, #1
3418bdb8:	041b      	lsls	r3, r3, #16
3418bdba:	4313      	orrs	r3, r2
3418bdbc:	4a80      	ldr	r2, [pc, #512]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bdbe:	430b      	orrs	r3, r1
3418bdc0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418bdc4:	f7fe faf8 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418bdc8:	e008      	b.n	3418bddc <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
3418bdca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bdce:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418bdd2:	4b80      	ldr	r3, [pc, #512]	@ (3418bfd4 <HAL_RCCEx_PeriphCLKConfig+0x1acc>)
3418bdd4:	429a      	cmp	r2, r3
3418bdd6:	d101      	bne.n	3418bddc <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    {
      LL_RCC_CLKP_Enable();
3418bdd8:	f7fe fb88 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
3418bddc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bde0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
3418bde4:	4618      	mov	r0, r3
3418bde6:	f7fd ffcf 	bl	34189d88 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
3418bdea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
3418bdf2:	2100      	movs	r1, #0
3418bdf4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
3418bdf8:	f003 0308 	and.w	r3, r3, #8
3418bdfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
3418be00:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
3418be04:	4603      	mov	r3, r0
3418be06:	460a      	mov	r2, r1
3418be08:	4313      	orrs	r3, r2
3418be0a:	d04b      	beq.n	3418bea4 <HAL_RCCEx_PeriphCLKConfig+0x199c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
3418be0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418be10:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3418be14:	4b70      	ldr	r3, [pc, #448]	@ (3418bfd8 <HAL_RCCEx_PeriphCLKConfig+0x1ad0>)
3418be16:	429a      	cmp	r2, r3
3418be18:	d116      	bne.n	3418be48 <HAL_RCCEx_PeriphCLKConfig+0x1940>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418be1a:	4b69      	ldr	r3, [pc, #420]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418be1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418be20:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418be24:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418be28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418be2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418be2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418be32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418be34:	3b01      	subs	r3, #1
3418be36:	041b      	lsls	r3, r3, #16
3418be38:	4313      	orrs	r3, r2
3418be3a:	4a61      	ldr	r2, [pc, #388]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418be3c:	430b      	orrs	r3, r1
3418be3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418be42:	f7fe faab 	bl	3418a39c <LL_RCC_IC8_Enable>
3418be46:	e026      	b.n	3418be96 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
3418be48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418be4c:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3418be50:	4b62      	ldr	r3, [pc, #392]	@ (3418bfdc <HAL_RCCEx_PeriphCLKConfig+0x1ad4>)
3418be52:	429a      	cmp	r2, r3
3418be54:	d116      	bne.n	3418be84 <HAL_RCCEx_PeriphCLKConfig+0x197c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418be56:	4b5a      	ldr	r3, [pc, #360]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418be58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418be5c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418be60:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418be64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418be68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418be6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418be6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418be70:	3b01      	subs	r3, #1
3418be72:	041b      	lsls	r3, r3, #16
3418be74:	4313      	orrs	r3, r2
3418be76:	4a52      	ldr	r2, [pc, #328]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418be78:	430b      	orrs	r3, r1
3418be7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418be7e:	f7fe fa9b 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418be82:	e008      	b.n	3418be96 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
3418be84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418be88:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3418be8c:	4b54      	ldr	r3, [pc, #336]	@ (3418bfe0 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>)
3418be8e:	429a      	cmp	r2, r3
3418be90:	d101      	bne.n	3418be96 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    {
      LL_RCC_CLKP_Enable();
3418be92:	f7fe fb2b 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
3418be96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418be9a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
3418be9e:	4618      	mov	r0, r3
3418bea0:	f7fd ff72 	bl	34189d88 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
3418bea4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
3418beac:	2100      	movs	r1, #0
3418beae:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
3418beb2:	f003 0310 	and.w	r3, r3, #16
3418beb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
3418beba:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
3418bebe:	4603      	mov	r3, r0
3418bec0:	460a      	mov	r2, r1
3418bec2:	4313      	orrs	r3, r2
3418bec4:	d04b      	beq.n	3418bf5e <HAL_RCCEx_PeriphCLKConfig+0x1a56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
3418bec6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418beca:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3418bece:	4b45      	ldr	r3, [pc, #276]	@ (3418bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1adc>)
3418bed0:	429a      	cmp	r2, r3
3418bed2:	d116      	bne.n	3418bf02 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418bed4:	4b3a      	ldr	r3, [pc, #232]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bed6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418beda:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418bede:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418bee2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bee6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418bee8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418beec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418beee:	3b01      	subs	r3, #1
3418bef0:	041b      	lsls	r3, r3, #16
3418bef2:	4313      	orrs	r3, r2
3418bef4:	4a32      	ldr	r2, [pc, #200]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bef6:	430b      	orrs	r3, r1
3418bef8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418befc:	f7fe fa5c 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418bf00:	e026      	b.n	3418bf50 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
3418bf02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bf06:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3418bf0a:	4b37      	ldr	r3, [pc, #220]	@ (3418bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1ae0>)
3418bf0c:	429a      	cmp	r2, r3
3418bf0e:	d116      	bne.n	3418bf3e <HAL_RCCEx_PeriphCLKConfig+0x1a36>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418bf10:	4b2b      	ldr	r3, [pc, #172]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bf12:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418bf16:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418bf1a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418bf1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bf22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418bf24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bf28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418bf2a:	3b01      	subs	r3, #1
3418bf2c:	041b      	lsls	r3, r3, #16
3418bf2e:	4313      	orrs	r3, r2
3418bf30:	4a23      	ldr	r2, [pc, #140]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bf32:	430b      	orrs	r3, r1
3418bf34:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418bf38:	f7fe fa76 	bl	3418a428 <LL_RCC_IC14_Enable>
3418bf3c:	e008      	b.n	3418bf50 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
3418bf3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bf42:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3418bf46:	4b29      	ldr	r3, [pc, #164]	@ (3418bfec <HAL_RCCEx_PeriphCLKConfig+0x1ae4>)
3418bf48:	429a      	cmp	r2, r3
3418bf4a:	d101      	bne.n	3418bf50 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    {
      LL_RCC_CLKP_Enable();
3418bf4c:	f7fe face 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
3418bf50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bf54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
3418bf58:	4618      	mov	r0, r3
3418bf5a:	f7fd ff15 	bl	34189d88 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
3418bf5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bf62:	e9d3 2300 	ldrd	r2, r3, [r3]
3418bf66:	2100      	movs	r1, #0
3418bf68:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
3418bf6c:	f003 0320 	and.w	r3, r3, #32
3418bf70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
3418bf74:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
3418bf78:	4603      	mov	r3, r0
3418bf7a:	460a      	mov	r2, r1
3418bf7c:	4313      	orrs	r3, r2
3418bf7e:	d067      	beq.n	3418c050 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
3418bf80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bf84:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3418bf88:	4b19      	ldr	r3, [pc, #100]	@ (3418bff0 <HAL_RCCEx_PeriphCLKConfig+0x1ae8>)
3418bf8a:	429a      	cmp	r2, r3
3418bf8c:	d132      	bne.n	3418bff4 <HAL_RCCEx_PeriphCLKConfig+0x1aec>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418bf8e:	4b0c      	ldr	r3, [pc, #48]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bf90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418bf94:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418bf98:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418bf9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bfa0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418bfa2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bfa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418bfa8:	3b01      	subs	r3, #1
3418bfaa:	041b      	lsls	r3, r3, #16
3418bfac:	4313      	orrs	r3, r2
3418bfae:	4a04      	ldr	r2, [pc, #16]	@ (3418bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418bfb0:	430b      	orrs	r3, r1
3418bfb2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418bfb6:	f7fe f9ff 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418bfba:	e042      	b.n	3418c042 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
3418bfbc:	07020420 	.word	0x07020420
3418bfc0:	56028000 	.word	0x56028000
3418bfc4:	07030420 	.word	0x07030420
3418bfc8:	07010420 	.word	0x07010420
3418bfcc:	07020820 	.word	0x07020820
3418bfd0:	07030820 	.word	0x07030820
3418bfd4:	07010820 	.word	0x07010820
3418bfd8:	07020c20 	.word	0x07020c20
3418bfdc:	07030c20 	.word	0x07030c20
3418bfe0:	07010c20 	.word	0x07010c20
3418bfe4:	07021020 	.word	0x07021020
3418bfe8:	07031020 	.word	0x07031020
3418bfec:	07011020 	.word	0x07011020
3418bff0:	07021420 	.word	0x07021420
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
3418bff4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418bff8:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3418bffc:	4bc2      	ldr	r3, [pc, #776]	@ (3418c308 <HAL_RCCEx_PeriphCLKConfig+0x1e00>)
3418bffe:	429a      	cmp	r2, r3
3418c000:	d116      	bne.n	3418c030 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418c002:	4bc2      	ldr	r3, [pc, #776]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c004:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418c008:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c00c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c010:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c014:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418c016:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c01a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418c01c:	3b01      	subs	r3, #1
3418c01e:	041b      	lsls	r3, r3, #16
3418c020:	4313      	orrs	r3, r2
3418c022:	4aba      	ldr	r2, [pc, #744]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c024:	430b      	orrs	r3, r1
3418c026:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418c02a:	f7fe f9fd 	bl	3418a428 <LL_RCC_IC14_Enable>
3418c02e:	e008      	b.n	3418c042 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
3418c030:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c034:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3418c038:	4bb5      	ldr	r3, [pc, #724]	@ (3418c310 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
3418c03a:	429a      	cmp	r2, r3
3418c03c:	d101      	bne.n	3418c042 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    {
      LL_RCC_CLKP_Enable();
3418c03e:	f7fe fa55 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
3418c042:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c046:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418c04a:	4618      	mov	r0, r3
3418c04c:	f7fd fe9c 	bl	34189d88 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
3418c050:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c054:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c058:	2100      	movs	r1, #0
3418c05a:	67b9      	str	r1, [r7, #120]	@ 0x78
3418c05c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418c060:	67fb      	str	r3, [r7, #124]	@ 0x7c
3418c062:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
3418c066:	4603      	mov	r3, r0
3418c068:	460a      	mov	r2, r1
3418c06a:	4313      	orrs	r3, r2
3418c06c:	d04b      	beq.n	3418c106 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
3418c06e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c072:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3418c076:	4ba7      	ldr	r3, [pc, #668]	@ (3418c314 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
3418c078:	429a      	cmp	r2, r3
3418c07a:	d116      	bne.n	3418c0aa <HAL_RCCEx_PeriphCLKConfig+0x1ba2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418c07c:	4ba3      	ldr	r3, [pc, #652]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c07e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418c082:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c086:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c08a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c08e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418c090:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c096:	3b01      	subs	r3, #1
3418c098:	041b      	lsls	r3, r3, #16
3418c09a:	4313      	orrs	r3, r2
3418c09c:	4a9b      	ldr	r2, [pc, #620]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c09e:	430b      	orrs	r3, r1
3418c0a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418c0a4:	f7fe f97a 	bl	3418a39c <LL_RCC_IC8_Enable>
3418c0a8:	e026      	b.n	3418c0f8 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
3418c0aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c0ae:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3418c0b2:	4b99      	ldr	r3, [pc, #612]	@ (3418c318 <HAL_RCCEx_PeriphCLKConfig+0x1e10>)
3418c0b4:	429a      	cmp	r2, r3
3418c0b6:	d116      	bne.n	3418c0e6 <HAL_RCCEx_PeriphCLKConfig+0x1bde>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418c0b8:	4b94      	ldr	r3, [pc, #592]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c0ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418c0be:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c0c2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c0c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c0ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418c0cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c0d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c0d2:	3b01      	subs	r3, #1
3418c0d4:	041b      	lsls	r3, r3, #16
3418c0d6:	4313      	orrs	r3, r2
3418c0d8:	4a8c      	ldr	r2, [pc, #560]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c0da:	430b      	orrs	r3, r1
3418c0dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418c0e0:	f7fe f96a 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418c0e4:	e008      	b.n	3418c0f8 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
3418c0e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c0ea:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3418c0ee:	4b8b      	ldr	r3, [pc, #556]	@ (3418c31c <HAL_RCCEx_PeriphCLKConfig+0x1e14>)
3418c0f0:	429a      	cmp	r2, r3
3418c0f2:	d101      	bne.n	3418c0f8 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    {
      LL_RCC_CLKP_Enable();
3418c0f4:	f7fe f9fa 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
3418c0f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c0fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418c100:	4618      	mov	r0, r3
3418c102:	f7fd fe41 	bl	34189d88 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
3418c106:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c10e:	2100      	movs	r1, #0
3418c110:	6739      	str	r1, [r7, #112]	@ 0x70
3418c112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418c116:	677b      	str	r3, [r7, #116]	@ 0x74
3418c118:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
3418c11c:	4603      	mov	r3, r0
3418c11e:	460a      	mov	r2, r1
3418c120:	4313      	orrs	r3, r2
3418c122:	d04b      	beq.n	3418c1bc <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
3418c124:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c128:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3418c12c:	4b7c      	ldr	r3, [pc, #496]	@ (3418c320 <HAL_RCCEx_PeriphCLKConfig+0x1e18>)
3418c12e:	429a      	cmp	r2, r3
3418c130:	d116      	bne.n	3418c160 <HAL_RCCEx_PeriphCLKConfig+0x1c58>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418c132:	4b76      	ldr	r3, [pc, #472]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c134:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418c138:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c13c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c140:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c144:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418c146:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c14a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c14c:	3b01      	subs	r3, #1
3418c14e:	041b      	lsls	r3, r3, #16
3418c150:	4313      	orrs	r3, r2
3418c152:	4a6e      	ldr	r2, [pc, #440]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c154:	430b      	orrs	r3, r1
3418c156:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418c15a:	f7fe f92d 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418c15e:	e026      	b.n	3418c1ae <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
3418c160:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c164:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3418c168:	4b6e      	ldr	r3, [pc, #440]	@ (3418c324 <HAL_RCCEx_PeriphCLKConfig+0x1e1c>)
3418c16a:	429a      	cmp	r2, r3
3418c16c:	d116      	bne.n	3418c19c <HAL_RCCEx_PeriphCLKConfig+0x1c94>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418c16e:	4b67      	ldr	r3, [pc, #412]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c170:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418c174:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c178:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c17c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c180:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418c182:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418c188:	3b01      	subs	r3, #1
3418c18a:	041b      	lsls	r3, r3, #16
3418c18c:	4313      	orrs	r3, r2
3418c18e:	4a5f      	ldr	r2, [pc, #380]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c190:	430b      	orrs	r3, r1
3418c192:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418c196:	f7fe f947 	bl	3418a428 <LL_RCC_IC14_Enable>
3418c19a:	e008      	b.n	3418c1ae <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
3418c19c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c1a0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3418c1a4:	4b60      	ldr	r3, [pc, #384]	@ (3418c328 <HAL_RCCEx_PeriphCLKConfig+0x1e20>)
3418c1a6:	429a      	cmp	r2, r3
3418c1a8:	d101      	bne.n	3418c1ae <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    {
      LL_RCC_CLKP_Enable();
3418c1aa:	f7fe f99f 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
3418c1ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c1b2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3418c1b6:	4618      	mov	r0, r3
3418c1b8:	f7fd fdf1 	bl	34189d9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
3418c1bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c1c4:	2100      	movs	r1, #0
3418c1c6:	66b9      	str	r1, [r7, #104]	@ 0x68
3418c1c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418c1cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
3418c1ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
3418c1d2:	4603      	mov	r3, r0
3418c1d4:	460a      	mov	r2, r1
3418c1d6:	4313      	orrs	r3, r2
3418c1d8:	d04b      	beq.n	3418c272 <HAL_RCCEx_PeriphCLKConfig+0x1d6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
3418c1da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c1de:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3418c1e2:	4b52      	ldr	r3, [pc, #328]	@ (3418c32c <HAL_RCCEx_PeriphCLKConfig+0x1e24>)
3418c1e4:	429a      	cmp	r2, r3
3418c1e6:	d116      	bne.n	3418c216 <HAL_RCCEx_PeriphCLKConfig+0x1d0e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418c1e8:	4b48      	ldr	r3, [pc, #288]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c1ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418c1ee:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c1f2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c1f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c1fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418c1fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c202:	3b01      	subs	r3, #1
3418c204:	041b      	lsls	r3, r3, #16
3418c206:	4313      	orrs	r3, r2
3418c208:	4a40      	ldr	r2, [pc, #256]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c20a:	430b      	orrs	r3, r1
3418c20c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418c210:	f7fe f8d2 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418c214:	e026      	b.n	3418c264 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
3418c216:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c21a:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3418c21e:	4b44      	ldr	r3, [pc, #272]	@ (3418c330 <HAL_RCCEx_PeriphCLKConfig+0x1e28>)
3418c220:	429a      	cmp	r2, r3
3418c222:	d116      	bne.n	3418c252 <HAL_RCCEx_PeriphCLKConfig+0x1d4a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418c224:	4b39      	ldr	r3, [pc, #228]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c226:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418c22a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c22e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c232:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c236:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418c238:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c23c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418c23e:	3b01      	subs	r3, #1
3418c240:	041b      	lsls	r3, r3, #16
3418c242:	4313      	orrs	r3, r2
3418c244:	4a31      	ldr	r2, [pc, #196]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c246:	430b      	orrs	r3, r1
3418c248:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418c24c:	f7fe f8ec 	bl	3418a428 <LL_RCC_IC14_Enable>
3418c250:	e008      	b.n	3418c264 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
3418c252:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c256:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3418c25a:	4b36      	ldr	r3, [pc, #216]	@ (3418c334 <HAL_RCCEx_PeriphCLKConfig+0x1e2c>)
3418c25c:	429a      	cmp	r2, r3
3418c25e:	d101      	bne.n	3418c264 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    {
      LL_RCC_CLKP_Enable();
3418c260:	f7fe f944 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
3418c264:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c268:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3418c26c:	4618      	mov	r0, r3
3418c26e:	f7fd fd96 	bl	34189d9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
3418c272:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c276:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c27a:	2100      	movs	r1, #0
3418c27c:	6639      	str	r1, [r7, #96]	@ 0x60
3418c27e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418c282:	667b      	str	r3, [r7, #100]	@ 0x64
3418c284:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
3418c288:	4603      	mov	r3, r0
3418c28a:	460a      	mov	r2, r1
3418c28c:	4313      	orrs	r3, r2
3418c28e:	d067      	beq.n	3418c360 <HAL_RCCEx_PeriphCLKConfig+0x1e58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
3418c290:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c294:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3418c298:	4b27      	ldr	r3, [pc, #156]	@ (3418c338 <HAL_RCCEx_PeriphCLKConfig+0x1e30>)
3418c29a:	429a      	cmp	r2, r3
3418c29c:	d116      	bne.n	3418c2cc <HAL_RCCEx_PeriphCLKConfig+0x1dc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418c29e:	4b1b      	ldr	r3, [pc, #108]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c2a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418c2a4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c2a8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c2ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c2b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418c2b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c2b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c2b8:	3b01      	subs	r3, #1
3418c2ba:	041b      	lsls	r3, r3, #16
3418c2bc:	4313      	orrs	r3, r2
3418c2be:	4a13      	ldr	r2, [pc, #76]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c2c0:	430b      	orrs	r3, r1
3418c2c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418c2c6:	f7fe f877 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418c2ca:	e042      	b.n	3418c352 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
3418c2cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c2d0:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3418c2d4:	4b19      	ldr	r3, [pc, #100]	@ (3418c33c <HAL_RCCEx_PeriphCLKConfig+0x1e34>)
3418c2d6:	429a      	cmp	r2, r3
3418c2d8:	d132      	bne.n	3418c340 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418c2da:	4b0c      	ldr	r3, [pc, #48]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c2dc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418c2e0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c2e4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c2e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c2ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418c2ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c2f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418c2f4:	3b01      	subs	r3, #1
3418c2f6:	041b      	lsls	r3, r3, #16
3418c2f8:	4313      	orrs	r3, r2
3418c2fa:	4a04      	ldr	r2, [pc, #16]	@ (3418c30c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418c2fc:	430b      	orrs	r3, r1
3418c2fe:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418c302:	f7fe f891 	bl	3418a428 <LL_RCC_IC14_Enable>
3418c306:	e024      	b.n	3418c352 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
3418c308:	07031420 	.word	0x07031420
3418c30c:	56028000 	.word	0x56028000
3418c310:	07011420 	.word	0x07011420
3418c314:	07021820 	.word	0x07021820
3418c318:	07031820 	.word	0x07031820
3418c31c:	07011820 	.word	0x07011820
3418c320:	07020030 	.word	0x07020030
3418c324:	07030030 	.word	0x07030030
3418c328:	07010030 	.word	0x07010030
3418c32c:	07020430 	.word	0x07020430
3418c330:	07030430 	.word	0x07030430
3418c334:	07010430 	.word	0x07010430
3418c338:	07020830 	.word	0x07020830
3418c33c:	07030830 	.word	0x07030830
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
3418c340:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c344:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3418c348:	4bb3      	ldr	r3, [pc, #716]	@ (3418c618 <HAL_RCCEx_PeriphCLKConfig+0x2110>)
3418c34a:	429a      	cmp	r2, r3
3418c34c:	d101      	bne.n	3418c352 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    {
      LL_RCC_CLKP_Enable();
3418c34e:	f7fe f8cd 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
3418c352:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c356:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
3418c35a:	4618      	mov	r0, r3
3418c35c:	f7fd fd1f 	bl	34189d9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
3418c360:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c364:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c368:	2100      	movs	r1, #0
3418c36a:	65b9      	str	r1, [r7, #88]	@ 0x58
3418c36c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418c370:	65fb      	str	r3, [r7, #92]	@ 0x5c
3418c372:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
3418c376:	4603      	mov	r3, r0
3418c378:	460a      	mov	r2, r1
3418c37a:	4313      	orrs	r3, r2
3418c37c:	d04b      	beq.n	3418c416 <HAL_RCCEx_PeriphCLKConfig+0x1f0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
3418c37e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c382:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3418c386:	4ba5      	ldr	r3, [pc, #660]	@ (3418c61c <HAL_RCCEx_PeriphCLKConfig+0x2114>)
3418c388:	429a      	cmp	r2, r3
3418c38a:	d116      	bne.n	3418c3ba <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418c38c:	4ba4      	ldr	r3, [pc, #656]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c38e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418c392:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c396:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c39a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c39e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418c3a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c3a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c3a6:	3b01      	subs	r3, #1
3418c3a8:	041b      	lsls	r3, r3, #16
3418c3aa:	4313      	orrs	r3, r2
3418c3ac:	4a9c      	ldr	r2, [pc, #624]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c3ae:	430b      	orrs	r3, r1
3418c3b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418c3b4:	f7fe f800 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418c3b8:	e026      	b.n	3418c408 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
3418c3ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c3be:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3418c3c2:	4b98      	ldr	r3, [pc, #608]	@ (3418c624 <HAL_RCCEx_PeriphCLKConfig+0x211c>)
3418c3c4:	429a      	cmp	r2, r3
3418c3c6:	d116      	bne.n	3418c3f6 <HAL_RCCEx_PeriphCLKConfig+0x1eee>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418c3c8:	4b95      	ldr	r3, [pc, #596]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c3ca:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418c3ce:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c3d2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c3d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c3da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418c3dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c3e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418c3e2:	3b01      	subs	r3, #1
3418c3e4:	041b      	lsls	r3, r3, #16
3418c3e6:	4313      	orrs	r3, r2
3418c3e8:	4a8d      	ldr	r2, [pc, #564]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c3ea:	430b      	orrs	r3, r1
3418c3ec:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418c3f0:	f7fe f81a 	bl	3418a428 <LL_RCC_IC14_Enable>
3418c3f4:	e008      	b.n	3418c408 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
3418c3f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c3fa:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3418c3fe:	4b8a      	ldr	r3, [pc, #552]	@ (3418c628 <HAL_RCCEx_PeriphCLKConfig+0x2120>)
3418c400:	429a      	cmp	r2, r3
3418c402:	d101      	bne.n	3418c408 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    {
      LL_RCC_CLKP_Enable();
3418c404:	f7fe f872 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
3418c408:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c40c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418c410:	4618      	mov	r0, r3
3418c412:	f7fd fcc4 	bl	34189d9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
3418c416:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c41e:	2100      	movs	r1, #0
3418c420:	6539      	str	r1, [r7, #80]	@ 0x50
3418c422:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418c426:	657b      	str	r3, [r7, #84]	@ 0x54
3418c428:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
3418c42c:	4603      	mov	r3, r0
3418c42e:	460a      	mov	r2, r1
3418c430:	4313      	orrs	r3, r2
3418c432:	d04b      	beq.n	3418c4cc <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
3418c434:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c438:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3418c43c:	4b7b      	ldr	r3, [pc, #492]	@ (3418c62c <HAL_RCCEx_PeriphCLKConfig+0x2124>)
3418c43e:	429a      	cmp	r2, r3
3418c440:	d116      	bne.n	3418c470 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418c442:	4b77      	ldr	r3, [pc, #476]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c444:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418c448:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c44c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c450:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c454:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418c456:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c45a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c45c:	3b01      	subs	r3, #1
3418c45e:	041b      	lsls	r3, r3, #16
3418c460:	4313      	orrs	r3, r2
3418c462:	4a6f      	ldr	r2, [pc, #444]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c464:	430b      	orrs	r3, r1
3418c466:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418c46a:	f7fd ffa5 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418c46e:	e026      	b.n	3418c4be <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
3418c470:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c474:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3418c478:	4b6d      	ldr	r3, [pc, #436]	@ (3418c630 <HAL_RCCEx_PeriphCLKConfig+0x2128>)
3418c47a:	429a      	cmp	r2, r3
3418c47c:	d116      	bne.n	3418c4ac <HAL_RCCEx_PeriphCLKConfig+0x1fa4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418c47e:	4b68      	ldr	r3, [pc, #416]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c480:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418c484:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c488:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c48c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c490:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418c492:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418c498:	3b01      	subs	r3, #1
3418c49a:	041b      	lsls	r3, r3, #16
3418c49c:	4313      	orrs	r3, r2
3418c49e:	4a60      	ldr	r2, [pc, #384]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c4a0:	430b      	orrs	r3, r1
3418c4a2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418c4a6:	f7fd ffbf 	bl	3418a428 <LL_RCC_IC14_Enable>
3418c4aa:	e008      	b.n	3418c4be <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
3418c4ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c4b0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3418c4b4:	4b5f      	ldr	r3, [pc, #380]	@ (3418c634 <HAL_RCCEx_PeriphCLKConfig+0x212c>)
3418c4b6:	429a      	cmp	r2, r3
3418c4b8:	d101      	bne.n	3418c4be <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    {
      LL_RCC_CLKP_Enable();
3418c4ba:	f7fe f817 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
3418c4be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c4c2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
3418c4c6:	4618      	mov	r0, r3
3418c4c8:	f7fd fc69 	bl	34189d9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
3418c4cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c4d4:	2100      	movs	r1, #0
3418c4d6:	64b9      	str	r1, [r7, #72]	@ 0x48
3418c4d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3418c4dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418c4de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
3418c4e2:	4603      	mov	r3, r0
3418c4e4:	460a      	mov	r2, r1
3418c4e6:	4313      	orrs	r3, r2
3418c4e8:	d04b      	beq.n	3418c582 <HAL_RCCEx_PeriphCLKConfig+0x207a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
3418c4ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c4ee:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3418c4f2:	4b51      	ldr	r3, [pc, #324]	@ (3418c638 <HAL_RCCEx_PeriphCLKConfig+0x2130>)
3418c4f4:	429a      	cmp	r2, r3
3418c4f6:	d116      	bne.n	3418c526 <HAL_RCCEx_PeriphCLKConfig+0x201e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418c4f8:	4b49      	ldr	r3, [pc, #292]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c4fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418c4fe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c502:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c506:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c50a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418c50c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c512:	3b01      	subs	r3, #1
3418c514:	041b      	lsls	r3, r3, #16
3418c516:	4313      	orrs	r3, r2
3418c518:	4a41      	ldr	r2, [pc, #260]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c51a:	430b      	orrs	r3, r1
3418c51c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418c520:	f7fd ff4a 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418c524:	e026      	b.n	3418c574 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
3418c526:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c52a:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3418c52e:	4b43      	ldr	r3, [pc, #268]	@ (3418c63c <HAL_RCCEx_PeriphCLKConfig+0x2134>)
3418c530:	429a      	cmp	r2, r3
3418c532:	d116      	bne.n	3418c562 <HAL_RCCEx_PeriphCLKConfig+0x205a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418c534:	4b3a      	ldr	r3, [pc, #232]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c536:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418c53a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c53e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c542:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c546:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418c548:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c54c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418c54e:	3b01      	subs	r3, #1
3418c550:	041b      	lsls	r3, r3, #16
3418c552:	4313      	orrs	r3, r2
3418c554:	4a32      	ldr	r2, [pc, #200]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c556:	430b      	orrs	r3, r1
3418c558:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418c55c:	f7fd ff64 	bl	3418a428 <LL_RCC_IC14_Enable>
3418c560:	e008      	b.n	3418c574 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
3418c562:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c566:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3418c56a:	4b35      	ldr	r3, [pc, #212]	@ (3418c640 <HAL_RCCEx_PeriphCLKConfig+0x2138>)
3418c56c:	429a      	cmp	r2, r3
3418c56e:	d101      	bne.n	3418c574 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    {
      LL_RCC_CLKP_Enable();
3418c570:	f7fd ffbc 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
3418c574:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c578:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3418c57c:	4618      	mov	r0, r3
3418c57e:	f7fd fc0e 	bl	34189d9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
3418c582:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c586:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c58a:	2100      	movs	r1, #0
3418c58c:	6439      	str	r1, [r7, #64]	@ 0x40
3418c58e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3418c592:	647b      	str	r3, [r7, #68]	@ 0x44
3418c594:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
3418c598:	4603      	mov	r3, r0
3418c59a:	460a      	mov	r2, r1
3418c59c:	4313      	orrs	r3, r2
3418c59e:	d065      	beq.n	3418c66c <HAL_RCCEx_PeriphCLKConfig+0x2164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
3418c5a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c5a4:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3418c5a8:	4b26      	ldr	r3, [pc, #152]	@ (3418c644 <HAL_RCCEx_PeriphCLKConfig+0x213c>)
3418c5aa:	429a      	cmp	r2, r3
3418c5ac:	d116      	bne.n	3418c5dc <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418c5ae:	4b1c      	ldr	r3, [pc, #112]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c5b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418c5b4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c5b8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c5bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c5c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418c5c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c5c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c5c8:	3b01      	subs	r3, #1
3418c5ca:	041b      	lsls	r3, r3, #16
3418c5cc:	4313      	orrs	r3, r2
3418c5ce:	4a14      	ldr	r2, [pc, #80]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c5d0:	430b      	orrs	r3, r1
3418c5d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418c5d6:	f7fd feef 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418c5da:	e040      	b.n	3418c65e <HAL_RCCEx_PeriphCLKConfig+0x2156>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
3418c5dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c5e0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3418c5e4:	4b18      	ldr	r3, [pc, #96]	@ (3418c648 <HAL_RCCEx_PeriphCLKConfig+0x2140>)
3418c5e6:	429a      	cmp	r2, r3
3418c5e8:	d130      	bne.n	3418c64c <HAL_RCCEx_PeriphCLKConfig+0x2144>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418c5ea:	4b0d      	ldr	r3, [pc, #52]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c5ec:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418c5f0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c5f4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c5f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c5fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418c5fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418c604:	3b01      	subs	r3, #1
3418c606:	041b      	lsls	r3, r3, #16
3418c608:	4313      	orrs	r3, r2
3418c60a:	4a05      	ldr	r2, [pc, #20]	@ (3418c620 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418c60c:	430b      	orrs	r3, r1
3418c60e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418c612:	f7fd ff09 	bl	3418a428 <LL_RCC_IC14_Enable>
3418c616:	e022      	b.n	3418c65e <HAL_RCCEx_PeriphCLKConfig+0x2156>
3418c618:	07010830 	.word	0x07010830
3418c61c:	07020c30 	.word	0x07020c30
3418c620:	56028000 	.word	0x56028000
3418c624:	07030c30 	.word	0x07030c30
3418c628:	07010c30 	.word	0x07010c30
3418c62c:	07021030 	.word	0x07021030
3418c630:	07031030 	.word	0x07031030
3418c634:	07011030 	.word	0x07011030
3418c638:	07021430 	.word	0x07021430
3418c63c:	07031430 	.word	0x07031430
3418c640:	07011430 	.word	0x07011430
3418c644:	07021830 	.word	0x07021830
3418c648:	07031830 	.word	0x07031830
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
3418c64c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c650:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3418c654:	4bc8      	ldr	r3, [pc, #800]	@ (3418c978 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3418c656:	429a      	cmp	r2, r3
3418c658:	d101      	bne.n	3418c65e <HAL_RCCEx_PeriphCLKConfig+0x2156>
    {
      LL_RCC_CLKP_Enable();
3418c65a:	f7fd ff47 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
3418c65e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c662:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
3418c666:	4618      	mov	r0, r3
3418c668:	f7fd fb99 	bl	34189d9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
3418c66c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c670:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c674:	2100      	movs	r1, #0
3418c676:	63b9      	str	r1, [r7, #56]	@ 0x38
3418c678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3418c67c:	63fb      	str	r3, [r7, #60]	@ 0x3c
3418c67e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
3418c682:	4603      	mov	r3, r0
3418c684:	460a      	mov	r2, r1
3418c686:	4313      	orrs	r3, r2
3418c688:	d04b      	beq.n	3418c722 <HAL_RCCEx_PeriphCLKConfig+0x221a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
3418c68a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c68e:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3418c692:	4bba      	ldr	r3, [pc, #744]	@ (3418c97c <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3418c694:	429a      	cmp	r2, r3
3418c696:	d116      	bne.n	3418c6c6 <HAL_RCCEx_PeriphCLKConfig+0x21be>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418c698:	4bb9      	ldr	r3, [pc, #740]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c69a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418c69e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c6a2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c6a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c6aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418c6ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c6b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c6b2:	3b01      	subs	r3, #1
3418c6b4:	041b      	lsls	r3, r3, #16
3418c6b6:	4313      	orrs	r3, r2
3418c6b8:	4ab1      	ldr	r2, [pc, #708]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c6ba:	430b      	orrs	r3, r1
3418c6bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418c6c0:	f7fd fe7a 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418c6c4:	e026      	b.n	3418c714 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
3418c6c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c6ca:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3418c6ce:	4bad      	ldr	r3, [pc, #692]	@ (3418c984 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
3418c6d0:	429a      	cmp	r2, r3
3418c6d2:	d116      	bne.n	3418c702 <HAL_RCCEx_PeriphCLKConfig+0x21fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418c6d4:	4baa      	ldr	r3, [pc, #680]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c6d6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418c6da:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c6de:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c6e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c6e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418c6e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c6ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418c6ee:	3b01      	subs	r3, #1
3418c6f0:	041b      	lsls	r3, r3, #16
3418c6f2:	4313      	orrs	r3, r2
3418c6f4:	4aa2      	ldr	r2, [pc, #648]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c6f6:	430b      	orrs	r3, r1
3418c6f8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418c6fc:	f7fd fe94 	bl	3418a428 <LL_RCC_IC14_Enable>
3418c700:	e008      	b.n	3418c714 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
3418c702:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c706:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3418c70a:	4b9f      	ldr	r3, [pc, #636]	@ (3418c988 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
3418c70c:	429a      	cmp	r2, r3
3418c70e:	d101      	bne.n	3418c714 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    {
      LL_RCC_CLKP_Enable();
3418c710:	f7fd feec 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
3418c714:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c718:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
3418c71c:	4618      	mov	r0, r3
3418c71e:	f7fd fb3e 	bl	34189d9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
3418c722:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c726:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c72a:	2100      	movs	r1, #0
3418c72c:	6339      	str	r1, [r7, #48]	@ 0x30
3418c72e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418c732:	637b      	str	r3, [r7, #52]	@ 0x34
3418c734:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418c738:	4603      	mov	r3, r0
3418c73a:	460a      	mov	r2, r1
3418c73c:	4313      	orrs	r3, r2
3418c73e:	d04b      	beq.n	3418c7d8 <HAL_RCCEx_PeriphCLKConfig+0x22d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
3418c740:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c744:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418c748:	4a90      	ldr	r2, [pc, #576]	@ (3418c98c <HAL_RCCEx_PeriphCLKConfig+0x2484>)
3418c74a:	4293      	cmp	r3, r2
3418c74c:	d116      	bne.n	3418c77c <HAL_RCCEx_PeriphCLKConfig+0x2274>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418c74e:	4b8c      	ldr	r3, [pc, #560]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c750:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418c754:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c758:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c75c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c760:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418c762:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c768:	3b01      	subs	r3, #1
3418c76a:	041b      	lsls	r3, r3, #16
3418c76c:	4313      	orrs	r3, r2
3418c76e:	4a84      	ldr	r2, [pc, #528]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c770:	430b      	orrs	r3, r1
3418c772:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418c776:	f7fd fe1f 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418c77a:	e026      	b.n	3418c7ca <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
3418c77c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c780:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418c784:	4a82      	ldr	r2, [pc, #520]	@ (3418c990 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
3418c786:	4293      	cmp	r3, r2
3418c788:	d116      	bne.n	3418c7b8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418c78a:	4b7d      	ldr	r3, [pc, #500]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c78c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418c790:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418c794:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418c798:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c79c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418c79e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c7a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418c7a4:	3b01      	subs	r3, #1
3418c7a6:	041b      	lsls	r3, r3, #16
3418c7a8:	4313      	orrs	r3, r2
3418c7aa:	4a75      	ldr	r2, [pc, #468]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c7ac:	430b      	orrs	r3, r1
3418c7ae:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418c7b2:	f7fd fe39 	bl	3418a428 <LL_RCC_IC14_Enable>
3418c7b6:	e008      	b.n	3418c7ca <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
3418c7b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c7bc:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418c7c0:	4a74      	ldr	r2, [pc, #464]	@ (3418c994 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
3418c7c2:	4293      	cmp	r3, r2
3418c7c4:	d101      	bne.n	3418c7ca <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    {
      LL_RCC_CLKP_Enable();
3418c7c6:	f7fd fe91 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
3418c7ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c7ce:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418c7d2:	4618      	mov	r0, r3
3418c7d4:	f7fd fae3 	bl	34189d9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
3418c7d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c7e0:	2100      	movs	r1, #0
3418c7e2:	62b9      	str	r1, [r7, #40]	@ 0x28
3418c7e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418c7e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418c7ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
3418c7ee:	4603      	mov	r3, r0
3418c7f0:	460a      	mov	r2, r1
3418c7f2:	4313      	orrs	r3, r2
3418c7f4:	d04b      	beq.n	3418c88e <HAL_RCCEx_PeriphCLKConfig+0x2386>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
3418c7f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c7fa:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418c7fe:	4a66      	ldr	r2, [pc, #408]	@ (3418c998 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
3418c800:	4293      	cmp	r3, r2
3418c802:	d116      	bne.n	3418c832 <HAL_RCCEx_PeriphCLKConfig+0x232a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418c804:	4b5e      	ldr	r3, [pc, #376]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c806:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418c80a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418c80e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418c812:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418c816:	6c91      	ldr	r1, [r2, #72]	@ 0x48
3418c818:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418c81c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
3418c81e:	3a01      	subs	r2, #1
3418c820:	0412      	lsls	r2, r2, #16
3418c822:	430a      	orrs	r2, r1
3418c824:	4956      	ldr	r1, [pc, #344]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c826:	4313      	orrs	r3, r2
3418c828:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418c82c:	f7fd fdc4 	bl	3418a3b8 <LL_RCC_IC9_Enable>
3418c830:	e026      	b.n	3418c880 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
3418c832:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c836:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418c83a:	4a58      	ldr	r2, [pc, #352]	@ (3418c99c <HAL_RCCEx_PeriphCLKConfig+0x2494>)
3418c83c:	4293      	cmp	r3, r2
3418c83e:	d116      	bne.n	3418c86e <HAL_RCCEx_PeriphCLKConfig+0x2366>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418c840:	4b4f      	ldr	r3, [pc, #316]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c842:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418c846:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418c84a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418c84e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418c852:	6f11      	ldr	r1, [r2, #112]	@ 0x70
3418c854:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418c858:	6f52      	ldr	r2, [r2, #116]	@ 0x74
3418c85a:	3a01      	subs	r2, #1
3418c85c:	0412      	lsls	r2, r2, #16
3418c85e:	430a      	orrs	r2, r1
3418c860:	4947      	ldr	r1, [pc, #284]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c862:	4313      	orrs	r3, r2
3418c864:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418c868:	f7fd fdde 	bl	3418a428 <LL_RCC_IC14_Enable>
3418c86c:	e008      	b.n	3418c880 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
3418c86e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c872:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418c876:	4a4a      	ldr	r2, [pc, #296]	@ (3418c9a0 <HAL_RCCEx_PeriphCLKConfig+0x2498>)
3418c878:	4293      	cmp	r3, r2
3418c87a:	d101      	bne.n	3418c880 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    {
      LL_RCC_CLKP_Enable();
3418c87c:	f7fd fe36 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
3418c880:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c884:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418c888:	4618      	mov	r0, r3
3418c88a:	f7fd fa88 	bl	34189d9e <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
3418c88e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c892:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c896:	2100      	movs	r1, #0
3418c898:	6239      	str	r1, [r7, #32]
3418c89a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3418c89e:	627b      	str	r3, [r7, #36]	@ 0x24
3418c8a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
3418c8a4:	4603      	mov	r3, r0
3418c8a6:	460a      	mov	r2, r1
3418c8a8:	4313      	orrs	r3, r2
3418c8aa:	d014      	beq.n	3418c8d6 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
3418c8ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c8b0:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418c8b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418c8b8:	4618      	mov	r0, r3
3418c8ba:	f7fd fa18 	bl	34189cee <LL_RCC_SetOTGPHYCKREFClockSource>
3418c8be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c8c2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418c8c6:	0fdb      	lsrs	r3, r3, #31
3418c8c8:	2b01      	cmp	r3, #1
3418c8ca:	d102      	bne.n	3418c8d2 <HAL_RCCEx_PeriphCLKConfig+0x23ca>
3418c8cc:	f7fd f83c 	bl	34189948 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418c8d0:	e001      	b.n	3418c8d6 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
3418c8d2:	f7fd f829 	bl	34189928 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
3418c8d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c8de:	2100      	movs	r1, #0
3418c8e0:	61b9      	str	r1, [r7, #24]
3418c8e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3418c8e6:	61fb      	str	r3, [r7, #28]
3418c8e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
3418c8ec:	4603      	mov	r3, r0
3418c8ee:	460a      	mov	r2, r1
3418c8f0:	4313      	orrs	r3, r2
3418c8f2:	d014      	beq.n	3418c91e <HAL_RCCEx_PeriphCLKConfig+0x2416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3418c8f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c8f8:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3418c8fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418c900:	4618      	mov	r0, r3
3418c902:	f7fd f9f4 	bl	34189cee <LL_RCC_SetOTGPHYCKREFClockSource>
3418c906:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c90a:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3418c90e:	0fdb      	lsrs	r3, r3, #31
3418c910:	2b01      	cmp	r3, #1
3418c912:	d102      	bne.n	3418c91a <HAL_RCCEx_PeriphCLKConfig+0x2412>
3418c914:	f7fd f818 	bl	34189948 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418c918:	e001      	b.n	3418c91e <HAL_RCCEx_PeriphCLKConfig+0x2416>
3418c91a:	f7fd f805 	bl	34189928 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
3418c91e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c922:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c926:	2100      	movs	r1, #0
3418c928:	6139      	str	r1, [r7, #16]
3418c92a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3418c92e:	617b      	str	r3, [r7, #20]
3418c930:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
3418c934:	4603      	mov	r3, r0
3418c936:	460a      	mov	r2, r1
3418c938:	4313      	orrs	r3, r2
3418c93a:	d053      	beq.n	3418c9e4 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
3418c93c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c940:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418c944:	4a17      	ldr	r2, [pc, #92]	@ (3418c9a4 <HAL_RCCEx_PeriphCLKConfig+0x249c>)
3418c946:	4293      	cmp	r3, r2
3418c948:	d12e      	bne.n	3418c9a8 <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418c94a:	4b0d      	ldr	r3, [pc, #52]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c94c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418c950:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418c954:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418c958:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418c95c:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3418c95e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418c962:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3418c964:	3a01      	subs	r2, #1
3418c966:	0412      	lsls	r2, r2, #16
3418c968:	430a      	orrs	r2, r1
3418c96a:	4905      	ldr	r1, [pc, #20]	@ (3418c980 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418c96c:	4313      	orrs	r3, r2
3418c96e:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418c972:	f7fd fd67 	bl	3418a444 <LL_RCC_IC15_Enable>
3418c976:	e020      	b.n	3418c9ba <HAL_RCCEx_PeriphCLKConfig+0x24b2>
3418c978:	07011830 	.word	0x07011830
3418c97c:	07021c30 	.word	0x07021c30
3418c980:	56028000 	.word	0x56028000
3418c984:	07031c30 	.word	0x07031c30
3418c988:	07011c30 	.word	0x07011c30
3418c98c:	07020034 	.word	0x07020034
3418c990:	07030034 	.word	0x07030034
3418c994:	07010034 	.word	0x07010034
3418c998:	07020434 	.word	0x07020434
3418c99c:	07030434 	.word	0x07030434
3418c9a0:	07010434 	.word	0x07010434
3418c9a4:	03020c14 	.word	0x03020c14
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
3418c9a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c9ac:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418c9b0:	4a43      	ldr	r2, [pc, #268]	@ (3418cac0 <HAL_RCCEx_PeriphCLKConfig+0x25b8>)
3418c9b2:	4293      	cmp	r3, r2
3418c9b4:	d101      	bne.n	3418c9ba <HAL_RCCEx_PeriphCLKConfig+0x24b2>
    {
      LL_RCC_CLKP_Enable();
3418c9b6:	f7fd fd99 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
3418c9ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c9be:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418c9c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418c9c6:	4618      	mov	r0, r3
3418c9c8:	f7fd f986 	bl	34189cd8 <LL_RCC_SetOTGPHYClockSource>
3418c9cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c9d0:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418c9d4:	0fdb      	lsrs	r3, r3, #31
3418c9d6:	2b01      	cmp	r3, #1
3418c9d8:	d102      	bne.n	3418c9e0 <HAL_RCCEx_PeriphCLKConfig+0x24d8>
3418c9da:	f7fc ffb5 	bl	34189948 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418c9de:	e001      	b.n	3418c9e4 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
3418c9e0:	f7fc ffa2 	bl	34189928 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
3418c9e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
3418c9ec:	2100      	movs	r1, #0
3418c9ee:	60b9      	str	r1, [r7, #8]
3418c9f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3418c9f4:	60fb      	str	r3, [r7, #12]
3418c9f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3418c9fa:	4603      	mov	r3, r0
3418c9fc:	460a      	mov	r2, r1
3418c9fe:	4313      	orrs	r3, r2
3418ca00:	d03b      	beq.n	3418ca7a <HAL_RCCEx_PeriphCLKConfig+0x2572>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
3418ca02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca06:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418ca0a:	4a2e      	ldr	r2, [pc, #184]	@ (3418cac4 <HAL_RCCEx_PeriphCLKConfig+0x25bc>)
3418ca0c:	4293      	cmp	r3, r2
3418ca0e:	d116      	bne.n	3418ca3e <HAL_RCCEx_PeriphCLKConfig+0x2536>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418ca10:	4b2d      	ldr	r3, [pc, #180]	@ (3418cac8 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
3418ca12:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418ca16:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418ca1a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418ca1e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418ca22:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3418ca24:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418ca28:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3418ca2a:	3a01      	subs	r2, #1
3418ca2c:	0412      	lsls	r2, r2, #16
3418ca2e:	430a      	orrs	r2, r1
3418ca30:	4925      	ldr	r1, [pc, #148]	@ (3418cac8 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
3418ca32:	4313      	orrs	r3, r2
3418ca34:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418ca38:	f7fd fd04 	bl	3418a444 <LL_RCC_IC15_Enable>
3418ca3c:	e008      	b.n	3418ca50 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
3418ca3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca42:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418ca46:	4a21      	ldr	r2, [pc, #132]	@ (3418cacc <HAL_RCCEx_PeriphCLKConfig+0x25c4>)
3418ca48:	4293      	cmp	r3, r2
3418ca4a:	d101      	bne.n	3418ca50 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    {
      LL_RCC_CLKP_Enable();
3418ca4c:	f7fd fd4e 	bl	3418a4ec <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
3418ca50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca54:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418ca58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418ca5c:	4618      	mov	r0, r3
3418ca5e:	f7fd f93b 	bl	34189cd8 <LL_RCC_SetOTGPHYClockSource>
3418ca62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca66:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418ca6a:	0fdb      	lsrs	r3, r3, #31
3418ca6c:	2b01      	cmp	r3, #1
3418ca6e:	d102      	bne.n	3418ca76 <HAL_RCCEx_PeriphCLKConfig+0x256e>
3418ca70:	f7fc ff6a 	bl	34189948 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418ca74:	e001      	b.n	3418ca7a <HAL_RCCEx_PeriphCLKConfig+0x2572>
3418ca76:	f7fc ff57 	bl	34189928 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
3418ca7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca7e:	e9d3 2300 	ldrd	r2, r3, [r3]
3418ca82:	2100      	movs	r1, #0
3418ca84:	6039      	str	r1, [r7, #0]
3418ca86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418ca8a:	607b      	str	r3, [r7, #4]
3418ca8c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418ca90:	4603      	mov	r3, r0
3418ca92:	460a      	mov	r2, r1
3418ca94:	4313      	orrs	r3, r2
3418ca96:	d006      	beq.n	3418caa6 <HAL_RCCEx_PeriphCLKConfig+0x259e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
3418ca98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418ca9c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3418caa0:	4618      	mov	r0, r3
3418caa2:	f7fd f9cd 	bl	34189e40 <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
3418caa6:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
3418caaa:	2b00      	cmp	r3, #0
3418caac:	d101      	bne.n	3418cab2 <HAL_RCCEx_PeriphCLKConfig+0x25aa>
  {
    return HAL_OK;
3418caae:	2300      	movs	r3, #0
3418cab0:	e000      	b.n	3418cab4 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
  }
  return HAL_ERROR;
3418cab2:	2301      	movs	r3, #1
}
3418cab4:	4618      	mov	r0, r3
3418cab6:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
3418caba:	46bd      	mov	sp, r7
3418cabc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3418cac0:	03010c14 	.word	0x03010c14
3418cac4:	03021414 	.word	0x03021414
3418cac8:	56028000 	.word	0x56028000
3418cacc:	03011414 	.word	0x03011414

3418cad0 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
3418cad0:	b5f0      	push	{r4, r5, r6, r7, lr}
3418cad2:	b087      	sub	sp, #28
3418cad4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418cad6:	2300      	movs	r3, #0
3418cad8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
3418cada:	f7fd f9d5 	bl	34189e88 <LL_RCC_PLL1_IsReady>
3418cade:	4603      	mov	r3, r0
3418cae0:	2b00      	cmp	r3, #0
3418cae2:	d02a      	beq.n	3418cb3a <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
3418cae4:	f7fd fa38 	bl	34189f58 <LL_RCC_PLL1P_IsEnabled>
3418cae8:	4603      	mov	r3, r0
3418caea:	2b00      	cmp	r3, #0
3418caec:	d031      	beq.n	3418cb52 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3418caee:	f7fd f9bd 	bl	34189e6c <LL_RCC_PLL1_GetSource>
3418caf2:	4603      	mov	r3, r0
3418caf4:	4618      	mov	r0, r3
3418caf6:	f000 f903 	bl	3418cd00 <RCCEx_GetPLLSourceFreq>
3418cafa:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418cafc:	68bb      	ldr	r3, [r7, #8]
3418cafe:	2b00      	cmp	r3, #0
3418cb00:	d027      	beq.n	3418cb52 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
      {
        divm = LL_RCC_PLL1_GetM();
3418cb02:	f7fd f9f9 	bl	34189ef8 <LL_RCC_PLL1_GetM>
3418cb06:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418cb08:	687b      	ldr	r3, [r7, #4]
3418cb0a:	2b00      	cmp	r3, #0
3418cb0c:	d021      	beq.n	3418cb52 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
3418cb0e:	f7fd f9e3 	bl	34189ed8 <LL_RCC_PLL1_GetN>
3418cb12:	4605      	mov	r5, r0
3418cb14:	f7fd fa34 	bl	34189f80 <LL_RCC_PLL1_GetFRACN>
3418cb18:	4606      	mov	r6, r0
3418cb1a:	f7fd f9fd 	bl	34189f18 <LL_RCC_PLL1_GetP1>
3418cb1e:	4604      	mov	r4, r0
3418cb20:	f7fd fa0a 	bl	34189f38 <LL_RCC_PLL1_GetP2>
3418cb24:	4603      	mov	r3, r0
3418cb26:	9301      	str	r3, [sp, #4]
3418cb28:	9400      	str	r4, [sp, #0]
3418cb2a:	4633      	mov	r3, r6
3418cb2c:	462a      	mov	r2, r5
3418cb2e:	6879      	ldr	r1, [r7, #4]
3418cb30:	68b8      	ldr	r0, [r7, #8]
3418cb32:	f000 f943 	bl	3418cdbc <RCCEx_CalcPLLFreq>
3418cb36:	60f8      	str	r0, [r7, #12]
3418cb38:	e00b      	b.n	3418cb52 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
3418cb3a:	f7fd f9b9 	bl	34189eb0 <LL_RCC_PLL1_IsEnabledBypass>
3418cb3e:	4603      	mov	r3, r0
3418cb40:	2b00      	cmp	r3, #0
3418cb42:	d006      	beq.n	3418cb52 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3418cb44:	f7fd f992 	bl	34189e6c <LL_RCC_PLL1_GetSource>
3418cb48:	4603      	mov	r3, r0
3418cb4a:	4618      	mov	r0, r3
3418cb4c:	f000 f8d8 	bl	3418cd00 <RCCEx_GetPLLSourceFreq>
3418cb50:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418cb52:	68fb      	ldr	r3, [r7, #12]
}
3418cb54:	4618      	mov	r0, r3
3418cb56:	3714      	adds	r7, #20
3418cb58:	46bd      	mov	sp, r7
3418cb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418cb5c <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
3418cb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
3418cb5e:	b087      	sub	sp, #28
3418cb60:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418cb62:	2300      	movs	r3, #0
3418cb64:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
3418cb66:	f7fd fa27 	bl	34189fb8 <LL_RCC_PLL2_IsReady>
3418cb6a:	4603      	mov	r3, r0
3418cb6c:	2b00      	cmp	r3, #0
3418cb6e:	d02a      	beq.n	3418cbc6 <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
3418cb70:	f7fd fa8a 	bl	3418a088 <LL_RCC_PLL2P_IsEnabled>
3418cb74:	4603      	mov	r3, r0
3418cb76:	2b00      	cmp	r3, #0
3418cb78:	d031      	beq.n	3418cbde <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3418cb7a:	f7fd fa0f 	bl	34189f9c <LL_RCC_PLL2_GetSource>
3418cb7e:	4603      	mov	r3, r0
3418cb80:	4618      	mov	r0, r3
3418cb82:	f000 f8bd 	bl	3418cd00 <RCCEx_GetPLLSourceFreq>
3418cb86:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418cb88:	68bb      	ldr	r3, [r7, #8]
3418cb8a:	2b00      	cmp	r3, #0
3418cb8c:	d027      	beq.n	3418cbde <HAL_RCCEx_GetPLL2CLKFreq+0x82>
      {

        divm = LL_RCC_PLL2_GetM();
3418cb8e:	f7fd fa4b 	bl	3418a028 <LL_RCC_PLL2_GetM>
3418cb92:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418cb94:	687b      	ldr	r3, [r7, #4]
3418cb96:	2b00      	cmp	r3, #0
3418cb98:	d021      	beq.n	3418cbde <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
3418cb9a:	f7fd fa35 	bl	3418a008 <LL_RCC_PLL2_GetN>
3418cb9e:	4605      	mov	r5, r0
3418cba0:	f7fd fa86 	bl	3418a0b0 <LL_RCC_PLL2_GetFRACN>
3418cba4:	4606      	mov	r6, r0
3418cba6:	f7fd fa4f 	bl	3418a048 <LL_RCC_PLL2_GetP1>
3418cbaa:	4604      	mov	r4, r0
3418cbac:	f7fd fa5c 	bl	3418a068 <LL_RCC_PLL2_GetP2>
3418cbb0:	4603      	mov	r3, r0
3418cbb2:	9301      	str	r3, [sp, #4]
3418cbb4:	9400      	str	r4, [sp, #0]
3418cbb6:	4633      	mov	r3, r6
3418cbb8:	462a      	mov	r2, r5
3418cbba:	6879      	ldr	r1, [r7, #4]
3418cbbc:	68b8      	ldr	r0, [r7, #8]
3418cbbe:	f000 f8fd 	bl	3418cdbc <RCCEx_CalcPLLFreq>
3418cbc2:	60f8      	str	r0, [r7, #12]
3418cbc4:	e00b      	b.n	3418cbde <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
3418cbc6:	f7fd fa0b 	bl	34189fe0 <LL_RCC_PLL2_IsEnabledBypass>
3418cbca:	4603      	mov	r3, r0
3418cbcc:	2b00      	cmp	r3, #0
3418cbce:	d006      	beq.n	3418cbde <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3418cbd0:	f7fd f9e4 	bl	34189f9c <LL_RCC_PLL2_GetSource>
3418cbd4:	4603      	mov	r3, r0
3418cbd6:	4618      	mov	r0, r3
3418cbd8:	f000 f892 	bl	3418cd00 <RCCEx_GetPLLSourceFreq>
3418cbdc:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418cbde:	68fb      	ldr	r3, [r7, #12]
}
3418cbe0:	4618      	mov	r0, r3
3418cbe2:	3714      	adds	r7, #20
3418cbe4:	46bd      	mov	sp, r7
3418cbe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418cbe8 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
3418cbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
3418cbea:	b087      	sub	sp, #28
3418cbec:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418cbee:	2300      	movs	r3, #0
3418cbf0:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
3418cbf2:	f7fd fa79 	bl	3418a0e8 <LL_RCC_PLL3_IsReady>
3418cbf6:	4603      	mov	r3, r0
3418cbf8:	2b00      	cmp	r3, #0
3418cbfa:	d02a      	beq.n	3418cc52 <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
3418cbfc:	f7fd fadc 	bl	3418a1b8 <LL_RCC_PLL3P_IsEnabled>
3418cc00:	4603      	mov	r3, r0
3418cc02:	2b00      	cmp	r3, #0
3418cc04:	d031      	beq.n	3418cc6a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418cc06:	f7fd fa61 	bl	3418a0cc <LL_RCC_PLL3_GetSource>
3418cc0a:	4603      	mov	r3, r0
3418cc0c:	4618      	mov	r0, r3
3418cc0e:	f000 f877 	bl	3418cd00 <RCCEx_GetPLLSourceFreq>
3418cc12:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418cc14:	68bb      	ldr	r3, [r7, #8]
3418cc16:	2b00      	cmp	r3, #0
3418cc18:	d027      	beq.n	3418cc6a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
      {
        divm = LL_RCC_PLL3_GetM();
3418cc1a:	f7fd fa9d 	bl	3418a158 <LL_RCC_PLL3_GetM>
3418cc1e:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418cc20:	687b      	ldr	r3, [r7, #4]
3418cc22:	2b00      	cmp	r3, #0
3418cc24:	d021      	beq.n	3418cc6a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
3418cc26:	f7fd fa87 	bl	3418a138 <LL_RCC_PLL3_GetN>
3418cc2a:	4605      	mov	r5, r0
3418cc2c:	f7fd fad8 	bl	3418a1e0 <LL_RCC_PLL3_GetFRACN>
3418cc30:	4606      	mov	r6, r0
3418cc32:	f7fd faa1 	bl	3418a178 <LL_RCC_PLL3_GetP1>
3418cc36:	4604      	mov	r4, r0
3418cc38:	f7fd faae 	bl	3418a198 <LL_RCC_PLL3_GetP2>
3418cc3c:	4603      	mov	r3, r0
3418cc3e:	9301      	str	r3, [sp, #4]
3418cc40:	9400      	str	r4, [sp, #0]
3418cc42:	4633      	mov	r3, r6
3418cc44:	462a      	mov	r2, r5
3418cc46:	6879      	ldr	r1, [r7, #4]
3418cc48:	68b8      	ldr	r0, [r7, #8]
3418cc4a:	f000 f8b7 	bl	3418cdbc <RCCEx_CalcPLLFreq>
3418cc4e:	60f8      	str	r0, [r7, #12]
3418cc50:	e00b      	b.n	3418cc6a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
3418cc52:	f7fd fa5d 	bl	3418a110 <LL_RCC_PLL3_IsEnabledBypass>
3418cc56:	4603      	mov	r3, r0
3418cc58:	2b00      	cmp	r3, #0
3418cc5a:	d006      	beq.n	3418cc6a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418cc5c:	f7fd fa36 	bl	3418a0cc <LL_RCC_PLL3_GetSource>
3418cc60:	4603      	mov	r3, r0
3418cc62:	4618      	mov	r0, r3
3418cc64:	f000 f84c 	bl	3418cd00 <RCCEx_GetPLLSourceFreq>
3418cc68:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418cc6a:	68fb      	ldr	r3, [r7, #12]
}
3418cc6c:	4618      	mov	r0, r3
3418cc6e:	3714      	adds	r7, #20
3418cc70:	46bd      	mov	sp, r7
3418cc72:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418cc74 <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
3418cc74:	b5f0      	push	{r4, r5, r6, r7, lr}
3418cc76:	b087      	sub	sp, #28
3418cc78:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418cc7a:	2300      	movs	r3, #0
3418cc7c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
3418cc7e:	f7fd facb 	bl	3418a218 <LL_RCC_PLL4_IsReady>
3418cc82:	4603      	mov	r3, r0
3418cc84:	2b00      	cmp	r3, #0
3418cc86:	d02a      	beq.n	3418ccde <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
3418cc88:	f7fd fb2e 	bl	3418a2e8 <LL_RCC_PLL4P_IsEnabled>
3418cc8c:	4603      	mov	r3, r0
3418cc8e:	2b00      	cmp	r3, #0
3418cc90:	d031      	beq.n	3418ccf6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3418cc92:	f7fd fab3 	bl	3418a1fc <LL_RCC_PLL4_GetSource>
3418cc96:	4603      	mov	r3, r0
3418cc98:	4618      	mov	r0, r3
3418cc9a:	f000 f831 	bl	3418cd00 <RCCEx_GetPLLSourceFreq>
3418cc9e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418cca0:	68bb      	ldr	r3, [r7, #8]
3418cca2:	2b00      	cmp	r3, #0
3418cca4:	d027      	beq.n	3418ccf6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
      {

        divm = LL_RCC_PLL4_GetM();
3418cca6:	f7fd faef 	bl	3418a288 <LL_RCC_PLL4_GetM>
3418ccaa:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418ccac:	687b      	ldr	r3, [r7, #4]
3418ccae:	2b00      	cmp	r3, #0
3418ccb0:	d021      	beq.n	3418ccf6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
3418ccb2:	f7fd fad9 	bl	3418a268 <LL_RCC_PLL4_GetN>
3418ccb6:	4605      	mov	r5, r0
3418ccb8:	f7fd fb2a 	bl	3418a310 <LL_RCC_PLL4_GetFRACN>
3418ccbc:	4606      	mov	r6, r0
3418ccbe:	f7fd faf3 	bl	3418a2a8 <LL_RCC_PLL4_GetP1>
3418ccc2:	4604      	mov	r4, r0
3418ccc4:	f7fd fb00 	bl	3418a2c8 <LL_RCC_PLL4_GetP2>
3418ccc8:	4603      	mov	r3, r0
3418ccca:	9301      	str	r3, [sp, #4]
3418cccc:	9400      	str	r4, [sp, #0]
3418ccce:	4633      	mov	r3, r6
3418ccd0:	462a      	mov	r2, r5
3418ccd2:	6879      	ldr	r1, [r7, #4]
3418ccd4:	68b8      	ldr	r0, [r7, #8]
3418ccd6:	f000 f871 	bl	3418cdbc <RCCEx_CalcPLLFreq>
3418ccda:	60f8      	str	r0, [r7, #12]
3418ccdc:	e00b      	b.n	3418ccf6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
3418ccde:	f7fd faaf 	bl	3418a240 <LL_RCC_PLL4_IsEnabledBypass>
3418cce2:	4603      	mov	r3, r0
3418cce4:	2b00      	cmp	r3, #0
3418cce6:	d006      	beq.n	3418ccf6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3418cce8:	f7fd fa88 	bl	3418a1fc <LL_RCC_PLL4_GetSource>
3418ccec:	4603      	mov	r3, r0
3418ccee:	4618      	mov	r0, r3
3418ccf0:	f000 f806 	bl	3418cd00 <RCCEx_GetPLLSourceFreq>
3418ccf4:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418ccf6:	68fb      	ldr	r3, [r7, #12]
}
3418ccf8:	4618      	mov	r0, r3
3418ccfa:	3714      	adds	r7, #20
3418ccfc:	46bd      	mov	sp, r7
3418ccfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418cd00 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
3418cd00:	b580      	push	{r7, lr}
3418cd02:	b084      	sub	sp, #16
3418cd04:	af00      	add	r7, sp, #0
3418cd06:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
3418cd08:	2300      	movs	r3, #0
3418cd0a:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
3418cd0c:	687b      	ldr	r3, [r7, #4]
3418cd0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cd12:	d039      	beq.n	3418cd88 <RCCEx_GetPLLSourceFreq+0x88>
3418cd14:	687b      	ldr	r3, [r7, #4]
3418cd16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cd1a:	d838      	bhi.n	3418cd8e <RCCEx_GetPLLSourceFreq+0x8e>
3418cd1c:	687b      	ldr	r3, [r7, #4]
3418cd1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cd22:	d029      	beq.n	3418cd78 <RCCEx_GetPLLSourceFreq+0x78>
3418cd24:	687b      	ldr	r3, [r7, #4]
3418cd26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cd2a:	d830      	bhi.n	3418cd8e <RCCEx_GetPLLSourceFreq+0x8e>
3418cd2c:	687b      	ldr	r3, [r7, #4]
3418cd2e:	2b00      	cmp	r3, #0
3418cd30:	d004      	beq.n	3418cd3c <RCCEx_GetPLLSourceFreq+0x3c>
3418cd32:	687b      	ldr	r3, [r7, #4]
3418cd34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418cd38:	d00e      	beq.n	3418cd58 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
3418cd3a:	e028      	b.n	3418cd8e <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
3418cd3c:	f7fc fe26 	bl	3418998c <LL_RCC_HSI_IsReady>
3418cd40:	4603      	mov	r3, r0
3418cd42:	2b00      	cmp	r3, #0
3418cd44:	d025      	beq.n	3418cd92 <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418cd46:	f7fc fe33 	bl	341899b0 <LL_RCC_HSI_GetDivider>
3418cd4a:	4603      	mov	r3, r0
3418cd4c:	09db      	lsrs	r3, r3, #7
3418cd4e:	4a16      	ldr	r2, [pc, #88]	@ (3418cda8 <RCCEx_GetPLLSourceFreq+0xa8>)
3418cd50:	fa22 f303 	lsr.w	r3, r2, r3
3418cd54:	60fb      	str	r3, [r7, #12]
      break;
3418cd56:	e01c      	b.n	3418cd92 <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
3418cd58:	f7fc fe38 	bl	341899cc <LL_RCC_MSI_IsReady>
3418cd5c:	4603      	mov	r3, r0
3418cd5e:	2b00      	cmp	r3, #0
3418cd60:	d019      	beq.n	3418cd96 <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
3418cd62:	f7fc fe45 	bl	341899f0 <LL_RCC_MSI_GetFrequency>
3418cd66:	4603      	mov	r3, r0
3418cd68:	2b00      	cmp	r3, #0
3418cd6a:	d102      	bne.n	3418cd72 <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
3418cd6c:	4b0f      	ldr	r3, [pc, #60]	@ (3418cdac <RCCEx_GetPLLSourceFreq+0xac>)
3418cd6e:	60fb      	str	r3, [r7, #12]
      break;
3418cd70:	e011      	b.n	3418cd96 <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
3418cd72:	4b0f      	ldr	r3, [pc, #60]	@ (3418cdb0 <RCCEx_GetPLLSourceFreq+0xb0>)
3418cd74:	60fb      	str	r3, [r7, #12]
      break;
3418cd76:	e00e      	b.n	3418cd96 <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
3418cd78:	f7fc fdf6 	bl	34189968 <LL_RCC_HSE_IsReady>
3418cd7c:	4603      	mov	r3, r0
3418cd7e:	2b00      	cmp	r3, #0
3418cd80:	d00b      	beq.n	3418cd9a <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
3418cd82:	4b0c      	ldr	r3, [pc, #48]	@ (3418cdb4 <RCCEx_GetPLLSourceFreq+0xb4>)
3418cd84:	60fb      	str	r3, [r7, #12]
      break;
3418cd86:	e008      	b.n	3418cd9a <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
3418cd88:	4b0b      	ldr	r3, [pc, #44]	@ (3418cdb8 <RCCEx_GetPLLSourceFreq+0xb8>)
3418cd8a:	60fb      	str	r3, [r7, #12]
      break;
3418cd8c:	e006      	b.n	3418cd9c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418cd8e:	bf00      	nop
3418cd90:	e004      	b.n	3418cd9c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418cd92:	bf00      	nop
3418cd94:	e002      	b.n	3418cd9c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418cd96:	bf00      	nop
3418cd98:	e000      	b.n	3418cd9c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418cd9a:	bf00      	nop
  }

  return pllinputfreq;
3418cd9c:	68fb      	ldr	r3, [r7, #12]
}
3418cd9e:	4618      	mov	r0, r3
3418cda0:	3710      	adds	r7, #16
3418cda2:	46bd      	mov	sp, r7
3418cda4:	bd80      	pop	{r7, pc}
3418cda6:	bf00      	nop
3418cda8:	03d09000 	.word	0x03d09000
3418cdac:	003d0900 	.word	0x003d0900
3418cdb0:	00f42400 	.word	0x00f42400
3418cdb4:	02dc6c00 	.word	0x02dc6c00
3418cdb8:	00bb8000 	.word	0x00bb8000

3418cdbc <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
3418cdbc:	b480      	push	{r7}
3418cdbe:	b087      	sub	sp, #28
3418cdc0:	af00      	add	r7, sp, #0
3418cdc2:	60f8      	str	r0, [r7, #12]
3418cdc4:	60b9      	str	r1, [r7, #8]
3418cdc6:	607a      	str	r2, [r7, #4]
3418cdc8:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
3418cdca:	68fb      	ldr	r3, [r7, #12]
3418cdcc:	ee07 3a90 	vmov	s15, r3
3418cdd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418cdd4:	687b      	ldr	r3, [r7, #4]
3418cdd6:	ee07 3a90 	vmov	s15, r3
3418cdda:	eef8 6a67 	vcvt.f32.u32	s13, s15
3418cdde:	683b      	ldr	r3, [r7, #0]
3418cde0:	ee07 3a90 	vmov	s15, r3
3418cde4:	eeb8 6a67 	vcvt.f32.u32	s12, s15
3418cde8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 3418ce50 <RCCEx_CalcPLLFreq+0x94>
3418cdec:	eec6 7a25 	vdiv.f32	s15, s12, s11
3418cdf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
3418cdf4:	ee67 6a27 	vmul.f32	s13, s14, s15
3418cdf8:	68bb      	ldr	r3, [r7, #8]
3418cdfa:	ee07 3a90 	vmov	s15, r3
3418cdfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418ce02:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418ce06:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
3418ce0a:	6a3b      	ldr	r3, [r7, #32]
3418ce0c:	ee07 3a90 	vmov	s15, r3
3418ce10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418ce14:	edd7 6a05 	vldr	s13, [r7, #20]
3418ce18:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418ce1c:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
3418ce20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418ce22:	ee07 3a90 	vmov	s15, r3
3418ce26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418ce2a:	edd7 6a05 	vldr	s13, [r7, #20]
3418ce2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418ce32:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
3418ce36:	edd7 7a05 	vldr	s15, [r7, #20]
3418ce3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
3418ce3e:	ee17 3a90 	vmov	r3, s15
}
3418ce42:	4618      	mov	r0, r3
3418ce44:	371c      	adds	r7, #28
3418ce46:	46bd      	mov	sp, r7
3418ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ce4c:	4770      	bx	lr
3418ce4e:	bf00      	nop
3418ce50:	4b800000 	.word	0x4b800000

3418ce54 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
3418ce54:	b480      	push	{r7}
3418ce56:	b089      	sub	sp, #36	@ 0x24
3418ce58:	af00      	add	r7, sp, #0
3418ce5a:	6078      	str	r0, [r7, #4]
3418ce5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));

  master_cid = POSITION_VAL(pConfig->MasterCID);
3418ce5e:	683b      	ldr	r3, [r7, #0]
3418ce60:	681b      	ldr	r3, [r3, #0]
3418ce62:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3418ce64:	693b      	ldr	r3, [r7, #16]
3418ce66:	fa93 f3a3 	rbit	r3, r3
3418ce6a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
3418ce6c:	68fb      	ldr	r3, [r7, #12]
3418ce6e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
3418ce70:	697b      	ldr	r3, [r7, #20]
3418ce72:	2b00      	cmp	r3, #0
3418ce74:	d101      	bne.n	3418ce7a <HAL_RIF_RIMC_ConfigMasterAttributes+0x26>
  {
    return 32U;
3418ce76:	2320      	movs	r3, #32
3418ce78:	e003      	b.n	3418ce82 <HAL_RIF_RIMC_ConfigMasterAttributes+0x2e>
  }
  return __builtin_clz(value);
3418ce7a:	697b      	ldr	r3, [r7, #20]
3418ce7c:	fab3 f383 	clz	r3, r3
3418ce80:	b2db      	uxtb	r3, r3
3418ce82:	61fb      	str	r3, [r7, #28]
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
3418ce84:	4a10      	ldr	r2, [pc, #64]	@ (3418cec8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x74>)
3418ce86:	687b      	ldr	r3, [r7, #4]
3418ce88:	f503 7341 	add.w	r3, r3, #772	@ 0x304
3418ce8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418ce90:	61bb      	str	r3, [r7, #24]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
3418ce92:	69bb      	ldr	r3, [r7, #24]
3418ce94:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
3418ce98:	61bb      	str	r3, [r7, #24]
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3418ce9a:	69fb      	ldr	r3, [r7, #28]
3418ce9c:	011a      	lsls	r2, r3, #4
3418ce9e:	683b      	ldr	r3, [r7, #0]
3418cea0:	685b      	ldr	r3, [r3, #4]
3418cea2:	021b      	lsls	r3, r3, #8
3418cea4:	4313      	orrs	r3, r2
3418cea6:	69ba      	ldr	r2, [r7, #24]
3418cea8:	4313      	orrs	r3, r2
3418ceaa:	61bb      	str	r3, [r7, #24]
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
3418ceac:	4906      	ldr	r1, [pc, #24]	@ (3418cec8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x74>)
3418ceae:	687b      	ldr	r3, [r7, #4]
3418ceb0:	f503 7341 	add.w	r3, r3, #772	@ 0x304
3418ceb4:	69ba      	ldr	r2, [r7, #24]
3418ceb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
3418ceba:	bf00      	nop
3418cebc:	3724      	adds	r7, #36	@ 0x24
3418cebe:	46bd      	mov	sp, r7
3418cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cec4:	4770      	bx	lr
3418cec6:	bf00      	nop
3418cec8:	54024000 	.word	0x54024000

3418cecc <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  * @param  SecPriv specifies the security and privilege attributes of the peripheral.
  *         This parameter can be one or a combination of @ref RIF_SEC_PRIV
  * @retval None
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
3418cecc:	b480      	push	{r7}
3418cece:	b085      	sub	sp, #20
3418ced0:	af00      	add	r7, sp, #0
3418ced2:	6078      	str	r0, [r7, #4]
3418ced4:	6039      	str	r1, [r7, #0]
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3418ced6:	4a25      	ldr	r2, [pc, #148]	@ (3418cf6c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
3418ced8:	687b      	ldr	r3, [r7, #4]
3418ceda:	0f1b      	lsrs	r3, r3, #28
3418cedc:	3304      	adds	r3, #4
3418cede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418cee2:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3418cee4:	687b      	ldr	r3, [r7, #4]
3418cee6:	f003 031f 	and.w	r3, r3, #31
3418ceea:	2201      	movs	r2, #1
3418ceec:	fa02 f303 	lsl.w	r3, r2, r3
3418cef0:	43da      	mvns	r2, r3
3418cef2:	68fb      	ldr	r3, [r7, #12]
3418cef4:	4013      	ands	r3, r2
3418cef6:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3418cef8:	683b      	ldr	r3, [r7, #0]
3418cefa:	f003 0201 	and.w	r2, r3, #1
3418cefe:	687b      	ldr	r3, [r7, #4]
3418cf00:	f003 031f 	and.w	r3, r3, #31
3418cf04:	409a      	lsls	r2, r3
3418cf06:	68fb      	ldr	r3, [r7, #12]
3418cf08:	4313      	orrs	r3, r2
3418cf0a:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3418cf0c:	4917      	ldr	r1, [pc, #92]	@ (3418cf6c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
3418cf0e:	687b      	ldr	r3, [r7, #4]
3418cf10:	0f1b      	lsrs	r3, r3, #28
3418cf12:	68fa      	ldr	r2, [r7, #12]
3418cf14:	3304      	adds	r3, #4
3418cf16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3418cf1a:	4a14      	ldr	r2, [pc, #80]	@ (3418cf6c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
3418cf1c:	687b      	ldr	r3, [r7, #4]
3418cf1e:	0f1b      	lsrs	r3, r3, #28
3418cf20:	330c      	adds	r3, #12
3418cf22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418cf26:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3418cf28:	687b      	ldr	r3, [r7, #4]
3418cf2a:	f003 031f 	and.w	r3, r3, #31
3418cf2e:	2201      	movs	r2, #1
3418cf30:	fa02 f303 	lsl.w	r3, r2, r3
3418cf34:	43da      	mvns	r2, r3
3418cf36:	68fb      	ldr	r3, [r7, #12]
3418cf38:	4013      	ands	r3, r2
3418cf3a:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3418cf3c:	683b      	ldr	r3, [r7, #0]
3418cf3e:	085b      	lsrs	r3, r3, #1
3418cf40:	f003 0201 	and.w	r2, r3, #1
3418cf44:	687b      	ldr	r3, [r7, #4]
3418cf46:	f003 031f 	and.w	r3, r3, #31
3418cf4a:	409a      	lsls	r2, r3
3418cf4c:	68fb      	ldr	r3, [r7, #12]
3418cf4e:	4313      	orrs	r3, r2
3418cf50:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3418cf52:	4906      	ldr	r1, [pc, #24]	@ (3418cf6c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
3418cf54:	687b      	ldr	r3, [r7, #4]
3418cf56:	0f1b      	lsrs	r3, r3, #28
3418cf58:	68fa      	ldr	r2, [r7, #12]
3418cf5a:	330c      	adds	r3, #12
3418cf5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
3418cf60:	bf00      	nop
3418cf62:	3714      	adds	r7, #20
3418cf64:	46bd      	mov	sp, r7
3418cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cf6a:	4770      	bx	lr
3418cf6c:	54024000 	.word	0x54024000

3418cf70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
3418cf70:	b580      	push	{r7, lr}
3418cf72:	b08a      	sub	sp, #40	@ 0x28
3418cf74:	af02      	add	r7, sp, #8
3418cf76:	60f8      	str	r0, [r7, #12]
3418cf78:	60b9      	str	r1, [r7, #8]
3418cf7a:	603b      	str	r3, [r7, #0]
3418cf7c:	4613      	mov	r3, r2
3418cf7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
3418cf80:	68fb      	ldr	r3, [r7, #12]
3418cf82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418cf86:	2b20      	cmp	r3, #32
3418cf88:	d17b      	bne.n	3418d082 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
3418cf8a:	68bb      	ldr	r3, [r7, #8]
3418cf8c:	2b00      	cmp	r3, #0
3418cf8e:	d002      	beq.n	3418cf96 <HAL_UART_Transmit+0x26>
3418cf90:	88fb      	ldrh	r3, [r7, #6]
3418cf92:	2b00      	cmp	r3, #0
3418cf94:	d101      	bne.n	3418cf9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
3418cf96:	2301      	movs	r3, #1
3418cf98:	e074      	b.n	3418d084 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
3418cf9a:	68fb      	ldr	r3, [r7, #12]
3418cf9c:	2200      	movs	r2, #0
3418cf9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3418cfa2:	68fb      	ldr	r3, [r7, #12]
3418cfa4:	2221      	movs	r2, #33	@ 0x21
3418cfa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
3418cfaa:	f7f5 fd47 	bl	34182a3c <HAL_GetTick>
3418cfae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
3418cfb0:	68fb      	ldr	r3, [r7, #12]
3418cfb2:	88fa      	ldrh	r2, [r7, #6]
3418cfb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
3418cfb8:	68fb      	ldr	r3, [r7, #12]
3418cfba:	88fa      	ldrh	r2, [r7, #6]
3418cfbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3418cfc0:	68fb      	ldr	r3, [r7, #12]
3418cfc2:	689b      	ldr	r3, [r3, #8]
3418cfc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418cfc8:	d108      	bne.n	3418cfdc <HAL_UART_Transmit+0x6c>
3418cfca:	68fb      	ldr	r3, [r7, #12]
3418cfcc:	691b      	ldr	r3, [r3, #16]
3418cfce:	2b00      	cmp	r3, #0
3418cfd0:	d104      	bne.n	3418cfdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
3418cfd2:	2300      	movs	r3, #0
3418cfd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
3418cfd6:	68bb      	ldr	r3, [r7, #8]
3418cfd8:	61bb      	str	r3, [r7, #24]
3418cfda:	e003      	b.n	3418cfe4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
3418cfdc:	68bb      	ldr	r3, [r7, #8]
3418cfde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
3418cfe0:	2300      	movs	r3, #0
3418cfe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
3418cfe4:	e030      	b.n	3418d048 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3418cfe6:	683b      	ldr	r3, [r7, #0]
3418cfe8:	9300      	str	r3, [sp, #0]
3418cfea:	697b      	ldr	r3, [r7, #20]
3418cfec:	2200      	movs	r2, #0
3418cfee:	2180      	movs	r1, #128	@ 0x80
3418cff0:	68f8      	ldr	r0, [r7, #12]
3418cff2:	f000 f84b 	bl	3418d08c <UART_WaitOnFlagUntilTimeout>
3418cff6:	4603      	mov	r3, r0
3418cff8:	2b00      	cmp	r3, #0
3418cffa:	d005      	beq.n	3418d008 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
3418cffc:	68fb      	ldr	r3, [r7, #12]
3418cffe:	2220      	movs	r2, #32
3418d000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
3418d004:	2303      	movs	r3, #3
3418d006:	e03d      	b.n	3418d084 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
3418d008:	69fb      	ldr	r3, [r7, #28]
3418d00a:	2b00      	cmp	r3, #0
3418d00c:	d10b      	bne.n	3418d026 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3418d00e:	69bb      	ldr	r3, [r7, #24]
3418d010:	881b      	ldrh	r3, [r3, #0]
3418d012:	461a      	mov	r2, r3
3418d014:	68fb      	ldr	r3, [r7, #12]
3418d016:	681b      	ldr	r3, [r3, #0]
3418d018:	f3c2 0208 	ubfx	r2, r2, #0, #9
3418d01c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
3418d01e:	69bb      	ldr	r3, [r7, #24]
3418d020:	3302      	adds	r3, #2
3418d022:	61bb      	str	r3, [r7, #24]
3418d024:	e007      	b.n	3418d036 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3418d026:	69fb      	ldr	r3, [r7, #28]
3418d028:	781a      	ldrb	r2, [r3, #0]
3418d02a:	68fb      	ldr	r3, [r7, #12]
3418d02c:	681b      	ldr	r3, [r3, #0]
3418d02e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
3418d030:	69fb      	ldr	r3, [r7, #28]
3418d032:	3301      	adds	r3, #1
3418d034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
3418d036:	68fb      	ldr	r3, [r7, #12]
3418d038:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3418d03c:	b29b      	uxth	r3, r3
3418d03e:	3b01      	subs	r3, #1
3418d040:	b29a      	uxth	r2, r3
3418d042:	68fb      	ldr	r3, [r7, #12]
3418d044:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
3418d048:	68fb      	ldr	r3, [r7, #12]
3418d04a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3418d04e:	b29b      	uxth	r3, r3
3418d050:	2b00      	cmp	r3, #0
3418d052:	d1c8      	bne.n	3418cfe6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3418d054:	683b      	ldr	r3, [r7, #0]
3418d056:	9300      	str	r3, [sp, #0]
3418d058:	697b      	ldr	r3, [r7, #20]
3418d05a:	2200      	movs	r2, #0
3418d05c:	2140      	movs	r1, #64	@ 0x40
3418d05e:	68f8      	ldr	r0, [r7, #12]
3418d060:	f000 f814 	bl	3418d08c <UART_WaitOnFlagUntilTimeout>
3418d064:	4603      	mov	r3, r0
3418d066:	2b00      	cmp	r3, #0
3418d068:	d005      	beq.n	3418d076 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
3418d06a:	68fb      	ldr	r3, [r7, #12]
3418d06c:	2220      	movs	r2, #32
3418d06e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
3418d072:	2303      	movs	r3, #3
3418d074:	e006      	b.n	3418d084 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
3418d076:	68fb      	ldr	r3, [r7, #12]
3418d078:	2220      	movs	r2, #32
3418d07a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
3418d07e:	2300      	movs	r3, #0
3418d080:	e000      	b.n	3418d084 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
3418d082:	2302      	movs	r3, #2
  }
}
3418d084:	4618      	mov	r0, r3
3418d086:	3720      	adds	r7, #32
3418d088:	46bd      	mov	sp, r7
3418d08a:	bd80      	pop	{r7, pc}

3418d08c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
3418d08c:	b580      	push	{r7, lr}
3418d08e:	b084      	sub	sp, #16
3418d090:	af00      	add	r7, sp, #0
3418d092:	60f8      	str	r0, [r7, #12]
3418d094:	60b9      	str	r1, [r7, #8]
3418d096:	603b      	str	r3, [r7, #0]
3418d098:	4613      	mov	r3, r2
3418d09a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3418d09c:	e04f      	b.n	3418d13e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3418d09e:	69bb      	ldr	r3, [r7, #24]
3418d0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
3418d0a4:	d04b      	beq.n	3418d13e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418d0a6:	f7f5 fcc9 	bl	34182a3c <HAL_GetTick>
3418d0aa:	4602      	mov	r2, r0
3418d0ac:	683b      	ldr	r3, [r7, #0]
3418d0ae:	1ad3      	subs	r3, r2, r3
3418d0b0:	69ba      	ldr	r2, [r7, #24]
3418d0b2:	429a      	cmp	r2, r3
3418d0b4:	d302      	bcc.n	3418d0bc <UART_WaitOnFlagUntilTimeout+0x30>
3418d0b6:	69bb      	ldr	r3, [r7, #24]
3418d0b8:	2b00      	cmp	r3, #0
3418d0ba:	d101      	bne.n	3418d0c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
3418d0bc:	2303      	movs	r3, #3
3418d0be:	e04e      	b.n	3418d15e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3418d0c0:	68fb      	ldr	r3, [r7, #12]
3418d0c2:	681b      	ldr	r3, [r3, #0]
3418d0c4:	681b      	ldr	r3, [r3, #0]
3418d0c6:	f003 0304 	and.w	r3, r3, #4
3418d0ca:	2b00      	cmp	r3, #0
3418d0cc:	d037      	beq.n	3418d13e <UART_WaitOnFlagUntilTimeout+0xb2>
3418d0ce:	68bb      	ldr	r3, [r7, #8]
3418d0d0:	2b80      	cmp	r3, #128	@ 0x80
3418d0d2:	d034      	beq.n	3418d13e <UART_WaitOnFlagUntilTimeout+0xb2>
3418d0d4:	68bb      	ldr	r3, [r7, #8]
3418d0d6:	2b40      	cmp	r3, #64	@ 0x40
3418d0d8:	d031      	beq.n	3418d13e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3418d0da:	68fb      	ldr	r3, [r7, #12]
3418d0dc:	681b      	ldr	r3, [r3, #0]
3418d0de:	69db      	ldr	r3, [r3, #28]
3418d0e0:	f003 0308 	and.w	r3, r3, #8
3418d0e4:	2b08      	cmp	r3, #8
3418d0e6:	d110      	bne.n	3418d10a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3418d0e8:	68fb      	ldr	r3, [r7, #12]
3418d0ea:	681b      	ldr	r3, [r3, #0]
3418d0ec:	2208      	movs	r2, #8
3418d0ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3418d0f0:	68f8      	ldr	r0, [r7, #12]
3418d0f2:	f000 f838 	bl	3418d166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
3418d0f6:	68fb      	ldr	r3, [r7, #12]
3418d0f8:	2208      	movs	r2, #8
3418d0fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3418d0fe:	68fb      	ldr	r3, [r7, #12]
3418d100:	2200      	movs	r2, #0
3418d102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
3418d106:	2301      	movs	r3, #1
3418d108:	e029      	b.n	3418d15e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3418d10a:	68fb      	ldr	r3, [r7, #12]
3418d10c:	681b      	ldr	r3, [r3, #0]
3418d10e:	69db      	ldr	r3, [r3, #28]
3418d110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418d114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418d118:	d111      	bne.n	3418d13e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3418d11a:	68fb      	ldr	r3, [r7, #12]
3418d11c:	681b      	ldr	r3, [r3, #0]
3418d11e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418d122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3418d124:	68f8      	ldr	r0, [r7, #12]
3418d126:	f000 f81e 	bl	3418d166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
3418d12a:	68fb      	ldr	r3, [r7, #12]
3418d12c:	2220      	movs	r2, #32
3418d12e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3418d132:	68fb      	ldr	r3, [r7, #12]
3418d134:	2200      	movs	r2, #0
3418d136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
3418d13a:	2303      	movs	r3, #3
3418d13c:	e00f      	b.n	3418d15e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3418d13e:	68fb      	ldr	r3, [r7, #12]
3418d140:	681b      	ldr	r3, [r3, #0]
3418d142:	69da      	ldr	r2, [r3, #28]
3418d144:	68bb      	ldr	r3, [r7, #8]
3418d146:	4013      	ands	r3, r2
3418d148:	68ba      	ldr	r2, [r7, #8]
3418d14a:	429a      	cmp	r2, r3
3418d14c:	bf0c      	ite	eq
3418d14e:	2301      	moveq	r3, #1
3418d150:	2300      	movne	r3, #0
3418d152:	b2db      	uxtb	r3, r3
3418d154:	461a      	mov	r2, r3
3418d156:	79fb      	ldrb	r3, [r7, #7]
3418d158:	429a      	cmp	r2, r3
3418d15a:	d0a0      	beq.n	3418d09e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
3418d15c:	2300      	movs	r3, #0
}
3418d15e:	4618      	mov	r0, r3
3418d160:	3710      	adds	r7, #16
3418d162:	46bd      	mov	sp, r7
3418d164:	bd80      	pop	{r7, pc}

3418d166 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3418d166:	b480      	push	{r7}
3418d168:	b095      	sub	sp, #84	@ 0x54
3418d16a:	af00      	add	r7, sp, #0
3418d16c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3418d16e:	687b      	ldr	r3, [r7, #4]
3418d170:	681b      	ldr	r3, [r3, #0]
3418d172:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418d174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418d176:	e853 3f00 	ldrex	r3, [r3]
3418d17a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
3418d17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d17e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3418d182:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418d184:	687b      	ldr	r3, [r7, #4]
3418d186:	681b      	ldr	r3, [r3, #0]
3418d188:	461a      	mov	r2, r3
3418d18a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418d18c:	643b      	str	r3, [r7, #64]	@ 0x40
3418d18e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418d190:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418d192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
3418d194:	e841 2300 	strex	r3, r2, [r1]
3418d198:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
3418d19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418d19c:	2b00      	cmp	r3, #0
3418d19e:	d1e6      	bne.n	3418d16e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3418d1a0:	687b      	ldr	r3, [r7, #4]
3418d1a2:	681b      	ldr	r3, [r3, #0]
3418d1a4:	3308      	adds	r3, #8
3418d1a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418d1a8:	6a3b      	ldr	r3, [r7, #32]
3418d1aa:	e853 3f00 	ldrex	r3, [r3]
3418d1ae:	61fb      	str	r3, [r7, #28]
   return(result);
3418d1b0:	69fb      	ldr	r3, [r7, #28]
3418d1b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
3418d1b6:	f023 0301 	bic.w	r3, r3, #1
3418d1ba:	64bb      	str	r3, [r7, #72]	@ 0x48
3418d1bc:	687b      	ldr	r3, [r7, #4]
3418d1be:	681b      	ldr	r3, [r3, #0]
3418d1c0:	3308      	adds	r3, #8
3418d1c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3418d1c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
3418d1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418d1c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418d1ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
3418d1cc:	e841 2300 	strex	r3, r2, [r1]
3418d1d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
3418d1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d1d4:	2b00      	cmp	r3, #0
3418d1d6:	d1e3      	bne.n	3418d1a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3418d1d8:	687b      	ldr	r3, [r7, #4]
3418d1da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418d1dc:	2b01      	cmp	r3, #1
3418d1de:	d118      	bne.n	3418d212 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3418d1e0:	687b      	ldr	r3, [r7, #4]
3418d1e2:	681b      	ldr	r3, [r3, #0]
3418d1e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418d1e6:	68fb      	ldr	r3, [r7, #12]
3418d1e8:	e853 3f00 	ldrex	r3, [r3]
3418d1ec:	60bb      	str	r3, [r7, #8]
   return(result);
3418d1ee:	68bb      	ldr	r3, [r7, #8]
3418d1f0:	f023 0310 	bic.w	r3, r3, #16
3418d1f4:	647b      	str	r3, [r7, #68]	@ 0x44
3418d1f6:	687b      	ldr	r3, [r7, #4]
3418d1f8:	681b      	ldr	r3, [r3, #0]
3418d1fa:	461a      	mov	r2, r3
3418d1fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3418d1fe:	61bb      	str	r3, [r7, #24]
3418d200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418d202:	6979      	ldr	r1, [r7, #20]
3418d204:	69ba      	ldr	r2, [r7, #24]
3418d206:	e841 2300 	strex	r3, r2, [r1]
3418d20a:	613b      	str	r3, [r7, #16]
   return(result);
3418d20c:	693b      	ldr	r3, [r7, #16]
3418d20e:	2b00      	cmp	r3, #0
3418d210:	d1e6      	bne.n	3418d1e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3418d212:	687b      	ldr	r3, [r7, #4]
3418d214:	2220      	movs	r2, #32
3418d216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3418d21a:	687b      	ldr	r3, [r7, #4]
3418d21c:	2200      	movs	r2, #0
3418d21e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3418d220:	687b      	ldr	r3, [r7, #4]
3418d222:	2200      	movs	r2, #0
3418d224:	675a      	str	r2, [r3, #116]	@ 0x74
}
3418d226:	bf00      	nop
3418d228:	3754      	adds	r7, #84	@ 0x54
3418d22a:	46bd      	mov	sp, r7
3418d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d230:	4770      	bx	lr

3418d232 <ISP_Algo_BadPixel_Init>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_BadPixel_Init(void *hIsp, void *pAlgo)
{
3418d232:	b480      	push	{r7}
3418d234:	b083      	sub	sp, #12
3418d236:	af00      	add	r7, sp, #0
3418d238:	6078      	str	r0, [r7, #4]
3418d23a:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */

  ((ISP_AlgoTypeDef *)pAlgo)->state = ISP_ALGO_STATE_INIT;
3418d23c:	683b      	ldr	r3, [r7, #0]
3418d23e:	2200      	movs	r2, #0
3418d240:	705a      	strb	r2, [r3, #1]

  return ISP_OK;
3418d242:	2300      	movs	r3, #0
}
3418d244:	4618      	mov	r0, r3
3418d246:	370c      	adds	r7, #12
3418d248:	46bd      	mov	sp, r7
3418d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d24e:	4770      	bx	lr

3418d250 <ISP_Algo_BadPixel_DeInit>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_BadPixel_DeInit(void *hIsp, void *pAlgo)
{
3418d250:	b480      	push	{r7}
3418d252:	b083      	sub	sp, #12
3418d254:	af00      	add	r7, sp, #0
3418d256:	6078      	str	r0, [r7, #4]
3418d258:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */
  (void)pAlgo; /* unused */

  return ISP_OK;
3418d25a:	2300      	movs	r3, #0
}
3418d25c:	4618      	mov	r0, r3
3418d25e:	370c      	adds	r7, #12
3418d260:	46bd      	mov	sp, r7
3418d262:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d266:	4770      	bx	lr

3418d268 <ISP_Algo_BadPixel_Process>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_BadPixel_Process(void *hIsp, void *pAlgo)
{
3418d268:	b580      	push	{r7, lr}
3418d26a:	b088      	sub	sp, #32
3418d26c:	af00      	add	r7, sp, #0
3418d26e:	6078      	str	r0, [r7, #4]
3418d270:	6039      	str	r1, [r7, #0]
  uint32_t CurrentFrameId;
  ISP_BadPixelTypeDef BadPixelConfig;
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3418d272:	6878      	ldr	r0, [r7, #4]
3418d274:	f002 fd8e 	bl	3418fd94 <ISP_SVC_IQParam_Get>
3418d278:	61f8      	str	r0, [r7, #28]

  if (IQParamConfig->badPixelAlgo.enable == false)
3418d27a:	69fb      	ldr	r3, [r7, #28]
3418d27c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
3418d280:	2b00      	cmp	r3, #0
3418d282:	d101      	bne.n	3418d288 <ISP_Algo_BadPixel_Process+0x20>
  {
    return ISP_OK;
3418d284:	2300      	movs	r3, #0
3418d286:	e069      	b.n	3418d35c <ISP_Algo_BadPixel_Process+0xf4>
  }

  /* Wait for a new frame */
  CurrentFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp);
3418d288:	6878      	ldr	r0, [r7, #4]
3418d28a:	f002 fcce 	bl	3418fc2a <ISP_SVC_Misc_GetMainFrameId>
3418d28e:	61b8      	str	r0, [r7, #24]
  if (CurrentFrameId == LastFrameId)
3418d290:	4b34      	ldr	r3, [pc, #208]	@ (3418d364 <ISP_Algo_BadPixel_Process+0xfc>)
3418d292:	681b      	ldr	r3, [r3, #0]
3418d294:	69ba      	ldr	r2, [r7, #24]
3418d296:	429a      	cmp	r2, r3
3418d298:	d101      	bne.n	3418d29e <ISP_Algo_BadPixel_Process+0x36>
  {
    return ISP_OK;
3418d29a:	2300      	movs	r3, #0
3418d29c:	e05e      	b.n	3418d35c <ISP_Algo_BadPixel_Process+0xf4>
  }
  LastFrameId = CurrentFrameId;
3418d29e:	4a31      	ldr	r2, [pc, #196]	@ (3418d364 <ISP_Algo_BadPixel_Process+0xfc>)
3418d2a0:	69bb      	ldr	r3, [r7, #24]
3418d2a2:	6013      	str	r3, [r2, #0]

  if (Step++ >= 0)
3418d2a4:	4b30      	ldr	r3, [pc, #192]	@ (3418d368 <ISP_Algo_BadPixel_Process+0x100>)
3418d2a6:	f993 3000 	ldrsb.w	r3, [r3]
3418d2aa:	b2da      	uxtb	r2, r3
3418d2ac:	3201      	adds	r2, #1
3418d2ae:	b2d2      	uxtb	r2, r2
3418d2b0:	b251      	sxtb	r1, r2
3418d2b2:	4a2d      	ldr	r2, [pc, #180]	@ (3418d368 <ISP_Algo_BadPixel_Process+0x100>)
3418d2b4:	7011      	strb	r1, [r2, #0]
3418d2b6:	2b00      	cmp	r3, #0
3418d2b8:	db12      	blt.n	3418d2e0 <ISP_Algo_BadPixel_Process+0x78>
  {
    /* Measure the number of bad pixels */
    ret  = ISP_SVC_ISP_GetBadPixel(hIsp, &BadPixelConfig);
3418d2ba:	f107 030c 	add.w	r3, r7, #12
3418d2be:	4619      	mov	r1, r3
3418d2c0:	6878      	ldr	r0, [r7, #4]
3418d2c2:	f002 f960 	bl	3418f586 <ISP_SVC_ISP_GetBadPixel>
3418d2c6:	4603      	mov	r3, r0
3418d2c8:	75fb      	strb	r3, [r7, #23]
    if (ret != ISP_OK)
3418d2ca:	7dfb      	ldrb	r3, [r7, #23]
3418d2cc:	2b00      	cmp	r3, #0
3418d2ce:	d001      	beq.n	3418d2d4 <ISP_Algo_BadPixel_Process+0x6c>
    {
      return ret;
3418d2d0:	7dfb      	ldrb	r3, [r7, #23]
3418d2d2:	e043      	b.n	3418d35c <ISP_Algo_BadPixel_Process+0xf4>
    }
    BadPixelCount += BadPixelConfig.count;
3418d2d4:	693a      	ldr	r2, [r7, #16]
3418d2d6:	4b25      	ldr	r3, [pc, #148]	@ (3418d36c <ISP_Algo_BadPixel_Process+0x104>)
3418d2d8:	681b      	ldr	r3, [r3, #0]
3418d2da:	4413      	add	r3, r2
3418d2dc:	4a23      	ldr	r2, [pc, #140]	@ (3418d36c <ISP_Algo_BadPixel_Process+0x104>)
3418d2de:	6013      	str	r3, [r2, #0]
  }

  if (Step == 10)
3418d2e0:	4b21      	ldr	r3, [pc, #132]	@ (3418d368 <ISP_Algo_BadPixel_Process+0x100>)
3418d2e2:	f993 3000 	ldrsb.w	r3, [r3]
3418d2e6:	2b0a      	cmp	r3, #10
3418d2e8:	d137      	bne.n	3418d35a <ISP_Algo_BadPixel_Process+0xf2>
  {
    /* All measures done : make an average and compare with threshold */
    BadPixelCount /= 10;
3418d2ea:	4b20      	ldr	r3, [pc, #128]	@ (3418d36c <ISP_Algo_BadPixel_Process+0x104>)
3418d2ec:	681b      	ldr	r3, [r3, #0]
3418d2ee:	4a20      	ldr	r2, [pc, #128]	@ (3418d370 <ISP_Algo_BadPixel_Process+0x108>)
3418d2f0:	fba2 2303 	umull	r2, r3, r2, r3
3418d2f4:	08db      	lsrs	r3, r3, #3
3418d2f6:	4a1d      	ldr	r2, [pc, #116]	@ (3418d36c <ISP_Algo_BadPixel_Process+0x104>)
3418d2f8:	6013      	str	r3, [r2, #0]

    if ((BadPixelCount > IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength > 0))
3418d2fa:	69fb      	ldr	r3, [r7, #28]
3418d2fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
3418d2fe:	4b1b      	ldr	r3, [pc, #108]	@ (3418d36c <ISP_Algo_BadPixel_Process+0x104>)
3418d300:	681b      	ldr	r3, [r3, #0]
3418d302:	429a      	cmp	r2, r3
3418d304:	d207      	bcs.n	3418d316 <ISP_Algo_BadPixel_Process+0xae>
3418d306:	7b7b      	ldrb	r3, [r7, #13]
3418d308:	2b00      	cmp	r3, #0
3418d30a:	d004      	beq.n	3418d316 <ISP_Algo_BadPixel_Process+0xae>
    {
      /* Bad pixel is above target : decrease strength */
      BadPixelConfig.strength--;
3418d30c:	7b7b      	ldrb	r3, [r7, #13]
3418d30e:	3b01      	subs	r3, #1
3418d310:	b2db      	uxtb	r3, r3
3418d312:	737b      	strb	r3, [r7, #13]
3418d314:	e00c      	b.n	3418d330 <ISP_Algo_BadPixel_Process+0xc8>
    }
    else if ((BadPixelCount < IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength < ISP_BADPIXEL_STRENGTH_MAX - 1))
3418d316:	69fb      	ldr	r3, [r7, #28]
3418d318:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
3418d31a:	4b14      	ldr	r3, [pc, #80]	@ (3418d36c <ISP_Algo_BadPixel_Process+0x104>)
3418d31c:	681b      	ldr	r3, [r3, #0]
3418d31e:	429a      	cmp	r2, r3
3418d320:	d906      	bls.n	3418d330 <ISP_Algo_BadPixel_Process+0xc8>
3418d322:	7b7b      	ldrb	r3, [r7, #13]
3418d324:	2b05      	cmp	r3, #5
3418d326:	d803      	bhi.n	3418d330 <ISP_Algo_BadPixel_Process+0xc8>
    {
      /* Bad pixel is below target : increase strength. (exclude ISP_BADPIXEL_STRENGTH_MAX which gives weird results) */
      BadPixelConfig.strength++;
3418d328:	7b7b      	ldrb	r3, [r7, #13]
3418d32a:	3301      	adds	r3, #1
3418d32c:	b2db      	uxtb	r3, r3
3418d32e:	737b      	strb	r3, [r7, #13]
    }

    /* Set updated Strength */
    BadPixelConfig.enable = 1;
3418d330:	2301      	movs	r3, #1
3418d332:	733b      	strb	r3, [r7, #12]
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &BadPixelConfig);
3418d334:	f107 030c 	add.w	r3, r7, #12
3418d338:	4619      	mov	r1, r3
3418d33a:	6878      	ldr	r0, [r7, #4]
3418d33c:	f002 f8e4 	bl	3418f508 <ISP_SVC_ISP_SetBadPixel>
3418d340:	4603      	mov	r3, r0
3418d342:	75fb      	strb	r3, [r7, #23]
    if (ret != ISP_OK)
3418d344:	7dfb      	ldrb	r3, [r7, #23]
3418d346:	2b00      	cmp	r3, #0
3418d348:	d001      	beq.n	3418d34e <ISP_Algo_BadPixel_Process+0xe6>
    {
      return ret;
3418d34a:	7dfb      	ldrb	r3, [r7, #23]
3418d34c:	e006      	b.n	3418d35c <ISP_Algo_BadPixel_Process+0xf4>
    }

    /* Set Step to -1 to wait for an extra frame before a new measurement (the ISP HW needs one frame to update after reconfig) */
    Step = -1;
3418d34e:	4b06      	ldr	r3, [pc, #24]	@ (3418d368 <ISP_Algo_BadPixel_Process+0x100>)
3418d350:	22ff      	movs	r2, #255	@ 0xff
3418d352:	701a      	strb	r2, [r3, #0]
    BadPixelCount = 0;
3418d354:	4b05      	ldr	r3, [pc, #20]	@ (3418d36c <ISP_Algo_BadPixel_Process+0x104>)
3418d356:	2200      	movs	r2, #0
3418d358:	601a      	str	r2, [r3, #0]
  }

  return ISP_OK;
3418d35a:	2300      	movs	r3, #0
}
3418d35c:	4618      	mov	r0, r3
3418d35e:	3720      	adds	r7, #32
3418d360:	46bd      	mov	sp, r7
3418d362:	bd80      	pop	{r7, pc}
3418d364:	341c103c 	.word	0x341c103c
3418d368:	341c1040 	.word	0x341c1040
3418d36c:	341c1044 	.word	0x341c1044
3418d370:	cccccccd 	.word	0xcccccccd

3418d374 <log_cb>:

#if defined(ISP_MW_SW_AEC_ALGO_SUPPORT) || defined(ISP_MW_SW_AWB_ALGO_SUPPORT)
static void log_cb(const char *const msg)
{
3418d374:	b580      	push	{r7, lr}
3418d376:	b082      	sub	sp, #8
3418d378:	af00      	add	r7, sp, #0
3418d37a:	6078      	str	r0, [r7, #4]
  printf("%s", msg);
3418d37c:	6879      	ldr	r1, [r7, #4]
3418d37e:	4805      	ldr	r0, [pc, #20]	@ (3418d394 <log_cb+0x20>)
3418d380:	f004 fbf6 	bl	34191b70 <iprintf>
  printf("\r\n");
3418d384:	4804      	ldr	r0, [pc, #16]	@ (3418d398 <log_cb+0x24>)
3418d386:	f004 fc5b 	bl	34191c40 <puts>
}
3418d38a:	bf00      	nop
3418d38c:	3708      	adds	r7, #8
3418d38e:	46bd      	mov	sp, r7
3418d390:	bd80      	pop	{r7, pc}
3418d392:	bf00      	nop
3418d394:	34193c28 	.word	0x34193c28
3418d398:	34193c2c 	.word	0x34193c2c

3418d39c <ISP_Algo_AEC_Init>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_Init(void *hIsp, void *pAlgo)
{
3418d39c:	b580      	push	{r7, lr}
3418d39e:	b088      	sub	sp, #32
3418d3a0:	af00      	add	r7, sp, #0
3418d3a2:	6078      	str	r0, [r7, #4]
3418d3a4:	6039      	str	r1, [r7, #0]
  ISP_HandleTypeDef *pIsp_handle = (ISP_HandleTypeDef*) hIsp;
3418d3a6:	687b      	ldr	r3, [r7, #4]
3418d3a8:	61fb      	str	r3, [r7, #28]
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
3418d3aa:	683b      	ldr	r3, [r7, #0]
3418d3ac:	61bb      	str	r3, [r7, #24]
  ISP_SensorExposureTypeDef exposureConfig;
  ISP_SensorGainTypeDef gainConfig;
  ISP_IQParamTypeDef *IQParamConfig;
  evision_return_t e_ret;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3418d3ae:	6878      	ldr	r0, [r7, #4]
3418d3b0:	f002 fcf0 	bl	3418fd94 <ISP_SVC_IQParam_Get>
3418d3b4:	6178      	str	r0, [r7, #20]

  if (IQParamConfig->sensorDelay.delay == 0)
3418d3b6:	697b      	ldr	r3, [r7, #20]
3418d3b8:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
3418d3bc:	2b00      	cmp	r3, #0
3418d3be:	d103      	bne.n	3418d3c8 <ISP_Algo_AEC_Init+0x2c>
  {
    /* A value of 0 is invalid, it would break the AEC algo */
    IQParamConfig->sensorDelay.delay = 1;
3418d3c0:	697b      	ldr	r3, [r7, #20]
3418d3c2:	2201      	movs	r2, #1
3418d3c4:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
  }

  /* Create st_ae_process instance */
  pIspAEprocess = evision_api_st_ae_new(log_cb);
3418d3c8:	4830      	ldr	r0, [pc, #192]	@ (3418d48c <ISP_Algo_AEC_Init+0xf0>)
3418d3ca:	f7f3 ff65 	bl	34181298 <evision_api_st_ae_new>
3418d3ce:	4603      	mov	r3, r0
3418d3d0:	4a2f      	ldr	r2, [pc, #188]	@ (3418d490 <ISP_Algo_AEC_Init+0xf4>)
3418d3d2:	6013      	str	r3, [r2, #0]
  if (pIspAEprocess == NULL)
3418d3d4:	4b2e      	ldr	r3, [pc, #184]	@ (3418d490 <ISP_Algo_AEC_Init+0xf4>)
3418d3d6:	681b      	ldr	r3, [r3, #0]
3418d3d8:	2b00      	cmp	r3, #0
3418d3da:	d101      	bne.n	3418d3e0 <ISP_Algo_AEC_Init+0x44>
  {
    return ISP_ERR_ALGO;
3418d3dc:	23be      	movs	r3, #190	@ 0xbe
3418d3de:	e050      	b.n	3418d482 <ISP_Algo_AEC_Init+0xe6>
  }

  /* Initialize st_ae_process instance */
  e_ret = evision_api_st_ae_init(pIspAEprocess);
3418d3e0:	4b2b      	ldr	r3, [pc, #172]	@ (3418d490 <ISP_Algo_AEC_Init+0xf4>)
3418d3e2:	681b      	ldr	r3, [r3, #0]
3418d3e4:	4618      	mov	r0, r3
3418d3e6:	f7f3 ffab 	bl	34181340 <evision_api_st_ae_init>
3418d3ea:	4603      	mov	r3, r0
3418d3ec:	74fb      	strb	r3, [r7, #19]
  if (e_ret != EVISION_RET_SUCCESS)
3418d3ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
3418d3f2:	2b01      	cmp	r3, #1
3418d3f4:	d006      	beq.n	3418d404 <ISP_Algo_AEC_Init+0x68>
  {
    evision_api_st_ae_delete(pIspAEprocess);
3418d3f6:	4b26      	ldr	r3, [pc, #152]	@ (3418d490 <ISP_Algo_AEC_Init+0xf4>)
3418d3f8:	681b      	ldr	r3, [r3, #0]
3418d3fa:	4618      	mov	r0, r3
3418d3fc:	f7f3 ff66 	bl	341812cc <evision_api_st_ae_delete>
    return ISP_ERR_ALGO;
3418d400:	23be      	movs	r3, #190	@ 0xbe
3418d402:	e03e      	b.n	3418d482 <ISP_Algo_AEC_Init+0xe6>
  }

  /* Configure algo (AEC target) */
  pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
3418d404:	4b22      	ldr	r3, [pc, #136]	@ (3418d490 <ISP_Algo_AEC_Init+0xf4>)
3418d406:	681b      	ldr	r3, [r3, #0]
3418d408:	697a      	ldr	r2, [r7, #20]
3418d40a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
3418d40c:	611a      	str	r2, [r3, #16]

  /* Configure algo (sensor config) */
  pIspAEprocess->hyper_params.exposure_min = pIsp_handle->sensorInfo.exposure_min;
3418d40e:	4b20      	ldr	r3, [pc, #128]	@ (3418d490 <ISP_Algo_AEC_Init+0xf4>)
3418d410:	681b      	ldr	r3, [r3, #0]
3418d412:	69fa      	ldr	r2, [r7, #28]
3418d414:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
3418d418:	641a      	str	r2, [r3, #64]	@ 0x40
  pIspAEprocess->hyper_params.exposure_max = pIsp_handle->sensorInfo.exposure_max;
3418d41a:	4b1d      	ldr	r3, [pc, #116]	@ (3418d490 <ISP_Algo_AEC_Init+0xf4>)
3418d41c:	681b      	ldr	r3, [r3, #0]
3418d41e:	69fa      	ldr	r2, [r7, #28]
3418d420:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
3418d424:	645a      	str	r2, [r3, #68]	@ 0x44
  pIspAEprocess->hyper_params.gain_min = pIsp_handle->sensorInfo.gain_min;
3418d426:	4b1a      	ldr	r3, [pc, #104]	@ (3418d490 <ISP_Algo_AEC_Init+0xf4>)
3418d428:	681b      	ldr	r3, [r3, #0]
3418d42a:	69fa      	ldr	r2, [r7, #28]
3418d42c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
3418d42e:	649a      	str	r2, [r3, #72]	@ 0x48
  pIspAEprocess->hyper_params.gain_max = pIsp_handle->sensorInfo.gain_max;
3418d430:	4b17      	ldr	r3, [pc, #92]	@ (3418d490 <ISP_Algo_AEC_Init+0xf4>)
3418d432:	681b      	ldr	r3, [r3, #0]
3418d434:	69fa      	ldr	r2, [r7, #28]
3418d436:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3418d438:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize exposure and gain at min value */
  if (IQParamConfig->AECAlgo.enable == true)
3418d43a:	697b      	ldr	r3, [r7, #20]
3418d43c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
3418d440:	2b01      	cmp	r3, #1
3418d442:	d11a      	bne.n	3418d47a <ISP_Algo_AEC_Init+0xde>
  {
    exposureConfig.exposure = pIsp_handle->sensorInfo.exposure_min;
3418d444:	69fb      	ldr	r3, [r7, #28]
3418d446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418d44a:	60fb      	str	r3, [r7, #12]
    gainConfig.gain = pIsp_handle->sensorInfo.gain_min;
3418d44c:	69fb      	ldr	r3, [r7, #28]
3418d44e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3418d450:	60bb      	str	r3, [r7, #8]
    if ((ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig) != ISP_OK) || (ISP_SVC_Sensor_SetGain(hIsp, &gainConfig)!= ISP_OK))
3418d452:	f107 030c 	add.w	r3, r7, #12
3418d456:	4619      	mov	r1, r3
3418d458:	6878      	ldr	r0, [r7, #4]
3418d45a:	f002 fb73 	bl	3418fb44 <ISP_SVC_Sensor_SetExposure>
3418d45e:	4603      	mov	r3, r0
3418d460:	2b00      	cmp	r3, #0
3418d462:	d108      	bne.n	3418d476 <ISP_Algo_AEC_Init+0xda>
3418d464:	f107 0308 	add.w	r3, r7, #8
3418d468:	4619      	mov	r1, r3
3418d46a:	6878      	ldr	r0, [r7, #4]
3418d46c:	f002 fb1e 	bl	3418faac <ISP_SVC_Sensor_SetGain>
3418d470:	4603      	mov	r3, r0
3418d472:	2b00      	cmp	r3, #0
3418d474:	d001      	beq.n	3418d47a <ISP_Algo_AEC_Init+0xde>
    {
      return ISP_ERR_ALGO;
3418d476:	23be      	movs	r3, #190	@ 0xbe
3418d478:	e003      	b.n	3418d482 <ISP_Algo_AEC_Init+0xe6>
    }
  }

  /* Update State */
  algo->state = ISP_ALGO_STATE_INIT;
3418d47a:	69bb      	ldr	r3, [r7, #24]
3418d47c:	2200      	movs	r2, #0
3418d47e:	705a      	strb	r2, [r3, #1]

  return ISP_OK;
3418d480:	2300      	movs	r3, #0
}
3418d482:	4618      	mov	r0, r3
3418d484:	3720      	adds	r7, #32
3418d486:	46bd      	mov	sp, r7
3418d488:	bd80      	pop	{r7, pc}
3418d48a:	bf00      	nop
3418d48c:	3418d375 	.word	0x3418d375
3418d490:	341c101c 	.word	0x341c101c

3418d494 <ISP_Algo_AEC_DeInit>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_DeInit(void *hIsp, void *pAlgo)
{
3418d494:	b580      	push	{r7, lr}
3418d496:	b082      	sub	sp, #8
3418d498:	af00      	add	r7, sp, #0
3418d49a:	6078      	str	r0, [r7, #4]
3418d49c:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */
  (void)pAlgo; /* unused */

  if (pIspAEprocess != NULL)
3418d49e:	4b07      	ldr	r3, [pc, #28]	@ (3418d4bc <ISP_Algo_AEC_DeInit+0x28>)
3418d4a0:	681b      	ldr	r3, [r3, #0]
3418d4a2:	2b00      	cmp	r3, #0
3418d4a4:	d004      	beq.n	3418d4b0 <ISP_Algo_AEC_DeInit+0x1c>
  {
    evision_api_st_ae_delete(pIspAEprocess);
3418d4a6:	4b05      	ldr	r3, [pc, #20]	@ (3418d4bc <ISP_Algo_AEC_DeInit+0x28>)
3418d4a8:	681b      	ldr	r3, [r3, #0]
3418d4aa:	4618      	mov	r0, r3
3418d4ac:	f7f3 ff0e 	bl	341812cc <evision_api_st_ae_delete>
  }
  return ISP_OK;
3418d4b0:	2300      	movs	r3, #0
}
3418d4b2:	4618      	mov	r0, r3
3418d4b4:	3708      	adds	r7, #8
3418d4b6:	46bd      	mov	sp, r7
3418d4b8:	bd80      	pop	{r7, pc}
3418d4ba:	bf00      	nop
3418d4bc:	341c101c 	.word	0x341c101c

3418d4c0 <ISP_Algo_AEC_StatCb>:
  *         Callback informing that statistics are available
  * @param  pAlgo: ISP algorithm handle.
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_StatCb(ISP_AlgoTypeDef *pAlgo)
{
3418d4c0:	b480      	push	{r7}
3418d4c2:	b083      	sub	sp, #12
3418d4c4:	af00      	add	r7, sp, #0
3418d4c6:	6078      	str	r0, [r7, #4]
  /* Update State */
  pAlgo->state = ISP_ALGO_STATE_STAT_READY;
3418d4c8:	687b      	ldr	r3, [r7, #4]
3418d4ca:	2203      	movs	r2, #3
3418d4cc:	705a      	strb	r2, [r3, #1]

  return ISP_OK;
3418d4ce:	2300      	movs	r3, #0
}
3418d4d0:	4618      	mov	r0, r3
3418d4d2:	370c      	adds	r7, #12
3418d4d4:	46bd      	mov	sp, r7
3418d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d4da:	4770      	bx	lr

3418d4dc <ISP_Algo_AEC_Process>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_Process(void *hIsp, void *pAlgo)
{
3418d4dc:	b580      	push	{r7, lr}
3418d4de:	b08e      	sub	sp, #56	@ 0x38
3418d4e0:	af04      	add	r7, sp, #16
3418d4e2:	6078      	str	r0, [r7, #4]
3418d4e4:	6039      	str	r1, [r7, #0]
  static ISP_SVC_StatStateTypeDef stats;
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
3418d4e6:	683b      	ldr	r3, [r7, #0]
3418d4e8:	623b      	str	r3, [r7, #32]
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret = ISP_OK;
3418d4ea:	2300      	movs	r3, #0
3418d4ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#ifdef ALGO_AEC_DBG_LOGS
  static uint32_t currentL;
#endif
  evision_return_t e_ret;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3418d4f0:	6878      	ldr	r0, [r7, #4]
3418d4f2:	f002 fc4f 	bl	3418fd94 <ISP_SVC_IQParam_Get>
3418d4f6:	61f8      	str	r0, [r7, #28]
  if (IQParamConfig->AECAlgo.enable == false)
3418d4f8:	69fb      	ldr	r3, [r7, #28]
3418d4fa:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
3418d4fe:	2b00      	cmp	r3, #0
3418d500:	d101      	bne.n	3418d506 <ISP_Algo_AEC_Process+0x2a>
  {
    return ISP_OK;
3418d502:	2300      	movs	r3, #0
3418d504:	e0b3      	b.n	3418d66e <ISP_Algo_AEC_Process+0x192>
  }

  switch(algo->state)
3418d506:	6a3b      	ldr	r3, [r7, #32]
3418d508:	785b      	ldrb	r3, [r3, #1]
3418d50a:	2b03      	cmp	r3, #3
3418d50c:	d025      	beq.n	3418d55a <ISP_Algo_AEC_Process+0x7e>
3418d50e:	2b03      	cmp	r3, #3
3418d510:	f300 80ab 	bgt.w	3418d66a <ISP_Algo_AEC_Process+0x18e>
3418d514:	2b01      	cmp	r3, #1
3418d516:	dc02      	bgt.n	3418d51e <ISP_Algo_AEC_Process+0x42>
3418d518:	2b00      	cmp	r3, #0
3418d51a:	da02      	bge.n	3418d522 <ISP_Algo_AEC_Process+0x46>
3418d51c:	e0a5      	b.n	3418d66a <ISP_Algo_AEC_Process+0x18e>
3418d51e:	2b02      	cmp	r3, #2
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
    break;

  case ISP_ALGO_STATE_WAITING_STAT:
    /* Do nothing */
    break;
3418d520:	e0a3      	b.n	3418d66a <ISP_Algo_AEC_Process+0x18e>
                                ISP_STAT_TYPE_AVG, IQParamConfig->sensorDelay.delay);
3418d522:	69fb      	ldr	r3, [r7, #28]
3418d524:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3418d528:	9302      	str	r3, [sp, #8]
3418d52a:	2301      	movs	r3, #1
3418d52c:	9301      	str	r3, [sp, #4]
3418d52e:	2302      	movs	r3, #2
3418d530:	9300      	str	r3, [sp, #0]
3418d532:	4b51      	ldr	r3, [pc, #324]	@ (3418d678 <ISP_Algo_AEC_Process+0x19c>)
3418d534:	683a      	ldr	r2, [r7, #0]
3418d536:	4951      	ldr	r1, [pc, #324]	@ (3418d67c <ISP_Algo_AEC_Process+0x1a0>)
3418d538:	6878      	ldr	r0, [r7, #4]
3418d53a:	f002 ff7b 	bl	34190434 <ISP_SVC_Stats_GetNext>
3418d53e:	4603      	mov	r3, r0
3418d540:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ret != ISP_OK)
3418d544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d548:	2b00      	cmp	r3, #0
3418d54a:	d002      	beq.n	3418d552 <ISP_Algo_AEC_Process+0x76>
      return ret;
3418d54c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d550:	e08d      	b.n	3418d66e <ISP_Algo_AEC_Process+0x192>
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3418d552:	6a3b      	ldr	r3, [r7, #32]
3418d554:	2202      	movs	r2, #2
3418d556:	705a      	strb	r2, [r3, #1]
    break;
3418d558:	e087      	b.n	3418d66a <ISP_Algo_AEC_Process+0x18e>

  case ISP_ALGO_STATE_STAT_READY:
    /* Align on the target update (may have been updated with ISP_SetExposureTarget()) */
    pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
3418d55a:	4b49      	ldr	r3, [pc, #292]	@ (3418d680 <ISP_Algo_AEC_Process+0x1a4>)
3418d55c:	681b      	ldr	r3, [r3, #0]
3418d55e:	69fa      	ldr	r2, [r7, #28]
3418d560:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
3418d562:	611a      	str	r2, [r3, #16]
    avgL = stats.down.averageL;
3418d564:	4b44      	ldr	r3, [pc, #272]	@ (3418d678 <ISP_Algo_AEC_Process+0x19c>)
3418d566:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
3418d56a:	61bb      	str	r3, [r7, #24]
      printf("L = %ld\r\n", avgL);
      currentL = avgL;
    }
#endif
    /* Read the current sensor gain */
    ret = ISP_SVC_Sensor_GetGain(hIsp, &gainConfig);
3418d56c:	f107 0310 	add.w	r3, r7, #16
3418d570:	4619      	mov	r1, r3
3418d572:	6878      	ldr	r0, [r7, #4]
3418d574:	f002 fac4 	bl	3418fb00 <ISP_SVC_Sensor_GetGain>
3418d578:	4603      	mov	r3, r0
3418d57a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ret != ISP_OK)
3418d57e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d582:	2b00      	cmp	r3, #0
3418d584:	d002      	beq.n	3418d58c <ISP_Algo_AEC_Process+0xb0>
    {
      return ret;
3418d586:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d58a:	e070      	b.n	3418d66e <ISP_Algo_AEC_Process+0x192>
    }

    ret = ISP_SVC_Sensor_GetExposure(hIsp, &exposureConfig);
3418d58c:	f107 030c 	add.w	r3, r7, #12
3418d590:	4619      	mov	r1, r3
3418d592:	6878      	ldr	r0, [r7, #4]
3418d594:	f002 fb00 	bl	3418fb98 <ISP_SVC_Sensor_GetExposure>
3418d598:	4603      	mov	r3, r0
3418d59a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ret != ISP_OK)
3418d59e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d5a2:	2b00      	cmp	r3, #0
3418d5a4:	d002      	beq.n	3418d5ac <ISP_Algo_AEC_Process+0xd0>
    {
      return ret;
3418d5a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d5aa:	e060      	b.n	3418d66e <ISP_Algo_AEC_Process+0x192>
    }

    /* Store meta data */
    Meta.averageL = avgL;
3418d5ac:	69bb      	ldr	r3, [r7, #24]
3418d5ae:	b2da      	uxtb	r2, r3
3418d5b0:	4b34      	ldr	r3, [pc, #208]	@ (3418d684 <ISP_Algo_AEC_Process+0x1a8>)
3418d5b2:	705a      	strb	r2, [r3, #1]
    Meta.exposureTarget = IQParamConfig->AECAlgo.exposureTarget;
3418d5b4:	69fb      	ldr	r3, [r7, #28]
3418d5b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418d5b8:	4a32      	ldr	r2, [pc, #200]	@ (3418d684 <ISP_Algo_AEC_Process+0x1a8>)
3418d5ba:	6053      	str	r3, [r2, #4]

    /* Run algo to calculate new gain and exposure */
    e_ret = evision_api_st_ae_process(pIspAEprocess, gainConfig.gain, exposureConfig.exposure, avgL);
3418d5bc:	4b30      	ldr	r3, [pc, #192]	@ (3418d680 <ISP_Algo_AEC_Process+0x1a4>)
3418d5be:	6818      	ldr	r0, [r3, #0]
3418d5c0:	6939      	ldr	r1, [r7, #16]
3418d5c2:	68fa      	ldr	r2, [r7, #12]
3418d5c4:	69bb      	ldr	r3, [r7, #24]
3418d5c6:	b2db      	uxtb	r3, r3
3418d5c8:	f7f3 fec5 	bl	34181356 <evision_api_st_ae_process>
3418d5cc:	4603      	mov	r3, r0
3418d5ce:	75fb      	strb	r3, [r7, #23]
    if (e_ret == EVISION_RET_SUCCESS)
3418d5d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
3418d5d4:	2b01      	cmp	r3, #1
3418d5d6:	d133      	bne.n	3418d640 <ISP_Algo_AEC_Process+0x164>
    {
      if (gainConfig.gain != pIspAEprocess->new_gain)
3418d5d8:	693a      	ldr	r2, [r7, #16]
3418d5da:	4b29      	ldr	r3, [pc, #164]	@ (3418d680 <ISP_Algo_AEC_Process+0x1a4>)
3418d5dc:	681b      	ldr	r3, [r3, #0]
3418d5de:	689b      	ldr	r3, [r3, #8]
3418d5e0:	429a      	cmp	r2, r3
3418d5e2:	d013      	beq.n	3418d60c <ISP_Algo_AEC_Process+0x130>
      {
        /* Set new gain */
        gainConfig.gain = pIspAEprocess->new_gain;
3418d5e4:	4b26      	ldr	r3, [pc, #152]	@ (3418d680 <ISP_Algo_AEC_Process+0x1a4>)
3418d5e6:	681b      	ldr	r3, [r3, #0]
3418d5e8:	689b      	ldr	r3, [r3, #8]
3418d5ea:	613b      	str	r3, [r7, #16]

        ret = ISP_SVC_Sensor_SetGain(hIsp, &gainConfig);
3418d5ec:	f107 0310 	add.w	r3, r7, #16
3418d5f0:	4619      	mov	r1, r3
3418d5f2:	6878      	ldr	r0, [r7, #4]
3418d5f4:	f002 fa5a 	bl	3418faac <ISP_SVC_Sensor_SetGain>
3418d5f8:	4603      	mov	r3, r0
3418d5fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret != ISP_OK)
3418d5fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d602:	2b00      	cmp	r3, #0
3418d604:	d002      	beq.n	3418d60c <ISP_Algo_AEC_Process+0x130>
        {
          return ret;
3418d606:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d60a:	e030      	b.n	3418d66e <ISP_Algo_AEC_Process+0x192>
#ifdef ALGO_AEC_DBG_LOGS
        printf("New gain = %ld\r\n", gainConfig.gain);
#endif
      }

      if (exposureConfig.exposure != pIspAEprocess->new_exposure)
3418d60c:	68fa      	ldr	r2, [r7, #12]
3418d60e:	4b1c      	ldr	r3, [pc, #112]	@ (3418d680 <ISP_Algo_AEC_Process+0x1a4>)
3418d610:	681b      	ldr	r3, [r3, #0]
3418d612:	685b      	ldr	r3, [r3, #4]
3418d614:	429a      	cmp	r2, r3
3418d616:	d013      	beq.n	3418d640 <ISP_Algo_AEC_Process+0x164>
      {
        /* Set new exposure */
        exposureConfig.exposure = pIspAEprocess->new_exposure;
3418d618:	4b19      	ldr	r3, [pc, #100]	@ (3418d680 <ISP_Algo_AEC_Process+0x1a4>)
3418d61a:	681b      	ldr	r3, [r3, #0]
3418d61c:	685b      	ldr	r3, [r3, #4]
3418d61e:	60fb      	str	r3, [r7, #12]

        ret = ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig);
3418d620:	f107 030c 	add.w	r3, r7, #12
3418d624:	4619      	mov	r1, r3
3418d626:	6878      	ldr	r0, [r7, #4]
3418d628:	f002 fa8c 	bl	3418fb44 <ISP_SVC_Sensor_SetExposure>
3418d62c:	4603      	mov	r3, r0
3418d62e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret != ISP_OK)
3418d632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d636:	2b00      	cmp	r3, #0
3418d638:	d002      	beq.n	3418d640 <ISP_Algo_AEC_Process+0x164>
        {
          return ret;
3418d63a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d63e:	e016      	b.n	3418d66e <ISP_Algo_AEC_Process+0x192>
      }
    }

    /* Ask for stats */
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
                                ISP_STAT_TYPE_AVG, IQParamConfig->sensorDelay.delay);
3418d640:	69fb      	ldr	r3, [r7, #28]
3418d642:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3418d646:	9302      	str	r3, [sp, #8]
3418d648:	2301      	movs	r3, #1
3418d64a:	9301      	str	r3, [sp, #4]
3418d64c:	2302      	movs	r3, #2
3418d64e:	9300      	str	r3, [sp, #0]
3418d650:	4b09      	ldr	r3, [pc, #36]	@ (3418d678 <ISP_Algo_AEC_Process+0x19c>)
3418d652:	683a      	ldr	r2, [r7, #0]
3418d654:	4909      	ldr	r1, [pc, #36]	@ (3418d67c <ISP_Algo_AEC_Process+0x1a0>)
3418d656:	6878      	ldr	r0, [r7, #4]
3418d658:	f002 feec 	bl	34190434 <ISP_SVC_Stats_GetNext>
3418d65c:	4603      	mov	r3, r0
3418d65e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Wait for stats to be ready */
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3418d662:	6a3b      	ldr	r3, [r7, #32]
3418d664:	2202      	movs	r2, #2
3418d666:	705a      	strb	r2, [r3, #1]
    break;
3418d668:	bf00      	nop
  }

  return ret;
3418d66a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418d66e:	4618      	mov	r0, r3
3418d670:	3728      	adds	r7, #40	@ 0x28
3418d672:	46bd      	mov	sp, r7
3418d674:	bd80      	pop	{r7, pc}
3418d676:	bf00      	nop
3418d678:	341c1048 	.word	0x341c1048
3418d67c:	3418d4c1 	.word	0x3418d4c1
3418d680:	341c101c 	.word	0x341c101c
3418d684:	341c1028 	.word	0x341c1028

3418d688 <ISP_Algo_ApplyGammaInverse>:
  * @param  hIsp:  ISP device handle.
  * @param  comp: component value
  * @retval gamma corrected value
  */
double ISP_Algo_ApplyGammaInverse(ISP_HandleTypeDef *hIsp, uint32_t comp)
{
3418d688:	b580      	push	{r7, lr}
3418d68a:	b084      	sub	sp, #16
3418d68c:	af00      	add	r7, sp, #0
3418d68e:	6078      	str	r0, [r7, #4]
3418d690:	6039      	str	r1, [r7, #0]
  double out;

  /* Check if gamma is enabled */
  if (ISP_SVC_Misc_IsGammaEnabled(hIsp, 1 /*main pipe*/) != 0) {
3418d692:	2101      	movs	r1, #1
3418d694:	6878      	ldr	r0, [r7, #4]
3418d696:	f002 faf2 	bl	3418fc7e <ISP_SVC_Misc_IsGammaEnabled>
3418d69a:	4603      	mov	r3, r0
3418d69c:	2b00      	cmp	r3, #0
3418d69e:	d019      	beq.n	3418d6d4 <ISP_Algo_ApplyGammaInverse+0x4c>
    out = 255 * pow((float)comp / 255, 1.0 / 2.2);
3418d6a0:	683b      	ldr	r3, [r7, #0]
3418d6a2:	ee07 3a90 	vmov	s15, r3
3418d6a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418d6aa:	eddf 6a17 	vldr	s13, [pc, #92]	@ 3418d708 <ISP_Algo_ApplyGammaInverse+0x80>
3418d6ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
3418d6b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
3418d6b6:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 3418d6f8 <ISP_Algo_ApplyGammaInverse+0x70>
3418d6ba:	eeb0 0b47 	vmov.f64	d0, d7
3418d6be:	f005 fbaf 	bl	34192e20 <pow>
3418d6c2:	eeb0 7b40 	vmov.f64	d7, d0
3418d6c6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 3418d700 <ISP_Algo_ApplyGammaInverse+0x78>
3418d6ca:	ee27 7b06 	vmul.f64	d7, d7, d6
3418d6ce:	ed87 7b02 	vstr	d7, [r7, #8]
3418d6d2:	e006      	b.n	3418d6e2 <ISP_Algo_ApplyGammaInverse+0x5a>
  }
  else
  {
    out = (double) comp;
3418d6d4:	683b      	ldr	r3, [r7, #0]
3418d6d6:	ee07 3a90 	vmov	s15, r3
3418d6da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3418d6de:	ed87 7b02 	vstr	d7, [r7, #8]
  }
  return out;
3418d6e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
3418d6e6:	ec43 2b17 	vmov	d7, r2, r3
}
3418d6ea:	eeb0 0b47 	vmov.f64	d0, d7
3418d6ee:	3710      	adds	r7, #16
3418d6f0:	46bd      	mov	sp, r7
3418d6f2:	bd80      	pop	{r7, pc}
3418d6f4:	f3af 8000 	nop.w
3418d6f8:	d1745d17 	.word	0xd1745d17
3418d6fc:	3fdd1745 	.word	0x3fdd1745
3418d700:	00000000 	.word	0x00000000
3418d704:	406fe000 	.word	0x406fe000
3418d708:	437f0000 	.word	0x437f0000

3418d70c <ISP_Algo_GetUpStat>:
  *         Recalculate average up statistics from collected down statistics
  * @param  hIsp:  ISP device handle.
  * @param  pStats: pointer to the statistics
  */
void ISP_Algo_GetUpStat(ISP_HandleTypeDef *hIsp, ISP_SVC_StatStateTypeDef *pStats)
{
3418d70c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3418d710:	b09a      	sub	sp, #104	@ 0x68
3418d712:	af00      	add	r7, sp, #0
3418d714:	6378      	str	r0, [r7, #52]	@ 0x34
3418d716:	6339      	str	r1, [r7, #48]	@ 0x30
  ISP_ISPGainTypeDef ISPGain;
  ISP_BlackLevelTypeDef BlackLevel;
  int64_t upR, upG, upB;

  if ((ISP_SVC_ISP_GetGain(hIsp, &ISPGain) == ISP_OK) && (ISPGain.enable == 1))
3418d718:	f107 0340 	add.w	r3, r7, #64	@ 0x40
3418d71c:	4619      	mov	r1, r3
3418d71e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
3418d720:	f002 f840 	bl	3418f7a4 <ISP_SVC_ISP_GetGain>
3418d724:	4603      	mov	r3, r0
3418d726:	2b00      	cmp	r3, #0
3418d728:	f040 80a8 	bne.w	3418d87c <ISP_Algo_GetUpStat+0x170>
3418d72c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
3418d730:	2b01      	cmp	r3, #1
3418d732:	f040 80a3 	bne.w	3418d87c <ISP_Algo_GetUpStat+0x170>
  {

    /* reverse gain */
    upR = (int64_t) pStats->down.averageR * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainR;
3418d736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d738:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
3418d73c:	b2db      	uxtb	r3, r3
3418d73e:	2200      	movs	r2, #0
3418d740:	461c      	mov	r4, r3
3418d742:	4615      	mov	r5, r2
3418d744:	4b58      	ldr	r3, [pc, #352]	@ (3418d8a8 <ISP_Algo_GetUpStat+0x19c>)
3418d746:	fb03 f205 	mul.w	r2, r3, r5
3418d74a:	2300      	movs	r3, #0
3418d74c:	fb04 f303 	mul.w	r3, r4, r3
3418d750:	441a      	add	r2, r3
3418d752:	4b55      	ldr	r3, [pc, #340]	@ (3418d8a8 <ISP_Algo_GetUpStat+0x19c>)
3418d754:	fba4 1303 	umull	r1, r3, r4, r3
3418d758:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418d75a:	460b      	mov	r3, r1
3418d75c:	62bb      	str	r3, [r7, #40]	@ 0x28
3418d75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418d760:	18d3      	adds	r3, r2, r3
3418d762:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418d764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3418d766:	2200      	movs	r2, #0
3418d768:	623b      	str	r3, [r7, #32]
3418d76a:	627a      	str	r2, [r7, #36]	@ 0x24
3418d76c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
3418d770:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
3418d774:	f7f3 fee2 	bl	3418153c <__aeabi_ldivmod>
3418d778:	4602      	mov	r2, r0
3418d77a:	460b      	mov	r3, r1
3418d77c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    upG = (int64_t) pStats->down.averageG * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainG;
3418d780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d782:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
3418d786:	b2db      	uxtb	r3, r3
3418d788:	2200      	movs	r2, #0
3418d78a:	61bb      	str	r3, [r7, #24]
3418d78c:	61fa      	str	r2, [r7, #28]
3418d78e:	4b46      	ldr	r3, [pc, #280]	@ (3418d8a8 <ISP_Algo_GetUpStat+0x19c>)
3418d790:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
3418d794:	462a      	mov	r2, r5
3418d796:	fb03 f202 	mul.w	r2, r3, r2
3418d79a:	2300      	movs	r3, #0
3418d79c:	4621      	mov	r1, r4
3418d79e:	fb01 f303 	mul.w	r3, r1, r3
3418d7a2:	4413      	add	r3, r2
3418d7a4:	4a40      	ldr	r2, [pc, #256]	@ (3418d8a8 <ISP_Algo_GetUpStat+0x19c>)
3418d7a6:	4621      	mov	r1, r4
3418d7a8:	fba1 ab02 	umull	sl, fp, r1, r2
3418d7ac:	445b      	add	r3, fp
3418d7ae:	469b      	mov	fp, r3
3418d7b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3418d7b2:	2200      	movs	r2, #0
3418d7b4:	613b      	str	r3, [r7, #16]
3418d7b6:	617a      	str	r2, [r7, #20]
3418d7b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3418d7bc:	4650      	mov	r0, sl
3418d7be:	4659      	mov	r1, fp
3418d7c0:	f7f3 febc 	bl	3418153c <__aeabi_ldivmod>
3418d7c4:	4602      	mov	r2, r0
3418d7c6:	460b      	mov	r3, r1
3418d7c8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    upB = (int64_t) pStats->down.averageB * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainB;
3418d7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d7ce:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
3418d7d2:	b2db      	uxtb	r3, r3
3418d7d4:	2200      	movs	r2, #0
3418d7d6:	60bb      	str	r3, [r7, #8]
3418d7d8:	60fa      	str	r2, [r7, #12]
3418d7da:	4b33      	ldr	r3, [pc, #204]	@ (3418d8a8 <ISP_Algo_GetUpStat+0x19c>)
3418d7dc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
3418d7e0:	462a      	mov	r2, r5
3418d7e2:	fb03 f202 	mul.w	r2, r3, r2
3418d7e6:	2300      	movs	r3, #0
3418d7e8:	4621      	mov	r1, r4
3418d7ea:	fb01 f303 	mul.w	r3, r1, r3
3418d7ee:	4413      	add	r3, r2
3418d7f0:	4a2d      	ldr	r2, [pc, #180]	@ (3418d8a8 <ISP_Algo_GetUpStat+0x19c>)
3418d7f2:	4621      	mov	r1, r4
3418d7f4:	fba1 8902 	umull	r8, r9, r1, r2
3418d7f8:	444b      	add	r3, r9
3418d7fa:	4699      	mov	r9, r3
3418d7fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418d7fe:	2200      	movs	r2, #0
3418d800:	603b      	str	r3, [r7, #0]
3418d802:	607a      	str	r2, [r7, #4]
3418d804:	e9d7 2300 	ldrd	r2, r3, [r7]
3418d808:	4640      	mov	r0, r8
3418d80a:	4649      	mov	r1, r9
3418d80c:	f7f3 fe96 	bl	3418153c <__aeabi_ldivmod>
3418d810:	4602      	mov	r2, r0
3418d812:	460b      	mov	r3, r1
3418d814:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    pStats->up.averageR = (uint32_t) upR;
3418d818:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
3418d81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d81e:	701a      	strb	r2, [r3, #0]
    pStats->up.averageG = (uint32_t) upG;
3418d820:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
3418d824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d826:	705a      	strb	r2, [r3, #1]
    pStats->up.averageB = (uint32_t) upB;
3418d828:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
3418d82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d82e:	709a      	strb	r2, [r3, #2]

    if ((ISP_SVC_ISP_GetBlackLevel(hIsp, &BlackLevel) == ISP_OK) && (BlackLevel.enable == 1))
3418d830:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
3418d834:	4619      	mov	r1, r3
3418d836:	6b78      	ldr	r0, [r7, #52]	@ 0x34
3418d838:	f001 ff1c 	bl	3418f674 <ISP_SVC_ISP_GetBlackLevel>
3418d83c:	4603      	mov	r3, r0
3418d83e:	2b00      	cmp	r3, #0
3418d840:	d12c      	bne.n	3418d89c <ISP_Algo_GetUpStat+0x190>
3418d842:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
3418d846:	2b01      	cmp	r3, #1
3418d848:	d128      	bne.n	3418d89c <ISP_Algo_GetUpStat+0x190>
    {
        /* reverse black level */
    pStats->up.averageR += BlackLevel.BLCR;
3418d84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d84c:	781a      	ldrb	r2, [r3, #0]
3418d84e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
3418d852:	4413      	add	r3, r2
3418d854:	b2da      	uxtb	r2, r3
3418d856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d858:	701a      	strb	r2, [r3, #0]
    pStats->up.averageG += BlackLevel.BLCG;
3418d85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d85c:	785a      	ldrb	r2, [r3, #1]
3418d85e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
3418d862:	4413      	add	r3, r2
3418d864:	b2da      	uxtb	r2, r3
3418d866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d868:	705a      	strb	r2, [r3, #1]
    pStats->up.averageB += BlackLevel.BLCB;
3418d86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d86c:	789a      	ldrb	r2, [r3, #2]
3418d86e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
3418d872:	4413      	add	r3, r2
3418d874:	b2da      	uxtb	r2, r3
3418d876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d878:	709a      	strb	r2, [r3, #2]
    if ((ISP_SVC_ISP_GetBlackLevel(hIsp, &BlackLevel) == ISP_OK) && (BlackLevel.enable == 1))
3418d87a:	e00f      	b.n	3418d89c <ISP_Algo_GetUpStat+0x190>
    }
  }
  else
  {
    pStats->up.averageR = pStats->down.averageR;
3418d87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d87e:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
3418d882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d884:	701a      	strb	r2, [r3, #0]
    pStats->up.averageG = pStats->down.averageG;
3418d886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d888:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
3418d88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d88e:	705a      	strb	r2, [r3, #1]
    pStats->up.averageB = pStats->down.averageB;
3418d890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d892:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
3418d896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d898:	709a      	strb	r2, [r3, #2]
  }
}
3418d89a:	e000      	b.n	3418d89e <ISP_Algo_GetUpStat+0x192>
    if ((ISP_SVC_ISP_GetBlackLevel(hIsp, &BlackLevel) == ISP_OK) && (BlackLevel.enable == 1))
3418d89c:	bf00      	nop
}
3418d89e:	bf00      	nop
3418d8a0:	3768      	adds	r7, #104	@ 0x68
3418d8a2:	46bd      	mov	sp, r7
3418d8a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3418d8a8:	05f5e100 	.word	0x05f5e100
3418d8ac:	00000000 	.word	0x00000000

3418d8b0 <ISP_Algo_ApplyCConv>:
  * @param  outG: pointer to Green component value after color conversion
  * @param  outB: pointer to Blue component value after color conversion
  * @retval None
  */
void ISP_Algo_ApplyCConv(ISP_HandleTypeDef *hIsp, uint32_t inR, uint32_t inG, uint32_t inB, uint32_t *outR, uint32_t *outG, uint32_t *outB)
{
3418d8b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3418d8b4:	b0d0      	sub	sp, #320	@ 0x140
3418d8b6:	af00      	add	r7, sp, #0
3418d8b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
3418d8bc:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
3418d8c0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
3418d8c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  ISP_ColorConvTypeDef colorConv;
  int64_t ccR, ccG, ccB;

  if ((ISP_SVC_ISP_GetColorConv(hIsp, &colorConv) == ISP_OK) && (colorConv.enable == 1))
3418d8c8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
3418d8cc:	4619      	mov	r1, r3
3418d8ce:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
3418d8d2:	f002 f85d 	bl	3418f990 <ISP_SVC_ISP_GetColorConv>
3418d8d6:	4603      	mov	r3, r0
3418d8d8:	2b00      	cmp	r3, #0
3418d8da:	f040 8216 	bne.w	3418dd0a <ISP_Algo_ApplyCConv+0x45a>
3418d8de:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
3418d8e2:	2b01      	cmp	r3, #1
3418d8e4:	f040 8211 	bne.w	3418dd0a <ISP_Algo_ApplyCConv+0x45a>
  {
    /* Apply ColorConversion matrix to the input components */
    ccR = (int64_t) inR * colorConv.coeff[0][0] + (int64_t) inG * colorConv.coeff[0][1] + (int64_t) inB * colorConv.coeff[0][2];
3418d8e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
3418d8ec:	2200      	movs	r2, #0
3418d8ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
3418d8f2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
3418d8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
3418d8fa:	17da      	asrs	r2, r3, #31
3418d8fc:	461c      	mov	r4, r3
3418d8fe:	4615      	mov	r5, r2
3418d900:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
3418d904:	460b      	mov	r3, r1
3418d906:	fb04 f203 	mul.w	r2, r4, r3
3418d90a:	4603      	mov	r3, r0
3418d90c:	fb03 f305 	mul.w	r3, r3, r5
3418d910:	4413      	add	r3, r2
3418d912:	4602      	mov	r2, r0
3418d914:	fba2 ab04 	umull	sl, fp, r2, r4
3418d918:	445b      	add	r3, fp
3418d91a:	469b      	mov	fp, r3
3418d91c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
3418d920:	2200      	movs	r2, #0
3418d922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
3418d926:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
3418d92a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
3418d92e:	17da      	asrs	r2, r3, #31
3418d930:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
3418d934:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
3418d938:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
3418d93c:	460b      	mov	r3, r1
3418d93e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
3418d942:	4622      	mov	r2, r4
3418d944:	fb02 f203 	mul.w	r2, r2, r3
3418d948:	e9c7 453a 	strd	r4, r5, [r7, #232]	@ 0xe8
3418d94c:	462b      	mov	r3, r5
3418d94e:	4604      	mov	r4, r0
3418d950:	460d      	mov	r5, r1
3418d952:	4621      	mov	r1, r4
3418d954:	fb01 f303 	mul.w	r3, r1, r3
3418d958:	4413      	add	r3, r2
3418d95a:	4622      	mov	r2, r4
3418d95c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
3418d960:	fba2 8901 	umull	r8, r9, r2, r1
3418d964:	444b      	add	r3, r9
3418d966:	4699      	mov	r9, r3
3418d968:	eb1a 0308 	adds.w	r3, sl, r8
3418d96c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
3418d970:	eb4b 0309 	adc.w	r3, fp, r9
3418d974:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
3418d978:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
3418d97c:	2200      	movs	r2, #0
3418d97e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
3418d982:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
3418d986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
3418d98a:	17da      	asrs	r2, r3, #31
3418d98c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
3418d990:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
3418d994:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
3418d998:	462b      	mov	r3, r5
3418d99a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
3418d99e:	4642      	mov	r2, r8
3418d9a0:	fb02 f203 	mul.w	r2, r2, r3
3418d9a4:	464b      	mov	r3, r9
3418d9a6:	4621      	mov	r1, r4
3418d9a8:	fb01 f303 	mul.w	r3, r1, r3
3418d9ac:	4413      	add	r3, r2
3418d9ae:	4622      	mov	r2, r4
3418d9b0:	4641      	mov	r1, r8
3418d9b2:	fba2 1201 	umull	r1, r2, r2, r1
3418d9b6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
3418d9ba:	460a      	mov	r2, r1
3418d9bc:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
3418d9c0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
3418d9c4:	4413      	add	r3, r2
3418d9c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
3418d9ca:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
3418d9ce:	4623      	mov	r3, r4
3418d9d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
3418d9d4:	4602      	mov	r2, r0
3418d9d6:	189b      	adds	r3, r3, r2
3418d9d8:	613b      	str	r3, [r7, #16]
3418d9da:	460b      	mov	r3, r1
3418d9dc:	462a      	mov	r2, r5
3418d9de:	eb42 0303 	adc.w	r3, r2, r3
3418d9e2:	617b      	str	r3, [r7, #20]
3418d9e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3418d9e8:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    ccG = (int64_t) inR * colorConv.coeff[1][0] + (int64_t) inG * colorConv.coeff[1][1] + (int64_t) inB * colorConv.coeff[1][2];
3418d9ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
3418d9f0:	2200      	movs	r2, #0
3418d9f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
3418d9f6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
3418d9fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
3418d9fe:	17da      	asrs	r2, r3, #31
3418da00:	67bb      	str	r3, [r7, #120]	@ 0x78
3418da02:	67fa      	str	r2, [r7, #124]	@ 0x7c
3418da04:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
3418da08:	462b      	mov	r3, r5
3418da0a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
3418da0e:	4642      	mov	r2, r8
3418da10:	fb02 f203 	mul.w	r2, r2, r3
3418da14:	464b      	mov	r3, r9
3418da16:	4621      	mov	r1, r4
3418da18:	fb01 f303 	mul.w	r3, r1, r3
3418da1c:	4413      	add	r3, r2
3418da1e:	4622      	mov	r2, r4
3418da20:	4641      	mov	r1, r8
3418da22:	fba2 1201 	umull	r1, r2, r2, r1
3418da26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
3418da2a:	460a      	mov	r2, r1
3418da2c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
3418da30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
3418da34:	4413      	add	r3, r2
3418da36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3418da3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
3418da3e:	2200      	movs	r2, #0
3418da40:	673b      	str	r3, [r7, #112]	@ 0x70
3418da42:	677a      	str	r2, [r7, #116]	@ 0x74
3418da44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
3418da48:	17da      	asrs	r2, r3, #31
3418da4a:	66bb      	str	r3, [r7, #104]	@ 0x68
3418da4c:	66fa      	str	r2, [r7, #108]	@ 0x6c
3418da4e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
3418da52:	462b      	mov	r3, r5
3418da54:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
3418da58:	4642      	mov	r2, r8
3418da5a:	fb02 f203 	mul.w	r2, r2, r3
3418da5e:	464b      	mov	r3, r9
3418da60:	4621      	mov	r1, r4
3418da62:	fb01 f303 	mul.w	r3, r1, r3
3418da66:	4413      	add	r3, r2
3418da68:	4622      	mov	r2, r4
3418da6a:	4641      	mov	r1, r8
3418da6c:	fba2 1201 	umull	r1, r2, r2, r1
3418da70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
3418da74:	460a      	mov	r2, r1
3418da76:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
3418da7a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
3418da7e:	4413      	add	r3, r2
3418da80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
3418da84:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
3418da88:	4623      	mov	r3, r4
3418da8a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3418da8e:	4602      	mov	r2, r0
3418da90:	189b      	adds	r3, r3, r2
3418da92:	663b      	str	r3, [r7, #96]	@ 0x60
3418da94:	460b      	mov	r3, r1
3418da96:	462a      	mov	r2, r5
3418da98:	eb42 0303 	adc.w	r3, r2, r3
3418da9c:	667b      	str	r3, [r7, #100]	@ 0x64
3418da9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
3418daa2:	2200      	movs	r2, #0
3418daa4:	65bb      	str	r3, [r7, #88]	@ 0x58
3418daa6:	65fa      	str	r2, [r7, #92]	@ 0x5c
3418daa8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
3418daac:	17da      	asrs	r2, r3, #31
3418daae:	653b      	str	r3, [r7, #80]	@ 0x50
3418dab0:	657a      	str	r2, [r7, #84]	@ 0x54
3418dab2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
3418dab6:	462b      	mov	r3, r5
3418dab8:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
3418dabc:	4642      	mov	r2, r8
3418dabe:	fb02 f203 	mul.w	r2, r2, r3
3418dac2:	464b      	mov	r3, r9
3418dac4:	4621      	mov	r1, r4
3418dac6:	fb01 f303 	mul.w	r3, r1, r3
3418daca:	4413      	add	r3, r2
3418dacc:	4622      	mov	r2, r4
3418dace:	4641      	mov	r1, r8
3418dad0:	fba2 1201 	umull	r1, r2, r2, r1
3418dad4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
3418dad8:	460a      	mov	r2, r1
3418dada:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
3418dade:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
3418dae2:	4413      	add	r3, r2
3418dae4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
3418dae8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
3418daec:	4623      	mov	r3, r4
3418daee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
3418daf2:	4602      	mov	r2, r0
3418daf4:	189b      	adds	r3, r3, r2
3418daf6:	60bb      	str	r3, [r7, #8]
3418daf8:	460b      	mov	r3, r1
3418dafa:	462a      	mov	r2, r5
3418dafc:	eb42 0303 	adc.w	r3, r2, r3
3418db00:	60fb      	str	r3, [r7, #12]
3418db02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
3418db06:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    ccB = (int64_t) inR * colorConv.coeff[2][0] + (int64_t) inG * colorConv.coeff[2][1] + (int64_t) inB * colorConv.coeff[2][2];
3418db0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
3418db0e:	2200      	movs	r2, #0
3418db10:	64bb      	str	r3, [r7, #72]	@ 0x48
3418db12:	64fa      	str	r2, [r7, #76]	@ 0x4c
3418db14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
3418db18:	17da      	asrs	r2, r3, #31
3418db1a:	643b      	str	r3, [r7, #64]	@ 0x40
3418db1c:	647a      	str	r2, [r7, #68]	@ 0x44
3418db1e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
3418db22:	462b      	mov	r3, r5
3418db24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
3418db28:	4642      	mov	r2, r8
3418db2a:	fb02 f203 	mul.w	r2, r2, r3
3418db2e:	464b      	mov	r3, r9
3418db30:	4621      	mov	r1, r4
3418db32:	fb01 f303 	mul.w	r3, r1, r3
3418db36:	4413      	add	r3, r2
3418db38:	4622      	mov	r2, r4
3418db3a:	4641      	mov	r1, r8
3418db3c:	fba2 1201 	umull	r1, r2, r2, r1
3418db40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
3418db44:	460a      	mov	r2, r1
3418db46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
3418db4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
3418db4e:	4413      	add	r3, r2
3418db50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
3418db54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
3418db58:	2200      	movs	r2, #0
3418db5a:	63bb      	str	r3, [r7, #56]	@ 0x38
3418db5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
3418db5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
3418db62:	17da      	asrs	r2, r3, #31
3418db64:	633b      	str	r3, [r7, #48]	@ 0x30
3418db66:	637a      	str	r2, [r7, #52]	@ 0x34
3418db68:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
3418db6c:	462b      	mov	r3, r5
3418db6e:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
3418db72:	4642      	mov	r2, r8
3418db74:	fb02 f203 	mul.w	r2, r2, r3
3418db78:	464b      	mov	r3, r9
3418db7a:	4621      	mov	r1, r4
3418db7c:	fb01 f303 	mul.w	r3, r1, r3
3418db80:	4413      	add	r3, r2
3418db82:	4622      	mov	r2, r4
3418db84:	4641      	mov	r1, r8
3418db86:	fba2 1201 	umull	r1, r2, r2, r1
3418db8a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
3418db8e:	460a      	mov	r2, r1
3418db90:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
3418db94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
3418db98:	4413      	add	r3, r2
3418db9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3418db9e:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
3418dba2:	4623      	mov	r3, r4
3418dba4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
3418dba8:	4602      	mov	r2, r0
3418dbaa:	189b      	adds	r3, r3, r2
3418dbac:	62bb      	str	r3, [r7, #40]	@ 0x28
3418dbae:	460b      	mov	r3, r1
3418dbb0:	462a      	mov	r2, r5
3418dbb2:	eb42 0303 	adc.w	r3, r2, r3
3418dbb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418dbb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
3418dbbc:	2200      	movs	r2, #0
3418dbbe:	623b      	str	r3, [r7, #32]
3418dbc0:	627a      	str	r2, [r7, #36]	@ 0x24
3418dbc2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
3418dbc6:	17da      	asrs	r2, r3, #31
3418dbc8:	61bb      	str	r3, [r7, #24]
3418dbca:	61fa      	str	r2, [r7, #28]
3418dbcc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
3418dbd0:	462b      	mov	r3, r5
3418dbd2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
3418dbd6:	4642      	mov	r2, r8
3418dbd8:	fb02 f203 	mul.w	r2, r2, r3
3418dbdc:	464b      	mov	r3, r9
3418dbde:	4621      	mov	r1, r4
3418dbe0:	fb01 f303 	mul.w	r3, r1, r3
3418dbe4:	4413      	add	r3, r2
3418dbe6:	4622      	mov	r2, r4
3418dbe8:	4641      	mov	r1, r8
3418dbea:	fba2 1201 	umull	r1, r2, r2, r1
3418dbee:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
3418dbf2:	460a      	mov	r2, r1
3418dbf4:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
3418dbf8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
3418dbfc:	4413      	add	r3, r2
3418dbfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
3418dc02:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
3418dc06:	4623      	mov	r3, r4
3418dc08:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
3418dc0c:	4602      	mov	r2, r0
3418dc0e:	189b      	adds	r3, r3, r2
3418dc10:	603b      	str	r3, [r7, #0]
3418dc12:	460b      	mov	r3, r1
3418dc14:	462a      	mov	r2, r5
3418dc16:	eb42 0303 	adc.w	r3, r2, r3
3418dc1a:	607b      	str	r3, [r7, #4]
3418dc1c:	e9d7 2300 	ldrd	r2, r3, [r7]
3418dc20:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

    ccR /= ISP_CCM_PRECISION_FACTOR;
3418dc24:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
3418dc28:	a343      	add	r3, pc, #268	@ (adr r3, 3418dd38 <ISP_Algo_ApplyCConv+0x488>)
3418dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418dc2e:	f7f3 fc85 	bl	3418153c <__aeabi_ldivmod>
3418dc32:	4602      	mov	r2, r0
3418dc34:	460b      	mov	r3, r1
3418dc36:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    ccG /= ISP_CCM_PRECISION_FACTOR;
3418dc3a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
3418dc3e:	a33e      	add	r3, pc, #248	@ (adr r3, 3418dd38 <ISP_Algo_ApplyCConv+0x488>)
3418dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
3418dc44:	f7f3 fc7a 	bl	3418153c <__aeabi_ldivmod>
3418dc48:	4602      	mov	r2, r0
3418dc4a:	460b      	mov	r3, r1
3418dc4c:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    ccB /= ISP_CCM_PRECISION_FACTOR;
3418dc50:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
3418dc54:	a338      	add	r3, pc, #224	@ (adr r3, 3418dd38 <ISP_Algo_ApplyCConv+0x488>)
3418dc56:	e9d3 2300 	ldrd	r2, r3, [r3]
3418dc5a:	f7f3 fc6f 	bl	3418153c <__aeabi_ldivmod>
3418dc5e:	4602      	mov	r2, r0
3418dc60:	460b      	mov	r3, r1
3418dc62:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

    /* Clamp values to 0-255 */
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
3418dc66:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
3418dc6a:	2b00      	cmp	r3, #0
3418dc6c:	db0b      	blt.n	3418dc86 <ISP_Algo_ApplyCConv+0x3d6>
3418dc6e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
3418dc72:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3418dc76:	f173 0100 	sbcs.w	r1, r3, #0
3418dc7a:	db08      	blt.n	3418dc8e <ISP_Algo_ApplyCConv+0x3de>
3418dc7c:	f04f 02ff 	mov.w	r2, #255	@ 0xff
3418dc80:	f04f 0300 	mov.w	r3, #0
3418dc84:	e003      	b.n	3418dc8e <ISP_Algo_ApplyCConv+0x3de>
3418dc86:	f04f 0200 	mov.w	r2, #0
3418dc8a:	f04f 0300 	mov.w	r3, #0
3418dc8e:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    ccG = (ccG < 0) ? 0 : (ccG > 255) ? 255 : ccG;
3418dc92:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
3418dc96:	2b00      	cmp	r3, #0
3418dc98:	db0b      	blt.n	3418dcb2 <ISP_Algo_ApplyCConv+0x402>
3418dc9a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
3418dc9e:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3418dca2:	f173 0100 	sbcs.w	r1, r3, #0
3418dca6:	db08      	blt.n	3418dcba <ISP_Algo_ApplyCConv+0x40a>
3418dca8:	f04f 02ff 	mov.w	r2, #255	@ 0xff
3418dcac:	f04f 0300 	mov.w	r3, #0
3418dcb0:	e003      	b.n	3418dcba <ISP_Algo_ApplyCConv+0x40a>
3418dcb2:	f04f 0200 	mov.w	r2, #0
3418dcb6:	f04f 0300 	mov.w	r3, #0
3418dcba:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    ccB = (ccB < 0) ? 0 : (ccB > 255) ? 255 : ccB;
3418dcbe:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
3418dcc2:	2b00      	cmp	r3, #0
3418dcc4:	db0b      	blt.n	3418dcde <ISP_Algo_ApplyCConv+0x42e>
3418dcc6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
3418dcca:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3418dcce:	f173 0100 	sbcs.w	r1, r3, #0
3418dcd2:	db08      	blt.n	3418dce6 <ISP_Algo_ApplyCConv+0x436>
3418dcd4:	f04f 02ff 	mov.w	r2, #255	@ 0xff
3418dcd8:	f04f 0300 	mov.w	r3, #0
3418dcdc:	e003      	b.n	3418dce6 <ISP_Algo_ApplyCConv+0x436>
3418dcde:	f04f 0200 	mov.w	r2, #0
3418dce2:	f04f 0300 	mov.w	r3, #0
3418dce6:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

    *outR = (uint32_t) ccR;
3418dcea:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
3418dcee:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
3418dcf2:	601a      	str	r2, [r3, #0]
    *outG = (uint32_t) ccG;
3418dcf4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
3418dcf8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
3418dcfc:	601a      	str	r2, [r3, #0]
    *outB = (uint32_t) ccB;
3418dcfe:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
3418dd02:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
3418dd06:	601a      	str	r2, [r3, #0]
3418dd08:	e00f      	b.n	3418dd2a <ISP_Algo_ApplyCConv+0x47a>
  }
  else
  {
    *outR = inR;
3418dd0a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
3418dd0e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
3418dd12:	601a      	str	r2, [r3, #0]
    *outG = inG;
3418dd14:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
3418dd18:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
3418dd1c:	601a      	str	r2, [r3, #0]
    *outB = inB;
3418dd1e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
3418dd22:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
3418dd26:	601a      	str	r2, [r3, #0]
  }
}
3418dd28:	bf00      	nop
3418dd2a:	bf00      	nop
3418dd2c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
3418dd30:	46bd      	mov	sp, r7
3418dd32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3418dd36:	bf00      	nop
3418dd38:	05f5e100 	.word	0x05f5e100
3418dd3c:	00000000 	.word	0x00000000

3418dd40 <ISP_Algo_AWB_Init>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_Init(void *hIsp, void *pAlgo)
{
3418dd40:	b580      	push	{r7, lr}
3418dd42:	b084      	sub	sp, #16
3418dd44:	af00      	add	r7, sp, #0
3418dd46:	6078      	str	r0, [r7, #4]
3418dd48:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
3418dd4a:	683b      	ldr	r3, [r7, #0]
3418dd4c:	60fb      	str	r3, [r7, #12]

  /* Create estimator */
  pIspAWBestimator = evision_api_awb_new(log_cb);
3418dd4e:	480a      	ldr	r0, [pc, #40]	@ (3418dd78 <ISP_Algo_AWB_Init+0x38>)
3418dd50:	f7f2 ff94 	bl	34180c7c <evision_api_awb_new>
3418dd54:	4603      	mov	r3, r0
3418dd56:	4a09      	ldr	r2, [pc, #36]	@ (3418dd7c <ISP_Algo_AWB_Init+0x3c>)
3418dd58:	6013      	str	r3, [r2, #0]
  if (pIspAWBestimator == NULL)
3418dd5a:	4b08      	ldr	r3, [pc, #32]	@ (3418dd7c <ISP_Algo_AWB_Init+0x3c>)
3418dd5c:	681b      	ldr	r3, [r3, #0]
3418dd5e:	2b00      	cmp	r3, #0
3418dd60:	d101      	bne.n	3418dd66 <ISP_Algo_AWB_Init+0x26>
  {
    return ISP_ERR_ALGO;
3418dd62:	23be      	movs	r3, #190	@ 0xbe
3418dd64:	e003      	b.n	3418dd6e <ISP_Algo_AWB_Init+0x2e>
  }

  /* Continue the initialization in ISP_Algo_AWB_Process() function when state is ISP_ALGO_STATE_INIT.
   * This allows to read the IQ params after an algo stop/start cycle */
  algo->state = ISP_ALGO_STATE_INIT;
3418dd66:	68fb      	ldr	r3, [r7, #12]
3418dd68:	2200      	movs	r2, #0
3418dd6a:	705a      	strb	r2, [r3, #1]

  return ISP_OK;
3418dd6c:	2300      	movs	r3, #0
}
3418dd6e:	4618      	mov	r0, r3
3418dd70:	3710      	adds	r7, #16
3418dd72:	46bd      	mov	sp, r7
3418dd74:	bd80      	pop	{r7, pc}
3418dd76:	bf00      	nop
3418dd78:	3418d375 	.word	0x3418d375
3418dd7c:	341c1020 	.word	0x341c1020

3418dd80 <ISP_Algo_AWB_DeInit>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_DeInit(void *hIsp, void *pAlgo)
{
3418dd80:	b580      	push	{r7, lr}
3418dd82:	b082      	sub	sp, #8
3418dd84:	af00      	add	r7, sp, #0
3418dd86:	6078      	str	r0, [r7, #4]
3418dd88:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */
  (void)pAlgo; /* unused */

  if (pIspAWBestimator != NULL)
3418dd8a:	4b07      	ldr	r3, [pc, #28]	@ (3418dda8 <ISP_Algo_AWB_DeInit+0x28>)
3418dd8c:	681b      	ldr	r3, [r3, #0]
3418dd8e:	2b00      	cmp	r3, #0
3418dd90:	d004      	beq.n	3418dd9c <ISP_Algo_AWB_DeInit+0x1c>
  {
    evision_api_awb_delete(pIspAWBestimator);
3418dd92:	4b05      	ldr	r3, [pc, #20]	@ (3418dda8 <ISP_Algo_AWB_DeInit+0x28>)
3418dd94:	681b      	ldr	r3, [r3, #0]
3418dd96:	4618      	mov	r0, r3
3418dd98:	f7f2 ff8c 	bl	34180cb4 <evision_api_awb_delete>
  }

  return ISP_OK;
3418dd9c:	2300      	movs	r3, #0
}
3418dd9e:	4618      	mov	r0, r3
3418dda0:	3708      	adds	r7, #8
3418dda2:	46bd      	mov	sp, r7
3418dda4:	bd80      	pop	{r7, pc}
3418dda6:	bf00      	nop
3418dda8:	341c1020 	.word	0x341c1020

3418ddac <ISP_Algo_AWB_StatCb>:
  *         Callback informing that statistics are available
  * @param  pAlgo: ISP algorithm handle.
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_StatCb(ISP_AlgoTypeDef *pAlgo)
{
3418ddac:	b480      	push	{r7}
3418ddae:	b083      	sub	sp, #12
3418ddb0:	af00      	add	r7, sp, #0
3418ddb2:	6078      	str	r0, [r7, #4]
  /* Update State */
  if (pAlgo->state != ISP_ALGO_STATE_INIT)
3418ddb4:	687b      	ldr	r3, [r7, #4]
3418ddb6:	785b      	ldrb	r3, [r3, #1]
3418ddb8:	2b00      	cmp	r3, #0
3418ddba:	d002      	beq.n	3418ddc2 <ISP_Algo_AWB_StatCb+0x16>
  {
    pAlgo->state = ISP_ALGO_STATE_STAT_READY;
3418ddbc:	687b      	ldr	r3, [r7, #4]
3418ddbe:	2203      	movs	r2, #3
3418ddc0:	705a      	strb	r2, [r3, #1]
  }

  return ISP_OK;
3418ddc2:	2300      	movs	r3, #0
}
3418ddc4:	4618      	mov	r0, r3
3418ddc6:	370c      	adds	r7, #12
3418ddc8:	46bd      	mov	sp, r7
3418ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ddce:	4770      	bx	lr

3418ddd0 <ISP_Algo_AWB_Process>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_Process(void *hIsp, void *pAlgo)
{
3418ddd0:	b580      	push	{r7, lr}
3418ddd2:	b0b6      	sub	sp, #216	@ 0xd8
3418ddd4:	af04      	add	r7, sp, #16
3418ddd6:	6078      	str	r0, [r7, #4]
3418ddd8:	6039      	str	r1, [r7, #0]
  static evision_awb_profile_t awbProfiles[ISP_AWB_COLORTEMP_REF];
  static float colorTempThresholds[ISP_AWB_COLORTEMP_REF - 1];
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_ColorConvTypeDef ColorConvConfig;
  ISP_ISPGainTypeDef ISPGainConfig;
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
3418ddda:	683b      	ldr	r3, [r7, #0]
3418dddc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  ISP_StatusTypeDef ret_stat, ret = ISP_OK;
3418dde0:	2300      	movs	r3, #0
3418dde2:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  evision_return_t e_ret;
  uint32_t ccAvgR, ccAvgG, ccAvgB, colorTemp, i, j, profId, profNb;
  float cfaGains[4], ccmCoeffs[3][3], ccmOffsets[3] = { 0 };
3418dde6:	f107 0320 	add.w	r3, r7, #32
3418ddea:	2200      	movs	r2, #0
3418ddec:	601a      	str	r2, [r3, #0]
3418ddee:	605a      	str	r2, [r3, #4]
3418ddf0:	609a      	str	r2, [r3, #8]
  double meas[3];
  static uint32_t statsHistory[3][3] = { 0 };
  static uint32_t colorTempHistory[2] = { 0 };
  static uint8_t skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_INIT;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3418ddf2:	6878      	ldr	r0, [r7, #4]
3418ddf4:	f001 ffce 	bl	3418fd94 <ISP_SVC_IQParam_Get>
3418ddf8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

  if (IQParamConfig->AWBAlgo.enable == false)
3418ddfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418de00:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
3418de04:	2b00      	cmp	r3, #0
3418de06:	d104      	bne.n	3418de12 <ISP_Algo_AWB_Process+0x42>
  {
    enableCurrent = false;
3418de08:	4bcd      	ldr	r3, [pc, #820]	@ (3418e140 <ISP_Algo_AWB_Process+0x370>)
3418de0a:	2200      	movs	r2, #0
3418de0c:	701a      	strb	r2, [r3, #0]
    return ISP_OK;
3418de0e:	2300      	movs	r3, #0
3418de10:	e38a      	b.n	3418e528 <ISP_Algo_AWB_Process+0x758>
  }
  else if ((enableCurrent == false) || (IQParamConfig->AWBAlgo.enable == ISP_AWB_ENABLE_RECONFIGURE))
3418de12:	4bcb      	ldr	r3, [pc, #812]	@ (3418e140 <ISP_Algo_AWB_Process+0x370>)
3418de14:	781b      	ldrb	r3, [r3, #0]
3418de16:	2b00      	cmp	r3, #0
3418de18:	d005      	beq.n	3418de26 <ISP_Algo_AWB_Process+0x56>
3418de1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418de1e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
3418de22:	2bff      	cmp	r3, #255	@ 0xff
3418de24:	d10e      	bne.n	3418de44 <ISP_Algo_AWB_Process+0x74>
  {
    /* Start or resume algo : set state to INIT in order to read the IQ params */
    algo->state = ISP_ALGO_STATE_INIT;
3418de26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3418de2a:	2200      	movs	r2, #0
3418de2c:	705a      	strb	r2, [r3, #1]
    IQParamConfig->AWBAlgo.enable = true;
3418de2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418de32:	2201      	movs	r2, #1
3418de34:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
    reconfigureRequest = true;
3418de38:	4bc2      	ldr	r3, [pc, #776]	@ (3418e144 <ISP_Algo_AWB_Process+0x374>)
3418de3a:	2201      	movs	r2, #1
3418de3c:	701a      	strb	r2, [r3, #0]
    enableCurrent = true;
3418de3e:	4bc0      	ldr	r3, [pc, #768]	@ (3418e140 <ISP_Algo_AWB_Process+0x370>)
3418de40:	2201      	movs	r2, #1
3418de42:	701a      	strb	r2, [r3, #0]
  }

  switch(algo->state)
3418de44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3418de48:	785b      	ldrb	r3, [r3, #1]
3418de4a:	2b03      	cmp	r3, #3
3418de4c:	f200 836a 	bhi.w	3418e524 <ISP_Algo_AWB_Process+0x754>
3418de50:	a201      	add	r2, pc, #4	@ (adr r2, 3418de58 <ISP_Algo_AWB_Process+0x88>)
3418de52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418de56:	bf00      	nop
3418de58:	3418de69 	.word	0x3418de69
3418de5c:	3418e0f7 	.word	0x3418e0f7
3418de60:	3418e525 	.word	0x3418e525
3418de64:	3418e165 	.word	0x3418e165
  {
  case ISP_ALGO_STATE_INIT:
    /* Set profiles (color temperature, gains, color conv matrix) */
    profNb = 0;
3418de68:	2300      	movs	r3, #0
3418de6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
3418de6e:	2300      	movs	r3, #0
3418de70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3418de74:	e0ca      	b.n	3418e00c <ISP_Algo_AWB_Process+0x23c>
    {
      colorTemp = IQParamConfig->AWBAlgo.referenceColorTemp[profId];
3418de76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3418de7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418de7e:	3344      	adds	r3, #68	@ 0x44
3418de80:	009b      	lsls	r3, r3, #2
3418de82:	4413      	add	r3, r2
3418de84:	685b      	ldr	r3, [r3, #4]
3418de86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if (colorTemp == 0)
3418de8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
3418de8e:	2b00      	cmp	r3, #0
3418de90:	f000 80c2 	beq.w	3418e018 <ISP_Algo_AWB_Process+0x248>
        break;

      if (profNb > 0)
3418de94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418de98:	2b00      	cmp	r3, #0
3418de9a:	d01b      	beq.n	3418ded4 <ISP_Algo_AWB_Process+0x104>
      {
        /* Profile decision threshold = lowest ref. temperature + 1/4 of the distance between two reference temperatures */
        colorTempThresholds[profNb - 1] = (float) ((colorTemp + 3 * IQParamConfig->AWBAlgo.referenceColorTemp[profId - 1]) /4 );
3418de9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418dea0:	3b01      	subs	r3, #1
3418dea2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3418dea6:	3344      	adds	r3, #68	@ 0x44
3418dea8:	009b      	lsls	r3, r3, #2
3418deaa:	4413      	add	r3, r2
3418deac:	685a      	ldr	r2, [r3, #4]
3418deae:	4613      	mov	r3, r2
3418deb0:	005b      	lsls	r3, r3, #1
3418deb2:	441a      	add	r2, r3
3418deb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
3418deb8:	4413      	add	r3, r2
3418deba:	089a      	lsrs	r2, r3, #2
3418debc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418dec0:	3b01      	subs	r3, #1
3418dec2:	ee07 2a90 	vmov	s15, r2
3418dec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
3418deca:	4a9f      	ldr	r2, [pc, #636]	@ (3418e148 <ISP_Algo_AWB_Process+0x378>)
3418decc:	009b      	lsls	r3, r3, #2
3418dece:	4413      	add	r3, r2
3418ded0:	edc3 7a00 	vstr	s15, [r3]
      }

      /* Set cfa gains (RGGB) */
      cfaGains[0] = (float) IQParamConfig->AWBAlgo.ispGainR[profId] / ISP_GAIN_PRECISION_FACTOR;
3418ded4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418ded8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3418dedc:	324a      	adds	r2, #74	@ 0x4a
3418dede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3418dee2:	ee07 3a90 	vmov	s15, r3
3418dee6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418deea:	eddf 6a98 	vldr	s13, [pc, #608]	@ 3418e14c <ISP_Algo_AWB_Process+0x37c>
3418deee:	eec7 7a26 	vdiv.f32	s15, s14, s13
3418def2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
      cfaGains[1] = (float) IQParamConfig->AWBAlgo.ispGainG[profId] / ISP_GAIN_PRECISION_FACTOR;
3418def6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3418defa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418defe:	334e      	adds	r3, #78	@ 0x4e
3418df00:	009b      	lsls	r3, r3, #2
3418df02:	4413      	add	r3, r2
3418df04:	685b      	ldr	r3, [r3, #4]
3418df06:	ee07 3a90 	vmov	s15, r3
3418df0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418df0e:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 3418e14c <ISP_Algo_AWB_Process+0x37c>
3418df12:	eec7 7a26 	vdiv.f32	s15, s14, s13
3418df16:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      cfaGains[2] = cfaGains[1];
3418df1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3418df1c:	65bb      	str	r3, [r7, #88]	@ 0x58
      cfaGains[3] = (float) IQParamConfig->AWBAlgo.ispGainB[profId] / ISP_GAIN_PRECISION_FACTOR;
3418df1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418df22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3418df26:	3254      	adds	r2, #84	@ 0x54
3418df28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3418df2c:	ee07 3a90 	vmov	s15, r3
3418df30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418df34:	eddf 6a85 	vldr	s13, [pc, #532]	@ 3418e14c <ISP_Algo_AWB_Process+0x37c>
3418df38:	eec7 7a26 	vdiv.f32	s15, s14, s13
3418df3c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

      /* Set CCM Coeff */
      for (i = 0; i < 3; i++)
3418df40:	2300      	movs	r3, #0
3418df42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3418df46:	e03b      	b.n	3418dfc0 <ISP_Algo_AWB_Process+0x1f0>
      {
        for (j = 0; j < 3; j++)
3418df48:	2300      	movs	r3, #0
3418df4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3418df4e:	e02e      	b.n	3418dfae <ISP_Algo_AWB_Process+0x1de>
        {
          ccmCoeffs[i][j] = (float) IQParamConfig->AWBAlgo.coeff[profId][i][j] / ISP_CCM_PRECISION_FACTOR;
3418df50:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
3418df54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
3418df58:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
3418df5c:	461a      	mov	r2, r3
3418df5e:	0052      	lsls	r2, r2, #1
3418df60:	441a      	add	r2, r3
3418df62:	460b      	mov	r3, r1
3418df64:	00db      	lsls	r3, r3, #3
3418df66:	440b      	add	r3, r1
3418df68:	441a      	add	r2, r3
3418df6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
3418df6e:	4413      	add	r3, r2
3418df70:	3358      	adds	r3, #88	@ 0x58
3418df72:	009b      	lsls	r3, r3, #2
3418df74:	4403      	add	r3, r0
3418df76:	685b      	ldr	r3, [r3, #4]
3418df78:	ee07 3a90 	vmov	s15, r3
3418df7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3418df80:	eddf 6a72 	vldr	s13, [pc, #456]	@ 3418e14c <ISP_Algo_AWB_Process+0x37c>
3418df84:	eec7 7a26 	vdiv.f32	s15, s14, s13
3418df88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
3418df8c:	4613      	mov	r3, r2
3418df8e:	005b      	lsls	r3, r3, #1
3418df90:	4413      	add	r3, r2
3418df92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
3418df96:	4413      	add	r3, r2
3418df98:	009b      	lsls	r3, r3, #2
3418df9a:	33c8      	adds	r3, #200	@ 0xc8
3418df9c:	443b      	add	r3, r7
3418df9e:	3b9c      	subs	r3, #156	@ 0x9c
3418dfa0:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0; j < 3; j++)
3418dfa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
3418dfa8:	3301      	adds	r3, #1
3418dfaa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3418dfae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
3418dfb2:	2b02      	cmp	r3, #2
3418dfb4:	d9cc      	bls.n	3418df50 <ISP_Algo_AWB_Process+0x180>
      for (i = 0; i < 3; i++)
3418dfb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
3418dfba:	3301      	adds	r3, #1
3418dfbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3418dfc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
3418dfc4:	2b02      	cmp	r3, #2
3418dfc6:	d9bf      	bls.n	3418df48 <ISP_Algo_AWB_Process+0x178>
        }
      }

      /* Set profile */
      evision_api_awb_set_profile(&awbProfiles[profId], (float) colorTemp, cfaGains, ccmCoeffs, ccmOffsets);
3418dfc8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3418dfcc:	4613      	mov	r3, r2
3418dfce:	011b      	lsls	r3, r3, #4
3418dfd0:	4413      	add	r3, r2
3418dfd2:	009b      	lsls	r3, r3, #2
3418dfd4:	4a5e      	ldr	r2, [pc, #376]	@ (3418e150 <ISP_Algo_AWB_Process+0x380>)
3418dfd6:	1898      	adds	r0, r3, r2
3418dfd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
3418dfdc:	ee07 3a90 	vmov	s15, r3
3418dfe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
3418dfe4:	f107 0320 	add.w	r3, r7, #32
3418dfe8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
3418dfec:	f107 0150 	add.w	r1, r7, #80	@ 0x50
3418dff0:	eeb0 0a67 	vmov.f32	s0, s15
3418dff4:	f7f2 fe64 	bl	34180cc0 <evision_api_awb_set_profile>
      profNb++;
3418dff8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418dffc:	3301      	adds	r3, #1
3418dffe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
3418e002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418e006:	3301      	adds	r3, #1
3418e008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3418e00c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418e010:	2b04      	cmp	r3, #4
3418e012:	f67f af30 	bls.w	3418de76 <ISP_Algo_AWB_Process+0xa6>
3418e016:	e000      	b.n	3418e01a <ISP_Algo_AWB_Process+0x24a>
        break;
3418e018:	bf00      	nop
    }

    if (profNb == 0)
3418e01a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418e01e:	2b00      	cmp	r3, #0
3418e020:	d101      	bne.n	3418e026 <ISP_Algo_AWB_Process+0x256>
    {
      return ISP_ERR_WB_COLORTEMP;
3418e022:	2396      	movs	r3, #150	@ 0x96
3418e024:	e280      	b.n	3418e528 <ISP_Algo_AWB_Process+0x758>
    }

    /* Register profiles */
    e_ret = evision_api_awb_init_profiles(pIspAWBestimator, (double) IQParamConfig->AWBAlgo.referenceColorTemp[0],
3418e026:	4b4b      	ldr	r3, [pc, #300]	@ (3418e154 <ISP_Algo_AWB_Process+0x384>)
3418e028:	6818      	ldr	r0, [r3, #0]
3418e02a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418e02e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3418e032:	ee07 3a90 	vmov	s15, r3
3418e036:	eeb8 7b67 	vcvt.f64.u32	d7, s15
                                          (double) IQParamConfig->AWBAlgo.referenceColorTemp[profNb - 1], profNb,
3418e03a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418e03e:	3b01      	subs	r3, #1
3418e040:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3418e044:	3344      	adds	r3, #68	@ 0x44
3418e046:	009b      	lsls	r3, r3, #2
3418e048:	4413      	add	r3, r2
3418e04a:	685b      	ldr	r3, [r3, #4]
    e_ret = evision_api_awb_init_profiles(pIspAWBestimator, (double) IQParamConfig->AWBAlgo.referenceColorTemp[0],
3418e04c:	ee06 3a90 	vmov	s13, r3
3418e050:	eeb8 6b66 	vcvt.f64.u32	d6, s13
3418e054:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418e058:	b299      	uxth	r1, r3
3418e05a:	4b3d      	ldr	r3, [pc, #244]	@ (3418e150 <ISP_Algo_AWB_Process+0x380>)
3418e05c:	4a3a      	ldr	r2, [pc, #232]	@ (3418e148 <ISP_Algo_AWB_Process+0x378>)
3418e05e:	eeb0 1b46 	vmov.f64	d1, d6
3418e062:	eeb0 0b47 	vmov.f64	d0, d7
3418e066:	f7f2 fe4b 	bl	34180d00 <evision_api_awb_init_profiles>
3418e06a:	4603      	mov	r3, r0
3418e06c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
                                          colorTempThresholds, awbProfiles);
    if (e_ret != EVISION_RET_SUCCESS)
3418e070:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
3418e074:	2b01      	cmp	r3, #1
3418e076:	d001      	beq.n	3418e07c <ISP_Algo_AWB_Process+0x2ac>
    {
      return ISP_ERR_ALGO;
3418e078:	23be      	movs	r3, #190	@ 0xbe
3418e07a:	e255      	b.n	3418e528 <ISP_Algo_AWB_Process+0x758>
    }

    /* Configure algo */
    pIspAWBestimator->hyper_params.speed_p_min = 1.35;
3418e07c:	4b35      	ldr	r3, [pc, #212]	@ (3418e154 <ISP_Algo_AWB_Process+0x384>)
3418e07e:	6819      	ldr	r1, [r3, #0]
3418e080:	a32b      	add	r3, pc, #172	@ (adr r3, 3418e130 <ISP_Algo_AWB_Process+0x360>)
3418e082:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e086:	e9c1 23a6 	strd	r2, r3, [r1, #664]	@ 0x298
    pIspAWBestimator->hyper_params.speed_p_max = (profNb < 4)? 1.8 : 2.0;
3418e08a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3418e08e:	2b03      	cmp	r3, #3
3418e090:	d803      	bhi.n	3418e09a <ISP_Algo_AWB_Process+0x2ca>
3418e092:	a329      	add	r3, pc, #164	@ (adr r3, 3418e138 <ISP_Algo_AWB_Process+0x368>)
3418e094:	e9d3 2300 	ldrd	r2, r3, [r3]
3418e098:	e003      	b.n	3418e0a2 <ISP_Algo_AWB_Process+0x2d2>
3418e09a:	f04f 0200 	mov.w	r2, #0
3418e09e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
3418e0a2:	492c      	ldr	r1, [pc, #176]	@ (3418e154 <ISP_Algo_AWB_Process+0x384>)
3418e0a4:	6809      	ldr	r1, [r1, #0]
3418e0a6:	e9c1 23a8 	strd	r2, r3, [r1, #672]	@ 0x2a0
    pIspAWBestimator->hyper_params.gm_tolerance = 1;
3418e0aa:	4b2a      	ldr	r3, [pc, #168]	@ (3418e154 <ISP_Algo_AWB_Process+0x384>)
3418e0ac:	681b      	ldr	r3, [r3, #0]
3418e0ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
3418e0b2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    pIspAWBestimator->hyper_params.conv_criterion = 3;
3418e0b6:	4b27      	ldr	r3, [pc, #156]	@ (3418e154 <ISP_Algo_AWB_Process+0x384>)
3418e0b8:	681b      	ldr	r3, [r3, #0]
3418e0ba:	4a27      	ldr	r2, [pc, #156]	@ (3418e158 <ISP_Algo_AWB_Process+0x388>)
3418e0bc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4

    /* Ask for stats */
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3418e0c0:	2305      	movs	r3, #5
3418e0c2:	9302      	str	r3, [sp, #8]
3418e0c4:	2301      	movs	r3, #1
3418e0c6:	9301      	str	r3, [sp, #4]
3418e0c8:	2302      	movs	r3, #2
3418e0ca:	9300      	str	r3, [sp, #0]
3418e0cc:	4b23      	ldr	r3, [pc, #140]	@ (3418e15c <ISP_Algo_AWB_Process+0x38c>)
3418e0ce:	683a      	ldr	r2, [r7, #0]
3418e0d0:	4923      	ldr	r1, [pc, #140]	@ (3418e160 <ISP_Algo_AWB_Process+0x390>)
3418e0d2:	6878      	ldr	r0, [r7, #4]
3418e0d4:	f002 f9ae 	bl	34190434 <ISP_SVC_Stats_GetNext>
3418e0d8:	4603      	mov	r3, r0
3418e0da:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
                                ISP_STAT_TYPE_AVG, ALGO_ISP_LATENCY + ALGO_AWB_ADDITIONAL_LATENCY);
    if (ret != ISP_OK)
3418e0de:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3418e0e2:	2b00      	cmp	r3, #0
3418e0e4:	d002      	beq.n	3418e0ec <ISP_Algo_AWB_Process+0x31c>
    {
      return ret;
3418e0e6:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3418e0ea:	e21d      	b.n	3418e528 <ISP_Algo_AWB_Process+0x758>
    }

    /* Wait for stats to be ready */
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3418e0ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3418e0f0:	2202      	movs	r2, #2
3418e0f2:	705a      	strb	r2, [r3, #1]
    break;
3418e0f4:	e216      	b.n	3418e524 <ISP_Algo_AWB_Process+0x754>

  case ISP_ALGO_STATE_NEED_STAT:
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3418e0f6:	2305      	movs	r3, #5
3418e0f8:	9302      	str	r3, [sp, #8]
3418e0fa:	2301      	movs	r3, #1
3418e0fc:	9301      	str	r3, [sp, #4]
3418e0fe:	2302      	movs	r3, #2
3418e100:	9300      	str	r3, [sp, #0]
3418e102:	4b16      	ldr	r3, [pc, #88]	@ (3418e15c <ISP_Algo_AWB_Process+0x38c>)
3418e104:	683a      	ldr	r2, [r7, #0]
3418e106:	4916      	ldr	r1, [pc, #88]	@ (3418e160 <ISP_Algo_AWB_Process+0x390>)
3418e108:	6878      	ldr	r0, [r7, #4]
3418e10a:	f002 f993 	bl	34190434 <ISP_SVC_Stats_GetNext>
3418e10e:	4603      	mov	r3, r0
3418e110:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
                                ISP_STAT_TYPE_AVG, ALGO_ISP_LATENCY + ALGO_AWB_ADDITIONAL_LATENCY);
    if (ret != ISP_OK)
3418e114:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3418e118:	2b00      	cmp	r3, #0
3418e11a:	d002      	beq.n	3418e122 <ISP_Algo_AWB_Process+0x352>
    {
      return ret;
3418e11c:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3418e120:	e202      	b.n	3418e528 <ISP_Algo_AWB_Process+0x758>
    }

    /* Wait for stats to be ready */
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3418e122:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3418e126:	2202      	movs	r2, #2
3418e128:	705a      	strb	r2, [r3, #1]
    break;
3418e12a:	e1fb      	b.n	3418e524 <ISP_Algo_AWB_Process+0x754>
3418e12c:	f3af 8000 	nop.w
3418e130:	9999999a 	.word	0x9999999a
3418e134:	3ff59999 	.word	0x3ff59999
3418e138:	cccccccd 	.word	0xcccccccd
3418e13c:	3ffccccc 	.word	0x3ffccccc
3418e140:	341c10c0 	.word	0x341c10c0
3418e144:	341c10c1 	.word	0x341c10c1
3418e148:	341c10c4 	.word	0x341c10c4
3418e14c:	4cbebc20 	.word	0x4cbebc20
3418e150:	341c10d4 	.word	0x341c10d4
3418e154:	341c1020 	.word	0x341c1020
3418e158:	40400000 	.word	0x40400000
3418e15c:	341c1228 	.word	0x341c1228
3418e160:	3418ddad 	.word	0x3418ddad
  case ISP_ALGO_STATE_WAITING_STAT:
    /* Do nothing */
    break;

  case ISP_ALGO_STATE_STAT_READY:
    ISP_Algo_GetUpStat(hIsp, &stats);
3418e164:	4992      	ldr	r1, [pc, #584]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e166:	6878      	ldr	r0, [r7, #4]
3418e168:	f7ff fad0 	bl	3418d70c <ISP_Algo_GetUpStat>

    if (!(!skip_stat_check_count && (abs(stats.up.averageR - statsHistory[0][0]) <= 2) && (abs(stats.up.averageG - statsHistory[0][1]) <= 2) && (abs(stats.up.averageB - statsHistory[0][2]) <= 2)
3418e16c:	4b91      	ldr	r3, [pc, #580]	@ (3418e3b4 <ISP_Algo_AWB_Process+0x5e4>)
3418e16e:	781b      	ldrb	r3, [r3, #0]
3418e170:	2b00      	cmp	r3, #0
3418e172:	d163      	bne.n	3418e23c <ISP_Algo_AWB_Process+0x46c>
3418e174:	4b8e      	ldr	r3, [pc, #568]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e176:	781b      	ldrb	r3, [r3, #0]
3418e178:	461a      	mov	r2, r3
3418e17a:	4b8f      	ldr	r3, [pc, #572]	@ (3418e3b8 <ISP_Algo_AWB_Process+0x5e8>)
3418e17c:	681b      	ldr	r3, [r3, #0]
3418e17e:	1ad3      	subs	r3, r2, r3
3418e180:	2b00      	cmp	r3, #0
3418e182:	bfb8      	it	lt
3418e184:	425b      	neglt	r3, r3
3418e186:	2b02      	cmp	r3, #2
3418e188:	dc58      	bgt.n	3418e23c <ISP_Algo_AWB_Process+0x46c>
3418e18a:	4b89      	ldr	r3, [pc, #548]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e18c:	785b      	ldrb	r3, [r3, #1]
3418e18e:	461a      	mov	r2, r3
3418e190:	4b89      	ldr	r3, [pc, #548]	@ (3418e3b8 <ISP_Algo_AWB_Process+0x5e8>)
3418e192:	685b      	ldr	r3, [r3, #4]
3418e194:	1ad3      	subs	r3, r2, r3
3418e196:	2b00      	cmp	r3, #0
3418e198:	bfb8      	it	lt
3418e19a:	425b      	neglt	r3, r3
3418e19c:	2b02      	cmp	r3, #2
3418e19e:	dc4d      	bgt.n	3418e23c <ISP_Algo_AWB_Process+0x46c>
3418e1a0:	4b83      	ldr	r3, [pc, #524]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e1a2:	789b      	ldrb	r3, [r3, #2]
3418e1a4:	461a      	mov	r2, r3
3418e1a6:	4b84      	ldr	r3, [pc, #528]	@ (3418e3b8 <ISP_Algo_AWB_Process+0x5e8>)
3418e1a8:	689b      	ldr	r3, [r3, #8]
3418e1aa:	1ad3      	subs	r3, r2, r3
3418e1ac:	2b00      	cmp	r3, #0
3418e1ae:	bfb8      	it	lt
3418e1b0:	425b      	neglt	r3, r3
3418e1b2:	2b02      	cmp	r3, #2
3418e1b4:	dc42      	bgt.n	3418e23c <ISP_Algo_AWB_Process+0x46c>
        && (abs(stats.up.averageR - statsHistory[1][0]) <= 2) && (abs(stats.up.averageG - statsHistory[1][1]) <= 2) && (abs(stats.up.averageB - statsHistory[1][2]) <= 2)
3418e1b6:	4b7e      	ldr	r3, [pc, #504]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e1b8:	781b      	ldrb	r3, [r3, #0]
3418e1ba:	461a      	mov	r2, r3
3418e1bc:	4b7e      	ldr	r3, [pc, #504]	@ (3418e3b8 <ISP_Algo_AWB_Process+0x5e8>)
3418e1be:	68db      	ldr	r3, [r3, #12]
3418e1c0:	1ad3      	subs	r3, r2, r3
3418e1c2:	2b00      	cmp	r3, #0
3418e1c4:	bfb8      	it	lt
3418e1c6:	425b      	neglt	r3, r3
3418e1c8:	2b02      	cmp	r3, #2
3418e1ca:	dc37      	bgt.n	3418e23c <ISP_Algo_AWB_Process+0x46c>
3418e1cc:	4b78      	ldr	r3, [pc, #480]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e1ce:	785b      	ldrb	r3, [r3, #1]
3418e1d0:	461a      	mov	r2, r3
3418e1d2:	4b79      	ldr	r3, [pc, #484]	@ (3418e3b8 <ISP_Algo_AWB_Process+0x5e8>)
3418e1d4:	691b      	ldr	r3, [r3, #16]
3418e1d6:	1ad3      	subs	r3, r2, r3
3418e1d8:	2b00      	cmp	r3, #0
3418e1da:	bfb8      	it	lt
3418e1dc:	425b      	neglt	r3, r3
3418e1de:	2b02      	cmp	r3, #2
3418e1e0:	dc2c      	bgt.n	3418e23c <ISP_Algo_AWB_Process+0x46c>
3418e1e2:	4b73      	ldr	r3, [pc, #460]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e1e4:	789b      	ldrb	r3, [r3, #2]
3418e1e6:	461a      	mov	r2, r3
3418e1e8:	4b73      	ldr	r3, [pc, #460]	@ (3418e3b8 <ISP_Algo_AWB_Process+0x5e8>)
3418e1ea:	695b      	ldr	r3, [r3, #20]
3418e1ec:	1ad3      	subs	r3, r2, r3
3418e1ee:	2b00      	cmp	r3, #0
3418e1f0:	bfb8      	it	lt
3418e1f2:	425b      	neglt	r3, r3
3418e1f4:	2b02      	cmp	r3, #2
3418e1f6:	dc21      	bgt.n	3418e23c <ISP_Algo_AWB_Process+0x46c>
        && (abs(stats.up.averageR - statsHistory[2][0]) <= 2) && (abs(stats.up.averageG - statsHistory[2][1]) <= 2) && (abs(stats.up.averageB - statsHistory[2][2]) <= 2)))
3418e1f8:	4b6d      	ldr	r3, [pc, #436]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e1fa:	781b      	ldrb	r3, [r3, #0]
3418e1fc:	461a      	mov	r2, r3
3418e1fe:	4b6e      	ldr	r3, [pc, #440]	@ (3418e3b8 <ISP_Algo_AWB_Process+0x5e8>)
3418e200:	699b      	ldr	r3, [r3, #24]
3418e202:	1ad3      	subs	r3, r2, r3
3418e204:	2b00      	cmp	r3, #0
3418e206:	bfb8      	it	lt
3418e208:	425b      	neglt	r3, r3
3418e20a:	2b02      	cmp	r3, #2
3418e20c:	dc16      	bgt.n	3418e23c <ISP_Algo_AWB_Process+0x46c>
3418e20e:	4b68      	ldr	r3, [pc, #416]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e210:	785b      	ldrb	r3, [r3, #1]
3418e212:	461a      	mov	r2, r3
3418e214:	4b68      	ldr	r3, [pc, #416]	@ (3418e3b8 <ISP_Algo_AWB_Process+0x5e8>)
3418e216:	69db      	ldr	r3, [r3, #28]
3418e218:	1ad3      	subs	r3, r2, r3
3418e21a:	2b00      	cmp	r3, #0
3418e21c:	bfb8      	it	lt
3418e21e:	425b      	neglt	r3, r3
3418e220:	2b02      	cmp	r3, #2
3418e222:	dc0b      	bgt.n	3418e23c <ISP_Algo_AWB_Process+0x46c>
3418e224:	4b62      	ldr	r3, [pc, #392]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e226:	789b      	ldrb	r3, [r3, #2]
3418e228:	461a      	mov	r2, r3
3418e22a:	4b63      	ldr	r3, [pc, #396]	@ (3418e3b8 <ISP_Algo_AWB_Process+0x5e8>)
3418e22c:	6a1b      	ldr	r3, [r3, #32]
3418e22e:	1ad3      	subs	r3, r2, r3
3418e230:	2b00      	cmp	r3, #0
3418e232:	bfb8      	it	lt
3418e234:	425b      	neglt	r3, r3
    if (!(!skip_stat_check_count && (abs(stats.up.averageR - statsHistory[0][0]) <= 2) && (abs(stats.up.averageG - statsHistory[0][1]) <= 2) && (abs(stats.up.averageB - statsHistory[0][2]) <= 2)
3418e236:	2b02      	cmp	r3, #2
3418e238:	f340 8128 	ble.w	3418e48c <ISP_Algo_AWB_Process+0x6bc>
    {
        statsHistory[2][0] = stats.up.averageR;
3418e23c:	4b5c      	ldr	r3, [pc, #368]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e23e:	781b      	ldrb	r3, [r3, #0]
3418e240:	461a      	mov	r2, r3
3418e242:	4b5d      	ldr	r3, [pc, #372]	@ (3418e3b8 <ISP_Algo_AWB_Process+0x5e8>)
3418e244:	619a      	str	r2, [r3, #24]
        statsHistory[2][1] = stats.up.averageG;
3418e246:	4b5a      	ldr	r3, [pc, #360]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e248:	785b      	ldrb	r3, [r3, #1]
3418e24a:	461a      	mov	r2, r3
3418e24c:	4b5a      	ldr	r3, [pc, #360]	@ (3418e3b8 <ISP_Algo_AWB_Process+0x5e8>)
3418e24e:	61da      	str	r2, [r3, #28]
        statsHistory[2][2] = stats.up.averageB;
3418e250:	4b57      	ldr	r3, [pc, #348]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e252:	789b      	ldrb	r3, [r3, #2]
3418e254:	461a      	mov	r2, r3
3418e256:	4b58      	ldr	r3, [pc, #352]	@ (3418e3b8 <ISP_Algo_AWB_Process+0x5e8>)
3418e258:	621a      	str	r2, [r3, #32]

        /* Get stats after color conversion */
        ISP_Algo_ApplyCConv(hIsp, stats.down.averageR, stats.down.averageG, stats.down.averageB, &ccAvgR, &ccAvgG, &ccAvgB);
3418e25a:	4b55      	ldr	r3, [pc, #340]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e25c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
3418e260:	4619      	mov	r1, r3
3418e262:	4b53      	ldr	r3, [pc, #332]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e264:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
3418e268:	461a      	mov	r2, r3
3418e26a:	4b51      	ldr	r3, [pc, #324]	@ (3418e3b0 <ISP_Algo_AWB_Process+0x5e0>)
3418e26c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
3418e270:	4618      	mov	r0, r3
3418e272:	f107 0360 	add.w	r3, r7, #96	@ 0x60
3418e276:	9302      	str	r3, [sp, #8]
3418e278:	f107 0364 	add.w	r3, r7, #100	@ 0x64
3418e27c:	9301      	str	r3, [sp, #4]
3418e27e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
3418e282:	9300      	str	r3, [sp, #0]
3418e284:	4603      	mov	r3, r0
3418e286:	6878      	ldr	r0, [r7, #4]
3418e288:	f7ff fb12 	bl	3418d8b0 <ISP_Algo_ApplyCConv>

        /* Apply gamma */
        meas[0] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgR);
3418e28c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418e28e:	4619      	mov	r1, r3
3418e290:	6878      	ldr	r0, [r7, #4]
3418e292:	f7ff f9f9 	bl	3418d688 <ISP_Algo_ApplyGammaInverse>
3418e296:	eeb0 7b40 	vmov.f64	d7, d0
3418e29a:	ed87 7b02 	vstr	d7, [r7, #8]
        meas[1] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgG);
3418e29e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
3418e2a0:	4619      	mov	r1, r3
3418e2a2:	6878      	ldr	r0, [r7, #4]
3418e2a4:	f7ff f9f0 	bl	3418d688 <ISP_Algo_ApplyGammaInverse>
3418e2a8:	eeb0 7b40 	vmov.f64	d7, d0
3418e2ac:	ed87 7b04 	vstr	d7, [r7, #16]
        meas[2] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgB);
3418e2b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
3418e2b2:	4619      	mov	r1, r3
3418e2b4:	6878      	ldr	r0, [r7, #4]
3418e2b6:	f7ff f9e7 	bl	3418d688 <ISP_Algo_ApplyGammaInverse>
3418e2ba:	eeb0 7b40 	vmov.f64	d7, d0
3418e2be:	ed87 7b06 	vstr	d7, [r7, #24]

        /* Run algo to estimate gain and color conversion to apply */
        e_ret = evision_api_awb_run_average(pIspAWBestimator, NULL, 1, meas);
3418e2c2:	4b3e      	ldr	r3, [pc, #248]	@ (3418e3bc <ISP_Algo_AWB_Process+0x5ec>)
3418e2c4:	6818      	ldr	r0, [r3, #0]
3418e2c6:	f107 0308 	add.w	r3, r7, #8
3418e2ca:	2201      	movs	r2, #1
3418e2cc:	2100      	movs	r1, #0
3418e2ce:	f7f2 feed 	bl	341810ac <evision_api_awb_run_average>
3418e2d2:	4603      	mov	r3, r0
3418e2d4:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
        if (e_ret == EVISION_RET_SUCCESS)
3418e2d8:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
3418e2dc:	2b01      	cmp	r3, #1
3418e2de:	f040 80d2 	bne.w	3418e486 <ISP_Algo_AWB_Process+0x6b6>
            for (int i = 0; i < ISP_AWB_COLORTEMP_REF; i++) {
              nb_colortemp_change[i] = 0;
            }
          }
#endif
          if (pIspAWBestimator->out_temp != currentColorTemp || reconfigureRequest == true)
3418e2e2:	4b36      	ldr	r3, [pc, #216]	@ (3418e3bc <ISP_Algo_AWB_Process+0x5ec>)
3418e2e4:	681b      	ldr	r3, [r3, #0]
3418e2e6:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
3418e2ea:	4b35      	ldr	r3, [pc, #212]	@ (3418e3c0 <ISP_Algo_AWB_Process+0x5f0>)
3418e2ec:	681b      	ldr	r3, [r3, #0]
3418e2ee:	ee07 3a90 	vmov	s15, r3
3418e2f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3418e2f6:	eeb4 6b47 	vcmp.f64	d6, d7
3418e2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418e2fe:	d104      	bne.n	3418e30a <ISP_Algo_AWB_Process+0x53a>
3418e300:	4b30      	ldr	r3, [pc, #192]	@ (3418e3c4 <ISP_Algo_AWB_Process+0x5f4>)
3418e302:	781b      	ldrb	r3, [r3, #0]
3418e304:	2b01      	cmp	r3, #1
3418e306:	f040 80c1 	bne.w	3418e48c <ISP_Algo_AWB_Process+0x6bc>
          {
            /* Force to apply a WB profile when reconfigureRequest is true */
            reconfigureRequest = false;
3418e30a:	4b2e      	ldr	r3, [pc, #184]	@ (3418e3c4 <ISP_Algo_AWB_Process+0x5f4>)
3418e30c:	2200      	movs	r2, #0
3418e30e:	701a      	strb	r2, [r3, #0]
#ifdef ALGO_AWB_DBG_LOGS
            printf("Color temperature = %ld\r\n", (uint32_t) pIspAWBestimator->out_temp);
#endif
            if (pIspAWBestimator->out_temp == colorTempHistory[1])
3418e310:	4b2a      	ldr	r3, [pc, #168]	@ (3418e3bc <ISP_Algo_AWB_Process+0x5ec>)
3418e312:	681b      	ldr	r3, [r3, #0]
3418e314:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
3418e318:	4b2b      	ldr	r3, [pc, #172]	@ (3418e3c8 <ISP_Algo_AWB_Process+0x5f8>)
3418e31a:	685b      	ldr	r3, [r3, #4]
3418e31c:	ee07 3a90 	vmov	s15, r3
3418e320:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3418e324:	eeb4 6b47 	vcmp.f64	d6, d7
3418e328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418e32c:	d103      	bne.n	3418e336 <ISP_Algo_AWB_Process+0x566>
            {
              skip_stat_check_count = 0; //oscillation detected
3418e32e:	4b21      	ldr	r3, [pc, #132]	@ (3418e3b4 <ISP_Algo_AWB_Process+0x5e4>)
3418e330:	2200      	movs	r2, #0
3418e332:	701a      	strb	r2, [r3, #0]
3418e334:	e0aa      	b.n	3418e48c <ISP_Algo_AWB_Process+0x6bc>
            }
            else
            {
              if (skip_stat_check_count <= ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION) skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
3418e336:	4b1f      	ldr	r3, [pc, #124]	@ (3418e3b4 <ISP_Algo_AWB_Process+0x5e4>)
3418e338:	781b      	ldrb	r3, [r3, #0]
3418e33a:	2b04      	cmp	r3, #4
3418e33c:	d802      	bhi.n	3418e344 <ISP_Algo_AWB_Process+0x574>
3418e33e:	4b1d      	ldr	r3, [pc, #116]	@ (3418e3b4 <ISP_Algo_AWB_Process+0x5e4>)
3418e340:	2204      	movs	r2, #4
3418e342:	701a      	strb	r2, [r3, #0]

              /* Store meta data */
              Meta.colorTemp = (uint32_t) pIspAWBestimator->out_temp;
3418e344:	4b1d      	ldr	r3, [pc, #116]	@ (3418e3bc <ISP_Algo_AWB_Process+0x5ec>)
3418e346:	681b      	ldr	r3, [r3, #0]
3418e348:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
3418e34c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
3418e350:	ee17 2a90 	vmov	r2, s15
3418e354:	4b1d      	ldr	r3, [pc, #116]	@ (3418e3cc <ISP_Algo_AWB_Process+0x5fc>)
3418e356:	611a      	str	r2, [r3, #16]

              /* Find the index profile for this referenceColorTemp */
              for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
3418e358:	2300      	movs	r3, #0
3418e35a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3418e35e:	e019      	b.n	3418e394 <ISP_Algo_AWB_Process+0x5c4>
              {
                if (pIspAWBestimator->out_temp == IQParamConfig->AWBAlgo.referenceColorTemp[profId])
3418e360:	4b16      	ldr	r3, [pc, #88]	@ (3418e3bc <ISP_Algo_AWB_Process+0x5ec>)
3418e362:	681b      	ldr	r3, [r3, #0]
3418e364:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
3418e368:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3418e36c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418e370:	3344      	adds	r3, #68	@ 0x44
3418e372:	009b      	lsls	r3, r3, #2
3418e374:	4413      	add	r3, r2
3418e376:	685b      	ldr	r3, [r3, #4]
3418e378:	ee07 3a90 	vmov	s15, r3
3418e37c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3418e380:	eeb4 6b47 	vcmp.f64	d6, d7
3418e384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418e388:	d009      	beq.n	3418e39e <ISP_Algo_AWB_Process+0x5ce>
              for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
3418e38a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418e38e:	3301      	adds	r3, #1
3418e390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3418e394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418e398:	2b04      	cmp	r3, #4
3418e39a:	d9e1      	bls.n	3418e360 <ISP_Algo_AWB_Process+0x590>
3418e39c:	e000      	b.n	3418e3a0 <ISP_Algo_AWB_Process+0x5d0>
                  break;
3418e39e:	bf00      	nop
              }

              if (profId == ISP_AWB_COLORTEMP_REF)
3418e3a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418e3a4:	2b05      	cmp	r3, #5
3418e3a6:	d113      	bne.n	3418e3d0 <ISP_Algo_AWB_Process+0x600>
              {
                /* Unknown profile */
                ret  = ISP_ERR_WB_COLORTEMP;
3418e3a8:	2396      	movs	r3, #150	@ 0x96
3418e3aa:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
3418e3ae:	e06d      	b.n	3418e48c <ISP_Algo_AWB_Process+0x6bc>
3418e3b0:	341c1228 	.word	0x341c1228
3418e3b4:	341c00d0 	.word	0x341c00d0
3418e3b8:	341c12a0 	.word	0x341c12a0
3418e3bc:	341c1020 	.word	0x341c1020
3418e3c0:	341c12c4 	.word	0x341c12c4
3418e3c4:	341c10c1 	.word	0x341c10c1
3418e3c8:	341c12c8 	.word	0x341c12c8
3418e3cc:	341c1028 	.word	0x341c1028
              }
              else
              {
                /* Apply Color Conversion */
                ColorConvConfig.enable = 1;
3418e3d0:	2301      	movs	r3, #1
3418e3d2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                memcpy(ColorConvConfig.coeff, IQParamConfig->AWBAlgo.coeff[profId], sizeof(ColorConvConfig.coeff));
3418e3d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3418e3da:	4613      	mov	r3, r2
3418e3dc:	00db      	lsls	r3, r3, #3
3418e3de:	4413      	add	r3, r2
3418e3e0:	009b      	lsls	r3, r3, #2
3418e3e2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
3418e3e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3418e3ea:	4413      	add	r3, r2
3418e3ec:	1d19      	adds	r1, r3, #4
3418e3ee:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
3418e3f2:	3304      	adds	r3, #4
3418e3f4:	2224      	movs	r2, #36	@ 0x24
3418e3f6:	4618      	mov	r0, r3
3418e3f8:	f003 fdcd 	bl	34191f96 <memcpy>
                ret = ISP_SVC_ISP_SetColorConv(hIsp, &ColorConvConfig);
3418e3fc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
3418e400:	4619      	mov	r1, r3
3418e402:	6878      	ldr	r0, [r7, #4]
3418e404:	f001 fa0e 	bl	3418f824 <ISP_SVC_ISP_SetColorConv>
3418e408:	4603      	mov	r3, r0
3418e40a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

                /* Apply gain */
                if (ret == ISP_OK)
3418e40e:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3418e412:	2b00      	cmp	r3, #0
3418e414:	d13a      	bne.n	3418e48c <ISP_Algo_AWB_Process+0x6bc>
                {
                  ISPGainConfig.enable = 1;
3418e416:	2301      	movs	r3, #1
3418e418:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
                  ISPGainConfig.ispGainR = IQParamConfig->AWBAlgo.ispGainR[profId];
3418e41c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418e420:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3418e424:	324a      	adds	r2, #74	@ 0x4a
3418e426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3418e42a:	673b      	str	r3, [r7, #112]	@ 0x70
                  ISPGainConfig.ispGainG = IQParamConfig->AWBAlgo.ispGainG[profId];
3418e42c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3418e430:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418e434:	334e      	adds	r3, #78	@ 0x4e
3418e436:	009b      	lsls	r3, r3, #2
3418e438:	4413      	add	r3, r2
3418e43a:	685b      	ldr	r3, [r3, #4]
3418e43c:	677b      	str	r3, [r7, #116]	@ 0x74
                  ISPGainConfig.ispGainB = IQParamConfig->AWBAlgo.ispGainB[profId];
3418e43e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3418e442:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3418e446:	3254      	adds	r2, #84	@ 0x54
3418e448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3418e44c:	67bb      	str	r3, [r7, #120]	@ 0x78
                  ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGainConfig);
3418e44e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
3418e452:	4619      	mov	r1, r3
3418e454:	6878      	ldr	r0, [r7, #4]
3418e456:	f001 f93b 	bl	3418f6d0 <ISP_SVC_ISP_SetGain>
3418e45a:	4603      	mov	r3, r0
3418e45c:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
                  if (ret == ISP_OK)
3418e460:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3418e464:	2b00      	cmp	r3, #0
3418e466:	d111      	bne.n	3418e48c <ISP_Algo_AWB_Process+0x6bc>
                  {
                    currentColorTemp = (uint32_t) pIspAWBestimator->out_temp ;
3418e468:	4b31      	ldr	r3, [pc, #196]	@ (3418e530 <ISP_Algo_AWB_Process+0x760>)
3418e46a:	681b      	ldr	r3, [r3, #0]
3418e46c:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
3418e470:	eefc 7bc7 	vcvt.u32.f64	s15, d7
3418e474:	ee17 2a90 	vmov	r2, s15
3418e478:	4b2e      	ldr	r3, [pc, #184]	@ (3418e534 <ISP_Algo_AWB_Process+0x764>)
3418e47a:	601a      	str	r2, [r3, #0]
                    current_awb_profId = profId;
3418e47c:	4a2e      	ldr	r2, [pc, #184]	@ (3418e538 <ISP_Algo_AWB_Process+0x768>)
3418e47e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3418e482:	6013      	str	r3, [r2, #0]
3418e484:	e002      	b.n	3418e48c <ISP_Algo_AWB_Process+0x6bc>
            }
          }
        }
        else
        {
          ret = ISP_ERR_ALGO;
3418e486:	23be      	movs	r3, #190	@ 0xbe
3418e488:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
        }
    }

    /* Decrease counter to limit the number of estimations before reaching convergence */
    if (skip_stat_check_count > 0) skip_stat_check_count--;
3418e48c:	4b2b      	ldr	r3, [pc, #172]	@ (3418e53c <ISP_Algo_AWB_Process+0x76c>)
3418e48e:	781b      	ldrb	r3, [r3, #0]
3418e490:	2b00      	cmp	r3, #0
3418e492:	d005      	beq.n	3418e4a0 <ISP_Algo_AWB_Process+0x6d0>
3418e494:	4b29      	ldr	r3, [pc, #164]	@ (3418e53c <ISP_Algo_AWB_Process+0x76c>)
3418e496:	781b      	ldrb	r3, [r3, #0]
3418e498:	3b01      	subs	r3, #1
3418e49a:	b2da      	uxtb	r2, r3
3418e49c:	4b27      	ldr	r3, [pc, #156]	@ (3418e53c <ISP_Algo_AWB_Process+0x76c>)
3418e49e:	701a      	strb	r2, [r3, #0]

    /* Store history to be able to detect variations*/
    statsHistory[1][0] = statsHistory[0][0];
3418e4a0:	4b27      	ldr	r3, [pc, #156]	@ (3418e540 <ISP_Algo_AWB_Process+0x770>)
3418e4a2:	681b      	ldr	r3, [r3, #0]
3418e4a4:	4a26      	ldr	r2, [pc, #152]	@ (3418e540 <ISP_Algo_AWB_Process+0x770>)
3418e4a6:	60d3      	str	r3, [r2, #12]
    statsHistory[1][1] = statsHistory[0][1];
3418e4a8:	4b25      	ldr	r3, [pc, #148]	@ (3418e540 <ISP_Algo_AWB_Process+0x770>)
3418e4aa:	685b      	ldr	r3, [r3, #4]
3418e4ac:	4a24      	ldr	r2, [pc, #144]	@ (3418e540 <ISP_Algo_AWB_Process+0x770>)
3418e4ae:	6113      	str	r3, [r2, #16]
    statsHistory[1][2] = statsHistory[0][2];
3418e4b0:	4b23      	ldr	r3, [pc, #140]	@ (3418e540 <ISP_Algo_AWB_Process+0x770>)
3418e4b2:	689b      	ldr	r3, [r3, #8]
3418e4b4:	4a22      	ldr	r2, [pc, #136]	@ (3418e540 <ISP_Algo_AWB_Process+0x770>)
3418e4b6:	6153      	str	r3, [r2, #20]
    statsHistory[0][0] = stats.up.averageR;
3418e4b8:	4b22      	ldr	r3, [pc, #136]	@ (3418e544 <ISP_Algo_AWB_Process+0x774>)
3418e4ba:	781b      	ldrb	r3, [r3, #0]
3418e4bc:	461a      	mov	r2, r3
3418e4be:	4b20      	ldr	r3, [pc, #128]	@ (3418e540 <ISP_Algo_AWB_Process+0x770>)
3418e4c0:	601a      	str	r2, [r3, #0]
    statsHistory[0][1] = stats.up.averageG;
3418e4c2:	4b20      	ldr	r3, [pc, #128]	@ (3418e544 <ISP_Algo_AWB_Process+0x774>)
3418e4c4:	785b      	ldrb	r3, [r3, #1]
3418e4c6:	461a      	mov	r2, r3
3418e4c8:	4b1d      	ldr	r3, [pc, #116]	@ (3418e540 <ISP_Algo_AWB_Process+0x770>)
3418e4ca:	605a      	str	r2, [r3, #4]
    statsHistory[0][2] = stats.up.averageB;
3418e4cc:	4b1d      	ldr	r3, [pc, #116]	@ (3418e544 <ISP_Algo_AWB_Process+0x774>)
3418e4ce:	789b      	ldrb	r3, [r3, #2]
3418e4d0:	461a      	mov	r2, r3
3418e4d2:	4b1b      	ldr	r3, [pc, #108]	@ (3418e540 <ISP_Algo_AWB_Process+0x770>)
3418e4d4:	609a      	str	r2, [r3, #8]
    colorTempHistory[1] = colorTempHistory[0];
3418e4d6:	4b1c      	ldr	r3, [pc, #112]	@ (3418e548 <ISP_Algo_AWB_Process+0x778>)
3418e4d8:	681b      	ldr	r3, [r3, #0]
3418e4da:	4a1b      	ldr	r2, [pc, #108]	@ (3418e548 <ISP_Algo_AWB_Process+0x778>)
3418e4dc:	6053      	str	r3, [r2, #4]
    colorTempHistory[0] = currentColorTemp;
3418e4de:	4b15      	ldr	r3, [pc, #84]	@ (3418e534 <ISP_Algo_AWB_Process+0x764>)
3418e4e0:	681b      	ldr	r3, [r3, #0]
3418e4e2:	4a19      	ldr	r2, [pc, #100]	@ (3418e548 <ISP_Algo_AWB_Process+0x778>)
3418e4e4:	6013      	str	r3, [r2, #0]

    /* Ask for stats */
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3418e4e6:	2305      	movs	r3, #5
3418e4e8:	9302      	str	r3, [sp, #8]
3418e4ea:	2301      	movs	r3, #1
3418e4ec:	9301      	str	r3, [sp, #4]
3418e4ee:	2302      	movs	r3, #2
3418e4f0:	9300      	str	r3, [sp, #0]
3418e4f2:	4b14      	ldr	r3, [pc, #80]	@ (3418e544 <ISP_Algo_AWB_Process+0x774>)
3418e4f4:	683a      	ldr	r2, [r7, #0]
3418e4f6:	4915      	ldr	r1, [pc, #84]	@ (3418e54c <ISP_Algo_AWB_Process+0x77c>)
3418e4f8:	6878      	ldr	r0, [r7, #4]
3418e4fa:	f001 ff9b 	bl	34190434 <ISP_SVC_Stats_GetNext>
3418e4fe:	4603      	mov	r3, r0
3418e500:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
                                     ISP_STAT_TYPE_AVG, ALGO_ISP_LATENCY + ALGO_AWB_ADDITIONAL_LATENCY);
    ret = (ret != ISP_OK) ? ret : ret_stat;
3418e504:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3418e508:	2b00      	cmp	r3, #0
3418e50a:	d002      	beq.n	3418e512 <ISP_Algo_AWB_Process+0x742>
3418e50c:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3418e510:	e001      	b.n	3418e516 <ISP_Algo_AWB_Process+0x746>
3418e512:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
3418e516:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

    /* Wait for stats to be ready */
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3418e51a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3418e51e:	2202      	movs	r2, #2
3418e520:	705a      	strb	r2, [r3, #1]
    break;
3418e522:	bf00      	nop
  }

  return ret;
3418e524:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
}
3418e528:	4618      	mov	r0, r3
3418e52a:	37c8      	adds	r7, #200	@ 0xc8
3418e52c:	46bd      	mov	sp, r7
3418e52e:	bd80      	pop	{r7, pc}
3418e530:	341c1020 	.word	0x341c1020
3418e534:	341c12c4 	.word	0x341c12c4
3418e538:	341c1024 	.word	0x341c1024
3418e53c:	341c00d0 	.word	0x341c00d0
3418e540:	341c12a0 	.word	0x341c12a0
3418e544:	341c1228 	.word	0x341c1228
3418e548:	341c12c8 	.word	0x341c12c8
3418e54c:	3418ddad 	.word	0x3418ddad

3418e550 <ISP_Algo_Init>:
  *         Register and initialize all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_Init(ISP_HandleTypeDef *hIsp)
{
3418e550:	b580      	push	{r7, lr}
3418e552:	b086      	sub	sp, #24
3418e554:	af00      	add	r7, sp, #0
3418e556:	6078      	str	r0, [r7, #4]
  ISP_AlgoTypeDef *algo;
  ISP_StatusTypeDef ret;
  uint8_t i;

  hIsp->algorithm = ISP_Algo_List;
3418e558:	687b      	ldr	r3, [r7, #4]
3418e55a:	4a15      	ldr	r2, [pc, #84]	@ (3418e5b0 <ISP_Algo_Init+0x60>)
3418e55c:	619a      	str	r2, [r3, #24]

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
3418e55e:	2300      	movs	r3, #0
3418e560:	75fb      	strb	r3, [r7, #23]
3418e562:	e01c      	b.n	3418e59e <ISP_Algo_Init+0x4e>
  {
    algo = hIsp->algorithm[i];
3418e564:	687b      	ldr	r3, [r7, #4]
3418e566:	699a      	ldr	r2, [r3, #24]
3418e568:	7dfb      	ldrb	r3, [r7, #23]
3418e56a:	009b      	lsls	r3, r3, #2
3418e56c:	4413      	add	r3, r2
3418e56e:	681b      	ldr	r3, [r3, #0]
3418e570:	613b      	str	r3, [r7, #16]
    if ((algo != NULL) && (algo->Init != NULL))
3418e572:	693b      	ldr	r3, [r7, #16]
3418e574:	2b00      	cmp	r3, #0
3418e576:	d00f      	beq.n	3418e598 <ISP_Algo_Init+0x48>
3418e578:	693b      	ldr	r3, [r7, #16]
3418e57a:	685b      	ldr	r3, [r3, #4]
3418e57c:	2b00      	cmp	r3, #0
3418e57e:	d00b      	beq.n	3418e598 <ISP_Algo_Init+0x48>
    {
      ret = algo->Init((void*)hIsp, (void*)algo);
3418e580:	693b      	ldr	r3, [r7, #16]
3418e582:	685b      	ldr	r3, [r3, #4]
3418e584:	6939      	ldr	r1, [r7, #16]
3418e586:	6878      	ldr	r0, [r7, #4]
3418e588:	4798      	blx	r3
3418e58a:	4603      	mov	r3, r0
3418e58c:	73fb      	strb	r3, [r7, #15]
      if (ret != ISP_OK)
3418e58e:	7bfb      	ldrb	r3, [r7, #15]
3418e590:	2b00      	cmp	r3, #0
3418e592:	d001      	beq.n	3418e598 <ISP_Algo_Init+0x48>
      {
        return ret;
3418e594:	7bfb      	ldrb	r3, [r7, #15]
3418e596:	e006      	b.n	3418e5a6 <ISP_Algo_Init+0x56>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
3418e598:	7dfb      	ldrb	r3, [r7, #23]
3418e59a:	3301      	adds	r3, #1
3418e59c:	75fb      	strb	r3, [r7, #23]
3418e59e:	7dfb      	ldrb	r3, [r7, #23]
3418e5a0:	2b02      	cmp	r3, #2
3418e5a2:	d9df      	bls.n	3418e564 <ISP_Algo_Init+0x14>
      }
    }
  }

  return ISP_OK;
3418e5a4:	2300      	movs	r3, #0
}
3418e5a6:	4618      	mov	r0, r3
3418e5a8:	3718      	adds	r7, #24
3418e5aa:	46bd      	mov	sp, r7
3418e5ac:	bd80      	pop	{r7, pc}
3418e5ae:	bf00      	nop
3418e5b0:	341c00c4 	.word	0x341c00c4

3418e5b4 <ISP_Algo_Process>:
  *         Process all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_Process(ISP_HandleTypeDef *hIsp)
{
3418e5b4:	b580      	push	{r7, lr}
3418e5b6:	b086      	sub	sp, #24
3418e5b8:	af00      	add	r7, sp, #0
3418e5ba:	6078      	str	r0, [r7, #4]
  ISP_AlgoTypeDef *algo;
  ISP_StatusTypeDef ret;
  uint8_t i;

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
3418e5bc:	2300      	movs	r3, #0
3418e5be:	75fb      	strb	r3, [r7, #23]
3418e5c0:	e01c      	b.n	3418e5fc <ISP_Algo_Process+0x48>
  {
    algo = hIsp->algorithm[i];
3418e5c2:	687b      	ldr	r3, [r7, #4]
3418e5c4:	699a      	ldr	r2, [r3, #24]
3418e5c6:	7dfb      	ldrb	r3, [r7, #23]
3418e5c8:	009b      	lsls	r3, r3, #2
3418e5ca:	4413      	add	r3, r2
3418e5cc:	681b      	ldr	r3, [r3, #0]
3418e5ce:	613b      	str	r3, [r7, #16]
    if ((algo != NULL) && (algo->Process != NULL))
3418e5d0:	693b      	ldr	r3, [r7, #16]
3418e5d2:	2b00      	cmp	r3, #0
3418e5d4:	d00f      	beq.n	3418e5f6 <ISP_Algo_Process+0x42>
3418e5d6:	693b      	ldr	r3, [r7, #16]
3418e5d8:	68db      	ldr	r3, [r3, #12]
3418e5da:	2b00      	cmp	r3, #0
3418e5dc:	d00b      	beq.n	3418e5f6 <ISP_Algo_Process+0x42>
    {
#ifdef ALGO_PERF_DBG_LOGS
      uint32_t tickstart = HAL_GetTick();
#endif
      ret = algo->Process((void*)hIsp, (void*)algo);
3418e5de:	693b      	ldr	r3, [r7, #16]
3418e5e0:	68db      	ldr	r3, [r3, #12]
3418e5e2:	6939      	ldr	r1, [r7, #16]
3418e5e4:	6878      	ldr	r0, [r7, #4]
3418e5e6:	4798      	blx	r3
3418e5e8:	4603      	mov	r3, r0
3418e5ea:	73fb      	strb	r3, [r7, #15]
      if (ret != ISP_OK)
3418e5ec:	7bfb      	ldrb	r3, [r7, #15]
3418e5ee:	2b00      	cmp	r3, #0
3418e5f0:	d001      	beq.n	3418e5f6 <ISP_Algo_Process+0x42>
      {
        return ret;
3418e5f2:	7bfb      	ldrb	r3, [r7, #15]
3418e5f4:	e006      	b.n	3418e604 <ISP_Algo_Process+0x50>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
3418e5f6:	7dfb      	ldrb	r3, [r7, #23]
3418e5f8:	3301      	adds	r3, #1
3418e5fa:	75fb      	strb	r3, [r7, #23]
3418e5fc:	7dfb      	ldrb	r3, [r7, #23]
3418e5fe:	2b02      	cmp	r3, #2
3418e600:	d9df      	bls.n	3418e5c2 <ISP_Algo_Process+0xe>
      }
#endif
    }
  }

  return ISP_OK;
3418e602:	2300      	movs	r3, #0
}
3418e604:	4618      	mov	r0, r3
3418e606:	3718      	adds	r7, #24
3418e608:	46bd      	mov	sp, r7
3418e60a:	bd80      	pop	{r7, pc}

3418e60c <ISP_Init>:
ISP_StatusTypeDef ISP_Init(ISP_HandleTypeDef *hIsp,
                           void *hDcmipp,
                           uint32_t CameraInstance,
                           ISP_AppliHelpersTypeDef *pAppliHelpers,
                           const ISP_IQParamTypeDef *ISP_IQParamCacheInit)
{
3418e60c:	b5b0      	push	{r4, r5, r7, lr}
3418e60e:	b086      	sub	sp, #24
3418e610:	af00      	add	r7, sp, #0
3418e612:	60f8      	str	r0, [r7, #12]
3418e614:	60b9      	str	r1, [r7, #8]
3418e616:	607a      	str	r2, [r7, #4]
3418e618:	603b      	str	r3, [r7, #0]
  ISP_StatusTypeDef ret;

  if ((hIsp == NULL) || (hDcmipp == NULL) || (pAppliHelpers == NULL))
3418e61a:	68fb      	ldr	r3, [r7, #12]
3418e61c:	2b00      	cmp	r3, #0
3418e61e:	d005      	beq.n	3418e62c <ISP_Init+0x20>
3418e620:	68bb      	ldr	r3, [r7, #8]
3418e622:	2b00      	cmp	r3, #0
3418e624:	d002      	beq.n	3418e62c <ISP_Init+0x20>
3418e626:	683b      	ldr	r3, [r7, #0]
3418e628:	2b00      	cmp	r3, #0
3418e62a:	d101      	bne.n	3418e630 <ISP_Init+0x24>
  {
    return ISP_ERR_EINVAL;
3418e62c:	2301      	movs	r3, #1
3418e62e:	e0a3      	b.n	3418e778 <ISP_Init+0x16c>
  }

  memset(hIsp, 0, sizeof(*hIsp));
3418e630:	2288      	movs	r2, #136	@ 0x88
3418e632:	2100      	movs	r1, #0
3418e634:	68f8      	ldr	r0, [r7, #12]
3418e636:	f003 fc33 	bl	34191ea0 <memset>

#ifdef ISP_MW_TUNING_TOOL_SUPPORT
  ISP_ToolCom_Init();
#endif

  hIsp->hDcmipp = hDcmipp;
3418e63a:	68fb      	ldr	r3, [r7, #12]
3418e63c:	68ba      	ldr	r2, [r7, #8]
3418e63e:	601a      	str	r2, [r3, #0]
  hIsp->cameraInstance = CameraInstance;
3418e640:	68fb      	ldr	r3, [r7, #12]
3418e642:	687a      	ldr	r2, [r7, #4]
3418e644:	605a      	str	r2, [r3, #4]
  hIsp->MainPipe_FrameCount = 0;
3418e646:	68fb      	ldr	r3, [r7, #12]
3418e648:	2200      	movs	r2, #0
3418e64a:	641a      	str	r2, [r3, #64]	@ 0x40
  hIsp->AncillaryPipe_FrameCount = 0;
3418e64c:	68fb      	ldr	r3, [r7, #12]
3418e64e:	2200      	movs	r2, #0
3418e650:	645a      	str	r2, [r3, #68]	@ 0x44
  hIsp->DumpPipe_FrameCount = 0;
3418e652:	68fb      	ldr	r3, [r7, #12]
3418e654:	2200      	movs	r2, #0
3418e656:	649a      	str	r2, [r3, #72]	@ 0x48

  hIsp->appliHelpers = *pAppliHelpers;
3418e658:	68fb      	ldr	r3, [r7, #12]
3418e65a:	683a      	ldr	r2, [r7, #0]
3418e65c:	f103 041c 	add.w	r4, r3, #28
3418e660:	4615      	mov	r5, r2
3418e662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3418e664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3418e666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3418e668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3418e66a:	682b      	ldr	r3, [r5, #0]
3418e66c:	6023      	str	r3, [r4, #0]
  /* Appli CB is mandatory for the sensor get/set exp/gain function */
  if (hIsp->appliHelpers.GetSensorInfo == NULL)
3418e66e:	68fb      	ldr	r3, [r7, #12]
3418e670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418e672:	2b00      	cmp	r3, #0
3418e674:	d104      	bne.n	3418e680 <ISP_Init+0x74>
  {
     printf("INFO: GetSensorInfo helper function is not implemented\r\n");
3418e676:	4842      	ldr	r0, [pc, #264]	@ (3418e780 <ISP_Init+0x174>)
3418e678:	f003 fae2 	bl	34191c40 <puts>
     return ISP_ERR_APP_HELPER_UNDEFINED;
3418e67c:	23b4      	movs	r3, #180	@ 0xb4
3418e67e:	e07b      	b.n	3418e778 <ISP_Init+0x16c>
   }
  if (hIsp->appliHelpers.SetSensorGain == NULL)
3418e680:	68fb      	ldr	r3, [r7, #12]
3418e682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418e684:	2b00      	cmp	r3, #0
3418e686:	d104      	bne.n	3418e692 <ISP_Init+0x86>
  {
      printf("INFO: SetSensorGain helper function is not implemented\r\n");
3418e688:	483e      	ldr	r0, [pc, #248]	@ (3418e784 <ISP_Init+0x178>)
3418e68a:	f003 fad9 	bl	34191c40 <puts>
      return ISP_ERR_APP_HELPER_UNDEFINED;
3418e68e:	23b4      	movs	r3, #180	@ 0xb4
3418e690:	e072      	b.n	3418e778 <ISP_Init+0x16c>
  }
  if (hIsp->appliHelpers.GetSensorGain == NULL)
3418e692:	68fb      	ldr	r3, [r7, #12]
3418e694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418e696:	2b00      	cmp	r3, #0
3418e698:	d104      	bne.n	3418e6a4 <ISP_Init+0x98>
  {
     printf("INFO: GetSensorGain helper function is not implemented\r\n");
3418e69a:	483b      	ldr	r0, [pc, #236]	@ (3418e788 <ISP_Init+0x17c>)
3418e69c:	f003 fad0 	bl	34191c40 <puts>
     return ISP_ERR_APP_HELPER_UNDEFINED;
3418e6a0:	23b4      	movs	r3, #180	@ 0xb4
3418e6a2:	e069      	b.n	3418e778 <ISP_Init+0x16c>
   }
  if (hIsp->appliHelpers.SetSensorExposure == NULL)
3418e6a4:	68fb      	ldr	r3, [r7, #12]
3418e6a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418e6a8:	2b00      	cmp	r3, #0
3418e6aa:	d104      	bne.n	3418e6b6 <ISP_Init+0xaa>
  {
      printf("INFO: SetSensorExposure helper function is not implemented\r\n");
3418e6ac:	4837      	ldr	r0, [pc, #220]	@ (3418e78c <ISP_Init+0x180>)
3418e6ae:	f003 fac7 	bl	34191c40 <puts>
      return ISP_ERR_APP_HELPER_UNDEFINED;
3418e6b2:	23b4      	movs	r3, #180	@ 0xb4
3418e6b4:	e060      	b.n	3418e778 <ISP_Init+0x16c>
  }
  if (hIsp->appliHelpers.GetSensorExposure == NULL)
3418e6b6:	68fb      	ldr	r3, [r7, #12]
3418e6b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418e6ba:	2b00      	cmp	r3, #0
3418e6bc:	d104      	bne.n	3418e6c8 <ISP_Init+0xbc>
  {
     printf("INFO: GetSensorExposure helper function is not implemented\r\n");
3418e6be:	4834      	ldr	r0, [pc, #208]	@ (3418e790 <ISP_Init+0x184>)
3418e6c0:	f003 fabe 	bl	34191c40 <puts>
     return ISP_ERR_APP_HELPER_UNDEFINED;
3418e6c4:	23b4      	movs	r3, #180	@ 0xb4
3418e6c6:	e057      	b.n	3418e778 <ISP_Init+0x16c>
   }

  /* Initialize IQ param (read from non volatile memory) */
  ret = ISP_SVC_IQParam_Init(hIsp, ISP_IQParamCacheInit);
3418e6c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418e6ca:	68f8      	ldr	r0, [r7, #12]
3418e6cc:	f001 fb4c 	bl	3418fd68 <ISP_SVC_IQParam_Init>
3418e6d0:	4603      	mov	r3, r0
3418e6d2:	75fb      	strb	r3, [r7, #23]
  if (ret != ISP_OK)
3418e6d4:	7dfb      	ldrb	r3, [r7, #23]
3418e6d6:	2b00      	cmp	r3, #0
3418e6d8:	d001      	beq.n	3418e6de <ISP_Init+0xd2>
  {
    return ret;
3418e6da:	7dfb      	ldrb	r3, [r7, #23]
3418e6dc:	e04c      	b.n	3418e778 <ISP_Init+0x16c>
  }

  /* Set decimation configuration */
  /* Get Sensor Info */
  ret = ISP_SVC_Sensor_GetInfo(hIsp, &hIsp->sensorInfo);
3418e6de:	68fb      	ldr	r3, [r7, #12]
3418e6e0:	334c      	adds	r3, #76	@ 0x4c
3418e6e2:	4619      	mov	r1, r3
3418e6e4:	68f8      	ldr	r0, [r7, #12]
3418e6e6:	f001 f9bf 	bl	3418fa68 <ISP_SVC_Sensor_GetInfo>
3418e6ea:	4603      	mov	r3, r0
3418e6ec:	75fb      	strb	r3, [r7, #23]
  if (ret != ISP_OK)
3418e6ee:	7dfb      	ldrb	r3, [r7, #23]
3418e6f0:	2b00      	cmp	r3, #0
3418e6f2:	d001      	beq.n	3418e6f8 <ISP_Init+0xec>
  {
    return ret;
3418e6f4:	7dfb      	ldrb	r3, [r7, #23]
3418e6f6:	e03f      	b.n	3418e778 <ISP_Init+0x16c>
  }
  /* Compute the ISP decimation value according to the sensor resolution and the maximum ISP resolution */
  /* It is mandatory to ensure that RAW frame size does not exceed 2688 width prior to demosaicing */
  ISP_DecimationTypeDef decimation;
  if ((hIsp->sensorInfo.width / ISP_DECIM_FACTOR_1) < ISP_RAW_MAX_WIDTH)
3418e6f8:	68fb      	ldr	r3, [r7, #12]
3418e6fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3418e6fc:	f5b3 6f28 	cmp.w	r3, #2688	@ 0xa80
3418e700:	d202      	bcs.n	3418e708 <ISP_Init+0xfc>
  {
    decimation.factor = ISP_DECIM_FACTOR_1;
3418e702:	2301      	movs	r3, #1
3418e704:	753b      	strb	r3, [r7, #20]
3418e706:	e01c      	b.n	3418e742 <ISP_Init+0x136>
  }
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_2) < ISP_RAW_MAX_WIDTH)
3418e708:	68fb      	ldr	r3, [r7, #12]
3418e70a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3418e70c:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
3418e710:	d202      	bcs.n	3418e718 <ISP_Init+0x10c>
  {
    decimation.factor = ISP_DECIM_FACTOR_2;
3418e712:	2302      	movs	r3, #2
3418e714:	753b      	strb	r3, [r7, #20]
3418e716:	e014      	b.n	3418e742 <ISP_Init+0x136>
  }
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_4) < ISP_RAW_MAX_WIDTH)
3418e718:	68fb      	ldr	r3, [r7, #12]
3418e71a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3418e71c:	f5b3 5f28 	cmp.w	r3, #10752	@ 0x2a00
3418e720:	d202      	bcs.n	3418e728 <ISP_Init+0x11c>
  {
    decimation.factor = ISP_DECIM_FACTOR_4;
3418e722:	2304      	movs	r3, #4
3418e724:	753b      	strb	r3, [r7, #20]
3418e726:	e00c      	b.n	3418e742 <ISP_Init+0x136>
  }
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_8) < ISP_RAW_MAX_WIDTH)
3418e728:	68fb      	ldr	r3, [r7, #12]
3418e72a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3418e72c:	f5b3 4fa8 	cmp.w	r3, #21504	@ 0x5400
3418e730:	d202      	bcs.n	3418e738 <ISP_Init+0x12c>
  {
    decimation.factor = ISP_DECIM_FACTOR_8;
3418e732:	2308      	movs	r3, #8
3418e734:	753b      	strb	r3, [r7, #20]
3418e736:	e004      	b.n	3418e742 <ISP_Init+0x136>
  }
  else
  {
    printf("ERROR: No possible decimation factor to target ISP RAW width constraint\r\n");
3418e738:	4816      	ldr	r0, [pc, #88]	@ (3418e794 <ISP_Init+0x188>)
3418e73a:	f003 fa81 	bl	34191c40 <puts>
    return ISP_ERR_DECIMATION_EINVAL;
3418e73e:	231e      	movs	r3, #30
3418e740:	e01a      	b.n	3418e778 <ISP_Init+0x16c>
  }
  ret = ISP_SVC_ISP_SetDecimation(hIsp, &decimation);
3418e742:	f107 0314 	add.w	r3, r7, #20
3418e746:	4619      	mov	r1, r3
3418e748:	68f8      	ldr	r0, [r7, #12]
3418e74a:	f000 fd3b 	bl	3418f1c4 <ISP_SVC_ISP_SetDecimation>
3418e74e:	4603      	mov	r3, r0
3418e750:	75fb      	strb	r3, [r7, #23]
  if (ret != ISP_OK)
3418e752:	7dfb      	ldrb	r3, [r7, #23]
3418e754:	2b00      	cmp	r3, #0
3418e756:	d001      	beq.n	3418e75c <ISP_Init+0x150>
  {
    return ret;
3418e758:	7dfb      	ldrb	r3, [r7, #23]
3418e75a:	e00d      	b.n	3418e778 <ISP_Init+0x16c>
  }

  /* Initialize algorithms */
  ret = ISP_Algo_Init(hIsp);
3418e75c:	68f8      	ldr	r0, [r7, #12]
3418e75e:	f7ff fef7 	bl	3418e550 <ISP_Algo_Init>
3418e762:	4603      	mov	r3, r0
3418e764:	75fb      	strb	r3, [r7, #23]
  if (ret != ISP_OK)
3418e766:	7dfb      	ldrb	r3, [r7, #23]
3418e768:	2b00      	cmp	r3, #0
3418e76a:	d001      	beq.n	3418e770 <ISP_Init+0x164>
  {
    return ret;
3418e76c:	7dfb      	ldrb	r3, [r7, #23]
3418e76e:	e003      	b.n	3418e778 <ISP_Init+0x16c>
  }

  /* Initialize the statistic engine */
  ISP_SVC_Stats_Init(hIsp);
3418e770:	68f8      	ldr	r0, [r7, #12]
3418e772:	f001 fb1d 	bl	3418fdb0 <ISP_SVC_Stats_Init>

  return ISP_OK;
3418e776:	2300      	movs	r3, #0
}
3418e778:	4618      	mov	r0, r3
3418e77a:	3718      	adds	r7, #24
3418e77c:	46bd      	mov	sp, r7
3418e77e:	bdb0      	pop	{r4, r5, r7, pc}
3418e780:	34193c30 	.word	0x34193c30
3418e784:	34193c68 	.word	0x34193c68
3418e788:	34193ca0 	.word	0x34193ca0
3418e78c:	34193cd8 	.word	0x34193cd8
3418e790:	34193d14 	.word	0x34193d14
3418e794:	34193d50 	.word	0x34193d50

3418e798 <ISP_Start>:
  *         Configures the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_Start(ISP_HandleTypeDef *hIsp)
{
3418e798:	b580      	push	{r7, lr}
3418e79a:	b084      	sub	sp, #16
3418e79c:	af00      	add	r7, sp, #0
3418e79e:	6078      	str	r0, [r7, #4]
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret;

  if (hIsp == NULL)
3418e7a0:	687b      	ldr	r3, [r7, #4]
3418e7a2:	2b00      	cmp	r3, #0
3418e7a4:	d101      	bne.n	3418e7aa <ISP_Start+0x12>
  {
    return ISP_ERR_EINVAL;
3418e7a6:	2301      	movs	r3, #1
3418e7a8:	e0f6      	b.n	3418e998 <ISP_Start+0x200>
  }

  ret = ISP_SVC_Misc_IsDCMIPPReady(hIsp);
3418e7aa:	6878      	ldr	r0, [r7, #4]
3418e7ac:	f001 fa16 	bl	3418fbdc <ISP_SVC_Misc_IsDCMIPPReady>
3418e7b0:	4603      	mov	r3, r0
3418e7b2:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
3418e7b4:	7bfb      	ldrb	r3, [r7, #15]
3418e7b6:	2b00      	cmp	r3, #0
3418e7b8:	d001      	beq.n	3418e7be <ISP_Start+0x26>
  {
    return ret;
3418e7ba:	7bfb      	ldrb	r3, [r7, #15]
3418e7bc:	e0ec      	b.n	3418e998 <ISP_Start+0x200>
  }

  /* Get IQ Param config */
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3418e7be:	6878      	ldr	r0, [r7, #4]
3418e7c0:	f001 fae8 	bl	3418fd94 <ISP_SVC_IQParam_Get>
3418e7c4:	60b8      	str	r0, [r7, #8]

  /* Set static configurations */
  ret = ISP_SVC_ISP_SetDemosaicing(hIsp, &IQParamConfig->demosaicing);
3418e7c6:	68bb      	ldr	r3, [r7, #8]
3418e7c8:	330c      	adds	r3, #12
3418e7ca:	4619      	mov	r1, r3
3418e7cc:	6878      	ldr	r0, [r7, #4]
3418e7ce:	f000 fc3d 	bl	3418f04c <ISP_SVC_ISP_SetDemosaicing>
3418e7d2:	4603      	mov	r3, r0
3418e7d4:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
3418e7d6:	7bfb      	ldrb	r3, [r7, #15]
3418e7d8:	2b00      	cmp	r3, #0
3418e7da:	d001      	beq.n	3418e7e0 <ISP_Start+0x48>
  {
    return ret;
3418e7dc:	7bfb      	ldrb	r3, [r7, #15]
3418e7de:	e0db      	b.n	3418e998 <ISP_Start+0x200>
  }

  ret = ISP_SVC_ISP_SetStatRemoval(hIsp, &IQParamConfig->statRemoval);
3418e7e0:	68bb      	ldr	r3, [r7, #8]
3418e7e2:	4619      	mov	r1, r3
3418e7e4:	6878      	ldr	r0, [r7, #4]
3418e7e6:	f000 fca9 	bl	3418f13c <ISP_SVC_ISP_SetStatRemoval>
3418e7ea:	4603      	mov	r3, r0
3418e7ec:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
3418e7ee:	7bfb      	ldrb	r3, [r7, #15]
3418e7f0:	2b00      	cmp	r3, #0
3418e7f2:	d001      	beq.n	3418e7f8 <ISP_Start+0x60>
  {
    return ret;
3418e7f4:	7bfb      	ldrb	r3, [r7, #15]
3418e7f6:	e0cf      	b.n	3418e998 <ISP_Start+0x200>
  }

  ret = ISP_SVC_ISP_SetContrast(hIsp, &IQParamConfig->contrast);
3418e7f8:	68bb      	ldr	r3, [r7, #8]
3418e7fa:	3314      	adds	r3, #20
3418e7fc:	4619      	mov	r1, r3
3418e7fe:	6878      	ldr	r0, [r7, #4]
3418e800:	f000 fd42 	bl	3418f288 <ISP_SVC_ISP_SetContrast>
3418e804:	4603      	mov	r3, r0
3418e806:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
3418e808:	7bfb      	ldrb	r3, [r7, #15]
3418e80a:	2b00      	cmp	r3, #0
3418e80c:	d001      	beq.n	3418e812 <ISP_Start+0x7a>
  {
    return ret;
3418e80e:	7bfb      	ldrb	r3, [r7, #15]
3418e810:	e0c2      	b.n	3418e998 <ISP_Start+0x200>
  }

  /* Set optional static configurations */
  if ((IQParamConfig->sensorGainStatic.gain != 0) && (!IQParamConfig->AECAlgo.enable))
3418e812:	68bb      	ldr	r3, [r7, #8]
3418e814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e816:	2b00      	cmp	r3, #0
3418e818:	d011      	beq.n	3418e83e <ISP_Start+0xa6>
3418e81a:	68bb      	ldr	r3, [r7, #8]
3418e81c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
3418e820:	2b00      	cmp	r3, #0
3418e822:	d10c      	bne.n	3418e83e <ISP_Start+0xa6>
  {
    ret = ISP_SVC_Sensor_SetGain(hIsp, &IQParamConfig->sensorGainStatic);
3418e824:	68bb      	ldr	r3, [r7, #8]
3418e826:	334c      	adds	r3, #76	@ 0x4c
3418e828:	4619      	mov	r1, r3
3418e82a:	6878      	ldr	r0, [r7, #4]
3418e82c:	f001 f93e 	bl	3418faac <ISP_SVC_Sensor_SetGain>
3418e830:	4603      	mov	r3, r0
3418e832:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3418e834:	7bfb      	ldrb	r3, [r7, #15]
3418e836:	2b00      	cmp	r3, #0
3418e838:	d001      	beq.n	3418e83e <ISP_Start+0xa6>
    {
      return ret;
3418e83a:	7bfb      	ldrb	r3, [r7, #15]
3418e83c:	e0ac      	b.n	3418e998 <ISP_Start+0x200>
    }
  }

  if ((IQParamConfig->sensorExposureStatic.exposure != 0) && (!IQParamConfig->AECAlgo.enable))
3418e83e:	68bb      	ldr	r3, [r7, #8]
3418e840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418e842:	2b00      	cmp	r3, #0
3418e844:	d011      	beq.n	3418e86a <ISP_Start+0xd2>
3418e846:	68bb      	ldr	r3, [r7, #8]
3418e848:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
3418e84c:	2b00      	cmp	r3, #0
3418e84e:	d10c      	bne.n	3418e86a <ISP_Start+0xd2>
  {
    ret = ISP_SVC_Sensor_SetExposure(hIsp, &IQParamConfig->sensorExposureStatic);
3418e850:	68bb      	ldr	r3, [r7, #8]
3418e852:	3350      	adds	r3, #80	@ 0x50
3418e854:	4619      	mov	r1, r3
3418e856:	6878      	ldr	r0, [r7, #4]
3418e858:	f001 f974 	bl	3418fb44 <ISP_SVC_Sensor_SetExposure>
3418e85c:	4603      	mov	r3, r0
3418e85e:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3418e860:	7bfb      	ldrb	r3, [r7, #15]
3418e862:	2b00      	cmp	r3, #0
3418e864:	d001      	beq.n	3418e86a <ISP_Start+0xd2>
    {
      return ret;
3418e866:	7bfb      	ldrb	r3, [r7, #15]
3418e868:	e096      	b.n	3418e998 <ISP_Start+0x200>
    }
  }

  if (IQParamConfig->badPixelStatic.enable != 0)
3418e86a:	68bb      	ldr	r3, [r7, #8]
3418e86c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418e870:	2b00      	cmp	r3, #0
3418e872:	d00c      	beq.n	3418e88e <ISP_Start+0xf6>
  {
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &IQParamConfig->badPixelStatic);
3418e874:	68bb      	ldr	r3, [r7, #8]
3418e876:	335c      	adds	r3, #92	@ 0x5c
3418e878:	4619      	mov	r1, r3
3418e87a:	6878      	ldr	r0, [r7, #4]
3418e87c:	f000 fe44 	bl	3418f508 <ISP_SVC_ISP_SetBadPixel>
3418e880:	4603      	mov	r3, r0
3418e882:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3418e884:	7bfb      	ldrb	r3, [r7, #15]
3418e886:	2b00      	cmp	r3, #0
3418e888:	d001      	beq.n	3418e88e <ISP_Start+0xf6>
    {
      return ret;
3418e88a:	7bfb      	ldrb	r3, [r7, #15]
3418e88c:	e084      	b.n	3418e998 <ISP_Start+0x200>
    }
  }

  if (IQParamConfig->blackLevelStatic.enable != 0)
3418e88e:	68bb      	ldr	r3, [r7, #8]
3418e890:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418e894:	2b00      	cmp	r3, #0
3418e896:	d00c      	beq.n	3418e8b2 <ISP_Start+0x11a>
  {
    ret = ISP_SVC_ISP_SetBlackLevel(hIsp, &IQParamConfig->blackLevelStatic);
3418e898:	68bb      	ldr	r3, [r7, #8]
3418e89a:	3364      	adds	r3, #100	@ 0x64
3418e89c:	4619      	mov	r1, r3
3418e89e:	6878      	ldr	r0, [r7, #4]
3418e8a0:	f000 fea6 	bl	3418f5f0 <ISP_SVC_ISP_SetBlackLevel>
3418e8a4:	4603      	mov	r3, r0
3418e8a6:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3418e8a8:	7bfb      	ldrb	r3, [r7, #15]
3418e8aa:	2b00      	cmp	r3, #0
3418e8ac:	d001      	beq.n	3418e8b2 <ISP_Start+0x11a>
    {
      return ret;
3418e8ae:	7bfb      	ldrb	r3, [r7, #15]
3418e8b0:	e072      	b.n	3418e998 <ISP_Start+0x200>
    }
  }

  if ((IQParamConfig->ispGainStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
3418e8b2:	68bb      	ldr	r3, [r7, #8]
3418e8b4:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
3418e8b8:	2b00      	cmp	r3, #0
3418e8ba:	d012      	beq.n	3418e8e2 <ISP_Start+0x14a>
3418e8bc:	68bb      	ldr	r3, [r7, #8]
3418e8be:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
3418e8c2:	2b00      	cmp	r3, #0
3418e8c4:	d10d      	bne.n	3418e8e2 <ISP_Start+0x14a>
  {
    ret = ISP_SVC_ISP_SetGain(hIsp, &IQParamConfig->ispGainStatic);
3418e8c6:	68bb      	ldr	r3, [r7, #8]
3418e8c8:	f503 7306 	add.w	r3, r3, #536	@ 0x218
3418e8cc:	4619      	mov	r1, r3
3418e8ce:	6878      	ldr	r0, [r7, #4]
3418e8d0:	f000 fefe 	bl	3418f6d0 <ISP_SVC_ISP_SetGain>
3418e8d4:	4603      	mov	r3, r0
3418e8d6:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3418e8d8:	7bfb      	ldrb	r3, [r7, #15]
3418e8da:	2b00      	cmp	r3, #0
3418e8dc:	d001      	beq.n	3418e8e2 <ISP_Start+0x14a>
    {
      return ret;
3418e8de:	7bfb      	ldrb	r3, [r7, #15]
3418e8e0:	e05a      	b.n	3418e998 <ISP_Start+0x200>
    }
  }

  if ((IQParamConfig->colorConvStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
3418e8e2:	68bb      	ldr	r3, [r7, #8]
3418e8e4:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
3418e8e8:	2b00      	cmp	r3, #0
3418e8ea:	d012      	beq.n	3418e912 <ISP_Start+0x17a>
3418e8ec:	68bb      	ldr	r3, [r7, #8]
3418e8ee:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
3418e8f2:	2b00      	cmp	r3, #0
3418e8f4:	d10d      	bne.n	3418e912 <ISP_Start+0x17a>
  {
    ret = ISP_SVC_ISP_SetColorConv(hIsp, &IQParamConfig->colorConvStatic);
3418e8f6:	68bb      	ldr	r3, [r7, #8]
3418e8f8:	f503 730a 	add.w	r3, r3, #552	@ 0x228
3418e8fc:	4619      	mov	r1, r3
3418e8fe:	6878      	ldr	r0, [r7, #4]
3418e900:	f000 ff90 	bl	3418f824 <ISP_SVC_ISP_SetColorConv>
3418e904:	4603      	mov	r3, r0
3418e906:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3418e908:	7bfb      	ldrb	r3, [r7, #15]
3418e90a:	2b00      	cmp	r3, #0
3418e90c:	d001      	beq.n	3418e912 <ISP_Start+0x17a>
    {
      return ret;
3418e90e:	7bfb      	ldrb	r3, [r7, #15]
3418e910:	e042      	b.n	3418e998 <ISP_Start+0x200>
    }
  }

  /* Configure statistic area if not already configured by ISP_SetStatArea() */
  if ((hIsp->statArea.XSize == 0) || (hIsp->statArea.YSize == 0))
3418e912:	687b      	ldr	r3, [r7, #4]
3418e914:	691b      	ldr	r3, [r3, #16]
3418e916:	2b00      	cmp	r3, #0
3418e918:	d003      	beq.n	3418e922 <ISP_Start+0x18a>
3418e91a:	687b      	ldr	r3, [r7, #4]
3418e91c:	695b      	ldr	r3, [r3, #20]
3418e91e:	2b00      	cmp	r3, #0
3418e920:	d10c      	bne.n	3418e93c <ISP_Start+0x1a4>
  {
    /* Configure statistic area from IQ params */
    ret = ISP_SVC_ISP_SetStatArea(hIsp, &IQParamConfig->statAreaStatic);
3418e922:	68bb      	ldr	r3, [r7, #8]
3418e924:	333c      	adds	r3, #60	@ 0x3c
3418e926:	4619      	mov	r1, r3
3418e928:	6878      	ldr	r0, [r7, #4]
3418e92a:	f000 fd67 	bl	3418f3fc <ISP_SVC_ISP_SetStatArea>
3418e92e:	4603      	mov	r3, r0
3418e930:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3418e932:	7bfb      	ldrb	r3, [r7, #15]
3418e934:	2b00      	cmp	r3, #0
3418e936:	d001      	beq.n	3418e93c <ISP_Start+0x1a4>
    {
      return ret;
3418e938:	7bfb      	ldrb	r3, [r7, #15]
3418e93a:	e02d      	b.n	3418e998 <ISP_Start+0x200>
    }
  }

  ret = ISP_SVC_ISP_SetGamma(hIsp, &IQParamConfig->gamma);
3418e93c:	68bb      	ldr	r3, [r7, #8]
3418e93e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
3418e942:	4619      	mov	r1, r3
3418e944:	6878      	ldr	r0, [r7, #4]
3418e946:	f001 f9c9 	bl	3418fcdc <ISP_SVC_ISP_SetGamma>
3418e94a:	4603      	mov	r3, r0
3418e94c:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
3418e94e:	7bfb      	ldrb	r3, [r7, #15]
3418e950:	2b00      	cmp	r3, #0
3418e952:	d001      	beq.n	3418e958 <ISP_Start+0x1c0>
  {
    return ret;
3418e954:	7bfb      	ldrb	r3, [r7, #15]
3418e956:	e01f      	b.n	3418e998 <ISP_Start+0x200>
  }

  /* Initialize the exposure target based on the selected exposure compensation */
  IQParamConfig->AECAlgo.exposureTarget = (uint32_t) (ISP_IDEAL_TARGET_EXPOSURE * pow(2, (float)IQParamConfig->AECAlgo.exposureCompensation / 2));
3418e958:	68bb      	ldr	r3, [r7, #8]
3418e95a:	f993 3069 	ldrsb.w	r3, [r3, #105]	@ 0x69
3418e95e:	ee07 3a90 	vmov	s15, r3
3418e962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3418e966:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
3418e96a:	eec7 7a26 	vdiv.f32	s15, s14, s13
3418e96e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
3418e972:	eeb0 1b47 	vmov.f64	d1, d7
3418e976:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
3418e97a:	f004 fa51 	bl	34192e20 <pow>
3418e97e:	eeb0 7b40 	vmov.f64	d7, d0
3418e982:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 3418e9a0 <ISP_Start+0x208>
3418e986:	ee27 7b06 	vmul.f64	d7, d7, d6
3418e98a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
3418e98e:	ee17 2a90 	vmov	r2, s15
3418e992:	68bb      	ldr	r3, [r7, #8]
3418e994:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ISP_OK;
3418e996:	2300      	movs	r3, #0
}
3418e998:	4618      	mov	r0, r3
3418e99a:	3710      	adds	r7, #16
3418e99c:	46bd      	mov	sp, r7
3418e99e:	bd80      	pop	{r7, pc}
3418e9a0:	00000000 	.word	0x00000000
3418e9a4:	404c0000 	.word	0x404c0000

3418e9a8 <ISP_BackgroundProcess>:
  *         Run the background process of the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_BackgroundProcess(ISP_HandleTypeDef *hIsp)
{
3418e9a8:	b580      	push	{r7, lr}
3418e9aa:	b084      	sub	sp, #16
3418e9ac:	af00      	add	r7, sp, #0
3418e9ae:	6078      	str	r0, [r7, #4]
#ifdef ISP_MW_TUNING_TOOL_SUPPORT
  ISP_StatusTypeDef retCmdParser = ISP_OK;
  uint8_t *cmd;
#endif

  if (hIsp == NULL)
3418e9b0:	687b      	ldr	r3, [r7, #4]
3418e9b2:	2b00      	cmp	r3, #0
3418e9b4:	d101      	bne.n	3418e9ba <ISP_BackgroundProcess+0x12>
  {
    return ISP_ERR_EINVAL;
3418e9b6:	2301      	movs	r3, #1
3418e9b8:	e014      	b.n	3418e9e4 <ISP_BackgroundProcess+0x3c>
    retCmdParser = ISP_CmdParser_ProcessCommand(hIsp, cmd);
  }
#endif

  /* Check if a statistics gathering cycle has been completed to call the statistic callbacks */
  retStats = ISP_SVC_Stats_ProcessCallbacks(hIsp);
3418e9ba:	6878      	ldr	r0, [r7, #4]
3418e9bc:	f001 fcd2 	bl	34190364 <ISP_SVC_Stats_ProcessCallbacks>
3418e9c0:	4603      	mov	r3, r0
3418e9c2:	73fb      	strb	r3, [r7, #15]

  /* Process the algorithms */
  retAlgo = ISP_Algo_Process(hIsp);
3418e9c4:	6878      	ldr	r0, [r7, #4]
3418e9c6:	f7ff fdf5 	bl	3418e5b4 <ISP_Algo_Process>
3418e9ca:	4603      	mov	r3, r0
3418e9cc:	73bb      	strb	r3, [r7, #14]
  if (retCmdParser != ISP_OK)
  {
    return retCmdParser;
  }
#endif
  if (retStats != ISP_OK)
3418e9ce:	7bfb      	ldrb	r3, [r7, #15]
3418e9d0:	2b00      	cmp	r3, #0
3418e9d2:	d001      	beq.n	3418e9d8 <ISP_BackgroundProcess+0x30>
  {
    return retStats;
3418e9d4:	7bfb      	ldrb	r3, [r7, #15]
3418e9d6:	e005      	b.n	3418e9e4 <ISP_BackgroundProcess+0x3c>
  }
  else if (retAlgo != ISP_OK)
3418e9d8:	7bbb      	ldrb	r3, [r7, #14]
3418e9da:	2b00      	cmp	r3, #0
3418e9dc:	d001      	beq.n	3418e9e2 <ISP_BackgroundProcess+0x3a>
  {
    return retAlgo;
3418e9de:	7bbb      	ldrb	r3, [r7, #14]
3418e9e0:	e000      	b.n	3418e9e4 <ISP_BackgroundProcess+0x3c>
  }

  return ISP_OK;
3418e9e2:	2300      	movs	r3, #0
}
3418e9e4:	4618      	mov	r0, r3
3418e9e6:	3710      	adds	r7, #16
3418e9e8:	46bd      	mov	sp, r7
3418e9ea:	bd80      	pop	{r7, pc}

3418e9ec <ISP_GatherStatistics>:
  *         Gather statistics
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_GatherStatistics(ISP_HandleTypeDef *hIsp)
{
3418e9ec:	b580      	push	{r7, lr}
3418e9ee:	b082      	sub	sp, #8
3418e9f0:	af00      	add	r7, sp, #0
3418e9f2:	6078      	str	r0, [r7, #4]
  ISP_SVC_Stats_Gather(hIsp);
3418e9f4:	6878      	ldr	r0, [r7, #4]
3418e9f6:	f001 f9eb 	bl	3418fdd0 <ISP_SVC_Stats_Gather>
}
3418e9fa:	bf00      	nop
3418e9fc:	3708      	adds	r7, #8
3418e9fe:	46bd      	mov	sp, r7
3418ea00:	bd80      	pop	{r7, pc}

3418ea02 <ISP_IncMainFrameId>:
  *         Increment the frame ID of the frame output on the main pipe
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncMainFrameId(ISP_HandleTypeDef *hIsp)
{
3418ea02:	b580      	push	{r7, lr}
3418ea04:	b082      	sub	sp, #8
3418ea06:	af00      	add	r7, sp, #0
3418ea08:	6078      	str	r0, [r7, #4]
  ISP_SVC_Misc_IncMainFrameId(hIsp);
3418ea0a:	6878      	ldr	r0, [r7, #4]
3418ea0c:	f001 f8fe 	bl	3418fc0c <ISP_SVC_Misc_IncMainFrameId>
}
3418ea10:	bf00      	nop
3418ea12:	3708      	adds	r7, #8
3418ea14:	46bd      	mov	sp, r7
3418ea16:	bd80      	pop	{r7, pc}

3418ea18 <ISP_IncAncillaryFrameId>:
  *         Increment the frame ID of the frame output on the ancillary pipe
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncAncillaryFrameId(ISP_HandleTypeDef *hIsp)
{
3418ea18:	b580      	push	{r7, lr}
3418ea1a:	b082      	sub	sp, #8
3418ea1c:	af00      	add	r7, sp, #0
3418ea1e:	6078      	str	r0, [r7, #4]
	ISP_SVC_Misc_IncAncillaryFrameId(hIsp);
3418ea20:	6878      	ldr	r0, [r7, #4]
3418ea22:	f001 f90e 	bl	3418fc42 <ISP_SVC_Misc_IncAncillaryFrameId>
}
3418ea26:	bf00      	nop
3418ea28:	3708      	adds	r7, #8
3418ea2a:	46bd      	mov	sp, r7
3418ea2c:	bd80      	pop	{r7, pc}

3418ea2e <ISP_IncDumpFrameId>:
  *         Increment the frame ID of the frame output on the dump pipe
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncDumpFrameId(ISP_HandleTypeDef *hIsp)
{
3418ea2e:	b580      	push	{r7, lr}
3418ea30:	b082      	sub	sp, #8
3418ea32:	af00      	add	r7, sp, #0
3418ea34:	6078      	str	r0, [r7, #4]
  ISP_SVC_Misc_IncDumpFrameId(hIsp);
3418ea36:	6878      	ldr	r0, [r7, #4]
3418ea38:	f001 f912 	bl	3418fc60 <ISP_SVC_Misc_IncDumpFrameId>
}
3418ea3c:	bf00      	nop
3418ea3e:	3708      	adds	r7, #8
3418ea40:	46bd      	mov	sp, r7
3418ea42:	bd80      	pop	{r7, pc}
3418ea44:	0000      	movs	r0, r0
	...

3418ea48 <To_Shift_Multiplier>:
/* Exported variables --------------------------------------------------------*/
extern ISP_MetaTypeDef Meta;

/* Private functions ---------------------------------------------------------*/
static void To_Shift_Multiplier(uint32_t Factor, uint8_t *pShift, uint8_t *pMultiplier)
{
3418ea48:	b5b0      	push	{r4, r5, r7, lr}
3418ea4a:	b086      	sub	sp, #24
3418ea4c:	af00      	add	r7, sp, #0
3418ea4e:	60f8      	str	r0, [r7, #12]
3418ea50:	60b9      	str	r1, [r7, #8]
3418ea52:	607a      	str	r2, [r7, #4]
  /* Convert Factor (Unit = 100000000 for "x1.0") to Multiplier (where 128 means "x1.0") */
  uint64_t Val = Factor;
3418ea54:	68fb      	ldr	r3, [r7, #12]
3418ea56:	2200      	movs	r2, #0
3418ea58:	461c      	mov	r4, r3
3418ea5a:	4615      	mov	r5, r2
3418ea5c:	e9c7 4504 	strd	r4, r5, [r7, #16]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
3418ea60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3418ea64:	4610      	mov	r0, r2
3418ea66:	4619      	mov	r1, r3
3418ea68:	ea50 11cf 	orrs.w	r1, r0, pc, lsl #7
3418ea6c:	a314      	add	r3, pc, #80	@ (adr r3, 3418eac0 <To_Shift_Multiplier+0x78>)
3418ea6e:	e9d3 2300 	ldrd	r2, r3, [r3]
3418ea72:	f7f2 fdb3 	bl	341815dc <__aeabi_uldivmod>
3418ea76:	4602      	mov	r2, r0
3418ea78:	460b      	mov	r3, r1
3418ea7a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  /* Get Shift + Multiplier where Multiplier < 256 */
  *pShift = 0;
3418ea7e:	68bb      	ldr	r3, [r7, #8]
3418ea80:	2200      	movs	r2, #0
3418ea82:	701a      	strb	r2, [r3, #0]
  while (Val >= 256)
3418ea84:	e00b      	b.n	3418ea9e <To_Shift_Multiplier+0x56>
  {
    Val /= 2;
3418ea86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3418ea8a:	ea52 035f 	orrs.w	r3, r2, pc, lsr #1
3418ea8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    (*pShift)++;
3418ea92:	68bb      	ldr	r3, [r7, #8]
3418ea94:	781b      	ldrb	r3, [r3, #0]
3418ea96:	3301      	adds	r3, #1
3418ea98:	b2da      	uxtb	r2, r3
3418ea9a:	68bb      	ldr	r3, [r7, #8]
3418ea9c:	701a      	strb	r2, [r3, #0]
  while (Val >= 256)
3418ea9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3418eaa2:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3418eaa6:	f173 0300 	sbcs.w	r3, r3, #0
3418eaaa:	d2ec      	bcs.n	3418ea86 <To_Shift_Multiplier+0x3e>
  }

  *pMultiplier = Val;
3418eaac:	7c3a      	ldrb	r2, [r7, #16]
3418eaae:	687b      	ldr	r3, [r7, #4]
3418eab0:	701a      	strb	r2, [r3, #0]
}
3418eab2:	bf00      	nop
3418eab4:	3718      	adds	r7, #24
3418eab6:	46bd      	mov	sp, r7
3418eab8:	bdb0      	pop	{r4, r5, r7, pc}
3418eaba:	bf00      	nop
3418eabc:	f3af 8000 	nop.w
3418eac0:	05f5e100 	.word	0x05f5e100
3418eac4:	00000000 	.word	0x00000000

3418eac8 <From_Shift_Multiplier>:

static uint32_t From_Shift_Multiplier(uint8_t Shift, uint8_t Multiplier)
{
3418eac8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
3418eacc:	b084      	sub	sp, #16
3418eace:	af00      	add	r7, sp, #0
3418ead0:	4606      	mov	r6, r0
3418ead2:	4608      	mov	r0, r1
3418ead4:	4631      	mov	r1, r6
3418ead6:	71f9      	strb	r1, [r7, #7]
3418ead8:	4601      	mov	r1, r0
3418eada:	71b9      	strb	r1, [r7, #6]
  /* Convert Shift + Multiplier to Factor (Unit = 100000000 for "x1.0") */
  uint64_t Val = (1 << Shift);
3418eadc:	79f9      	ldrb	r1, [r7, #7]
3418eade:	2001      	movs	r0, #1
3418eae0:	fa00 f101 	lsl.w	r1, r0, r1
3418eae4:	17c8      	asrs	r0, r1, #31
3418eae6:	468a      	mov	sl, r1
3418eae8:	4683      	mov	fp, r0
3418eaea:	e9c7 ab02 	strd	sl, fp, [r7, #8]
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
3418eaee:	79b9      	ldrb	r1, [r7, #6]
3418eaf0:	2000      	movs	r0, #0
3418eaf2:	4688      	mov	r8, r1
3418eaf4:	4681      	mov	r9, r0
3418eaf6:	68b9      	ldr	r1, [r7, #8]
3418eaf8:	fb09 f001 	mul.w	r0, r9, r1
3418eafc:	68f9      	ldr	r1, [r7, #12]
3418eafe:	fb08 f101 	mul.w	r1, r8, r1
3418eb02:	4401      	add	r1, r0
3418eb04:	68b8      	ldr	r0, [r7, #8]
3418eb06:	fba0 2308 	umull	r2, r3, r0, r8
3418eb0a:	4419      	add	r1, r3
3418eb0c:	460b      	mov	r3, r1
3418eb0e:	490c      	ldr	r1, [pc, #48]	@ (3418eb40 <From_Shift_Multiplier+0x78>)
3418eb10:	fb01 f003 	mul.w	r0, r1, r3
3418eb14:	2100      	movs	r1, #0
3418eb16:	fb02 f101 	mul.w	r1, r2, r1
3418eb1a:	4401      	add	r1, r0
3418eb1c:	4808      	ldr	r0, [pc, #32]	@ (3418eb40 <From_Shift_Multiplier+0x78>)
3418eb1e:	fba2 4500 	umull	r4, r5, r2, r0
3418eb22:	194b      	adds	r3, r1, r5
3418eb24:	461d      	mov	r5, r3
3418eb26:	4622      	mov	r2, r4
3418eb28:	462b      	mov	r3, r5
3418eb2a:	ea52 13df 	orrs.w	r3, r2, pc, lsr #7
3418eb2e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return (uint32_t) Val;
3418eb32:	68bb      	ldr	r3, [r7, #8]
}
3418eb34:	4618      	mov	r0, r3
3418eb36:	3710      	adds	r7, #16
3418eb38:	46bd      	mov	sp, r7
3418eb3a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
3418eb3e:	4770      	bx	lr
3418eb40:	05f5e100 	.word	0x05f5e100

3418eb44 <To_CConv_Reg>:

static int16_t To_CConv_Reg(int32_t Coeff)
{
3418eb44:	b580      	push	{r7, lr}
3418eb46:	b084      	sub	sp, #16
3418eb48:	af00      	add	r7, sp, #0
3418eb4a:	6078      	str	r0, [r7, #4]
  /* Convert Coefficient (Unit = 100000000 for "x1.0") to register format */
  int64_t Val = Coeff;
3418eb4c:	6879      	ldr	r1, [r7, #4]
3418eb4e:	17c8      	asrs	r0, r1, #31
3418eb50:	460a      	mov	r2, r1
3418eb52:	4603      	mov	r3, r0
3418eb54:	e9c7 2302 	strd	r2, r3, [r7, #8]

  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
3418eb58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3418eb5c:	4a07      	ldr	r2, [pc, #28]	@ (3418eb7c <To_CConv_Reg+0x38>)
3418eb5e:	f04f 0300 	mov.w	r3, #0
3418eb62:	f7f2 fceb 	bl	3418153c <__aeabi_ldivmod>
3418eb66:	4602      	mov	r2, r0
3418eb68:	460b      	mov	r3, r1
3418eb6a:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return (int16_t) Val;
3418eb6e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
3418eb72:	4618      	mov	r0, r3
3418eb74:	3710      	adds	r7, #16
3418eb76:	46bd      	mov	sp, r7
3418eb78:	bd80      	pop	{r7, pc}
3418eb7a:	bf00      	nop
3418eb7c:	0005f5e1 	.word	0x0005f5e1

3418eb80 <From_CConv_Reg>:

static int32_t From_CConv_Reg(int16_t Reg)
{
3418eb80:	b4b0      	push	{r4, r5, r7}
3418eb82:	b085      	sub	sp, #20
3418eb84:	af00      	add	r7, sp, #0
3418eb86:	4601      	mov	r1, r0
3418eb88:	80f9      	strh	r1, [r7, #6]
  /* Convert from register format to Coefficient (Unit = 100000000 for "x1.0") */
  int64_t Val = Reg;
3418eb8a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
3418eb8e:	17c8      	asrs	r0, r1, #31
3418eb90:	460c      	mov	r4, r1
3418eb92:	4605      	mov	r5, r0
3418eb94:	e9c7 4502 	strd	r4, r5, [r7, #8]

  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
3418eb98:	68f9      	ldr	r1, [r7, #12]
3418eb9a:	480c      	ldr	r0, [pc, #48]	@ (3418ebcc <From_CConv_Reg+0x4c>)
3418eb9c:	fb01 f000 	mul.w	r0, r1, r0
3418eba0:	68b9      	ldr	r1, [r7, #8]
3418eba2:	2400      	movs	r4, #0
3418eba4:	fb04 f101 	mul.w	r1, r4, r1
3418eba8:	4401      	add	r1, r0
3418ebaa:	68b8      	ldr	r0, [r7, #8]
3418ebac:	4c07      	ldr	r4, [pc, #28]	@ (3418ebcc <From_CConv_Reg+0x4c>)
3418ebae:	fba0 2304 	umull	r2, r3, r0, r4
3418ebb2:	4419      	add	r1, r3
3418ebb4:	460b      	mov	r3, r1
3418ebb6:	e9c7 2302 	strd	r2, r3, [r7, #8]
3418ebba:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return (int32_t) Val;
3418ebbe:	68bb      	ldr	r3, [r7, #8]
}
3418ebc0:	4618      	mov	r0, r3
3418ebc2:	3714      	adds	r7, #20
3418ebc4:	46bd      	mov	sp, r7
3418ebc6:	bcb0      	pop	{r4, r5, r7}
3418ebc8:	4770      	bx	lr
3418ebca:	bf00      	nop
3418ebcc:	0005f5e1 	.word	0x0005f5e1

3418ebd0 <GetAvgStats>:

static uint8_t GetAvgStats(ISP_HandleTypeDef *hIsp, ISP_SVC_StatLocation location, ISP_SVC_Component component, uint32_t accu)
{
3418ebd0:	b480      	push	{r7}
3418ebd2:	b087      	sub	sp, #28
3418ebd4:	af00      	add	r7, sp, #0
3418ebd6:	60f8      	str	r0, [r7, #12]
3418ebd8:	607b      	str	r3, [r7, #4]
3418ebda:	460b      	mov	r3, r1
3418ebdc:	72fb      	strb	r3, [r7, #11]
3418ebde:	4613      	mov	r3, r2
3418ebe0:	72bb      	strb	r3, [r7, #10]
  uint32_t nb_comp_pix, comp_divider;

  /* Number of pixels computed from Stat Area and considering decimation */
  nb_comp_pix = hIsp->statArea.XSize * hIsp->statArea.YSize;
3418ebe2:	68fb      	ldr	r3, [r7, #12]
3418ebe4:	691b      	ldr	r3, [r3, #16]
3418ebe6:	68fa      	ldr	r2, [r7, #12]
3418ebe8:	6952      	ldr	r2, [r2, #20]
3418ebea:	fb02 f303 	mul.w	r3, r2, r3
3418ebee:	613b      	str	r3, [r7, #16]
  nb_comp_pix /= ISP_DecimationValue.factor * ISP_DecimationValue.factor;
3418ebf0:	4b18      	ldr	r3, [pc, #96]	@ (3418ec54 <GetAvgStats+0x84>)
3418ebf2:	781b      	ldrb	r3, [r3, #0]
3418ebf4:	461a      	mov	r2, r3
3418ebf6:	4b17      	ldr	r3, [pc, #92]	@ (3418ec54 <GetAvgStats+0x84>)
3418ebf8:	781b      	ldrb	r3, [r3, #0]
3418ebfa:	fb02 f303 	mul.w	r3, r2, r3
3418ebfe:	461a      	mov	r2, r3
3418ec00:	693b      	ldr	r3, [r7, #16]
3418ec02:	fbb3 f3f2 	udiv	r3, r3, r2
3418ec06:	613b      	str	r3, [r7, #16]

  if (location == ISP_STAT_LOC_DOWN)
3418ec08:	7afb      	ldrb	r3, [r7, #11]
3418ec0a:	2b02      	cmp	r3, #2
3418ec0c:	d102      	bne.n	3418ec14 <GetAvgStats+0x44>
  {
    /* RGB format after demosaicing : 1 component per pixel */
    comp_divider = 1;
3418ec0e:	2301      	movs	r3, #1
3418ec10:	617b      	str	r3, [r7, #20]
3418ec12:	e006      	b.n	3418ec22 <GetAvgStats+0x52>
  }
  else
  {
    /* Only raw bayer sensor expected */
    /* raw bayer: RGB component not present for all pixels */
    comp_divider = (component == ISP_GREEN) ? 2 : 4;
3418ec14:	7abb      	ldrb	r3, [r7, #10]
3418ec16:	2b01      	cmp	r3, #1
3418ec18:	d101      	bne.n	3418ec1e <GetAvgStats+0x4e>
3418ec1a:	2302      	movs	r3, #2
3418ec1c:	e000      	b.n	3418ec20 <GetAvgStats+0x50>
3418ec1e:	2304      	movs	r3, #4
3418ec20:	617b      	str	r3, [r7, #20]
  }

  /* Number of pixels per component */
  nb_comp_pix /= comp_divider;
3418ec22:	693a      	ldr	r2, [r7, #16]
3418ec24:	697b      	ldr	r3, [r7, #20]
3418ec26:	fbb2 f3f3 	udiv	r3, r2, r3
3418ec2a:	613b      	str	r3, [r7, #16]

  /* Compute average (rounding to closest integer) */
  if (nb_comp_pix == 0)
3418ec2c:	693b      	ldr	r3, [r7, #16]
3418ec2e:	2b00      	cmp	r3, #0
3418ec30:	d101      	bne.n	3418ec36 <GetAvgStats+0x66>
  {
    return 0;
3418ec32:	2300      	movs	r3, #0
3418ec34:	e008      	b.n	3418ec48 <GetAvgStats+0x78>
  }

  return ((accu * 256) + (nb_comp_pix / 2)) / nb_comp_pix;
3418ec36:	687b      	ldr	r3, [r7, #4]
3418ec38:	021a      	lsls	r2, r3, #8
3418ec3a:	693b      	ldr	r3, [r7, #16]
3418ec3c:	085b      	lsrs	r3, r3, #1
3418ec3e:	441a      	add	r2, r3
3418ec40:	693b      	ldr	r3, [r7, #16]
3418ec42:	fbb2 f3f3 	udiv	r3, r2, r3
3418ec46:	b2db      	uxtb	r3, r3
}
3418ec48:	4618      	mov	r0, r3
3418ec4a:	371c      	adds	r7, #28
3418ec4c:	46bd      	mov	sp, r7
3418ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ec52:	4770      	bx	lr
3418ec54:	341c00d4 	.word	0x341c00d4

3418ec58 <ReadStatHistogram>:

static void ReadStatHistogram(ISP_HandleTypeDef *hIsp, uint32_t *histogram)
{
3418ec58:	b580      	push	{r7, lr}
3418ec5a:	b084      	sub	sp, #16
3418ec5c:	af00      	add	r7, sp, #0
3418ec5e:	6078      	str	r0, [r7, #4]
3418ec60:	6039      	str	r1, [r7, #0]
  for (uint32_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
3418ec62:	2301      	movs	r3, #1
3418ec64:	60fb      	str	r3, [r7, #12]
3418ec66:	e011      	b.n	3418ec8c <ReadStatHistogram+0x34>
  {
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
3418ec68:	687b      	ldr	r3, [r7, #4]
3418ec6a:	6818      	ldr	r0, [r3, #0]
3418ec6c:	68fb      	ldr	r3, [r7, #12]
3418ec6e:	b2d9      	uxtb	r1, r3
3418ec70:	68fb      	ldr	r3, [r7, #12]
3418ec72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
3418ec76:	3b01      	subs	r3, #1
3418ec78:	009b      	lsls	r3, r3, #2
3418ec7a:	683a      	ldr	r2, [r7, #0]
3418ec7c:	4413      	add	r3, r2
3418ec7e:	460a      	mov	r2, r1
3418ec80:	2101      	movs	r1, #1
3418ec82:	f7f6 f985 	bl	34184f90 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
  for (uint32_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
3418ec86:	68fb      	ldr	r3, [r7, #12]
3418ec88:	3301      	adds	r3, #1
3418ec8a:	60fb      	str	r3, [r7, #12]
3418ec8c:	68fb      	ldr	r3, [r7, #12]
3418ec8e:	2b03      	cmp	r3, #3
3418ec90:	d9ea      	bls.n	3418ec68 <ReadStatHistogram+0x10>
  }
}
3418ec92:	bf00      	nop
3418ec94:	bf00      	nop
3418ec96:	3710      	adds	r7, #16
3418ec98:	46bd      	mov	sp, r7
3418ec9a:	bd80      	pop	{r7, pc}

3418ec9c <SetStatConfig>:

static void SetStatConfig(DCMIPP_StatisticExtractionConfTypeDef *statConf, const DCMIPP_StatisticExtractionConfTypeDef *refConfig)
{
3418ec9c:	b480      	push	{r7}
3418ec9e:	b085      	sub	sp, #20
3418eca0:	af00      	add	r7, sp, #0
3418eca2:	6078      	str	r0, [r7, #4]
3418eca4:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 3; i++)
3418eca6:	2300      	movs	r3, #0
3418eca8:	60fb      	str	r3, [r7, #12]
3418ecaa:	e00e      	b.n	3418ecca <SetStatConfig+0x2e>
  {
    statConf[i] = *refConfig;
3418ecac:	68fa      	ldr	r2, [r7, #12]
3418ecae:	4613      	mov	r3, r2
3418ecb0:	005b      	lsls	r3, r3, #1
3418ecb2:	4413      	add	r3, r2
3418ecb4:	009b      	lsls	r3, r3, #2
3418ecb6:	461a      	mov	r2, r3
3418ecb8:	687b      	ldr	r3, [r7, #4]
3418ecba:	4413      	add	r3, r2
3418ecbc:	683a      	ldr	r2, [r7, #0]
3418ecbe:	ca07      	ldmia	r2, {r0, r1, r2}
3418ecc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for (int i = 0; i < 3; i++)
3418ecc4:	68fb      	ldr	r3, [r7, #12]
3418ecc6:	3301      	adds	r3, #1
3418ecc8:	60fb      	str	r3, [r7, #12]
3418ecca:	68fb      	ldr	r3, [r7, #12]
3418eccc:	2b02      	cmp	r3, #2
3418ecce:	dded      	ble.n	3418ecac <SetStatConfig+0x10>
  }
}
3418ecd0:	bf00      	nop
3418ecd2:	bf00      	nop
3418ecd4:	3714      	adds	r7, #20
3418ecd6:	46bd      	mov	sp, r7
3418ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ecdc:	4770      	bx	lr
	...

3418ece0 <GetNextStatStage>:

static ISP_SVC_StatEngineStage GetNextStatStage(ISP_SVC_StatEngineStage current)
{
3418ece0:	b480      	push	{r7}
3418ece2:	b085      	sub	sp, #20
3418ece4:	af00      	add	r7, sp, #0
3418ece6:	4603      	mov	r3, r0
3418ece8:	71fb      	strb	r3, [r7, #7]
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
3418ecea:	2309      	movs	r3, #9
3418ecec:	73fb      	strb	r3, [r7, #15]

  /* Special mode for IQ tuning tool asking for all stats : go the the next step, no skip */
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
3418ecee:	4b73      	ldr	r3, [pc, #460]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ecf0:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418ecf4:	f003 0304 	and.w	r3, r3, #4
3418ecf8:	2b00      	cmp	r3, #0
3418ecfa:	d106      	bne.n	3418ed0a <GetNextStatStage+0x2a>
      (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP))
3418ecfc:	4b6f      	ldr	r3, [pc, #444]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ecfe:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418ed02:	f003 0304 	and.w	r3, r3, #4
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
3418ed06:	2b00      	cmp	r3, #0
3418ed08:	d00a      	beq.n	3418ed20 <GetNextStatStage+0x40>
  {
    next = (ISP_SVC_StatEngineStage) ((current < ISP_STAT_CFG_LAST) ? current + 1 : ISP_STAT_CFG_UP_AVG);
3418ed0a:	79fb      	ldrb	r3, [r7, #7]
3418ed0c:	2b08      	cmp	r3, #8
3418ed0e:	d803      	bhi.n	3418ed18 <GetNextStatStage+0x38>
3418ed10:	79fb      	ldrb	r3, [r7, #7]
3418ed12:	3301      	adds	r3, #1
3418ed14:	b2db      	uxtb	r3, r3
3418ed16:	e000      	b.n	3418ed1a <GetNextStatStage+0x3a>
3418ed18:	2300      	movs	r3, #0
3418ed1a:	73fb      	strb	r3, [r7, #15]
    return next;
3418ed1c:	7bfb      	ldrb	r3, [r7, #15]
3418ed1e:	e0c7      	b.n	3418eeb0 <GetNextStatStage+0x1d0>
   * - ISP_STAT_CFG_UP_AVG
   * - ISP_STAT_CFG_UP_BINS_0_2 + BINS_3_5 + BINS_6_8 + BINS_9_11
   * - ISP_STAT_CFG_DOWN_AVG
   * - ISP_STAT_CFG_DOWN_BINS_0_2 + BINS_3_5 + BINS_6_8 + BINS_9_11
  */
  switch (current)
3418ed20:	79fb      	ldrb	r3, [r7, #7]
3418ed22:	2b09      	cmp	r3, #9
3418ed24:	f200 80b8 	bhi.w	3418ee98 <GetNextStatStage+0x1b8>
3418ed28:	a201      	add	r2, pc, #4	@ (adr r2, 3418ed30 <GetNextStatStage+0x50>)
3418ed2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418ed2e:	bf00      	nop
3418ed30:	3418ed59 	.word	0x3418ed59
3418ed34:	3418ee99 	.word	0x3418ee99
3418ed38:	3418ee99 	.word	0x3418ee99
3418ed3c:	3418ee99 	.word	0x3418ee99
3418ed40:	3418eda9 	.word	0x3418eda9
3418ed44:	3418edf9 	.word	0x3418edf9
3418ed48:	3418ee99 	.word	0x3418ee99
3418ed4c:	3418ee99 	.word	0x3418ee99
3418ed50:	3418ee99 	.word	0x3418ee99
3418ed54:	3418ee49 	.word	0x3418ee49
  {
  case ISP_STAT_CFG_UP_AVG:
    /* Try Up Bins */
    if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
3418ed58:	4b58      	ldr	r3, [pc, #352]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ed5a:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418ed5e:	f003 0302 	and.w	r3, r3, #2
3418ed62:	2b00      	cmp	r3, #0
3418ed64:	d002      	beq.n	3418ed6c <GetNextStatStage+0x8c>
    {
      next = ISP_STAT_CFG_UP_BINS_0_2;
3418ed66:	2301      	movs	r3, #1
3418ed68:	73fb      	strb	r3, [r7, #15]
    /* Skip Down Bins : try Up Avg */
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
    {
      next = ISP_STAT_CFG_UP_AVG;
    }
    break;
3418ed6a:	e099      	b.n	3418eea0 <GetNextStatStage+0x1c0>
    else if (ISP_SVC_StatEngine.downRequest &  ISP_STAT_TYPE_AVG)
3418ed6c:	4b53      	ldr	r3, [pc, #332]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ed6e:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418ed72:	f003 0301 	and.w	r3, r3, #1
3418ed76:	2b00      	cmp	r3, #0
3418ed78:	d002      	beq.n	3418ed80 <GetNextStatStage+0xa0>
      next = ISP_STAT_CFG_DOWN_AVG;
3418ed7a:	2305      	movs	r3, #5
3418ed7c:	73fb      	strb	r3, [r7, #15]
    break;
3418ed7e:	e08f      	b.n	3418eea0 <GetNextStatStage+0x1c0>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
3418ed80:	4b4e      	ldr	r3, [pc, #312]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ed82:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418ed86:	f003 0302 	and.w	r3, r3, #2
3418ed8a:	2b00      	cmp	r3, #0
3418ed8c:	d002      	beq.n	3418ed94 <GetNextStatStage+0xb4>
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
3418ed8e:	2306      	movs	r3, #6
3418ed90:	73fb      	strb	r3, [r7, #15]
    break;
3418ed92:	e085      	b.n	3418eea0 <GetNextStatStage+0x1c0>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
3418ed94:	4b49      	ldr	r3, [pc, #292]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ed96:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418ed9a:	f003 0301 	and.w	r3, r3, #1
3418ed9e:	2b00      	cmp	r3, #0
3418eda0:	d07e      	beq.n	3418eea0 <GetNextStatStage+0x1c0>
      next = ISP_STAT_CFG_UP_AVG;
3418eda2:	2300      	movs	r3, #0
3418eda4:	73fb      	strb	r3, [r7, #15]
    break;
3418eda6:	e07b      	b.n	3418eea0 <GetNextStatStage+0x1c0>

  case ISP_STAT_CFG_UP_BINS_9_11:
    /* Try Down Avg */
    if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
3418eda8:	4b44      	ldr	r3, [pc, #272]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418edaa:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418edae:	f003 0301 	and.w	r3, r3, #1
3418edb2:	2b00      	cmp	r3, #0
3418edb4:	d002      	beq.n	3418edbc <GetNextStatStage+0xdc>
    {
      next = ISP_STAT_CFG_DOWN_AVG;
3418edb6:	2305      	movs	r3, #5
3418edb8:	73fb      	strb	r3, [r7, #15]
    /* Skip Up Avg : try on Up Bins */
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
    {
      next = ISP_STAT_CFG_UP_BINS_0_2;
    }
    break;
3418edba:	e073      	b.n	3418eea4 <GetNextStatStage+0x1c4>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
3418edbc:	4b3f      	ldr	r3, [pc, #252]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418edbe:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418edc2:	f003 0302 	and.w	r3, r3, #2
3418edc6:	2b00      	cmp	r3, #0
3418edc8:	d002      	beq.n	3418edd0 <GetNextStatStage+0xf0>
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
3418edca:	2306      	movs	r3, #6
3418edcc:	73fb      	strb	r3, [r7, #15]
    break;
3418edce:	e069      	b.n	3418eea4 <GetNextStatStage+0x1c4>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
3418edd0:	4b3a      	ldr	r3, [pc, #232]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418edd2:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418edd6:	f003 0301 	and.w	r3, r3, #1
3418edda:	2b00      	cmp	r3, #0
3418eddc:	d002      	beq.n	3418ede4 <GetNextStatStage+0x104>
      next = ISP_STAT_CFG_UP_AVG;
3418edde:	2300      	movs	r3, #0
3418ede0:	73fb      	strb	r3, [r7, #15]
    break;
3418ede2:	e05f      	b.n	3418eea4 <GetNextStatStage+0x1c4>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
3418ede4:	4b35      	ldr	r3, [pc, #212]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ede6:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418edea:	f003 0302 	and.w	r3, r3, #2
3418edee:	2b00      	cmp	r3, #0
3418edf0:	d058      	beq.n	3418eea4 <GetNextStatStage+0x1c4>
      next = ISP_STAT_CFG_UP_BINS_0_2;
3418edf2:	2301      	movs	r3, #1
3418edf4:	73fb      	strb	r3, [r7, #15]
    break;
3418edf6:	e055      	b.n	3418eea4 <GetNextStatStage+0x1c4>

  case ISP_STAT_CFG_DOWN_AVG:
    /* Try Down Bins */
    if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
3418edf8:	4b30      	ldr	r3, [pc, #192]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418edfa:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418edfe:	f003 0302 	and.w	r3, r3, #2
3418ee02:	2b00      	cmp	r3, #0
3418ee04:	d002      	beq.n	3418ee0c <GetNextStatStage+0x12c>
    {
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
3418ee06:	2306      	movs	r3, #6
3418ee08:	73fb      	strb	r3, [r7, #15]
    /* Skip Up Bins : try Down Avg */
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
    {
      next = ISP_STAT_CFG_DOWN_AVG;
    }
    break;
3418ee0a:	e04d      	b.n	3418eea8 <GetNextStatStage+0x1c8>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
3418ee0c:	4b2b      	ldr	r3, [pc, #172]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ee0e:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418ee12:	f003 0301 	and.w	r3, r3, #1
3418ee16:	2b00      	cmp	r3, #0
3418ee18:	d002      	beq.n	3418ee20 <GetNextStatStage+0x140>
      next = ISP_STAT_CFG_UP_AVG;
3418ee1a:	2300      	movs	r3, #0
3418ee1c:	73fb      	strb	r3, [r7, #15]
    break;
3418ee1e:	e043      	b.n	3418eea8 <GetNextStatStage+0x1c8>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
3418ee20:	4b26      	ldr	r3, [pc, #152]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ee22:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418ee26:	f003 0302 	and.w	r3, r3, #2
3418ee2a:	2b00      	cmp	r3, #0
3418ee2c:	d002      	beq.n	3418ee34 <GetNextStatStage+0x154>
      next = ISP_STAT_CFG_UP_BINS_0_2;
3418ee2e:	2301      	movs	r3, #1
3418ee30:	73fb      	strb	r3, [r7, #15]
    break;
3418ee32:	e039      	b.n	3418eea8 <GetNextStatStage+0x1c8>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
3418ee34:	4b21      	ldr	r3, [pc, #132]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ee36:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418ee3a:	f003 0301 	and.w	r3, r3, #1
3418ee3e:	2b00      	cmp	r3, #0
3418ee40:	d032      	beq.n	3418eea8 <GetNextStatStage+0x1c8>
      next = ISP_STAT_CFG_DOWN_AVG;
3418ee42:	2305      	movs	r3, #5
3418ee44:	73fb      	strb	r3, [r7, #15]
    break;
3418ee46:	e02f      	b.n	3418eea8 <GetNextStatStage+0x1c8>

  case ISP_STAT_CFG_DOWN_BINS_9_11:
    /* Try Up Avg */
    if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
3418ee48:	4b1c      	ldr	r3, [pc, #112]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ee4a:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418ee4e:	f003 0301 	and.w	r3, r3, #1
3418ee52:	2b00      	cmp	r3, #0
3418ee54:	d002      	beq.n	3418ee5c <GetNextStatStage+0x17c>
    {
      next = ISP_STAT_CFG_UP_AVG;
3418ee56:	2300      	movs	r3, #0
3418ee58:	73fb      	strb	r3, [r7, #15]
    /* Skip Down Avg : try Down Bins */
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
    {
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
    }
    break;
3418ee5a:	e027      	b.n	3418eeac <GetNextStatStage+0x1cc>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
3418ee5c:	4b17      	ldr	r3, [pc, #92]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ee5e:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418ee62:	f003 0302 	and.w	r3, r3, #2
3418ee66:	2b00      	cmp	r3, #0
3418ee68:	d002      	beq.n	3418ee70 <GetNextStatStage+0x190>
      next = ISP_STAT_CFG_UP_BINS_0_2;
3418ee6a:	2301      	movs	r3, #1
3418ee6c:	73fb      	strb	r3, [r7, #15]
    break;
3418ee6e:	e01d      	b.n	3418eeac <GetNextStatStage+0x1cc>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
3418ee70:	4b12      	ldr	r3, [pc, #72]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ee72:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418ee76:	f003 0301 	and.w	r3, r3, #1
3418ee7a:	2b00      	cmp	r3, #0
3418ee7c:	d002      	beq.n	3418ee84 <GetNextStatStage+0x1a4>
      next = ISP_STAT_CFG_DOWN_AVG;
3418ee7e:	2305      	movs	r3, #5
3418ee80:	73fb      	strb	r3, [r7, #15]
    break;
3418ee82:	e013      	b.n	3418eeac <GetNextStatStage+0x1cc>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
3418ee84:	4b0d      	ldr	r3, [pc, #52]	@ (3418eebc <GetNextStatStage+0x1dc>)
3418ee86:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418ee8a:	f003 0302 	and.w	r3, r3, #2
3418ee8e:	2b00      	cmp	r3, #0
3418ee90:	d00c      	beq.n	3418eeac <GetNextStatStage+0x1cc>
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
3418ee92:	2306      	movs	r3, #6
3418ee94:	73fb      	strb	r3, [r7, #15]
    break;
3418ee96:	e009      	b.n	3418eeac <GetNextStatStage+0x1cc>

  default:
    /* In the middle of the bins measurement: continue with the next bins part */
    next = (ISP_SVC_StatEngineStage) (current + 1);
3418ee98:	79fb      	ldrb	r3, [r7, #7]
3418ee9a:	3301      	adds	r3, #1
3418ee9c:	73fb      	strb	r3, [r7, #15]
    break;
3418ee9e:	e006      	b.n	3418eeae <GetNextStatStage+0x1ce>
    break;
3418eea0:	bf00      	nop
3418eea2:	e004      	b.n	3418eeae <GetNextStatStage+0x1ce>
    break;
3418eea4:	bf00      	nop
3418eea6:	e002      	b.n	3418eeae <GetNextStatStage+0x1ce>
    break;
3418eea8:	bf00      	nop
3418eeaa:	e000      	b.n	3418eeae <GetNextStatStage+0x1ce>
    break;
3418eeac:	bf00      	nop
  }

  return next;
3418eeae:	7bfb      	ldrb	r3, [r7, #15]
}
3418eeb0:	4618      	mov	r0, r3
3418eeb2:	3714      	adds	r7, #20
3418eeb4:	46bd      	mov	sp, r7
3418eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eeba:	4770      	bx	lr
3418eebc:	341c1524 	.word	0x341c1524

3418eec0 <GetStatCycleStart>:

static ISP_SVC_StatEngineStage GetStatCycleStart(ISP_SVC_StatLocation location)
{
3418eec0:	b480      	push	{r7}
3418eec2:	b085      	sub	sp, #20
3418eec4:	af00      	add	r7, sp, #0
3418eec6:	4603      	mov	r3, r0
3418eec8:	71fb      	strb	r3, [r7, #7]
  ISP_SVC_StatEngineStage stage;

  if (location == ISP_STAT_LOC_UP)
3418eeca:	79fb      	ldrb	r3, [r7, #7]
3418eecc:	2b01      	cmp	r3, #1
3418eece:	d113      	bne.n	3418eef8 <GetStatCycleStart+0x38>
  {
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG) ||
3418eed0:	4b16      	ldr	r3, [pc, #88]	@ (3418ef2c <GetStatCycleStart+0x6c>)
3418eed2:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418eed6:	f003 0301 	and.w	r3, r3, #1
3418eeda:	2b00      	cmp	r3, #0
3418eedc:	d106      	bne.n	3418eeec <GetStatCycleStart+0x2c>
        (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP))
3418eede:	4b13      	ldr	r3, [pc, #76]	@ (3418ef2c <GetStatCycleStart+0x6c>)
3418eee0:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418eee4:	f003 0304 	and.w	r3, r3, #4
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG) ||
3418eee8:	2b00      	cmp	r3, #0
3418eeea:	d002      	beq.n	3418eef2 <GetStatCycleStart+0x32>
    {
      /* Stat up cycle starts with AVG measurement */
      stage = ISP_STAT_CFG_UP_AVG;
3418eeec:	2300      	movs	r3, #0
3418eeee:	73fb      	strb	r3, [r7, #15]
3418eef0:	e015      	b.n	3418ef1e <GetStatCycleStart+0x5e>
    }
    else
    {
      /* Stat up cycle starts with 1st BIN measurement */
      stage = ISP_STAT_CFG_UP_BINS_0_2;
3418eef2:	2301      	movs	r3, #1
3418eef4:	73fb      	strb	r3, [r7, #15]
3418eef6:	e012      	b.n	3418ef1e <GetStatCycleStart+0x5e>
    }
  }
  else
  {
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG) ||
3418eef8:	4b0c      	ldr	r3, [pc, #48]	@ (3418ef2c <GetStatCycleStart+0x6c>)
3418eefa:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418eefe:	f003 0301 	and.w	r3, r3, #1
3418ef02:	2b00      	cmp	r3, #0
3418ef04:	d106      	bne.n	3418ef14 <GetStatCycleStart+0x54>
        (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP))
3418ef06:	4b09      	ldr	r3, [pc, #36]	@ (3418ef2c <GetStatCycleStart+0x6c>)
3418ef08:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418ef0c:	f003 0304 	and.w	r3, r3, #4
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG) ||
3418ef10:	2b00      	cmp	r3, #0
3418ef12:	d002      	beq.n	3418ef1a <GetStatCycleStart+0x5a>
    {
      /* Stat down cycle starts with AVG measurement */
      stage = ISP_STAT_CFG_DOWN_AVG;
3418ef14:	2305      	movs	r3, #5
3418ef16:	73fb      	strb	r3, [r7, #15]
3418ef18:	e001      	b.n	3418ef1e <GetStatCycleStart+0x5e>
    }
    else
    {
      /* Stat down cycle starts with 1st BIN measurement */
      stage = ISP_STAT_CFG_DOWN_BINS_0_2;
3418ef1a:	2306      	movs	r3, #6
3418ef1c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return stage;
3418ef1e:	7bfb      	ldrb	r3, [r7, #15]
}
3418ef20:	4618      	mov	r0, r3
3418ef22:	3714      	adds	r7, #20
3418ef24:	46bd      	mov	sp, r7
3418ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ef2a:	4770      	bx	lr
3418ef2c:	341c1524 	.word	0x341c1524

3418ef30 <GetStatCycleEnd>:

static ISP_SVC_StatEngineStage GetStatCycleEnd(ISP_SVC_StatLocation location)
{
3418ef30:	b480      	push	{r7}
3418ef32:	b085      	sub	sp, #20
3418ef34:	af00      	add	r7, sp, #0
3418ef36:	4603      	mov	r3, r0
3418ef38:	71fb      	strb	r3, [r7, #7]
  ISP_SVC_StatEngineStage stage;

  if (location == ISP_STAT_LOC_UP)
3418ef3a:	79fb      	ldrb	r3, [r7, #7]
3418ef3c:	2b01      	cmp	r3, #1
3418ef3e:	d113      	bne.n	3418ef68 <GetStatCycleEnd+0x38>
  {
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS) ||
3418ef40:	4b16      	ldr	r3, [pc, #88]	@ (3418ef9c <GetStatCycleEnd+0x6c>)
3418ef42:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418ef46:	f003 0302 	and.w	r3, r3, #2
3418ef4a:	2b00      	cmp	r3, #0
3418ef4c:	d106      	bne.n	3418ef5c <GetStatCycleEnd+0x2c>
        (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP))
3418ef4e:	4b13      	ldr	r3, [pc, #76]	@ (3418ef9c <GetStatCycleEnd+0x6c>)
3418ef50:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3418ef54:	f003 0304 	and.w	r3, r3, #4
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS) ||
3418ef58:	2b00      	cmp	r3, #0
3418ef5a:	d002      	beq.n	3418ef62 <GetStatCycleEnd+0x32>
    {
      /* Stat up cycle ends with last BINS measurement */
      stage = ISP_STAT_CFG_UP_BINS_9_11;
3418ef5c:	2304      	movs	r3, #4
3418ef5e:	73fb      	strb	r3, [r7, #15]
3418ef60:	e015      	b.n	3418ef8e <GetStatCycleEnd+0x5e>
    }
    else
    {
      /* Stat up cycle ends with AVG measurement */
      stage = ISP_STAT_CFG_UP_AVG;
3418ef62:	2300      	movs	r3, #0
3418ef64:	73fb      	strb	r3, [r7, #15]
3418ef66:	e012      	b.n	3418ef8e <GetStatCycleEnd+0x5e>
    }
  }
  else
  {
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS) ||
3418ef68:	4b0c      	ldr	r3, [pc, #48]	@ (3418ef9c <GetStatCycleEnd+0x6c>)
3418ef6a:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418ef6e:	f003 0302 	and.w	r3, r3, #2
3418ef72:	2b00      	cmp	r3, #0
3418ef74:	d106      	bne.n	3418ef84 <GetStatCycleEnd+0x54>
        (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP))
3418ef76:	4b09      	ldr	r3, [pc, #36]	@ (3418ef9c <GetStatCycleEnd+0x6c>)
3418ef78:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3418ef7c:	f003 0304 	and.w	r3, r3, #4
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS) ||
3418ef80:	2b00      	cmp	r3, #0
3418ef82:	d002      	beq.n	3418ef8a <GetStatCycleEnd+0x5a>
    {
      /* Stat down cycle ends with last BINS measurement */
      stage = ISP_STAT_CFG_DOWN_BINS_9_11;
3418ef84:	2309      	movs	r3, #9
3418ef86:	73fb      	strb	r3, [r7, #15]
3418ef88:	e001      	b.n	3418ef8e <GetStatCycleEnd+0x5e>
    }
    else
    {
      /* Stat down cycle ends with AVG measurement */
      stage = ISP_STAT_CFG_DOWN_AVG;
3418ef8a:	2305      	movs	r3, #5
3418ef8c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return stage;
3418ef8e:	7bfb      	ldrb	r3, [r7, #15]
}
3418ef90:	4618      	mov	r0, r3
3418ef92:	3714      	adds	r7, #20
3418ef94:	46bd      	mov	sp, r7
3418ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ef9a:	4770      	bx	lr
3418ef9c:	341c1524 	.word	0x341c1524

3418efa0 <LuminanceFromRGB>:

uint8_t LuminanceFromRGB(uint8_t r, uint8_t g, uint8_t b)
{
3418efa0:	b480      	push	{r7}
3418efa2:	b083      	sub	sp, #12
3418efa4:	af00      	add	r7, sp, #0
3418efa6:	4603      	mov	r3, r0
3418efa8:	71fb      	strb	r3, [r7, #7]
3418efaa:	460b      	mov	r3, r1
3418efac:	71bb      	strb	r3, [r7, #6]
3418efae:	4613      	mov	r3, r2
3418efb0:	717b      	strb	r3, [r7, #5]
  /* Compute luminance from RGB components (BT.601) */
  return (uint8_t) (r * 0.299 + g * 0.587 + b * 0.114);
3418efb2:	79fb      	ldrb	r3, [r7, #7]
3418efb4:	ee07 3a90 	vmov	s15, r3
3418efb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3418efbc:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 3418f008 <LuminanceFromRGB+0x68>
3418efc0:	ee27 6b06 	vmul.f64	d6, d7, d6
3418efc4:	79bb      	ldrb	r3, [r7, #6]
3418efc6:	ee07 3a90 	vmov	s15, r3
3418efca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3418efce:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 3418f010 <LuminanceFromRGB+0x70>
3418efd2:	ee27 7b05 	vmul.f64	d7, d7, d5
3418efd6:	ee36 6b07 	vadd.f64	d6, d6, d7
3418efda:	797b      	ldrb	r3, [r7, #5]
3418efdc:	ee07 3a90 	vmov	s15, r3
3418efe0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3418efe4:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 3418f018 <LuminanceFromRGB+0x78>
3418efe8:	ee27 7b05 	vmul.f64	d7, d7, d5
3418efec:	ee36 7b07 	vadd.f64	d7, d6, d7
3418eff0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
3418eff4:	edc7 7a00 	vstr	s15, [r7]
3418eff8:	783b      	ldrb	r3, [r7, #0]
3418effa:	b2db      	uxtb	r3, r3
}
3418effc:	4618      	mov	r0, r3
3418effe:	370c      	adds	r7, #12
3418f000:	46bd      	mov	sp, r7
3418f002:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f006:	4770      	bx	lr
3418f008:	e5604189 	.word	0xe5604189
3418f00c:	3fd322d0 	.word	0x3fd322d0
3418f010:	39581062 	.word	0x39581062
3418f014:	3fe2c8b4 	.word	0x3fe2c8b4
3418f018:	9fbe76c9 	.word	0x9fbe76c9
3418f01c:	3fbd2f1a 	.word	0x3fbd2f1a

3418f020 <LuminanceFromRGBMono>:

uint8_t LuminanceFromRGBMono(uint8_t r, uint8_t g, uint8_t b)
{
3418f020:	b480      	push	{r7}
3418f022:	b083      	sub	sp, #12
3418f024:	af00      	add	r7, sp, #0
3418f026:	4603      	mov	r3, r0
3418f028:	71fb      	strb	r3, [r7, #7]
3418f02a:	460b      	mov	r3, r1
3418f02c:	71bb      	strb	r3, [r7, #6]
3418f02e:	4613      	mov	r3, r2
3418f030:	717b      	strb	r3, [r7, #5]
  /* Compute luminance from RGB components
   * by adding together R, G, B components for monochrome sensor */
  return r + g + b;
3418f032:	79fa      	ldrb	r2, [r7, #7]
3418f034:	79bb      	ldrb	r3, [r7, #6]
3418f036:	4413      	add	r3, r2
3418f038:	b2da      	uxtb	r2, r3
3418f03a:	797b      	ldrb	r3, [r7, #5]
3418f03c:	4413      	add	r3, r2
3418f03e:	b2db      	uxtb	r3, r3
}
3418f040:	4618      	mov	r0, r3
3418f042:	370c      	adds	r7, #12
3418f044:	46bd      	mov	sp, r7
3418f046:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f04a:	4770      	bx	lr

3418f04c <ISP_SVC_ISP_SetDemosaicing>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the demosaicing configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetDemosaicing(ISP_HandleTypeDef *hIsp, ISP_DemosaicingTypeDef *pConfig)
{
3418f04c:	b580      	push	{r7, lr}
3418f04e:	b088      	sub	sp, #32
3418f050:	af00      	add	r7, sp, #0
3418f052:	6078      	str	r0, [r7, #4]
3418f054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_RawBayer2RGBConfTypeDef rawBayerCfg;

  if ((hIsp == NULL) || (pConfig == NULL) ||
3418f056:	687b      	ldr	r3, [r7, #4]
3418f058:	2b00      	cmp	r3, #0
3418f05a:	d012      	beq.n	3418f082 <ISP_SVC_ISP_SetDemosaicing+0x36>
3418f05c:	683b      	ldr	r3, [r7, #0]
3418f05e:	2b00      	cmp	r3, #0
3418f060:	d00f      	beq.n	3418f082 <ISP_SVC_ISP_SetDemosaicing+0x36>
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
3418f062:	683b      	ldr	r3, [r7, #0]
3418f064:	789b      	ldrb	r3, [r3, #2]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3418f066:	2b07      	cmp	r3, #7
3418f068:	d80b      	bhi.n	3418f082 <ISP_SVC_ISP_SetDemosaicing+0x36>
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
3418f06a:	683b      	ldr	r3, [r7, #0]
3418f06c:	78db      	ldrb	r3, [r3, #3]
3418f06e:	2b07      	cmp	r3, #7
3418f070:	d807      	bhi.n	3418f082 <ISP_SVC_ISP_SetDemosaicing+0x36>
      (pConfig->lineH > ISP_DEMOS_STRENGTH_MAX) || (pConfig->edge > ISP_DEMOS_STRENGTH_MAX))
3418f072:	683b      	ldr	r3, [r7, #0]
3418f074:	791b      	ldrb	r3, [r3, #4]
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
3418f076:	2b07      	cmp	r3, #7
3418f078:	d803      	bhi.n	3418f082 <ISP_SVC_ISP_SetDemosaicing+0x36>
      (pConfig->lineH > ISP_DEMOS_STRENGTH_MAX) || (pConfig->edge > ISP_DEMOS_STRENGTH_MAX))
3418f07a:	683b      	ldr	r3, [r7, #0]
3418f07c:	795b      	ldrb	r3, [r3, #5]
3418f07e:	2b07      	cmp	r3, #7
3418f080:	d901      	bls.n	3418f086 <ISP_SVC_ISP_SetDemosaicing+0x3a>
  {
    return ISP_ERR_DEMOSAICING_EINVAL;
3418f082:	230a      	movs	r3, #10
3418f084:	e056      	b.n	3418f134 <ISP_SVC_ISP_SetDemosaicing+0xe8>
  }

  /* Do not enable demosaicing if the camera sensor is a monochrome sensor */
  if ((pConfig->enable == 0) || (pConfig->type == ISP_DEMOS_TYPE_MONO))
3418f086:	683b      	ldr	r3, [r7, #0]
3418f088:	781b      	ldrb	r3, [r3, #0]
3418f08a:	2b00      	cmp	r3, #0
3418f08c:	d003      	beq.n	3418f096 <ISP_SVC_ISP_SetDemosaicing+0x4a>
3418f08e:	683b      	ldr	r3, [r7, #0]
3418f090:	785b      	ldrb	r3, [r3, #1]
3418f092:	2b04      	cmp	r3, #4
3418f094:	d108      	bne.n	3418f0a8 <ISP_SVC_ISP_SetDemosaicing+0x5c>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f096:	687b      	ldr	r3, [r7, #4]
3418f098:	681b      	ldr	r3, [r3, #0]
3418f09a:	2101      	movs	r1, #1
3418f09c:	4618      	mov	r0, r3
3418f09e:	f7f5 f9e9 	bl	34184474 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB>
3418f0a2:	4603      	mov	r3, r0
3418f0a4:	77fb      	strb	r3, [r7, #31]
3418f0a6:	e03f      	b.n	3418f128 <ISP_SVC_ISP_SetDemosaicing+0xdc>
  }
  else
  {
    switch(pConfig->type)
3418f0a8:	683b      	ldr	r3, [r7, #0]
3418f0aa:	785b      	ldrb	r3, [r3, #1]
3418f0ac:	2b03      	cmp	r3, #3
3418f0ae:	d817      	bhi.n	3418f0e0 <ISP_SVC_ISP_SetDemosaicing+0x94>
3418f0b0:	a201      	add	r2, pc, #4	@ (adr r2, 3418f0b8 <ISP_SVC_ISP_SetDemosaicing+0x6c>)
3418f0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418f0b6:	bf00      	nop
3418f0b8:	3418f0c9 	.word	0x3418f0c9
3418f0bc:	3418f0cf 	.word	0x3418f0cf
3418f0c0:	3418f0d5 	.word	0x3418f0d5
3418f0c4:	3418f0db 	.word	0x3418f0db
    {
      case ISP_DEMOS_TYPE_RGGB:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_RGGB;
3418f0c8:	2300      	movs	r3, #0
3418f0ca:	613b      	str	r3, [r7, #16]
        break;
3418f0cc:	e00b      	b.n	3418f0e6 <ISP_SVC_ISP_SetDemosaicing+0x9a>
      case ISP_DEMOS_TYPE_GRBG:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_GRBG;
3418f0ce:	2302      	movs	r3, #2
3418f0d0:	613b      	str	r3, [r7, #16]
        break;
3418f0d2:	e008      	b.n	3418f0e6 <ISP_SVC_ISP_SetDemosaicing+0x9a>
      case ISP_DEMOS_TYPE_GBRG:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_GBRG;
3418f0d4:	2304      	movs	r3, #4
3418f0d6:	613b      	str	r3, [r7, #16]
        break;
3418f0d8:	e005      	b.n	3418f0e6 <ISP_SVC_ISP_SetDemosaicing+0x9a>
      case ISP_DEMOS_TYPE_BGGR:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_BGGR;
3418f0da:	2306      	movs	r3, #6
3418f0dc:	613b      	str	r3, [r7, #16]
        break;
3418f0de:	e002      	b.n	3418f0e6 <ISP_SVC_ISP_SetDemosaicing+0x9a>
      default:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_RGGB;
3418f0e0:	2300      	movs	r3, #0
3418f0e2:	613b      	str	r3, [r7, #16]
        break;
3418f0e4:	bf00      	nop
    }

    rawBayerCfg.PeakStrength = (uint32_t) pConfig->peak;
3418f0e6:	683b      	ldr	r3, [r7, #0]
3418f0e8:	789b      	ldrb	r3, [r3, #2]
3418f0ea:	617b      	str	r3, [r7, #20]
    rawBayerCfg.VLineStrength = (uint32_t) pConfig->lineV;
3418f0ec:	683b      	ldr	r3, [r7, #0]
3418f0ee:	78db      	ldrb	r3, [r3, #3]
3418f0f0:	60bb      	str	r3, [r7, #8]
    rawBayerCfg.HLineStrength = (uint32_t) pConfig->lineH;
3418f0f2:	683b      	ldr	r3, [r7, #0]
3418f0f4:	791b      	ldrb	r3, [r3, #4]
3418f0f6:	60fb      	str	r3, [r7, #12]
    rawBayerCfg.EdgeStrength = (uint32_t) pConfig->edge;
3418f0f8:	683b      	ldr	r3, [r7, #0]
3418f0fa:	795b      	ldrb	r3, [r3, #5]
3418f0fc:	61bb      	str	r3, [r7, #24]
    halStatus = HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &rawBayerCfg);
3418f0fe:	687b      	ldr	r3, [r7, #4]
3418f100:	681b      	ldr	r3, [r3, #0]
3418f102:	f107 0208 	add.w	r2, r7, #8
3418f106:	2101      	movs	r1, #1
3418f108:	4618      	mov	r0, r3
3418f10a:	f7f5 f957 	bl	341843bc <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig>
3418f10e:	4603      	mov	r3, r0
3418f110:	77fb      	strb	r3, [r7, #31]

    if (halStatus == HAL_OK)
3418f112:	7ffb      	ldrb	r3, [r7, #31]
3418f114:	2b00      	cmp	r3, #0
3418f116:	d107      	bne.n	3418f128 <ISP_SVC_ISP_SetDemosaicing+0xdc>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f118:	687b      	ldr	r3, [r7, #4]
3418f11a:	681b      	ldr	r3, [r3, #0]
3418f11c:	2101      	movs	r1, #1
3418f11e:	4618      	mov	r0, r3
3418f120:	f7f5 f988 	bl	34184434 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB>
3418f124:	4603      	mov	r3, r0
3418f126:	77fb      	strb	r3, [r7, #31]
    }
  }

  if (halStatus != HAL_OK)
3418f128:	7ffb      	ldrb	r3, [r7, #31]
3418f12a:	2b00      	cmp	r3, #0
3418f12c:	d001      	beq.n	3418f132 <ISP_SVC_ISP_SetDemosaicing+0xe6>
  {
    return ISP_ERR_DEMOSAICING_HAL;
3418f12e:	230b      	movs	r3, #11
3418f130:	e000      	b.n	3418f134 <ISP_SVC_ISP_SetDemosaicing+0xe8>
  }

  return ISP_OK;
3418f132:	2300      	movs	r3, #0
}
3418f134:	4618      	mov	r0, r3
3418f136:	3720      	adds	r7, #32
3418f138:	46bd      	mov	sp, r7
3418f13a:	bd80      	pop	{r7, pc}

3418f13c <ISP_SVC_ISP_SetStatRemoval>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Stat Removal configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetStatRemoval(ISP_HandleTypeDef *hIsp, ISP_StatRemovalTypeDef *pConfig)
{
3418f13c:	b580      	push	{r7, lr}
3418f13e:	b084      	sub	sp, #16
3418f140:	af00      	add	r7, sp, #0
3418f142:	6078      	str	r0, [r7, #4]
3418f144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;

  if ((hIsp == NULL) || (pConfig == NULL) ||
3418f146:	687b      	ldr	r3, [r7, #4]
3418f148:	2b00      	cmp	r3, #0
3418f14a:	d00c      	beq.n	3418f166 <ISP_SVC_ISP_SetStatRemoval+0x2a>
3418f14c:	683b      	ldr	r3, [r7, #0]
3418f14e:	2b00      	cmp	r3, #0
3418f150:	d009      	beq.n	3418f166 <ISP_SVC_ISP_SetStatRemoval+0x2a>
      (pConfig->nbHeadLines > ISP_STATREMOVAL_HEADLINES_MAX) || (pConfig->nbValidLines > ISP_STATREMOVAL_VALIDLINES_MAX))
3418f152:	683b      	ldr	r3, [r7, #0]
3418f154:	685b      	ldr	r3, [r3, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3418f156:	2b07      	cmp	r3, #7
3418f158:	d805      	bhi.n	3418f166 <ISP_SVC_ISP_SetStatRemoval+0x2a>
      (pConfig->nbHeadLines > ISP_STATREMOVAL_HEADLINES_MAX) || (pConfig->nbValidLines > ISP_STATREMOVAL_VALIDLINES_MAX))
3418f15a:	683b      	ldr	r3, [r7, #0]
3418f15c:	689b      	ldr	r3, [r3, #8]
3418f15e:	f640 72fe 	movw	r2, #4094	@ 0xffe
3418f162:	4293      	cmp	r3, r2
3418f164:	d901      	bls.n	3418f16a <ISP_SVC_ISP_SetStatRemoval+0x2e>
  {
    return ISP_ERR_STATREMOVAL_EINVAL;
3418f166:	2314      	movs	r3, #20
3418f168:	e028      	b.n	3418f1bc <ISP_SVC_ISP_SetStatRemoval+0x80>
  }

  if (pConfig->enable == 0)
3418f16a:	683b      	ldr	r3, [r7, #0]
3418f16c:	781b      	ldrb	r3, [r3, #0]
3418f16e:	2b00      	cmp	r3, #0
3418f170:	d108      	bne.n	3418f184 <ISP_SVC_ISP_SetStatRemoval+0x48>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f172:	687b      	ldr	r3, [r7, #4]
3418f174:	681b      	ldr	r3, [r3, #0]
3418f176:	2101      	movs	r1, #1
3418f178:	4618      	mov	r0, r3
3418f17a:	f7f5 f9e6 	bl	3418454a <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic>
3418f17e:	4603      	mov	r3, r0
3418f180:	73fb      	strb	r3, [r7, #15]
3418f182:	e015      	b.n	3418f1b0 <ISP_SVC_ISP_SetStatRemoval+0x74>
  }
  else
  {
    halStatus = HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig(hIsp->hDcmipp, DCMIPP_PIPE1, pConfig->nbHeadLines, pConfig->nbValidLines);
3418f184:	687b      	ldr	r3, [r7, #4]
3418f186:	6818      	ldr	r0, [r3, #0]
3418f188:	683b      	ldr	r3, [r7, #0]
3418f18a:	685a      	ldr	r2, [r3, #4]
3418f18c:	683b      	ldr	r3, [r7, #0]
3418f18e:	689b      	ldr	r3, [r3, #8]
3418f190:	2101      	movs	r1, #1
3418f192:	f7f5 f98f 	bl	341844b4 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig>
3418f196:	4603      	mov	r3, r0
3418f198:	73fb      	strb	r3, [r7, #15]

    if (halStatus == HAL_OK)
3418f19a:	7bfb      	ldrb	r3, [r7, #15]
3418f19c:	2b00      	cmp	r3, #0
3418f19e:	d107      	bne.n	3418f1b0 <ISP_SVC_ISP_SetStatRemoval+0x74>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f1a0:	687b      	ldr	r3, [r7, #4]
3418f1a2:	681b      	ldr	r3, [r3, #0]
3418f1a4:	2101      	movs	r1, #1
3418f1a6:	4618      	mov	r0, r3
3418f1a8:	f7f5 f9af 	bl	3418450a <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic>
3418f1ac:	4603      	mov	r3, r0
3418f1ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  if (halStatus != HAL_OK)
3418f1b0:	7bfb      	ldrb	r3, [r7, #15]
3418f1b2:	2b00      	cmp	r3, #0
3418f1b4:	d001      	beq.n	3418f1ba <ISP_SVC_ISP_SetStatRemoval+0x7e>
  {
    return ISP_ERR_STATREMOVAL_HAL;
3418f1b6:	2315      	movs	r3, #21
3418f1b8:	e000      	b.n	3418f1bc <ISP_SVC_ISP_SetStatRemoval+0x80>
  }

  return ISP_OK;
3418f1ba:	2300      	movs	r3, #0
}
3418f1bc:	4618      	mov	r0, r3
3418f1be:	3710      	adds	r7, #16
3418f1c0:	46bd      	mov	sp, r7
3418f1c2:	bd80      	pop	{r7, pc}

3418f1c4 <ISP_SVC_ISP_SetDecimation>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the decimation configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetDecimation(ISP_HandleTypeDef *hIsp, ISP_DecimationTypeDef *pConfig)
{
3418f1c4:	b580      	push	{r7, lr}
3418f1c6:	b086      	sub	sp, #24
3418f1c8:	af00      	add	r7, sp, #0
3418f1ca:	6078      	str	r0, [r7, #4]
3418f1cc:	6039      	str	r1, [r7, #0]
  DCMIPP_DecimationConfTypeDef decimationCfg;
  ISP_StatusTypeDef ret = ISP_OK;
3418f1ce:	2300      	movs	r3, #0
3418f1d0:	75fb      	strb	r3, [r7, #23]

  /* Check handles validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3418f1d2:	687b      	ldr	r3, [r7, #4]
3418f1d4:	2b00      	cmp	r3, #0
3418f1d6:	d002      	beq.n	3418f1de <ISP_SVC_ISP_SetDecimation+0x1a>
3418f1d8:	683b      	ldr	r3, [r7, #0]
3418f1da:	2b00      	cmp	r3, #0
3418f1dc:	d101      	bne.n	3418f1e2 <ISP_SVC_ISP_SetDecimation+0x1e>
  {
    return ISP_ERR_DECIMATION_EINVAL;
3418f1de:	231e      	movs	r3, #30
3418f1e0:	e04b      	b.n	3418f27a <ISP_SVC_ISP_SetDecimation+0xb6>
  }

  switch (pConfig->factor)
3418f1e2:	683b      	ldr	r3, [r7, #0]
3418f1e4:	781b      	ldrb	r3, [r3, #0]
3418f1e6:	3b01      	subs	r3, #1
3418f1e8:	2b07      	cmp	r3, #7
3418f1ea:	d827      	bhi.n	3418f23c <ISP_SVC_ISP_SetDecimation+0x78>
3418f1ec:	a201      	add	r2, pc, #4	@ (adr r2, 3418f1f4 <ISP_SVC_ISP_SetDecimation+0x30>)
3418f1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418f1f2:	bf00      	nop
3418f1f4:	3418f215 	.word	0x3418f215
3418f1f8:	3418f21f 	.word	0x3418f21f
3418f1fc:	3418f23d 	.word	0x3418f23d
3418f200:	3418f229 	.word	0x3418f229
3418f204:	3418f23d 	.word	0x3418f23d
3418f208:	3418f23d 	.word	0x3418f23d
3418f20c:	3418f23d 	.word	0x3418f23d
3418f210:	3418f233 	.word	0x3418f233
  {
  case ISP_DECIM_FACTOR_1:
    decimationCfg.VRatio = DCMIPP_VDEC_ALL;
3418f214:	2300      	movs	r3, #0
3418f216:	60fb      	str	r3, [r7, #12]
    decimationCfg.HRatio = DCMIPP_HDEC_ALL;
3418f218:	2300      	movs	r3, #0
3418f21a:	613b      	str	r3, [r7, #16]
    break;
3418f21c:	e010      	b.n	3418f240 <ISP_SVC_ISP_SetDecimation+0x7c>

  case ISP_DECIM_FACTOR_2:
    decimationCfg.VRatio = DCMIPP_VDEC_1_OUT_2;
3418f21e:	2308      	movs	r3, #8
3418f220:	60fb      	str	r3, [r7, #12]
    decimationCfg.HRatio = DCMIPP_HDEC_1_OUT_2;
3418f222:	2302      	movs	r3, #2
3418f224:	613b      	str	r3, [r7, #16]
    break;
3418f226:	e00b      	b.n	3418f240 <ISP_SVC_ISP_SetDecimation+0x7c>

  case ISP_DECIM_FACTOR_4:
    decimationCfg.VRatio = DCMIPP_VDEC_1_OUT_4;
3418f228:	2310      	movs	r3, #16
3418f22a:	60fb      	str	r3, [r7, #12]
    decimationCfg.HRatio = DCMIPP_HDEC_1_OUT_4;
3418f22c:	2304      	movs	r3, #4
3418f22e:	613b      	str	r3, [r7, #16]
    break;
3418f230:	e006      	b.n	3418f240 <ISP_SVC_ISP_SetDecimation+0x7c>

  case ISP_DECIM_FACTOR_8:
    decimationCfg.VRatio = DCMIPP_VDEC_1_OUT_8;
3418f232:	2318      	movs	r3, #24
3418f234:	60fb      	str	r3, [r7, #12]
    decimationCfg.HRatio = DCMIPP_HDEC_1_OUT_8;
3418f236:	2306      	movs	r3, #6
3418f238:	613b      	str	r3, [r7, #16]
    break;
3418f23a:	e001      	b.n	3418f240 <ISP_SVC_ISP_SetDecimation+0x7c>

  default:
    return ISP_ERR_DECIMATION_EINVAL;
3418f23c:	231e      	movs	r3, #30
3418f23e:	e01c      	b.n	3418f27a <ISP_SVC_ISP_SetDecimation+0xb6>
  }

  if (HAL_DCMIPP_PIPE_SetISPDecimationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &decimationCfg) != HAL_OK)
3418f240:	687b      	ldr	r3, [r7, #4]
3418f242:	681b      	ldr	r3, [r3, #0]
3418f244:	f107 020c 	add.w	r2, r7, #12
3418f248:	2101      	movs	r1, #1
3418f24a:	4618      	mov	r0, r3
3418f24c:	f7f4 ff30 	bl	341840b0 <HAL_DCMIPP_PIPE_SetISPDecimationConfig>
3418f250:	4603      	mov	r3, r0
3418f252:	2b00      	cmp	r3, #0
3418f254:	d001      	beq.n	3418f25a <ISP_SVC_ISP_SetDecimation+0x96>
  {
    return ISP_ERR_DECIMATION_HAL;
3418f256:	231f      	movs	r3, #31
3418f258:	e00f      	b.n	3418f27a <ISP_SVC_ISP_SetDecimation+0xb6>
  }

  if (HAL_DCMIPP_PIPE_EnableISPDecimation(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
3418f25a:	687b      	ldr	r3, [r7, #4]
3418f25c:	681b      	ldr	r3, [r3, #0]
3418f25e:	2101      	movs	r1, #1
3418f260:	4618      	mov	r0, r3
3418f262:	f7f4 ff56 	bl	34184112 <HAL_DCMIPP_PIPE_EnableISPDecimation>
3418f266:	4603      	mov	r3, r0
3418f268:	2b00      	cmp	r3, #0
3418f26a:	d001      	beq.n	3418f270 <ISP_SVC_ISP_SetDecimation+0xac>
  {
    return ISP_ERR_DECIMATION_HAL;
3418f26c:	231f      	movs	r3, #31
3418f26e:	e004      	b.n	3418f27a <ISP_SVC_ISP_SetDecimation+0xb6>
  }

  /* Save decimation value */
  ISP_DecimationValue.factor = pConfig->factor;
3418f270:	683b      	ldr	r3, [r7, #0]
3418f272:	781a      	ldrb	r2, [r3, #0]
3418f274:	4b03      	ldr	r3, [pc, #12]	@ (3418f284 <ISP_SVC_ISP_SetDecimation+0xc0>)
3418f276:	701a      	strb	r2, [r3, #0]

  return ret;
3418f278:	7dfb      	ldrb	r3, [r7, #23]
}
3418f27a:	4618      	mov	r0, r3
3418f27c:	3718      	adds	r7, #24
3418f27e:	46bd      	mov	sp, r7
3418f280:	bd80      	pop	{r7, pc}
3418f282:	bf00      	nop
3418f284:	341c00d4 	.word	0x341c00d4

3418f288 <ISP_SVC_ISP_SetContrast>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the contrast configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetContrast(ISP_HandleTypeDef *hIsp, ISP_ContrastTypeDef *pConfig)
{
3418f288:	b580      	push	{r7, lr}
3418f28a:	b086      	sub	sp, #24
3418f28c:	af00      	add	r7, sp, #0
3418f28e:	6078      	str	r0, [r7, #4]
3418f290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_ContrastConfTypeDef contrast;

  if ((hIsp == NULL) || (pConfig == NULL) ||
3418f292:	687b      	ldr	r3, [r7, #4]
3418f294:	2b00      	cmp	r3, #0
3418f296:	d02f      	beq.n	3418f2f8 <ISP_SVC_ISP_SetContrast+0x70>
3418f298:	683b      	ldr	r3, [r7, #0]
3418f29a:	2b00      	cmp	r3, #0
3418f29c:	d02c      	beq.n	3418f2f8 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
3418f29e:	683b      	ldr	r3, [r7, #0]
3418f2a0:	685b      	ldr	r3, [r3, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3418f2a2:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3418f2a6:	d827      	bhi.n	3418f2f8 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
3418f2a8:	683b      	ldr	r3, [r7, #0]
3418f2aa:	689b      	ldr	r3, [r3, #8]
3418f2ac:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3418f2b0:	d822      	bhi.n	3418f2f8 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
3418f2b2:	683b      	ldr	r3, [r7, #0]
3418f2b4:	68db      	ldr	r3, [r3, #12]
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
3418f2b6:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3418f2ba:	d81d      	bhi.n	3418f2f8 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
3418f2bc:	683b      	ldr	r3, [r7, #0]
3418f2be:	691b      	ldr	r3, [r3, #16]
3418f2c0:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3418f2c4:	d818      	bhi.n	3418f2f8 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
3418f2c6:	683b      	ldr	r3, [r7, #0]
3418f2c8:	695b      	ldr	r3, [r3, #20]
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
3418f2ca:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3418f2ce:	d813      	bhi.n	3418f2f8 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
3418f2d0:	683b      	ldr	r3, [r7, #0]
3418f2d2:	699b      	ldr	r3, [r3, #24]
3418f2d4:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3418f2d8:	d80e      	bhi.n	3418f2f8 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
3418f2da:	683b      	ldr	r3, [r7, #0]
3418f2dc:	69db      	ldr	r3, [r3, #28]
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
3418f2de:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3418f2e2:	d809      	bhi.n	3418f2f8 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
3418f2e4:	683b      	ldr	r3, [r7, #0]
3418f2e6:	6a1b      	ldr	r3, [r3, #32]
3418f2e8:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3418f2ec:	d804      	bhi.n	3418f2f8 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_256 > ISP_CONTAST_LUMCOEFF_MAX))
3418f2ee:	683b      	ldr	r3, [r7, #0]
3418f2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
3418f2f2:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3418f2f6:	d901      	bls.n	3418f2fc <ISP_SVC_ISP_SetContrast+0x74>
  {
    return ISP_ERR_CONTRAST_EINVAL;
3418f2f8:	2328      	movs	r3, #40	@ 0x28
3418f2fa:	e078      	b.n	3418f3ee <ISP_SVC_ISP_SetContrast+0x166>
  }

  if (pConfig->enable == 0)
3418f2fc:	683b      	ldr	r3, [r7, #0]
3418f2fe:	781b      	ldrb	r3, [r3, #0]
3418f300:	2b00      	cmp	r3, #0
3418f302:	d108      	bne.n	3418f316 <ISP_SVC_ISP_SetContrast+0x8e>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f304:	687b      	ldr	r3, [r7, #4]
3418f306:	681b      	ldr	r3, [r3, #0]
3418f308:	2101      	movs	r1, #1
3418f30a:	4618      	mov	r0, r3
3418f30c:	f7f5 fe20 	bl	34184f50 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast>
3418f310:	4603      	mov	r3, r0
3418f312:	75fb      	strb	r3, [r7, #23]
3418f314:	e065      	b.n	3418f3e2 <ISP_SVC_ISP_SetContrast+0x15a>
  }
  else
  {
    /* Concert coefficient unit from "percentage" to "6 bit" */
    contrast.LUM_0 = (pConfig->coeff.LUM_0 * 16) / 100;
3418f316:	683b      	ldr	r3, [r7, #0]
3418f318:	685b      	ldr	r3, [r3, #4]
3418f31a:	011b      	lsls	r3, r3, #4
3418f31c:	4a36      	ldr	r2, [pc, #216]	@ (3418f3f8 <ISP_SVC_ISP_SetContrast+0x170>)
3418f31e:	fba2 2303 	umull	r2, r3, r2, r3
3418f322:	095b      	lsrs	r3, r3, #5
3418f324:	b2db      	uxtb	r3, r3
3418f326:	733b      	strb	r3, [r7, #12]
    contrast.LUM_32 = (pConfig->coeff.LUM_32 * 16) / 100;
3418f328:	683b      	ldr	r3, [r7, #0]
3418f32a:	689b      	ldr	r3, [r3, #8]
3418f32c:	011b      	lsls	r3, r3, #4
3418f32e:	4a32      	ldr	r2, [pc, #200]	@ (3418f3f8 <ISP_SVC_ISP_SetContrast+0x170>)
3418f330:	fba2 2303 	umull	r2, r3, r2, r3
3418f334:	095b      	lsrs	r3, r3, #5
3418f336:	b2db      	uxtb	r3, r3
3418f338:	737b      	strb	r3, [r7, #13]
    contrast.LUM_64 = (pConfig->coeff.LUM_64 * 16) / 100;
3418f33a:	683b      	ldr	r3, [r7, #0]
3418f33c:	68db      	ldr	r3, [r3, #12]
3418f33e:	011b      	lsls	r3, r3, #4
3418f340:	4a2d      	ldr	r2, [pc, #180]	@ (3418f3f8 <ISP_SVC_ISP_SetContrast+0x170>)
3418f342:	fba2 2303 	umull	r2, r3, r2, r3
3418f346:	095b      	lsrs	r3, r3, #5
3418f348:	b2db      	uxtb	r3, r3
3418f34a:	73bb      	strb	r3, [r7, #14]
    contrast.LUM_96 = (pConfig->coeff.LUM_96 * 16) / 100;
3418f34c:	683b      	ldr	r3, [r7, #0]
3418f34e:	691b      	ldr	r3, [r3, #16]
3418f350:	011b      	lsls	r3, r3, #4
3418f352:	4a29      	ldr	r2, [pc, #164]	@ (3418f3f8 <ISP_SVC_ISP_SetContrast+0x170>)
3418f354:	fba2 2303 	umull	r2, r3, r2, r3
3418f358:	095b      	lsrs	r3, r3, #5
3418f35a:	b2db      	uxtb	r3, r3
3418f35c:	73fb      	strb	r3, [r7, #15]
    contrast.LUM_128 = (pConfig->coeff.LUM_128 * 16) / 100;
3418f35e:	683b      	ldr	r3, [r7, #0]
3418f360:	695b      	ldr	r3, [r3, #20]
3418f362:	011b      	lsls	r3, r3, #4
3418f364:	4a24      	ldr	r2, [pc, #144]	@ (3418f3f8 <ISP_SVC_ISP_SetContrast+0x170>)
3418f366:	fba2 2303 	umull	r2, r3, r2, r3
3418f36a:	095b      	lsrs	r3, r3, #5
3418f36c:	b2db      	uxtb	r3, r3
3418f36e:	743b      	strb	r3, [r7, #16]
    contrast.LUM_160 = (pConfig->coeff.LUM_160 * 16) / 100;
3418f370:	683b      	ldr	r3, [r7, #0]
3418f372:	699b      	ldr	r3, [r3, #24]
3418f374:	011b      	lsls	r3, r3, #4
3418f376:	4a20      	ldr	r2, [pc, #128]	@ (3418f3f8 <ISP_SVC_ISP_SetContrast+0x170>)
3418f378:	fba2 2303 	umull	r2, r3, r2, r3
3418f37c:	095b      	lsrs	r3, r3, #5
3418f37e:	b2db      	uxtb	r3, r3
3418f380:	747b      	strb	r3, [r7, #17]
    contrast.LUM_192 = (pConfig->coeff.LUM_192 * 16) / 100;
3418f382:	683b      	ldr	r3, [r7, #0]
3418f384:	69db      	ldr	r3, [r3, #28]
3418f386:	011b      	lsls	r3, r3, #4
3418f388:	4a1b      	ldr	r2, [pc, #108]	@ (3418f3f8 <ISP_SVC_ISP_SetContrast+0x170>)
3418f38a:	fba2 2303 	umull	r2, r3, r2, r3
3418f38e:	095b      	lsrs	r3, r3, #5
3418f390:	b2db      	uxtb	r3, r3
3418f392:	74bb      	strb	r3, [r7, #18]
    contrast.LUM_224 = (pConfig->coeff.LUM_224 * 16) / 100;
3418f394:	683b      	ldr	r3, [r7, #0]
3418f396:	6a1b      	ldr	r3, [r3, #32]
3418f398:	011b      	lsls	r3, r3, #4
3418f39a:	4a17      	ldr	r2, [pc, #92]	@ (3418f3f8 <ISP_SVC_ISP_SetContrast+0x170>)
3418f39c:	fba2 2303 	umull	r2, r3, r2, r3
3418f3a0:	095b      	lsrs	r3, r3, #5
3418f3a2:	b2db      	uxtb	r3, r3
3418f3a4:	74fb      	strb	r3, [r7, #19]
    contrast.LUM_256 = (pConfig->coeff.LUM_256 * 16) / 100;
3418f3a6:	683b      	ldr	r3, [r7, #0]
3418f3a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418f3aa:	011b      	lsls	r3, r3, #4
3418f3ac:	4a12      	ldr	r2, [pc, #72]	@ (3418f3f8 <ISP_SVC_ISP_SetContrast+0x170>)
3418f3ae:	fba2 2303 	umull	r2, r3, r2, r3
3418f3b2:	095b      	lsrs	r3, r3, #5
3418f3b4:	b2db      	uxtb	r3, r3
3418f3b6:	753b      	strb	r3, [r7, #20]
    halStatus = HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &contrast);
3418f3b8:	687b      	ldr	r3, [r7, #4]
3418f3ba:	681b      	ldr	r3, [r3, #0]
3418f3bc:	f107 020c 	add.w	r2, r7, #12
3418f3c0:	2101      	movs	r1, #1
3418f3c2:	4618      	mov	r0, r3
3418f3c4:	f7f5 fd54 	bl	34184e70 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig>
3418f3c8:	4603      	mov	r3, r0
3418f3ca:	75fb      	strb	r3, [r7, #23]

    if (halStatus == HAL_OK)
3418f3cc:	7dfb      	ldrb	r3, [r7, #23]
3418f3ce:	2b00      	cmp	r3, #0
3418f3d0:	d107      	bne.n	3418f3e2 <ISP_SVC_ISP_SetContrast+0x15a>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f3d2:	687b      	ldr	r3, [r7, #4]
3418f3d4:	681b      	ldr	r3, [r3, #0]
3418f3d6:	2101      	movs	r1, #1
3418f3d8:	4618      	mov	r0, r3
3418f3da:	f7f5 fd99 	bl	34184f10 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast>
3418f3de:	4603      	mov	r3, r0
3418f3e0:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (halStatus != HAL_OK)
3418f3e2:	7dfb      	ldrb	r3, [r7, #23]
3418f3e4:	2b00      	cmp	r3, #0
3418f3e6:	d001      	beq.n	3418f3ec <ISP_SVC_ISP_SetContrast+0x164>
  {
    return ISP_ERR_CONTRAST_HAL;
3418f3e8:	2329      	movs	r3, #41	@ 0x29
3418f3ea:	e000      	b.n	3418f3ee <ISP_SVC_ISP_SetContrast+0x166>
  }

  return ISP_OK;
3418f3ec:	2300      	movs	r3, #0
}
3418f3ee:	4618      	mov	r0, r3
3418f3f0:	3718      	adds	r7, #24
3418f3f2:	46bd      	mov	sp, r7
3418f3f4:	bd80      	pop	{r7, pc}
3418f3f6:	bf00      	nop
3418f3f8:	51eb851f 	.word	0x51eb851f

3418f3fc <ISP_SVC_ISP_SetStatArea>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to statistic area used by the IQ algorithms
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetStatArea(ISP_HandleTypeDef *hIsp, ISP_StatAreaTypeDef *pConfig)
{
3418f3fc:	b590      	push	{r4, r7, lr}
3418f3fe:	b089      	sub	sp, #36	@ 0x24
3418f400:	af00      	add	r7, sp, #0
3418f402:	6078      	str	r0, [r7, #4]
3418f404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_StatisticExtractionAreaConfTypeDef currentStatAreaCfg;
  ISP_StatusTypeDef ret = ISP_OK;
3418f406:	2300      	movs	r3, #0
3418f408:	77fb      	strb	r3, [r7, #31]

  if ((hIsp == NULL) || (pConfig == NULL) ||
3418f40a:	687b      	ldr	r3, [r7, #4]
3418f40c:	2b00      	cmp	r3, #0
3418f40e:	d034      	beq.n	3418f47a <ISP_SVC_ISP_SetStatArea+0x7e>
3418f410:	683b      	ldr	r3, [r7, #0]
3418f412:	2b00      	cmp	r3, #0
3418f414:	d031      	beq.n	3418f47a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->X0 > ISP_STATWINDOW_MAX) ||
3418f416:	683b      	ldr	r3, [r7, #0]
3418f418:	681b      	ldr	r3, [r3, #0]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3418f41a:	f640 72fe 	movw	r2, #4094	@ 0xffe
3418f41e:	4293      	cmp	r3, r2
3418f420:	d82b      	bhi.n	3418f47a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->Y0 > ISP_STATWINDOW_MAX) ||
3418f422:	683b      	ldr	r3, [r7, #0]
3418f424:	685b      	ldr	r3, [r3, #4]
      (pConfig->X0 > ISP_STATWINDOW_MAX) ||
3418f426:	f640 72fe 	movw	r2, #4094	@ 0xffe
3418f42a:	4293      	cmp	r3, r2
3418f42c:	d825      	bhi.n	3418f47a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
3418f42e:	683b      	ldr	r3, [r7, #0]
3418f430:	689b      	ldr	r3, [r3, #8]
      (pConfig->Y0 > ISP_STATWINDOW_MAX) ||
3418f432:	f640 72fe 	movw	r2, #4094	@ 0xffe
3418f436:	4293      	cmp	r3, r2
3418f438:	d81f      	bhi.n	3418f47a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->YSize > ISP_STATWINDOW_MAX) ||
3418f43a:	683b      	ldr	r3, [r7, #0]
3418f43c:	68db      	ldr	r3, [r3, #12]
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
3418f43e:	f640 72fe 	movw	r2, #4094	@ 0xffe
3418f442:	4293      	cmp	r3, r2
3418f444:	d819      	bhi.n	3418f47a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->XSize < ISP_STATWINDOW_MIN) ||
3418f446:	683b      	ldr	r3, [r7, #0]
3418f448:	689b      	ldr	r3, [r3, #8]
      (pConfig->YSize > ISP_STATWINDOW_MAX) ||
3418f44a:	2b03      	cmp	r3, #3
3418f44c:	d915      	bls.n	3418f47a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->YSize < ISP_STATWINDOW_MIN) ||
3418f44e:	683b      	ldr	r3, [r7, #0]
3418f450:	68db      	ldr	r3, [r3, #12]
      (pConfig->XSize < ISP_STATWINDOW_MIN) ||
3418f452:	2b03      	cmp	r3, #3
3418f454:	d911      	bls.n	3418f47a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
3418f456:	683b      	ldr	r3, [r7, #0]
3418f458:	681a      	ldr	r2, [r3, #0]
3418f45a:	683b      	ldr	r3, [r7, #0]
3418f45c:	689b      	ldr	r3, [r3, #8]
3418f45e:	441a      	add	r2, r3
3418f460:	687b      	ldr	r3, [r7, #4]
3418f462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
      (pConfig->YSize < ISP_STATWINDOW_MIN) ||
3418f464:	429a      	cmp	r2, r3
3418f466:	d808      	bhi.n	3418f47a <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->Y0 + pConfig->YSize > hIsp->sensorInfo.height))
3418f468:	683b      	ldr	r3, [r7, #0]
3418f46a:	685a      	ldr	r2, [r3, #4]
3418f46c:	683b      	ldr	r3, [r7, #0]
3418f46e:	68db      	ldr	r3, [r3, #12]
3418f470:	441a      	add	r2, r3
3418f472:	687b      	ldr	r3, [r7, #4]
3418f474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
3418f476:	429a      	cmp	r2, r3
3418f478:	d901      	bls.n	3418f47e <ISP_SVC_ISP_SetStatArea+0x82>
  {
    return ISP_ERR_STATAREA_EINVAL;
3418f47a:	2332      	movs	r3, #50	@ 0x32
3418f47c:	e03e      	b.n	3418f4fc <ISP_SVC_ISP_SetStatArea+0x100>
  }

  /* Set coordinates in the 'decimated' referential */
  currentStatAreaCfg.HStart = pConfig->X0 / ISP_DecimationValue.factor;
3418f47e:	683b      	ldr	r3, [r7, #0]
3418f480:	681b      	ldr	r3, [r3, #0]
3418f482:	4a20      	ldr	r2, [pc, #128]	@ (3418f504 <ISP_SVC_ISP_SetStatArea+0x108>)
3418f484:	7812      	ldrb	r2, [r2, #0]
3418f486:	fbb3 f3f2 	udiv	r3, r3, r2
3418f48a:	613b      	str	r3, [r7, #16]
  currentStatAreaCfg.VStart = pConfig->Y0 / ISP_DecimationValue.factor;
3418f48c:	683b      	ldr	r3, [r7, #0]
3418f48e:	685b      	ldr	r3, [r3, #4]
3418f490:	4a1c      	ldr	r2, [pc, #112]	@ (3418f504 <ISP_SVC_ISP_SetStatArea+0x108>)
3418f492:	7812      	ldrb	r2, [r2, #0]
3418f494:	fbb3 f3f2 	udiv	r3, r3, r2
3418f498:	60fb      	str	r3, [r7, #12]
  currentStatAreaCfg.HSize = pConfig->XSize / ISP_DecimationValue.factor;
3418f49a:	683b      	ldr	r3, [r7, #0]
3418f49c:	689b      	ldr	r3, [r3, #8]
3418f49e:	4a19      	ldr	r2, [pc, #100]	@ (3418f504 <ISP_SVC_ISP_SetStatArea+0x108>)
3418f4a0:	7812      	ldrb	r2, [r2, #0]
3418f4a2:	fbb3 f3f2 	udiv	r3, r3, r2
3418f4a6:	61bb      	str	r3, [r7, #24]
  currentStatAreaCfg.VSize = pConfig->YSize / ISP_DecimationValue.factor;
3418f4a8:	683b      	ldr	r3, [r7, #0]
3418f4aa:	68db      	ldr	r3, [r3, #12]
3418f4ac:	4a15      	ldr	r2, [pc, #84]	@ (3418f504 <ISP_SVC_ISP_SetStatArea+0x108>)
3418f4ae:	7812      	ldrb	r2, [r2, #0]
3418f4b0:	fbb3 f3f2 	udiv	r3, r3, r2
3418f4b4:	617b      	str	r3, [r7, #20]

  if (HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1,
3418f4b6:	687b      	ldr	r3, [r7, #4]
3418f4b8:	681b      	ldr	r3, [r3, #0]
3418f4ba:	f107 020c 	add.w	r2, r7, #12
3418f4be:	2101      	movs	r1, #1
3418f4c0:	4618      	mov	r0, r3
3418f4c2:	f7f5 fbb8 	bl	34184c36 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig>
3418f4c6:	4603      	mov	r3, r0
3418f4c8:	2b00      	cmp	r3, #0
3418f4ca:	d001      	beq.n	3418f4d0 <ISP_SVC_ISP_SetStatArea+0xd4>
                                                          &currentStatAreaCfg) != HAL_OK)
  {
    return ISP_ERR_STATAREA_HAL;
3418f4cc:	2333      	movs	r3, #51	@ 0x33
3418f4ce:	e015      	b.n	3418f4fc <ISP_SVC_ISP_SetStatArea+0x100>
  }
  else
  {
    halStatus = HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f4d0:	687b      	ldr	r3, [r7, #4]
3418f4d2:	681b      	ldr	r3, [r3, #0]
3418f4d4:	2101      	movs	r1, #1
3418f4d6:	4618      	mov	r0, r3
3418f4d8:	f7f5 fc28 	bl	34184d2c <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction>
3418f4dc:	4603      	mov	r3, r0
3418f4de:	77bb      	strb	r3, [r7, #30]
  }

  if (halStatus != HAL_OK)
3418f4e0:	7fbb      	ldrb	r3, [r7, #30]
3418f4e2:	2b00      	cmp	r3, #0
3418f4e4:	d001      	beq.n	3418f4ea <ISP_SVC_ISP_SetStatArea+0xee>
  {
    return ISP_ERR_STATAREA_HAL;
3418f4e6:	2333      	movs	r3, #51	@ 0x33
3418f4e8:	e008      	b.n	3418f4fc <ISP_SVC_ISP_SetStatArea+0x100>
  }

  /* Update internal state */
  hIsp->statArea = *pConfig;
3418f4ea:	687b      	ldr	r3, [r7, #4]
3418f4ec:	683a      	ldr	r2, [r7, #0]
3418f4ee:	f103 0408 	add.w	r4, r3, #8
3418f4f2:	4613      	mov	r3, r2
3418f4f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
3418f4f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return ret;
3418f4fa:	7ffb      	ldrb	r3, [r7, #31]
}
3418f4fc:	4618      	mov	r0, r3
3418f4fe:	3724      	adds	r7, #36	@ 0x24
3418f500:	46bd      	mov	sp, r7
3418f502:	bd90      	pop	{r4, r7, pc}
3418f504:	341c00d4 	.word	0x341c00d4

3418f508 <ISP_SVC_ISP_SetBadPixel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the bad pixel configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetBadPixel(ISP_HandleTypeDef *hIsp, ISP_BadPixelTypeDef *pConfig)
{
3418f508:	b580      	push	{r7, lr}
3418f50a:	b084      	sub	sp, #16
3418f50c:	af00      	add	r7, sp, #0
3418f50e:	6078      	str	r0, [r7, #4]
3418f510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;

  if ((hIsp == NULL) || (pConfig == NULL) || (pConfig->strength > ISP_BADPIXEL_STRENGTH_MAX))
3418f512:	687b      	ldr	r3, [r7, #4]
3418f514:	2b00      	cmp	r3, #0
3418f516:	d006      	beq.n	3418f526 <ISP_SVC_ISP_SetBadPixel+0x1e>
3418f518:	683b      	ldr	r3, [r7, #0]
3418f51a:	2b00      	cmp	r3, #0
3418f51c:	d003      	beq.n	3418f526 <ISP_SVC_ISP_SetBadPixel+0x1e>
3418f51e:	683b      	ldr	r3, [r7, #0]
3418f520:	785b      	ldrb	r3, [r3, #1]
3418f522:	2b07      	cmp	r3, #7
3418f524:	d901      	bls.n	3418f52a <ISP_SVC_ISP_SetBadPixel+0x22>
  {
    return ISP_ERR_BADPIXEL_EINVAL;
3418f526:	233c      	movs	r3, #60	@ 0x3c
3418f528:	e029      	b.n	3418f57e <ISP_SVC_ISP_SetBadPixel+0x76>
  }

  if (pConfig->enable == 0)
3418f52a:	683b      	ldr	r3, [r7, #0]
3418f52c:	781b      	ldrb	r3, [r3, #0]
3418f52e:	2b00      	cmp	r3, #0
3418f530:	d108      	bne.n	3418f544 <ISP_SVC_ISP_SetBadPixel+0x3c>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f532:	687b      	ldr	r3, [r7, #4]
3418f534:	681b      	ldr	r3, [r3, #0]
3418f536:	2101      	movs	r1, #1
3418f538:	4618      	mov	r0, r3
3418f53a:	f7f5 f86a 	bl	34184612 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval>
3418f53e:	4603      	mov	r3, r0
3418f540:	73fb      	strb	r3, [r7, #15]
3418f542:	e016      	b.n	3418f572 <ISP_SVC_ISP_SetBadPixel+0x6a>
  }
  else
  {
    halStatus = HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig(hIsp->hDcmipp, DCMIPP_PIPE1, pConfig->strength);
3418f544:	687b      	ldr	r3, [r7, #4]
3418f546:	6818      	ldr	r0, [r3, #0]
3418f548:	683b      	ldr	r3, [r7, #0]
3418f54a:	785b      	ldrb	r3, [r3, #1]
3418f54c:	461a      	mov	r2, r3
3418f54e:	2101      	movs	r1, #1
3418f550:	f7f5 f81b 	bl	3418458a <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig>
3418f554:	4603      	mov	r3, r0
3418f556:	73fb      	strb	r3, [r7, #15]

    if (halStatus != HAL_OK)
3418f558:	7bfb      	ldrb	r3, [r7, #15]
3418f55a:	2b00      	cmp	r3, #0
3418f55c:	d001      	beq.n	3418f562 <ISP_SVC_ISP_SetBadPixel+0x5a>
    {
      return ISP_ERR_BADPIXEL_HAL;
3418f55e:	233d      	movs	r3, #61	@ 0x3d
3418f560:	e00d      	b.n	3418f57e <ISP_SVC_ISP_SetBadPixel+0x76>
    }

    halStatus = HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f562:	687b      	ldr	r3, [r7, #4]
3418f564:	681b      	ldr	r3, [r3, #0]
3418f566:	2101      	movs	r1, #1
3418f568:	4618      	mov	r0, r3
3418f56a:	f7f5 f832 	bl	341845d2 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval>
3418f56e:	4603      	mov	r3, r0
3418f570:	73fb      	strb	r3, [r7, #15]
  }

  if (halStatus != HAL_OK)
3418f572:	7bfb      	ldrb	r3, [r7, #15]
3418f574:	2b00      	cmp	r3, #0
3418f576:	d001      	beq.n	3418f57c <ISP_SVC_ISP_SetBadPixel+0x74>
  {
    return ISP_ERR_BADPIXEL_HAL;
3418f578:	233d      	movs	r3, #61	@ 0x3d
3418f57a:	e000      	b.n	3418f57e <ISP_SVC_ISP_SetBadPixel+0x76>
  }

  return ISP_OK;
3418f57c:	2300      	movs	r3, #0
}
3418f57e:	4618      	mov	r0, r3
3418f580:	3710      	adds	r7, #16
3418f582:	46bd      	mov	sp, r7
3418f584:	bd80      	pop	{r7, pc}

3418f586 <ISP_SVC_ISP_GetBadPixel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the bad pixel configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetBadPixel(ISP_HandleTypeDef *hIsp, ISP_BadPixelTypeDef *pConfig)
{
3418f586:	b580      	push	{r7, lr}
3418f588:	b084      	sub	sp, #16
3418f58a:	af00      	add	r7, sp, #0
3418f58c:	6078      	str	r0, [r7, #4]
3418f58e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3418f590:	687b      	ldr	r3, [r7, #4]
3418f592:	2b00      	cmp	r3, #0
3418f594:	d002      	beq.n	3418f59c <ISP_SVC_ISP_GetBadPixel+0x16>
3418f596:	683b      	ldr	r3, [r7, #0]
3418f598:	2b00      	cmp	r3, #0
3418f59a:	d101      	bne.n	3418f5a0 <ISP_SVC_ISP_GetBadPixel+0x1a>
  {
    return ISP_ERR_BADPIXEL_EINVAL;
3418f59c:	233c      	movs	r3, #60	@ 0x3c
3418f59e:	e023      	b.n	3418f5e8 <ISP_SVC_ISP_GetBadPixel+0x62>
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f5a0:	687b      	ldr	r3, [r7, #4]
3418f5a2:	681b      	ldr	r3, [r3, #0]
3418f5a4:	2101      	movs	r1, #1
3418f5a6:	4618      	mov	r0, r3
3418f5a8:	f7f5 f865 	bl	34184676 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval>
3418f5ac:	4603      	mov	r3, r0
3418f5ae:	b2da      	uxtb	r2, r3
3418f5b0:	683b      	ldr	r3, [r7, #0]
3418f5b2:	701a      	strb	r2, [r3, #0]
  pConfig->strength = (uint8_t) HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f5b4:	687b      	ldr	r3, [r7, #4]
3418f5b6:	681b      	ldr	r3, [r3, #0]
3418f5b8:	2101      	movs	r1, #1
3418f5ba:	4618      	mov	r0, r3
3418f5bc:	f7f5 f849 	bl	34184652 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig>
3418f5c0:	4603      	mov	r3, r0
3418f5c2:	b2da      	uxtb	r2, r3
3418f5c4:	683b      	ldr	r3, [r7, #0]
3418f5c6:	705a      	strb	r2, [r3, #1]

  halStatus = HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter(hIsp->hDcmipp, DCMIPP_PIPE1, &pConfig->count);
3418f5c8:	687b      	ldr	r3, [r7, #4]
3418f5ca:	6818      	ldr	r0, [r3, #0]
3418f5cc:	683b      	ldr	r3, [r7, #0]
3418f5ce:	3304      	adds	r3, #4
3418f5d0:	461a      	mov	r2, r3
3418f5d2:	2101      	movs	r1, #1
3418f5d4:	f7f5 f86a 	bl	341846ac <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter>
3418f5d8:	4603      	mov	r3, r0
3418f5da:	73fb      	strb	r3, [r7, #15]

  if (halStatus != HAL_OK)
3418f5dc:	7bfb      	ldrb	r3, [r7, #15]
3418f5de:	2b00      	cmp	r3, #0
3418f5e0:	d001      	beq.n	3418f5e6 <ISP_SVC_ISP_GetBadPixel+0x60>
  {
    return ISP_ERR_BADPIXEL_HAL;
3418f5e2:	233d      	movs	r3, #61	@ 0x3d
3418f5e4:	e000      	b.n	3418f5e8 <ISP_SVC_ISP_GetBadPixel+0x62>
  }

  return ISP_OK;
3418f5e6:	2300      	movs	r3, #0
}
3418f5e8:	4618      	mov	r0, r3
3418f5ea:	3710      	adds	r7, #16
3418f5ec:	46bd      	mov	sp, r7
3418f5ee:	bd80      	pop	{r7, pc}

3418f5f0 <ISP_SVC_ISP_SetBlackLevel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the black level configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetBlackLevel(ISP_HandleTypeDef *hIsp, ISP_BlackLevelTypeDef *pConfig)
{
3418f5f0:	b580      	push	{r7, lr}
3418f5f2:	b084      	sub	sp, #16
3418f5f4:	af00      	add	r7, sp, #0
3418f5f6:	6078      	str	r0, [r7, #4]
3418f5f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_BlackLevelConfTypeDef blackLevelConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3418f5fa:	687b      	ldr	r3, [r7, #4]
3418f5fc:	2b00      	cmp	r3, #0
3418f5fe:	d002      	beq.n	3418f606 <ISP_SVC_ISP_SetBlackLevel+0x16>
3418f600:	683b      	ldr	r3, [r7, #0]
3418f602:	2b00      	cmp	r3, #0
3418f604:	d101      	bne.n	3418f60a <ISP_SVC_ISP_SetBlackLevel+0x1a>
  {
    return ISP_ERR_BLACKLEVEL_EINVAL;
3418f606:	2346      	movs	r3, #70	@ 0x46
3418f608:	e030      	b.n	3418f66c <ISP_SVC_ISP_SetBlackLevel+0x7c>
  }

  if (pConfig->enable == 0)
3418f60a:	683b      	ldr	r3, [r7, #0]
3418f60c:	781b      	ldrb	r3, [r3, #0]
3418f60e:	2b00      	cmp	r3, #0
3418f610:	d108      	bne.n	3418f624 <ISP_SVC_ISP_SetBlackLevel+0x34>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f612:	687b      	ldr	r3, [r7, #4]
3418f614:	681b      	ldr	r3, [r3, #0]
3418f616:	2101      	movs	r1, #1
3418f618:	4618      	mov	r0, r3
3418f61a:	f7f5 fa5c 	bl	34184ad6 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration>
3418f61e:	4603      	mov	r3, r0
3418f620:	73fb      	strb	r3, [r7, #15]
3418f622:	e01d      	b.n	3418f660 <ISP_SVC_ISP_SetBlackLevel+0x70>
  }
  else
  {
    blackLevelConfig.RedCompBlackLevel = pConfig->BLCR;
3418f624:	683b      	ldr	r3, [r7, #0]
3418f626:	785b      	ldrb	r3, [r3, #1]
3418f628:	733b      	strb	r3, [r7, #12]
    blackLevelConfig.GreenCompBlackLevel = pConfig->BLCG;
3418f62a:	683b      	ldr	r3, [r7, #0]
3418f62c:	789b      	ldrb	r3, [r3, #2]
3418f62e:	737b      	strb	r3, [r7, #13]
    blackLevelConfig.BlueCompBlackLevel = pConfig->BLCB;
3418f630:	683b      	ldr	r3, [r7, #0]
3418f632:	78db      	ldrb	r3, [r3, #3]
3418f634:	73bb      	strb	r3, [r7, #14]
    halStatus = HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
3418f636:	687b      	ldr	r3, [r7, #4]
3418f638:	681b      	ldr	r3, [r3, #0]
3418f63a:	f107 020c 	add.w	r2, r7, #12
3418f63e:	2101      	movs	r1, #1
3418f640:	4618      	mov	r0, r3
3418f642:	f7f5 f9f9 	bl	34184a38 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig>
3418f646:	4603      	mov	r3, r0
3418f648:	73fb      	strb	r3, [r7, #15]

    if (halStatus == HAL_OK)
3418f64a:	7bfb      	ldrb	r3, [r7, #15]
3418f64c:	2b00      	cmp	r3, #0
3418f64e:	d107      	bne.n	3418f660 <ISP_SVC_ISP_SetBlackLevel+0x70>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f650:	687b      	ldr	r3, [r7, #4]
3418f652:	681b      	ldr	r3, [r3, #0]
3418f654:	2101      	movs	r1, #1
3418f656:	4618      	mov	r0, r3
3418f658:	f7f5 fa1d 	bl	34184a96 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration>
3418f65c:	4603      	mov	r3, r0
3418f65e:	73fb      	strb	r3, [r7, #15]
    }
  }

  if (halStatus != HAL_OK)
3418f660:	7bfb      	ldrb	r3, [r7, #15]
3418f662:	2b00      	cmp	r3, #0
3418f664:	d001      	beq.n	3418f66a <ISP_SVC_ISP_SetBlackLevel+0x7a>
  {
    return ISP_ERR_BLACKLEVEL_HAL;
3418f666:	2347      	movs	r3, #71	@ 0x47
3418f668:	e000      	b.n	3418f66c <ISP_SVC_ISP_SetBlackLevel+0x7c>
  }

  return ISP_OK;
3418f66a:	2300      	movs	r3, #0
}
3418f66c:	4618      	mov	r0, r3
3418f66e:	3710      	adds	r7, #16
3418f670:	46bd      	mov	sp, r7
3418f672:	bd80      	pop	{r7, pc}

3418f674 <ISP_SVC_ISP_GetBlackLevel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the black level configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetBlackLevel(ISP_HandleTypeDef *hIsp, ISP_BlackLevelTypeDef *pConfig)
{
3418f674:	b580      	push	{r7, lr}
3418f676:	b084      	sub	sp, #16
3418f678:	af00      	add	r7, sp, #0
3418f67a:	6078      	str	r0, [r7, #4]
3418f67c:	6039      	str	r1, [r7, #0]
  DCMIPP_BlackLevelConfTypeDef blackLevelConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3418f67e:	687b      	ldr	r3, [r7, #4]
3418f680:	2b00      	cmp	r3, #0
3418f682:	d002      	beq.n	3418f68a <ISP_SVC_ISP_GetBlackLevel+0x16>
3418f684:	683b      	ldr	r3, [r7, #0]
3418f686:	2b00      	cmp	r3, #0
3418f688:	d101      	bne.n	3418f68e <ISP_SVC_ISP_GetBlackLevel+0x1a>
  {
    return ISP_ERR_BLACKLEVEL_EINVAL;
3418f68a:	2346      	movs	r3, #70	@ 0x46
3418f68c:	e01b      	b.n	3418f6c6 <ISP_SVC_ISP_GetBlackLevel+0x52>
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f68e:	687b      	ldr	r3, [r7, #4]
3418f690:	681b      	ldr	r3, [r3, #0]
3418f692:	2101      	movs	r1, #1
3418f694:	4618      	mov	r0, r3
3418f696:	f7f5 fa61 	bl	34184b5c <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration>
3418f69a:	4603      	mov	r3, r0
3418f69c:	b2da      	uxtb	r2, r3
3418f69e:	683b      	ldr	r3, [r7, #0]
3418f6a0:	701a      	strb	r2, [r3, #0]

  HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
3418f6a2:	687b      	ldr	r3, [r7, #4]
3418f6a4:	681b      	ldr	r3, [r3, #0]
3418f6a6:	f107 020c 	add.w	r2, r7, #12
3418f6aa:	2101      	movs	r1, #1
3418f6ac:	4618      	mov	r0, r3
3418f6ae:	f7f5 fa32 	bl	34184b16 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig>

  pConfig->BLCR = blackLevelConfig.RedCompBlackLevel;
3418f6b2:	7b3a      	ldrb	r2, [r7, #12]
3418f6b4:	683b      	ldr	r3, [r7, #0]
3418f6b6:	705a      	strb	r2, [r3, #1]
  pConfig->BLCG = blackLevelConfig.GreenCompBlackLevel;
3418f6b8:	7b7a      	ldrb	r2, [r7, #13]
3418f6ba:	683b      	ldr	r3, [r7, #0]
3418f6bc:	709a      	strb	r2, [r3, #2]
  pConfig->BLCB = blackLevelConfig.BlueCompBlackLevel;
3418f6be:	7bba      	ldrb	r2, [r7, #14]
3418f6c0:	683b      	ldr	r3, [r7, #0]
3418f6c2:	70da      	strb	r2, [r3, #3]

  return ISP_OK;
3418f6c4:	2300      	movs	r3, #0
}
3418f6c6:	4618      	mov	r0, r3
3418f6c8:	3710      	adds	r7, #16
3418f6ca:	46bd      	mov	sp, r7
3418f6cc:	bd80      	pop	{r7, pc}
	...

3418f6d0 <ISP_SVC_ISP_SetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetGain(ISP_HandleTypeDef *hIsp, ISP_ISPGainTypeDef *pConfig)
{
3418f6d0:	b580      	push	{r7, lr}
3418f6d2:	b084      	sub	sp, #16
3418f6d4:	af00      	add	r7, sp, #0
3418f6d6:	6078      	str	r0, [r7, #4]
3418f6d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_ExposureConfTypeDef exposureConfig;

  if ((hIsp == NULL) || (pConfig == NULL) ||
3418f6da:	687b      	ldr	r3, [r7, #4]
3418f6dc:	2b00      	cmp	r3, #0
3418f6de:	d011      	beq.n	3418f704 <ISP_SVC_ISP_SetGain+0x34>
3418f6e0:	683b      	ldr	r3, [r7, #0]
3418f6e2:	2b00      	cmp	r3, #0
3418f6e4:	d00e      	beq.n	3418f704 <ISP_SVC_ISP_SetGain+0x34>
      (pConfig->ispGainR > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainG > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainB > ISP_EXPOSURE_GAIN_MAX))
3418f6e6:	683b      	ldr	r3, [r7, #0]
3418f6e8:	685b      	ldr	r3, [r3, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3418f6ea:	4a2d      	ldr	r2, [pc, #180]	@ (3418f7a0 <ISP_SVC_ISP_SetGain+0xd0>)
3418f6ec:	4293      	cmp	r3, r2
3418f6ee:	d809      	bhi.n	3418f704 <ISP_SVC_ISP_SetGain+0x34>
      (pConfig->ispGainR > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainG > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainB > ISP_EXPOSURE_GAIN_MAX))
3418f6f0:	683b      	ldr	r3, [r7, #0]
3418f6f2:	689b      	ldr	r3, [r3, #8]
3418f6f4:	4a2a      	ldr	r2, [pc, #168]	@ (3418f7a0 <ISP_SVC_ISP_SetGain+0xd0>)
3418f6f6:	4293      	cmp	r3, r2
3418f6f8:	d804      	bhi.n	3418f704 <ISP_SVC_ISP_SetGain+0x34>
3418f6fa:	683b      	ldr	r3, [r7, #0]
3418f6fc:	68db      	ldr	r3, [r3, #12]
3418f6fe:	4a28      	ldr	r2, [pc, #160]	@ (3418f7a0 <ISP_SVC_ISP_SetGain+0xd0>)
3418f700:	4293      	cmp	r3, r2
3418f702:	d901      	bls.n	3418f708 <ISP_SVC_ISP_SetGain+0x38>
  {
    return ISP_ERR_ISPGAIN_EINVAL;
3418f704:	2350      	movs	r3, #80	@ 0x50
3418f706:	e047      	b.n	3418f798 <ISP_SVC_ISP_SetGain+0xc8>
  }

  if (pConfig->enable == 0)
3418f708:	683b      	ldr	r3, [r7, #0]
3418f70a:	781b      	ldrb	r3, [r3, #0]
3418f70c:	2b00      	cmp	r3, #0
3418f70e:	d108      	bne.n	3418f722 <ISP_SVC_ISP_SetGain+0x52>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f710:	687b      	ldr	r3, [r7, #4]
3418f712:	681b      	ldr	r3, [r3, #0]
3418f714:	2101      	movs	r1, #1
3418f716:	4618      	mov	r0, r3
3418f718:	f7f5 fb8a 	bl	34184e30 <HAL_DCMIPP_PIPE_DisableISPExposure>
3418f71c:	4603      	mov	r3, r0
3418f71e:	73fb      	strb	r3, [r7, #15]
3418f720:	e034      	b.n	3418f78c <ISP_SVC_ISP_SetGain+0xbc>
  }
  else
  {
    To_Shift_Multiplier(pConfig->ispGainR, &exposureConfig.ShiftRed, &exposureConfig.MultiplierRed);
3418f722:	683b      	ldr	r3, [r7, #0]
3418f724:	6858      	ldr	r0, [r3, #4]
3418f726:	f107 0308 	add.w	r3, r7, #8
3418f72a:	1c5a      	adds	r2, r3, #1
3418f72c:	f107 0308 	add.w	r3, r7, #8
3418f730:	4619      	mov	r1, r3
3418f732:	f7ff f989 	bl	3418ea48 <To_Shift_Multiplier>
    To_Shift_Multiplier(pConfig->ispGainG, &exposureConfig.ShiftGreen, &exposureConfig.MultiplierGreen);
3418f736:	683b      	ldr	r3, [r7, #0]
3418f738:	6898      	ldr	r0, [r3, #8]
3418f73a:	f107 0308 	add.w	r3, r7, #8
3418f73e:	1cda      	adds	r2, r3, #3
3418f740:	f107 0308 	add.w	r3, r7, #8
3418f744:	3302      	adds	r3, #2
3418f746:	4619      	mov	r1, r3
3418f748:	f7ff f97e 	bl	3418ea48 <To_Shift_Multiplier>
    To_Shift_Multiplier(pConfig->ispGainB, &exposureConfig.ShiftBlue, &exposureConfig.MultiplierBlue);
3418f74c:	683b      	ldr	r3, [r7, #0]
3418f74e:	68d8      	ldr	r0, [r3, #12]
3418f750:	f107 0308 	add.w	r3, r7, #8
3418f754:	1d5a      	adds	r2, r3, #5
3418f756:	f107 0308 	add.w	r3, r7, #8
3418f75a:	3304      	adds	r3, #4
3418f75c:	4619      	mov	r1, r3
3418f75e:	f7ff f973 	bl	3418ea48 <To_Shift_Multiplier>
    halStatus = HAL_DCMIPP_PIPE_SetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
3418f762:	687b      	ldr	r3, [r7, #4]
3418f764:	681b      	ldr	r3, [r3, #0]
3418f766:	f107 0208 	add.w	r2, r7, #8
3418f76a:	2101      	movs	r1, #1
3418f76c:	4618      	mov	r0, r3
3418f76e:	f7f5 fafd 	bl	34184d6c <HAL_DCMIPP_PIPE_SetISPExposureConfig>
3418f772:	4603      	mov	r3, r0
3418f774:	73fb      	strb	r3, [r7, #15]

    if (halStatus == HAL_OK)
3418f776:	7bfb      	ldrb	r3, [r7, #15]
3418f778:	2b00      	cmp	r3, #0
3418f77a:	d107      	bne.n	3418f78c <ISP_SVC_ISP_SetGain+0xbc>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f77c:	687b      	ldr	r3, [r7, #4]
3418f77e:	681b      	ldr	r3, [r3, #0]
3418f780:	2101      	movs	r1, #1
3418f782:	4618      	mov	r0, r3
3418f784:	f7f5 fb34 	bl	34184df0 <HAL_DCMIPP_PIPE_EnableISPExposure>
3418f788:	4603      	mov	r3, r0
3418f78a:	73fb      	strb	r3, [r7, #15]
    }
  }

  if (halStatus != HAL_OK)
3418f78c:	7bfb      	ldrb	r3, [r7, #15]
3418f78e:	2b00      	cmp	r3, #0
3418f790:	d001      	beq.n	3418f796 <ISP_SVC_ISP_SetGain+0xc6>
  {
    return ISP_ERR_ISPGAIN_HAL;
3418f792:	2351      	movs	r3, #81	@ 0x51
3418f794:	e000      	b.n	3418f798 <ISP_SVC_ISP_SetGain+0xc8>
  }

  return ISP_OK;
3418f796:	2300      	movs	r3, #0
}
3418f798:	4618      	mov	r0, r3
3418f79a:	3710      	adds	r7, #16
3418f79c:	46bd      	mov	sp, r7
3418f79e:	bd80      	pop	{r7, pc}
3418f7a0:	5f5e1000 	.word	0x5f5e1000

3418f7a4 <ISP_SVC_ISP_GetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetGain(ISP_HandleTypeDef *hIsp, ISP_ISPGainTypeDef *pConfig)
{
3418f7a4:	b580      	push	{r7, lr}
3418f7a6:	b084      	sub	sp, #16
3418f7a8:	af00      	add	r7, sp, #0
3418f7aa:	6078      	str	r0, [r7, #4]
3418f7ac:	6039      	str	r1, [r7, #0]
  DCMIPP_ExposureConfTypeDef exposureConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3418f7ae:	687b      	ldr	r3, [r7, #4]
3418f7b0:	2b00      	cmp	r3, #0
3418f7b2:	d002      	beq.n	3418f7ba <ISP_SVC_ISP_GetGain+0x16>
3418f7b4:	683b      	ldr	r3, [r7, #0]
3418f7b6:	2b00      	cmp	r3, #0
3418f7b8:	d101      	bne.n	3418f7be <ISP_SVC_ISP_GetGain+0x1a>
  {
    return ISP_ERR_ISPGAIN_EINVAL;
3418f7ba:	2350      	movs	r3, #80	@ 0x50
3418f7bc:	e02d      	b.n	3418f81a <ISP_SVC_ISP_GetGain+0x76>
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f7be:	687b      	ldr	r3, [r7, #4]
3418f7c0:	681b      	ldr	r3, [r3, #0]
3418f7c2:	2101      	movs	r1, #1
3418f7c4:	4618      	mov	r0, r3
3418f7c6:	f7f5 fdbb 	bl	34185340 <HAL_DCMIPP_PIPE_IsEnabledISPExposure>
3418f7ca:	4603      	mov	r3, r0
3418f7cc:	b2da      	uxtb	r2, r3
3418f7ce:	683b      	ldr	r3, [r7, #0]
3418f7d0:	701a      	strb	r2, [r3, #0]
  HAL_DCMIPP_PIPE_GetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
3418f7d2:	687b      	ldr	r3, [r7, #4]
3418f7d4:	681b      	ldr	r3, [r3, #0]
3418f7d6:	f107 0208 	add.w	r2, r7, #8
3418f7da:	2101      	movs	r1, #1
3418f7dc:	4618      	mov	r0, r3
3418f7de:	f7f5 fc19 	bl	34185014 <HAL_DCMIPP_PIPE_GetISPExposureConfig>

  pConfig->ispGainR = From_Shift_Multiplier(exposureConfig.ShiftRed, exposureConfig.MultiplierRed);
3418f7e2:	7a3b      	ldrb	r3, [r7, #8]
3418f7e4:	7a7a      	ldrb	r2, [r7, #9]
3418f7e6:	4611      	mov	r1, r2
3418f7e8:	4618      	mov	r0, r3
3418f7ea:	f7ff f96d 	bl	3418eac8 <From_Shift_Multiplier>
3418f7ee:	4602      	mov	r2, r0
3418f7f0:	683b      	ldr	r3, [r7, #0]
3418f7f2:	605a      	str	r2, [r3, #4]
  pConfig->ispGainG = From_Shift_Multiplier(exposureConfig.ShiftGreen, exposureConfig.MultiplierGreen);
3418f7f4:	7abb      	ldrb	r3, [r7, #10]
3418f7f6:	7afa      	ldrb	r2, [r7, #11]
3418f7f8:	4611      	mov	r1, r2
3418f7fa:	4618      	mov	r0, r3
3418f7fc:	f7ff f964 	bl	3418eac8 <From_Shift_Multiplier>
3418f800:	4602      	mov	r2, r0
3418f802:	683b      	ldr	r3, [r7, #0]
3418f804:	609a      	str	r2, [r3, #8]
  pConfig->ispGainB = From_Shift_Multiplier(exposureConfig.ShiftBlue, exposureConfig.MultiplierBlue);
3418f806:	7b3b      	ldrb	r3, [r7, #12]
3418f808:	7b7a      	ldrb	r2, [r7, #13]
3418f80a:	4611      	mov	r1, r2
3418f80c:	4618      	mov	r0, r3
3418f80e:	f7ff f95b 	bl	3418eac8 <From_Shift_Multiplier>
3418f812:	4602      	mov	r2, r0
3418f814:	683b      	ldr	r3, [r7, #0]
3418f816:	60da      	str	r2, [r3, #12]

  return ISP_OK;
3418f818:	2300      	movs	r3, #0
}
3418f81a:	4618      	mov	r0, r3
3418f81c:	3710      	adds	r7, #16
3418f81e:	46bd      	mov	sp, r7
3418f820:	bd80      	pop	{r7, pc}
	...

3418f824 <ISP_SVC_ISP_SetColorConv>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Color Conversion configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetColorConv(ISP_HandleTypeDef *hIsp, ISP_ColorConvTypeDef *pConfig)
{
3418f824:	b580      	push	{r7, lr}
3418f826:	b08c      	sub	sp, #48	@ 0x30
3418f828:	af00      	add	r7, sp, #0
3418f82a:	6078      	str	r0, [r7, #4]
3418f82c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_ColorConversionConfTypeDef colorConvConfig;
  uint32_t i, j;

  memset(&colorConvConfig, 0, sizeof(colorConvConfig));
3418f82e:	f107 0308 	add.w	r3, r7, #8
3418f832:	221a      	movs	r2, #26
3418f834:	2100      	movs	r1, #0
3418f836:	4618      	mov	r0, r3
3418f838:	f002 fb32 	bl	34191ea0 <memset>

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3418f83c:	687b      	ldr	r3, [r7, #4]
3418f83e:	2b00      	cmp	r3, #0
3418f840:	d002      	beq.n	3418f848 <ISP_SVC_ISP_SetColorConv+0x24>
3418f842:	683b      	ldr	r3, [r7, #0]
3418f844:	2b00      	cmp	r3, #0
3418f846:	d101      	bne.n	3418f84c <ISP_SVC_ISP_SetColorConv+0x28>
  {
    return ISP_ERR_COLORCONV_EINVAL;
3418f848:	235a      	movs	r3, #90	@ 0x5a
3418f84a:	e099      	b.n	3418f980 <ISP_SVC_ISP_SetColorConv+0x15c>
  }

  for (i = 0; i < 3; i++)
3418f84c:	2300      	movs	r3, #0
3418f84e:	62bb      	str	r3, [r7, #40]	@ 0x28
3418f850:	e027      	b.n	3418f8a2 <ISP_SVC_ISP_SetColorConv+0x7e>
  {
    for (j = 0; j < 3; j++)
3418f852:	2300      	movs	r3, #0
3418f854:	627b      	str	r3, [r7, #36]	@ 0x24
3418f856:	e01e      	b.n	3418f896 <ISP_SVC_ISP_SetColorConv+0x72>
    {
      if ((pConfig->coeff[i][j] > ISP_COLORCONV_MAX) || (pConfig->coeff[i][j] < -ISP_COLORCONV_MAX))
3418f858:	6839      	ldr	r1, [r7, #0]
3418f85a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418f85c:	4613      	mov	r3, r2
3418f85e:	005b      	lsls	r3, r3, #1
3418f860:	4413      	add	r3, r2
3418f862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3418f864:	4413      	add	r3, r2
3418f866:	009b      	lsls	r3, r3, #2
3418f868:	440b      	add	r3, r1
3418f86a:	685b      	ldr	r3, [r3, #4]
3418f86c:	4a46      	ldr	r2, [pc, #280]	@ (3418f988 <ISP_SVC_ISP_SetColorConv+0x164>)
3418f86e:	4293      	cmp	r3, r2
3418f870:	dc0c      	bgt.n	3418f88c <ISP_SVC_ISP_SetColorConv+0x68>
3418f872:	6839      	ldr	r1, [r7, #0]
3418f874:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418f876:	4613      	mov	r3, r2
3418f878:	005b      	lsls	r3, r3, #1
3418f87a:	4413      	add	r3, r2
3418f87c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3418f87e:	4413      	add	r3, r2
3418f880:	009b      	lsls	r3, r3, #2
3418f882:	440b      	add	r3, r1
3418f884:	685b      	ldr	r3, [r3, #4]
3418f886:	4a41      	ldr	r2, [pc, #260]	@ (3418f98c <ISP_SVC_ISP_SetColorConv+0x168>)
3418f888:	4293      	cmp	r3, r2
3418f88a:	da01      	bge.n	3418f890 <ISP_SVC_ISP_SetColorConv+0x6c>
      {
        return ISP_ERR_COLORCONV_EINVAL;
3418f88c:	235a      	movs	r3, #90	@ 0x5a
3418f88e:	e077      	b.n	3418f980 <ISP_SVC_ISP_SetColorConv+0x15c>
    for (j = 0; j < 3; j++)
3418f890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f892:	3301      	adds	r3, #1
3418f894:	627b      	str	r3, [r7, #36]	@ 0x24
3418f896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f898:	2b02      	cmp	r3, #2
3418f89a:	d9dd      	bls.n	3418f858 <ISP_SVC_ISP_SetColorConv+0x34>
  for (i = 0; i < 3; i++)
3418f89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f89e:	3301      	adds	r3, #1
3418f8a0:	62bb      	str	r3, [r7, #40]	@ 0x28
3418f8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f8a4:	2b02      	cmp	r3, #2
3418f8a6:	d9d4      	bls.n	3418f852 <ISP_SVC_ISP_SetColorConv+0x2e>
      }
    }
  }

  if (pConfig->enable == 0)
3418f8a8:	683b      	ldr	r3, [r7, #0]
3418f8aa:	781b      	ldrb	r3, [r3, #0]
3418f8ac:	2b00      	cmp	r3, #0
3418f8ae:	d109      	bne.n	3418f8c4 <ISP_SVC_ISP_SetColorConv+0xa0>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f8b0:	687b      	ldr	r3, [r7, #4]
3418f8b2:	681b      	ldr	r3, [r3, #0]
3418f8b4:	2101      	movs	r1, #1
3418f8b6:	4618      	mov	r0, r3
3418f8b8:	f7f5 f89e 	bl	341849f8 <HAL_DCMIPP_PIPE_DisableISPColorConversion>
3418f8bc:	4603      	mov	r3, r0
3418f8be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3418f8c2:	e056      	b.n	3418f972 <ISP_SVC_ISP_SetColorConv+0x14e>
  }
  else
  {
    colorConvConfig.RR = To_CConv_Reg(pConfig->coeff[0][0]);
3418f8c4:	683b      	ldr	r3, [r7, #0]
3418f8c6:	685b      	ldr	r3, [r3, #4]
3418f8c8:	4618      	mov	r0, r3
3418f8ca:	f7ff f93b 	bl	3418eb44 <To_CConv_Reg>
3418f8ce:	4603      	mov	r3, r0
3418f8d0:	817b      	strh	r3, [r7, #10]
    colorConvConfig.RG = To_CConv_Reg(pConfig->coeff[0][1]);
3418f8d2:	683b      	ldr	r3, [r7, #0]
3418f8d4:	689b      	ldr	r3, [r3, #8]
3418f8d6:	4618      	mov	r0, r3
3418f8d8:	f7ff f934 	bl	3418eb44 <To_CConv_Reg>
3418f8dc:	4603      	mov	r3, r0
3418f8de:	81bb      	strh	r3, [r7, #12]
    colorConvConfig.RB = To_CConv_Reg(pConfig->coeff[0][2]);
3418f8e0:	683b      	ldr	r3, [r7, #0]
3418f8e2:	68db      	ldr	r3, [r3, #12]
3418f8e4:	4618      	mov	r0, r3
3418f8e6:	f7ff f92d 	bl	3418eb44 <To_CConv_Reg>
3418f8ea:	4603      	mov	r3, r0
3418f8ec:	81fb      	strh	r3, [r7, #14]
    colorConvConfig.GR = To_CConv_Reg(pConfig->coeff[1][0]);
3418f8ee:	683b      	ldr	r3, [r7, #0]
3418f8f0:	691b      	ldr	r3, [r3, #16]
3418f8f2:	4618      	mov	r0, r3
3418f8f4:	f7ff f926 	bl	3418eb44 <To_CConv_Reg>
3418f8f8:	4603      	mov	r3, r0
3418f8fa:	827b      	strh	r3, [r7, #18]
    colorConvConfig.GG = To_CConv_Reg(pConfig->coeff[1][1]);
3418f8fc:	683b      	ldr	r3, [r7, #0]
3418f8fe:	695b      	ldr	r3, [r3, #20]
3418f900:	4618      	mov	r0, r3
3418f902:	f7ff f91f 	bl	3418eb44 <To_CConv_Reg>
3418f906:	4603      	mov	r3, r0
3418f908:	82bb      	strh	r3, [r7, #20]
    colorConvConfig.GB = To_CConv_Reg(pConfig->coeff[1][2]);
3418f90a:	683b      	ldr	r3, [r7, #0]
3418f90c:	699b      	ldr	r3, [r3, #24]
3418f90e:	4618      	mov	r0, r3
3418f910:	f7ff f918 	bl	3418eb44 <To_CConv_Reg>
3418f914:	4603      	mov	r3, r0
3418f916:	82fb      	strh	r3, [r7, #22]
    colorConvConfig.BR = To_CConv_Reg(pConfig->coeff[2][0]);
3418f918:	683b      	ldr	r3, [r7, #0]
3418f91a:	69db      	ldr	r3, [r3, #28]
3418f91c:	4618      	mov	r0, r3
3418f91e:	f7ff f911 	bl	3418eb44 <To_CConv_Reg>
3418f922:	4603      	mov	r3, r0
3418f924:	837b      	strh	r3, [r7, #26]
    colorConvConfig.BG = To_CConv_Reg(pConfig->coeff[2][1]);
3418f926:	683b      	ldr	r3, [r7, #0]
3418f928:	6a1b      	ldr	r3, [r3, #32]
3418f92a:	4618      	mov	r0, r3
3418f92c:	f7ff f90a 	bl	3418eb44 <To_CConv_Reg>
3418f930:	4603      	mov	r3, r0
3418f932:	83bb      	strh	r3, [r7, #28]
    colorConvConfig.BB = To_CConv_Reg(pConfig->coeff[2][2]);
3418f934:	683b      	ldr	r3, [r7, #0]
3418f936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418f938:	4618      	mov	r0, r3
3418f93a:	f7ff f903 	bl	3418eb44 <To_CConv_Reg>
3418f93e:	4603      	mov	r3, r0
3418f940:	83fb      	strh	r3, [r7, #30]
    halStatus = HAL_DCMIPP_PIPE_SetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
3418f942:	687b      	ldr	r3, [r7, #4]
3418f944:	681b      	ldr	r3, [r3, #0]
3418f946:	f107 0208 	add.w	r2, r7, #8
3418f94a:	2101      	movs	r1, #1
3418f94c:	4618      	mov	r0, r3
3418f94e:	f7f4 fed1 	bl	341846f4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig>
3418f952:	4603      	mov	r3, r0
3418f954:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (halStatus == HAL_OK)
3418f958:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
3418f95c:	2b00      	cmp	r3, #0
3418f95e:	d108      	bne.n	3418f972 <ISP_SVC_ISP_SetColorConv+0x14e>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f960:	687b      	ldr	r3, [r7, #4]
3418f962:	681b      	ldr	r3, [r3, #0]
3418f964:	2101      	movs	r1, #1
3418f966:	4618      	mov	r0, r3
3418f968:	f7f5 f826 	bl	341849b8 <HAL_DCMIPP_PIPE_EnableISPColorConversion>
3418f96c:	4603      	mov	r3, r0
3418f96e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  if (halStatus != HAL_OK)
3418f972:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
3418f976:	2b00      	cmp	r3, #0
3418f978:	d001      	beq.n	3418f97e <ISP_SVC_ISP_SetColorConv+0x15a>
  {
    return ISP_ERR_COLORCONV_HAL;
3418f97a:	235b      	movs	r3, #91	@ 0x5b
3418f97c:	e000      	b.n	3418f980 <ISP_SVC_ISP_SetColorConv+0x15c>
  }

  return ISP_OK;
3418f97e:	2300      	movs	r3, #0
}
3418f980:	4618      	mov	r0, r3
3418f982:	3730      	adds	r7, #48	@ 0x30
3418f984:	46bd      	mov	sp, r7
3418f986:	bd80      	pop	{r7, pc}
3418f988:	17c841c0 	.word	0x17c841c0
3418f98c:	e837be40 	.word	0xe837be40

3418f990 <ISP_SVC_ISP_GetColorConv>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Color Conversion configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetColorConv(ISP_HandleTypeDef *hIsp, ISP_ColorConvTypeDef *pConfig)
{
3418f990:	b580      	push	{r7, lr}
3418f992:	b08a      	sub	sp, #40	@ 0x28
3418f994:	af00      	add	r7, sp, #0
3418f996:	6078      	str	r0, [r7, #4]
3418f998:	6039      	str	r1, [r7, #0]
  DCMIPP_ColorConversionConfTypeDef colorConvConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3418f99a:	687b      	ldr	r3, [r7, #4]
3418f99c:	2b00      	cmp	r3, #0
3418f99e:	d002      	beq.n	3418f9a6 <ISP_SVC_ISP_GetColorConv+0x16>
3418f9a0:	683b      	ldr	r3, [r7, #0]
3418f9a2:	2b00      	cmp	r3, #0
3418f9a4:	d101      	bne.n	3418f9aa <ISP_SVC_ISP_GetColorConv+0x1a>
  {
    return ISP_ERR_COLORCONV_EINVAL;
3418f9a6:	235a      	movs	r3, #90	@ 0x5a
3418f9a8:	e05a      	b.n	3418fa60 <ISP_SVC_ISP_GetColorConv+0xd0>
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
3418f9aa:	687b      	ldr	r3, [r7, #4]
3418f9ac:	681b      	ldr	r3, [r3, #0]
3418f9ae:	2101      	movs	r1, #1
3418f9b0:	4618      	mov	r0, r3
3418f9b2:	f7f5 fce0 	bl	34185376 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion>
3418f9b6:	4603      	mov	r3, r0
3418f9b8:	b2da      	uxtb	r2, r3
3418f9ba:	683b      	ldr	r3, [r7, #0]
3418f9bc:	701a      	strb	r2, [r3, #0]

  HAL_DCMIPP_PIPE_GetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
3418f9be:	687b      	ldr	r3, [r7, #4]
3418f9c0:	681b      	ldr	r3, [r3, #0]
3418f9c2:	f107 020c 	add.w	r2, r7, #12
3418f9c6:	2101      	movs	r1, #1
3418f9c8:	4618      	mov	r0, r3
3418f9ca:	f7f5 fb63 	bl	34185094 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig>

  pConfig->coeff[0][0] = From_CConv_Reg(colorConvConfig.RR);
3418f9ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
3418f9d2:	4618      	mov	r0, r3
3418f9d4:	f7ff f8d4 	bl	3418eb80 <From_CConv_Reg>
3418f9d8:	4602      	mov	r2, r0
3418f9da:	683b      	ldr	r3, [r7, #0]
3418f9dc:	605a      	str	r2, [r3, #4]
  pConfig->coeff[0][1] = From_CConv_Reg(colorConvConfig.RG);
3418f9de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
3418f9e2:	4618      	mov	r0, r3
3418f9e4:	f7ff f8cc 	bl	3418eb80 <From_CConv_Reg>
3418f9e8:	4602      	mov	r2, r0
3418f9ea:	683b      	ldr	r3, [r7, #0]
3418f9ec:	609a      	str	r2, [r3, #8]
  pConfig->coeff[0][2] = From_CConv_Reg(colorConvConfig.RB);
3418f9ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
3418f9f2:	4618      	mov	r0, r3
3418f9f4:	f7ff f8c4 	bl	3418eb80 <From_CConv_Reg>
3418f9f8:	4602      	mov	r2, r0
3418f9fa:	683b      	ldr	r3, [r7, #0]
3418f9fc:	60da      	str	r2, [r3, #12]
  pConfig->coeff[1][0] = From_CConv_Reg(colorConvConfig.GR);
3418f9fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
3418fa02:	4618      	mov	r0, r3
3418fa04:	f7ff f8bc 	bl	3418eb80 <From_CConv_Reg>
3418fa08:	4602      	mov	r2, r0
3418fa0a:	683b      	ldr	r3, [r7, #0]
3418fa0c:	611a      	str	r2, [r3, #16]
  pConfig->coeff[1][1] = From_CConv_Reg(colorConvConfig.GG);
3418fa0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
3418fa12:	4618      	mov	r0, r3
3418fa14:	f7ff f8b4 	bl	3418eb80 <From_CConv_Reg>
3418fa18:	4602      	mov	r2, r0
3418fa1a:	683b      	ldr	r3, [r7, #0]
3418fa1c:	615a      	str	r2, [r3, #20]
  pConfig->coeff[1][2] = From_CConv_Reg(colorConvConfig.GB);
3418fa1e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
3418fa22:	4618      	mov	r0, r3
3418fa24:	f7ff f8ac 	bl	3418eb80 <From_CConv_Reg>
3418fa28:	4602      	mov	r2, r0
3418fa2a:	683b      	ldr	r3, [r7, #0]
3418fa2c:	619a      	str	r2, [r3, #24]
  pConfig->coeff[2][0] = From_CConv_Reg(colorConvConfig.BR);
3418fa2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
3418fa32:	4618      	mov	r0, r3
3418fa34:	f7ff f8a4 	bl	3418eb80 <From_CConv_Reg>
3418fa38:	4602      	mov	r2, r0
3418fa3a:	683b      	ldr	r3, [r7, #0]
3418fa3c:	61da      	str	r2, [r3, #28]
  pConfig->coeff[2][1] = From_CConv_Reg(colorConvConfig.BG);
3418fa3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
3418fa42:	4618      	mov	r0, r3
3418fa44:	f7ff f89c 	bl	3418eb80 <From_CConv_Reg>
3418fa48:	4602      	mov	r2, r0
3418fa4a:	683b      	ldr	r3, [r7, #0]
3418fa4c:	621a      	str	r2, [r3, #32]
  pConfig->coeff[2][2] = From_CConv_Reg(colorConvConfig.BB);
3418fa4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
3418fa52:	4618      	mov	r0, r3
3418fa54:	f7ff f894 	bl	3418eb80 <From_CConv_Reg>
3418fa58:	4602      	mov	r2, r0
3418fa5a:	683b      	ldr	r3, [r7, #0]
3418fa5c:	625a      	str	r2, [r3, #36]	@ 0x24

  return ISP_OK;
3418fa5e:	2300      	movs	r3, #0
}
3418fa60:	4618      	mov	r0, r3
3418fa62:	3728      	adds	r7, #40	@ 0x28
3418fa64:	46bd      	mov	sp, r7
3418fa66:	bd80      	pop	{r7, pc}

3418fa68 <ISP_SVC_Sensor_GetInfo>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor info
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetInfo(ISP_HandleTypeDef *hIsp, ISP_SensorInfoTypeDef *pConfig)
{
3418fa68:	b580      	push	{r7, lr}
3418fa6a:	b082      	sub	sp, #8
3418fa6c:	af00      	add	r7, sp, #0
3418fa6e:	6078      	str	r0, [r7, #4]
3418fa70:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3418fa72:	687b      	ldr	r3, [r7, #4]
3418fa74:	2b00      	cmp	r3, #0
3418fa76:	d002      	beq.n	3418fa7e <ISP_SVC_Sensor_GetInfo+0x16>
3418fa78:	683b      	ldr	r3, [r7, #0]
3418fa7a:	2b00      	cmp	r3, #0
3418fa7c:	d101      	bne.n	3418fa82 <ISP_SVC_Sensor_GetInfo+0x1a>
  {
    return ISP_ERR_SENSORINFO_EINVAL;
3418fa7e:	236e      	movs	r3, #110	@ 0x6e
3418fa80:	e010      	b.n	3418faa4 <ISP_SVC_Sensor_GetInfo+0x3c>
  }

  if (hIsp->appliHelpers.GetSensorInfo != NULL)
3418fa82:	687b      	ldr	r3, [r7, #4]
3418fa84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418fa86:	2b00      	cmp	r3, #0
3418fa88:	d00b      	beq.n	3418faa2 <ISP_SVC_Sensor_GetInfo+0x3a>
  {
    if (hIsp->appliHelpers.GetSensorInfo(hIsp->cameraInstance, pConfig) != 0)
3418fa8a:	687b      	ldr	r3, [r7, #4]
3418fa8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418fa8e:	687a      	ldr	r2, [r7, #4]
3418fa90:	6852      	ldr	r2, [r2, #4]
3418fa92:	6839      	ldr	r1, [r7, #0]
3418fa94:	4610      	mov	r0, r2
3418fa96:	4798      	blx	r3
3418fa98:	4603      	mov	r3, r0
3418fa9a:	2b00      	cmp	r3, #0
3418fa9c:	d001      	beq.n	3418faa2 <ISP_SVC_Sensor_GetInfo+0x3a>
    {
      return ISP_ERR_SENSORINFO;
3418fa9e:	236f      	movs	r3, #111	@ 0x6f
3418faa0:	e000      	b.n	3418faa4 <ISP_SVC_Sensor_GetInfo+0x3c>
    }
  }

  return ISP_OK;
3418faa2:	2300      	movs	r3, #0
}
3418faa4:	4618      	mov	r0, r3
3418faa6:	3708      	adds	r7, #8
3418faa8:	46bd      	mov	sp, r7
3418faaa:	bd80      	pop	{r7, pc}

3418faac <ISP_SVC_Sensor_SetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_SetGain(ISP_HandleTypeDef *hIsp, ISP_SensorGainTypeDef *pConfig)
{
3418faac:	b580      	push	{r7, lr}
3418faae:	b082      	sub	sp, #8
3418fab0:	af00      	add	r7, sp, #0
3418fab2:	6078      	str	r0, [r7, #4]
3418fab4:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3418fab6:	687b      	ldr	r3, [r7, #4]
3418fab8:	2b00      	cmp	r3, #0
3418faba:	d002      	beq.n	3418fac2 <ISP_SVC_Sensor_SetGain+0x16>
3418fabc:	683b      	ldr	r3, [r7, #0]
3418fabe:	2b00      	cmp	r3, #0
3418fac0:	d101      	bne.n	3418fac6 <ISP_SVC_Sensor_SetGain+0x1a>
  {
    return ISP_ERR_SENSORGAIN_EINVAL;
3418fac2:	2378      	movs	r3, #120	@ 0x78
3418fac4:	e015      	b.n	3418faf2 <ISP_SVC_Sensor_SetGain+0x46>
  }

  if (hIsp->appliHelpers.SetSensorGain != NULL)
3418fac6:	687b      	ldr	r3, [r7, #4]
3418fac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418faca:	2b00      	cmp	r3, #0
3418facc:	d00c      	beq.n	3418fae8 <ISP_SVC_Sensor_SetGain+0x3c>
  {
    if (hIsp->appliHelpers.SetSensorGain(hIsp->cameraInstance, pConfig->gain) != 0)
3418face:	687b      	ldr	r3, [r7, #4]
3418fad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418fad2:	687a      	ldr	r2, [r7, #4]
3418fad4:	6850      	ldr	r0, [r2, #4]
3418fad6:	683a      	ldr	r2, [r7, #0]
3418fad8:	6812      	ldr	r2, [r2, #0]
3418fada:	4611      	mov	r1, r2
3418fadc:	4798      	blx	r3
3418fade:	4603      	mov	r3, r0
3418fae0:	2b00      	cmp	r3, #0
3418fae2:	d001      	beq.n	3418fae8 <ISP_SVC_Sensor_SetGain+0x3c>
    {
      return ISP_ERR_SENSORGAIN;
3418fae4:	2379      	movs	r3, #121	@ 0x79
3418fae6:	e004      	b.n	3418faf2 <ISP_SVC_Sensor_SetGain+0x46>
    }
  }

  Meta.gain = pConfig->gain;
3418fae8:	683b      	ldr	r3, [r7, #0]
3418faea:	681b      	ldr	r3, [r3, #0]
3418faec:	4a03      	ldr	r2, [pc, #12]	@ (3418fafc <ISP_SVC_Sensor_SetGain+0x50>)
3418faee:	6093      	str	r3, [r2, #8]

  return ISP_OK;
3418faf0:	2300      	movs	r3, #0
}
3418faf2:	4618      	mov	r0, r3
3418faf4:	3708      	adds	r7, #8
3418faf6:	46bd      	mov	sp, r7
3418faf8:	bd80      	pop	{r7, pc}
3418fafa:	bf00      	nop
3418fafc:	341c1028 	.word	0x341c1028

3418fb00 <ISP_SVC_Sensor_GetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetGain(ISP_HandleTypeDef *hIsp, ISP_SensorGainTypeDef *pConfig)
{
3418fb00:	b580      	push	{r7, lr}
3418fb02:	b082      	sub	sp, #8
3418fb04:	af00      	add	r7, sp, #0
3418fb06:	6078      	str	r0, [r7, #4]
3418fb08:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3418fb0a:	687b      	ldr	r3, [r7, #4]
3418fb0c:	2b00      	cmp	r3, #0
3418fb0e:	d002      	beq.n	3418fb16 <ISP_SVC_Sensor_GetGain+0x16>
3418fb10:	683b      	ldr	r3, [r7, #0]
3418fb12:	2b00      	cmp	r3, #0
3418fb14:	d101      	bne.n	3418fb1a <ISP_SVC_Sensor_GetGain+0x1a>
  {
    return ISP_ERR_SENSORGAIN_EINVAL;
3418fb16:	2378      	movs	r3, #120	@ 0x78
3418fb18:	e010      	b.n	3418fb3c <ISP_SVC_Sensor_GetGain+0x3c>
  }

  if (hIsp->appliHelpers.GetSensorGain != NULL)
3418fb1a:	687b      	ldr	r3, [r7, #4]
3418fb1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418fb1e:	2b00      	cmp	r3, #0
3418fb20:	d00b      	beq.n	3418fb3a <ISP_SVC_Sensor_GetGain+0x3a>
  {
    if (hIsp->appliHelpers.GetSensorGain(hIsp->cameraInstance, (int32_t *)&pConfig->gain) != 0)
3418fb22:	687b      	ldr	r3, [r7, #4]
3418fb24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418fb26:	687a      	ldr	r2, [r7, #4]
3418fb28:	6852      	ldr	r2, [r2, #4]
3418fb2a:	6839      	ldr	r1, [r7, #0]
3418fb2c:	4610      	mov	r0, r2
3418fb2e:	4798      	blx	r3
3418fb30:	4603      	mov	r3, r0
3418fb32:	2b00      	cmp	r3, #0
3418fb34:	d001      	beq.n	3418fb3a <ISP_SVC_Sensor_GetGain+0x3a>
    {
      return ISP_ERR_SENSORGAIN;
3418fb36:	2379      	movs	r3, #121	@ 0x79
3418fb38:	e000      	b.n	3418fb3c <ISP_SVC_Sensor_GetGain+0x3c>
    }
  }

  return ISP_OK;
3418fb3a:	2300      	movs	r3, #0
}
3418fb3c:	4618      	mov	r0, r3
3418fb3e:	3708      	adds	r7, #8
3418fb40:	46bd      	mov	sp, r7
3418fb42:	bd80      	pop	{r7, pc}

3418fb44 <ISP_SVC_Sensor_SetExposure>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor exposure configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_SetExposure(ISP_HandleTypeDef *hIsp, ISP_SensorExposureTypeDef *pConfig)
{
3418fb44:	b580      	push	{r7, lr}
3418fb46:	b082      	sub	sp, #8
3418fb48:	af00      	add	r7, sp, #0
3418fb4a:	6078      	str	r0, [r7, #4]
3418fb4c:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3418fb4e:	687b      	ldr	r3, [r7, #4]
3418fb50:	2b00      	cmp	r3, #0
3418fb52:	d002      	beq.n	3418fb5a <ISP_SVC_Sensor_SetExposure+0x16>
3418fb54:	683b      	ldr	r3, [r7, #0]
3418fb56:	2b00      	cmp	r3, #0
3418fb58:	d101      	bne.n	3418fb5e <ISP_SVC_Sensor_SetExposure+0x1a>
  {
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
3418fb5a:	2382      	movs	r3, #130	@ 0x82
3418fb5c:	e015      	b.n	3418fb8a <ISP_SVC_Sensor_SetExposure+0x46>
  }

  if (hIsp->appliHelpers.SetSensorExposure != NULL)
3418fb5e:	687b      	ldr	r3, [r7, #4]
3418fb60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418fb62:	2b00      	cmp	r3, #0
3418fb64:	d00c      	beq.n	3418fb80 <ISP_SVC_Sensor_SetExposure+0x3c>
  {
    if (hIsp->appliHelpers.SetSensorExposure(hIsp->cameraInstance, pConfig->exposure) != 0)
3418fb66:	687b      	ldr	r3, [r7, #4]
3418fb68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418fb6a:	687a      	ldr	r2, [r7, #4]
3418fb6c:	6850      	ldr	r0, [r2, #4]
3418fb6e:	683a      	ldr	r2, [r7, #0]
3418fb70:	6812      	ldr	r2, [r2, #0]
3418fb72:	4611      	mov	r1, r2
3418fb74:	4798      	blx	r3
3418fb76:	4603      	mov	r3, r0
3418fb78:	2b00      	cmp	r3, #0
3418fb7a:	d001      	beq.n	3418fb80 <ISP_SVC_Sensor_SetExposure+0x3c>
    {
      return ISP_ERR_SENSOREXPOSURE;
3418fb7c:	2383      	movs	r3, #131	@ 0x83
3418fb7e:	e004      	b.n	3418fb8a <ISP_SVC_Sensor_SetExposure+0x46>
    }
  }

  Meta.exposure = pConfig->exposure;
3418fb80:	683b      	ldr	r3, [r7, #0]
3418fb82:	681b      	ldr	r3, [r3, #0]
3418fb84:	4a03      	ldr	r2, [pc, #12]	@ (3418fb94 <ISP_SVC_Sensor_SetExposure+0x50>)
3418fb86:	60d3      	str	r3, [r2, #12]

  return ISP_OK;
3418fb88:	2300      	movs	r3, #0
}
3418fb8a:	4618      	mov	r0, r3
3418fb8c:	3708      	adds	r7, #8
3418fb8e:	46bd      	mov	sp, r7
3418fb90:	bd80      	pop	{r7, pc}
3418fb92:	bf00      	nop
3418fb94:	341c1028 	.word	0x341c1028

3418fb98 <ISP_SVC_Sensor_GetExposure>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor exposure configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetExposure(ISP_HandleTypeDef *hIsp, ISP_SensorExposureTypeDef *pConfig)
{
3418fb98:	b580      	push	{r7, lr}
3418fb9a:	b082      	sub	sp, #8
3418fb9c:	af00      	add	r7, sp, #0
3418fb9e:	6078      	str	r0, [r7, #4]
3418fba0:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3418fba2:	687b      	ldr	r3, [r7, #4]
3418fba4:	2b00      	cmp	r3, #0
3418fba6:	d002      	beq.n	3418fbae <ISP_SVC_Sensor_GetExposure+0x16>
3418fba8:	683b      	ldr	r3, [r7, #0]
3418fbaa:	2b00      	cmp	r3, #0
3418fbac:	d101      	bne.n	3418fbb2 <ISP_SVC_Sensor_GetExposure+0x1a>
  {
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
3418fbae:	2382      	movs	r3, #130	@ 0x82
3418fbb0:	e010      	b.n	3418fbd4 <ISP_SVC_Sensor_GetExposure+0x3c>
  }

  if (hIsp->appliHelpers.GetSensorExposure != NULL)
3418fbb2:	687b      	ldr	r3, [r7, #4]
3418fbb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418fbb6:	2b00      	cmp	r3, #0
3418fbb8:	d00b      	beq.n	3418fbd2 <ISP_SVC_Sensor_GetExposure+0x3a>
  {
    if (hIsp->appliHelpers.GetSensorExposure(hIsp->cameraInstance, (int32_t *)&pConfig->exposure) != 0)
3418fbba:	687b      	ldr	r3, [r7, #4]
3418fbbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418fbbe:	687a      	ldr	r2, [r7, #4]
3418fbc0:	6852      	ldr	r2, [r2, #4]
3418fbc2:	6839      	ldr	r1, [r7, #0]
3418fbc4:	4610      	mov	r0, r2
3418fbc6:	4798      	blx	r3
3418fbc8:	4603      	mov	r3, r0
3418fbca:	2b00      	cmp	r3, #0
3418fbcc:	d001      	beq.n	3418fbd2 <ISP_SVC_Sensor_GetExposure+0x3a>
    {
      return ISP_ERR_SENSOREXPOSURE;
3418fbce:	2383      	movs	r3, #131	@ 0x83
3418fbd0:	e000      	b.n	3418fbd4 <ISP_SVC_Sensor_GetExposure+0x3c>
    }
  }

  return ISP_OK;
3418fbd2:	2300      	movs	r3, #0
}
3418fbd4:	4618      	mov	r0, r3
3418fbd6:	3708      	adds	r7, #8
3418fbd8:	46bd      	mov	sp, r7
3418fbda:	bd80      	pop	{r7, pc}

3418fbdc <ISP_SVC_Misc_IsDCMIPPReady>:
  *         Check that the DCMIPP device is ready
  * @param  hIsp: ISP device handle
  * @retval ISP_OK if DCMIPP is running, ISP_FAIL otherwise
  */
ISP_StatusTypeDef ISP_SVC_Misc_IsDCMIPPReady(ISP_HandleTypeDef *hIsp)
{
3418fbdc:	b580      	push	{r7, lr}
3418fbde:	b082      	sub	sp, #8
3418fbe0:	af00      	add	r7, sp, #0
3418fbe2:	6078      	str	r0, [r7, #4]
  /* Check handle validity */
  if (hIsp == NULL)
3418fbe4:	687b      	ldr	r3, [r7, #4]
3418fbe6:	2b00      	cmp	r3, #0
3418fbe8:	d101      	bne.n	3418fbee <ISP_SVC_Misc_IsDCMIPPReady+0x12>
  {
    return ISP_ERR_EINVAL;
3418fbea:	2301      	movs	r3, #1
3418fbec:	e00a      	b.n	3418fc04 <ISP_SVC_Misc_IsDCMIPPReady+0x28>
  }

  if (HAL_DCMIPP_GetState(hIsp->hDcmipp) != HAL_DCMIPP_STATE_READY)
3418fbee:	687b      	ldr	r3, [r7, #4]
3418fbf0:	681b      	ldr	r3, [r3, #0]
3418fbf2:	4618      	mov	r0, r3
3418fbf4:	f7f5 fbda 	bl	341853ac <HAL_DCMIPP_GetState>
3418fbf8:	4603      	mov	r3, r0
3418fbfa:	2b02      	cmp	r3, #2
3418fbfc:	d001      	beq.n	3418fc02 <ISP_SVC_Misc_IsDCMIPPReady+0x26>
  {
    return ISP_ERR_DCMIPP_STATE;
3418fbfe:	238c      	movs	r3, #140	@ 0x8c
3418fc00:	e000      	b.n	3418fc04 <ISP_SVC_Misc_IsDCMIPPReady+0x28>
  }

  return ISP_OK;
3418fc02:	2300      	movs	r3, #0
}
3418fc04:	4618      	mov	r0, r3
3418fc06:	3708      	adds	r7, #8
3418fc08:	46bd      	mov	sp, r7
3418fc0a:	bd80      	pop	{r7, pc}

3418fc0c <ISP_SVC_Misc_IncMainFrameId>:
  *         Increment the id of the frame output on the main pipe
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncMainFrameId(ISP_HandleTypeDef *hIsp)
{
3418fc0c:	b480      	push	{r7}
3418fc0e:	b083      	sub	sp, #12
3418fc10:	af00      	add	r7, sp, #0
3418fc12:	6078      	str	r0, [r7, #4]
  hIsp->MainPipe_FrameCount++;
3418fc14:	687b      	ldr	r3, [r7, #4]
3418fc16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418fc18:	1c5a      	adds	r2, r3, #1
3418fc1a:	687b      	ldr	r3, [r7, #4]
3418fc1c:	641a      	str	r2, [r3, #64]	@ 0x40
}
3418fc1e:	bf00      	nop
3418fc20:	370c      	adds	r7, #12
3418fc22:	46bd      	mov	sp, r7
3418fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fc28:	4770      	bx	lr

3418fc2a <ISP_SVC_Misc_GetMainFrameId>:
  *         Return the id of the last frame output on the main pipe
  * @param  hIsp: ISP device handle
  * @retval Id of the last frame output on the main pipe
  */
uint32_t ISP_SVC_Misc_GetMainFrameId(ISP_HandleTypeDef *hIsp)
{
3418fc2a:	b480      	push	{r7}
3418fc2c:	b083      	sub	sp, #12
3418fc2e:	af00      	add	r7, sp, #0
3418fc30:	6078      	str	r0, [r7, #4]
  return hIsp->MainPipe_FrameCount;
3418fc32:	687b      	ldr	r3, [r7, #4]
3418fc34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
3418fc36:	4618      	mov	r0, r3
3418fc38:	370c      	adds	r7, #12
3418fc3a:	46bd      	mov	sp, r7
3418fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fc40:	4770      	bx	lr

3418fc42 <ISP_SVC_Misc_IncAncillaryFrameId>:
  *         Increment the id of the frame output on the ancillary pipe
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncAncillaryFrameId(ISP_HandleTypeDef *hIsp)
{
3418fc42:	b480      	push	{r7}
3418fc44:	b083      	sub	sp, #12
3418fc46:	af00      	add	r7, sp, #0
3418fc48:	6078      	str	r0, [r7, #4]
  hIsp->AncillaryPipe_FrameCount++;
3418fc4a:	687b      	ldr	r3, [r7, #4]
3418fc4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418fc4e:	1c5a      	adds	r2, r3, #1
3418fc50:	687b      	ldr	r3, [r7, #4]
3418fc52:	645a      	str	r2, [r3, #68]	@ 0x44
}
3418fc54:	bf00      	nop
3418fc56:	370c      	adds	r7, #12
3418fc58:	46bd      	mov	sp, r7
3418fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fc5e:	4770      	bx	lr

3418fc60 <ISP_SVC_Misc_IncDumpFrameId>:
  *         Increment the id of the frame output on the dump pipe
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncDumpFrameId(ISP_HandleTypeDef *hIsp)
{
3418fc60:	b480      	push	{r7}
3418fc62:	b083      	sub	sp, #12
3418fc64:	af00      	add	r7, sp, #0
3418fc66:	6078      	str	r0, [r7, #4]
  hIsp->DumpPipe_FrameCount++;
3418fc68:	687b      	ldr	r3, [r7, #4]
3418fc6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418fc6c:	1c5a      	adds	r2, r3, #1
3418fc6e:	687b      	ldr	r3, [r7, #4]
3418fc70:	649a      	str	r2, [r3, #72]	@ 0x48
}
3418fc72:	bf00      	nop
3418fc74:	370c      	adds	r7, #12
3418fc76:	46bd      	mov	sp, r7
3418fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fc7c:	4770      	bx	lr

3418fc7e <ISP_SVC_Misc_IsGammaEnabled>:
  * @param  hIsp: ISP device handle
  * @param  Pipe: DCMIPP pipe line
  * @retval 1 if enabled 0 otherwise
  */
bool ISP_SVC_Misc_IsGammaEnabled(ISP_HandleTypeDef *hIsp, uint32_t Pipe)
{
3418fc7e:	b580      	push	{r7, lr}
3418fc80:	b084      	sub	sp, #16
3418fc82:	af00      	add	r7, sp, #0
3418fc84:	6078      	str	r0, [r7, #4]
3418fc86:	6039      	str	r1, [r7, #0]
  uint8_t ret;

  /* Check handle validity */
  if (hIsp == NULL)
3418fc88:	687b      	ldr	r3, [r7, #4]
3418fc8a:	2b00      	cmp	r3, #0
3418fc8c:	d101      	bne.n	3418fc92 <ISP_SVC_Misc_IsGammaEnabled+0x14>
  {
    return ISP_ERR_EINVAL;
3418fc8e:	2301      	movs	r3, #1
3418fc90:	e020      	b.n	3418fcd4 <ISP_SVC_Misc_IsGammaEnabled+0x56>
  }

  switch(Pipe)
3418fc92:	683b      	ldr	r3, [r7, #0]
3418fc94:	2b01      	cmp	r3, #1
3418fc96:	d003      	beq.n	3418fca0 <ISP_SVC_Misc_IsGammaEnabled+0x22>
3418fc98:	683b      	ldr	r3, [r7, #0]
3418fc9a:	2b02      	cmp	r3, #2
3418fc9c:	d009      	beq.n	3418fcb2 <ISP_SVC_Misc_IsGammaEnabled+0x34>
3418fc9e:	e011      	b.n	3418fcc4 <ISP_SVC_Misc_IsGammaEnabled+0x46>
  {
  case 1:
    ret = HAL_DCMIPP_PIPE_IsEnabledGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
3418fca0:	687b      	ldr	r3, [r7, #4]
3418fca2:	681b      	ldr	r3, [r3, #0]
3418fca4:	2101      	movs	r1, #1
3418fca6:	4618      	mov	r0, r3
3418fca8:	f7f4 fb5e 	bl	34184368 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>
3418fcac:	4603      	mov	r3, r0
3418fcae:	73fb      	strb	r3, [r7, #15]
    break;
3418fcb0:	e00a      	b.n	3418fcc8 <ISP_SVC_Misc_IsGammaEnabled+0x4a>
  case 2:
    ret = HAL_DCMIPP_PIPE_IsEnabledGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2);
3418fcb2:	687b      	ldr	r3, [r7, #4]
3418fcb4:	681b      	ldr	r3, [r3, #0]
3418fcb6:	2102      	movs	r1, #2
3418fcb8:	4618      	mov	r0, r3
3418fcba:	f7f4 fb55 	bl	34184368 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>
3418fcbe:	4603      	mov	r3, r0
3418fcc0:	73fb      	strb	r3, [r7, #15]
    break;
3418fcc2:	e001      	b.n	3418fcc8 <ISP_SVC_Misc_IsGammaEnabled+0x4a>
  default:
    ret = 0; /*  No gamma on pipe 0 */
3418fcc4:	2300      	movs	r3, #0
3418fcc6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
3418fcc8:	7bfb      	ldrb	r3, [r7, #15]
3418fcca:	2b00      	cmp	r3, #0
3418fccc:	bf14      	ite	ne
3418fcce:	2301      	movne	r3, #1
3418fcd0:	2300      	moveq	r3, #0
3418fcd2:	b2db      	uxtb	r3, r3
}
3418fcd4:	4618      	mov	r0, r3
3418fcd6:	3710      	adds	r7, #16
3418fcd8:	46bd      	mov	sp, r7
3418fcda:	bd80      	pop	{r7, pc}

3418fcdc <ISP_SVC_ISP_SetGamma>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gamma configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetGamma(ISP_HandleTypeDef *hIsp, ISP_GammaTypeDef *pConfig)
{
3418fcdc:	b580      	push	{r7, lr}
3418fcde:	b082      	sub	sp, #8
3418fce0:	af00      	add	r7, sp, #0
3418fce2:	6078      	str	r0, [r7, #4]
3418fce4:	6039      	str	r1, [r7, #0]
  if ((hIsp == NULL) || (pConfig == NULL))
3418fce6:	687b      	ldr	r3, [r7, #4]
3418fce8:	2b00      	cmp	r3, #0
3418fcea:	d002      	beq.n	3418fcf2 <ISP_SVC_ISP_SetGamma+0x16>
3418fcec:	683b      	ldr	r3, [r7, #0]
3418fcee:	2b00      	cmp	r3, #0
3418fcf0:	d101      	bne.n	3418fcf6 <ISP_SVC_ISP_SetGamma+0x1a>
  {
    return ISP_ERR_DCMIPP_GAMMA;
3418fcf2:	2395      	movs	r3, #149	@ 0x95
3418fcf4:	e034      	b.n	3418fd60 <ISP_SVC_ISP_SetGamma+0x84>
  }

  if (pConfig->enablePipe1 == 0)
3418fcf6:	683b      	ldr	r3, [r7, #0]
3418fcf8:	781b      	ldrb	r3, [r3, #0]
3418fcfa:	2b00      	cmp	r3, #0
3418fcfc:	d10a      	bne.n	3418fd14 <ISP_SVC_ISP_SetGamma+0x38>
  {
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
3418fcfe:	687b      	ldr	r3, [r7, #4]
3418fd00:	681b      	ldr	r3, [r3, #0]
3418fd02:	2101      	movs	r1, #1
3418fd04:	4618      	mov	r0, r3
3418fd06:	f7f4 fb00 	bl	3418430a <HAL_DCMIPP_PIPE_DisableGammaConversion>
3418fd0a:	4603      	mov	r3, r0
3418fd0c:	2b00      	cmp	r3, #0
3418fd0e:	d00c      	beq.n	3418fd2a <ISP_SVC_ISP_SetGamma+0x4e>
    {
      return ISP_ERR_DCMIPP_GAMMA;
3418fd10:	2395      	movs	r3, #149	@ 0x95
3418fd12:	e025      	b.n	3418fd60 <ISP_SVC_ISP_SetGamma+0x84>
    }
  }
  else
  {
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
3418fd14:	687b      	ldr	r3, [r7, #4]
3418fd16:	681b      	ldr	r3, [r3, #0]
3418fd18:	2101      	movs	r1, #1
3418fd1a:	4618      	mov	r0, r3
3418fd1c:	f7f4 fac6 	bl	341842ac <HAL_DCMIPP_PIPE_EnableGammaConversion>
3418fd20:	4603      	mov	r3, r0
3418fd22:	2b00      	cmp	r3, #0
3418fd24:	d001      	beq.n	3418fd2a <ISP_SVC_ISP_SetGamma+0x4e>
    {
      return ISP_ERR_DCMIPP_GAMMA;
3418fd26:	2395      	movs	r3, #149	@ 0x95
3418fd28:	e01a      	b.n	3418fd60 <ISP_SVC_ISP_SetGamma+0x84>
    }
  }

  if (pConfig->enablePipe2 == 0)
3418fd2a:	683b      	ldr	r3, [r7, #0]
3418fd2c:	785b      	ldrb	r3, [r3, #1]
3418fd2e:	2b00      	cmp	r3, #0
3418fd30:	d10a      	bne.n	3418fd48 <ISP_SVC_ISP_SetGamma+0x6c>
  {
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
3418fd32:	687b      	ldr	r3, [r7, #4]
3418fd34:	681b      	ldr	r3, [r3, #0]
3418fd36:	2102      	movs	r1, #2
3418fd38:	4618      	mov	r0, r3
3418fd3a:	f7f4 fae6 	bl	3418430a <HAL_DCMIPP_PIPE_DisableGammaConversion>
3418fd3e:	4603      	mov	r3, r0
3418fd40:	2b00      	cmp	r3, #0
3418fd42:	d00c      	beq.n	3418fd5e <ISP_SVC_ISP_SetGamma+0x82>
    {
      return ISP_ERR_DCMIPP_GAMMA;
3418fd44:	2395      	movs	r3, #149	@ 0x95
3418fd46:	e00b      	b.n	3418fd60 <ISP_SVC_ISP_SetGamma+0x84>
    }
  }
  else
  {
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
3418fd48:	687b      	ldr	r3, [r7, #4]
3418fd4a:	681b      	ldr	r3, [r3, #0]
3418fd4c:	2102      	movs	r1, #2
3418fd4e:	4618      	mov	r0, r3
3418fd50:	f7f4 faac 	bl	341842ac <HAL_DCMIPP_PIPE_EnableGammaConversion>
3418fd54:	4603      	mov	r3, r0
3418fd56:	2b00      	cmp	r3, #0
3418fd58:	d001      	beq.n	3418fd5e <ISP_SVC_ISP_SetGamma+0x82>
    {
      return ISP_ERR_DCMIPP_GAMMA;
3418fd5a:	2395      	movs	r3, #149	@ 0x95
3418fd5c:	e000      	b.n	3418fd60 <ISP_SVC_ISP_SetGamma+0x84>
    }
  }

  return ISP_OK;
3418fd5e:	2300      	movs	r3, #0
}
3418fd60:	4618      	mov	r0, r3
3418fd62:	3708      	adds	r7, #8
3418fd64:	46bd      	mov	sp, r7
3418fd66:	bd80      	pop	{r7, pc}

3418fd68 <ISP_SVC_IQParam_Init>:
  *         Initialize the IQ parameters cache with values from non volatile memory
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_IQParam_Init(ISP_HandleTypeDef *hIsp, const ISP_IQParamTypeDef *ISP_IQParamCacheInit)
{
3418fd68:	b580      	push	{r7, lr}
3418fd6a:	b082      	sub	sp, #8
3418fd6c:	af00      	add	r7, sp, #0
3418fd6e:	6078      	str	r0, [r7, #4]
3418fd70:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */

  ISP_IQParamCache = *ISP_IQParamCacheInit;
3418fd72:	4a07      	ldr	r2, [pc, #28]	@ (3418fd90 <ISP_SVC_IQParam_Init+0x28>)
3418fd74:	683b      	ldr	r3, [r7, #0]
3418fd76:	4610      	mov	r0, r2
3418fd78:	4619      	mov	r1, r3
3418fd7a:	f44f 7315 	mov.w	r3, #596	@ 0x254
3418fd7e:	461a      	mov	r2, r3
3418fd80:	f002 f909 	bl	34191f96 <memcpy>
  return ISP_OK;
3418fd84:	2300      	movs	r3, #0
}
3418fd86:	4618      	mov	r0, r3
3418fd88:	3708      	adds	r7, #8
3418fd8a:	46bd      	mov	sp, r7
3418fd8c:	bd80      	pop	{r7, pc}
3418fd8e:	bf00      	nop
3418fd90:	341c12d0 	.word	0x341c12d0

3418fd94 <ISP_SVC_IQParam_Get>:
  *         Get the pointer to the IQ parameters cache
  * @param  hIsp: ISP device handle
  * @retval Pointer to the IQ Param config
  */
ISP_IQParamTypeDef *ISP_SVC_IQParam_Get(ISP_HandleTypeDef *hIsp)
{
3418fd94:	b480      	push	{r7}
3418fd96:	b083      	sub	sp, #12
3418fd98:	af00      	add	r7, sp, #0
3418fd9a:	6078      	str	r0, [r7, #4]
  (void)hIsp; /* unused */

  return &ISP_IQParamCache;
3418fd9c:	4b03      	ldr	r3, [pc, #12]	@ (3418fdac <ISP_SVC_IQParam_Get+0x18>)
}
3418fd9e:	4618      	mov	r0, r3
3418fda0:	370c      	adds	r7, #12
3418fda2:	46bd      	mov	sp, r7
3418fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fda8:	4770      	bx	lr
3418fdaa:	bf00      	nop
3418fdac:	341c12d0 	.word	0x341c12d0

3418fdb0 <ISP_SVC_Stats_Init>:
  *         Initialize the statistic engine
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_SVC_Stats_Init(ISP_HandleTypeDef *hIsp)
{
3418fdb0:	b580      	push	{r7, lr}
3418fdb2:	b082      	sub	sp, #8
3418fdb4:	af00      	add	r7, sp, #0
3418fdb6:	6078      	str	r0, [r7, #4]
  memset(&ISP_SVC_StatEngine, 0, sizeof(ISP_SVC_StatEngineTypeDef));
3418fdb8:	f44f 72b0 	mov.w	r2, #352	@ 0x160
3418fdbc:	2100      	movs	r1, #0
3418fdbe:	4803      	ldr	r0, [pc, #12]	@ (3418fdcc <ISP_SVC_Stats_Init+0x1c>)
3418fdc0:	f002 f86e 	bl	34191ea0 <memset>
}
3418fdc4:	bf00      	nop
3418fdc6:	3708      	adds	r7, #8
3418fdc8:	46bd      	mov	sp, r7
3418fdca:	bd80      	pop	{r7, pc}
3418fdcc:	341c1524 	.word	0x341c1524

3418fdd0 <ISP_SVC_Stats_Gather>:
  *         Gather statistics
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_SVC_Stats_Gather(ISP_HandleTypeDef *hIsp)
{
3418fdd0:	b5b0      	push	{r4, r5, r7, lr}
3418fdd2:	b092      	sub	sp, #72	@ 0x48
3418fdd4:	af00      	add	r7, sp, #0
3418fdd6:	6078      	str	r0, [r7, #4]
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_SVC_StatStateTypeDef *ongoing;
  uint32_t i, avgR, avgG, avgB, frameId;

  /* Check handle validity */
  if (hIsp == NULL)
3418fdd8:	687b      	ldr	r3, [r7, #4]
3418fdda:	2b00      	cmp	r3, #0
3418fddc:	d103      	bne.n	3418fde6 <ISP_SVC_Stats_Gather+0x16>
  {
    printf("ERROR: ISP handle is NULL\r\n");
3418fdde:	48ba      	ldr	r0, [pc, #744]	@ (341900c8 <ISP_SVC_Stats_Gather+0x2f8>)
3418fde0:	f001 ff2e 	bl	34191c40 <puts>
    return;
3418fde4:	e2a7      	b.n	34190336 <ISP_SVC_Stats_Gather+0x566>
  }

  if (hIsp->hDcmipp == NULL)
3418fde6:	687b      	ldr	r3, [r7, #4]
3418fde8:	681b      	ldr	r3, [r3, #0]
3418fdea:	2b00      	cmp	r3, #0
3418fdec:	f000 82a2 	beq.w	34190334 <ISP_SVC_Stats_Gather+0x564>
  }

  /* Read the stats according to the configuration applied 2 VSYNC (shadow register + stat computation)
   * stages earlier.
   */
  ongoing = &ISP_SVC_StatEngine.ongoing;
3418fdf0:	4bb6      	ldr	r3, [pc, #728]	@ (341900cc <ISP_SVC_Stats_Gather+0x2fc>)
3418fdf2:	643b      	str	r3, [r7, #64]	@ 0x40
  switch(stagePrevious2)
3418fdf4:	4bb6      	ldr	r3, [pc, #728]	@ (341900d0 <ISP_SVC_Stats_Gather+0x300>)
3418fdf6:	781b      	ldrb	r3, [r3, #0]
3418fdf8:	2b09      	cmp	r3, #9
3418fdfa:	f200 80fd 	bhi.w	3418fff8 <ISP_SVC_Stats_Gather+0x228>
3418fdfe:	a201      	add	r2, pc, #4	@ (adr r2, 3418fe04 <ISP_SVC_Stats_Gather+0x34>)
3418fe00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418fe04:	3418fe2d 	.word	0x3418fe2d
3418fe08:	3418feb5 	.word	0x3418feb5
3418fe0c:	3418fec3 	.word	0x3418fec3
3418fe10:	3418fed1 	.word	0x3418fed1
3418fe14:	3418fedf 	.word	0x3418fedf
3418fe18:	3418feed 	.word	0x3418feed
3418fe1c:	3418ffc1 	.word	0x3418ffc1
3418fe20:	3418ffcf 	.word	0x3418ffcf
3418fe24:	3418ffdd 	.word	0x3418ffdd
3418fe28:	3418ffeb 	.word	0x3418ffeb
  {
  case ISP_STAT_CFG_UP_AVG:
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE1, &avgR);
3418fe2c:	687b      	ldr	r3, [r7, #4]
3418fe2e:	6818      	ldr	r0, [r3, #0]
3418fe30:	f107 0310 	add.w	r3, r7, #16
3418fe34:	2201      	movs	r2, #1
3418fe36:	2101      	movs	r1, #1
3418fe38:	f7f5 f8aa 	bl	34184f90 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE2, &avgG);
3418fe3c:	687b      	ldr	r3, [r7, #4]
3418fe3e:	6818      	ldr	r0, [r3, #0]
3418fe40:	f107 030c 	add.w	r3, r7, #12
3418fe44:	2202      	movs	r2, #2
3418fe46:	2101      	movs	r1, #1
3418fe48:	f7f5 f8a2 	bl	34184f90 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE3, &avgB);
3418fe4c:	687b      	ldr	r3, [r7, #4]
3418fe4e:	6818      	ldr	r0, [r3, #0]
3418fe50:	f107 0308 	add.w	r3, r7, #8
3418fe54:	2203      	movs	r2, #3
3418fe56:	2101      	movs	r1, #1
3418fe58:	f7f5 f89a 	bl	34184f90 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>

    ongoing->up.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_RED, avgR);
3418fe5c:	693b      	ldr	r3, [r7, #16]
3418fe5e:	2200      	movs	r2, #0
3418fe60:	2101      	movs	r1, #1
3418fe62:	6878      	ldr	r0, [r7, #4]
3418fe64:	f7fe feb4 	bl	3418ebd0 <GetAvgStats>
3418fe68:	4603      	mov	r3, r0
3418fe6a:	461a      	mov	r2, r3
3418fe6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418fe6e:	701a      	strb	r2, [r3, #0]
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
3418fe70:	68fb      	ldr	r3, [r7, #12]
3418fe72:	2201      	movs	r2, #1
3418fe74:	2101      	movs	r1, #1
3418fe76:	6878      	ldr	r0, [r7, #4]
3418fe78:	f7fe feaa 	bl	3418ebd0 <GetAvgStats>
3418fe7c:	4603      	mov	r3, r0
3418fe7e:	461a      	mov	r2, r3
3418fe80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418fe82:	705a      	strb	r2, [r3, #1]
    ongoing->up.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_BLUE, avgB);
3418fe84:	68bb      	ldr	r3, [r7, #8]
3418fe86:	2202      	movs	r2, #2
3418fe88:	2101      	movs	r1, #1
3418fe8a:	6878      	ldr	r0, [r7, #4]
3418fe8c:	f7fe fea0 	bl	3418ebd0 <GetAvgStats>
3418fe90:	4603      	mov	r3, r0
3418fe92:	461a      	mov	r2, r3
3418fe94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418fe96:	709a      	strb	r2, [r3, #2]
    ongoing->up.averageL = LuminanceFromRGB(ongoing->up.averageR, ongoing->up.averageG, ongoing->up.averageB);
3418fe98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418fe9a:	7818      	ldrb	r0, [r3, #0]
3418fe9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418fe9e:	7859      	ldrb	r1, [r3, #1]
3418fea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418fea2:	789b      	ldrb	r3, [r3, #2]
3418fea4:	461a      	mov	r2, r3
3418fea6:	f7ff f87b 	bl	3418efa0 <LuminanceFromRGB>
3418feaa:	4603      	mov	r3, r0
3418feac:	461a      	mov	r2, r3
3418feae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418feb0:	70da      	strb	r2, [r3, #3]
    break;
3418feb2:	e0a2      	b.n	3418fffa <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_UP_BINS_0_2:
    ReadStatHistogram(hIsp, &ongoing->up.histogram[0]);
3418feb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418feb6:	3304      	adds	r3, #4
3418feb8:	4619      	mov	r1, r3
3418feba:	6878      	ldr	r0, [r7, #4]
3418febc:	f7fe fecc 	bl	3418ec58 <ReadStatHistogram>
    break;
3418fec0:	e09b      	b.n	3418fffa <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_UP_BINS_3_5:
    ReadStatHistogram(hIsp, &ongoing->up.histogram[3]);
3418fec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418fec4:	3310      	adds	r3, #16
3418fec6:	4619      	mov	r1, r3
3418fec8:	6878      	ldr	r0, [r7, #4]
3418feca:	f7fe fec5 	bl	3418ec58 <ReadStatHistogram>
    break;
3418fece:	e094      	b.n	3418fffa <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_UP_BINS_6_8:
    ReadStatHistogram(hIsp, &ongoing->up.histogram[6]);
3418fed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418fed2:	331c      	adds	r3, #28
3418fed4:	4619      	mov	r1, r3
3418fed6:	6878      	ldr	r0, [r7, #4]
3418fed8:	f7fe febe 	bl	3418ec58 <ReadStatHistogram>
    break;
3418fedc:	e08d      	b.n	3418fffa <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_UP_BINS_9_11:
    ReadStatHistogram(hIsp, &ongoing->up.histogram[9]);
3418fede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418fee0:	3328      	adds	r3, #40	@ 0x28
3418fee2:	4619      	mov	r1, r3
3418fee4:	6878      	ldr	r0, [r7, #4]
3418fee6:	f7fe feb7 	bl	3418ec58 <ReadStatHistogram>
    break;
3418feea:	e086      	b.n	3418fffa <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_AVG:
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE1, &avgR);
3418feec:	687b      	ldr	r3, [r7, #4]
3418feee:	6818      	ldr	r0, [r3, #0]
3418fef0:	f107 0310 	add.w	r3, r7, #16
3418fef4:	2201      	movs	r2, #1
3418fef6:	2101      	movs	r1, #1
3418fef8:	f7f5 f84a 	bl	34184f90 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE2, &avgG);
3418fefc:	687b      	ldr	r3, [r7, #4]
3418fefe:	6818      	ldr	r0, [r3, #0]
3418ff00:	f107 030c 	add.w	r3, r7, #12
3418ff04:	2202      	movs	r2, #2
3418ff06:	2101      	movs	r1, #1
3418ff08:	f7f5 f842 	bl	34184f90 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE3, &avgB);
3418ff0c:	687b      	ldr	r3, [r7, #4]
3418ff0e:	6818      	ldr	r0, [r3, #0]
3418ff10:	f107 0308 	add.w	r3, r7, #8
3418ff14:	2203      	movs	r2, #3
3418ff16:	2101      	movs	r1, #1
3418ff18:	f7f5 f83a 	bl	34184f90 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>

    ongoing->down.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_RED, avgR);
3418ff1c:	693b      	ldr	r3, [r7, #16]
3418ff1e:	2200      	movs	r2, #0
3418ff20:	2102      	movs	r1, #2
3418ff22:	6878      	ldr	r0, [r7, #4]
3418ff24:	f7fe fe54 	bl	3418ebd0 <GetAvgStats>
3418ff28:	4603      	mov	r3, r0
3418ff2a:	461a      	mov	r2, r3
3418ff2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ff2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ongoing->down.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_GREEN, avgG);
3418ff32:	68fb      	ldr	r3, [r7, #12]
3418ff34:	2201      	movs	r2, #1
3418ff36:	2102      	movs	r1, #2
3418ff38:	6878      	ldr	r0, [r7, #4]
3418ff3a:	f7fe fe49 	bl	3418ebd0 <GetAvgStats>
3418ff3e:	4603      	mov	r3, r0
3418ff40:	461a      	mov	r2, r3
3418ff42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ff44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    ongoing->down.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_BLUE, avgB);
3418ff48:	68bb      	ldr	r3, [r7, #8]
3418ff4a:	2202      	movs	r2, #2
3418ff4c:	2102      	movs	r1, #2
3418ff4e:	6878      	ldr	r0, [r7, #4]
3418ff50:	f7fe fe3e 	bl	3418ebd0 <GetAvgStats>
3418ff54:	4603      	mov	r3, r0
3418ff56:	461a      	mov	r2, r3
3418ff58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ff5a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3418ff5e:	6878      	ldr	r0, [r7, #4]
3418ff60:	f7ff ff18 	bl	3418fd94 <ISP_SVC_IQParam_Get>
3418ff64:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if ((hIsp->sensorInfo.bayer_pattern == ISP_DEMOS_TYPE_MONO) || (!IQParamConfig->demosaicing.enable))
3418ff66:	687b      	ldr	r3, [r7, #4]
3418ff68:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
3418ff6c:	2b04      	cmp	r3, #4
3418ff6e:	d003      	beq.n	3418ff78 <ISP_SVC_Stats_Gather+0x1a8>
3418ff70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418ff72:	7b1b      	ldrb	r3, [r3, #12]
3418ff74:	2b00      	cmp	r3, #0
3418ff76:	d111      	bne.n	3418ff9c <ISP_SVC_Stats_Gather+0x1cc>
    {
      ongoing->down.averageL = LuminanceFromRGBMono(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
3418ff78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ff7a:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
3418ff7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ff80:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
3418ff84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ff86:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
3418ff8a:	461a      	mov	r2, r3
3418ff8c:	f7ff f848 	bl	3418f020 <LuminanceFromRGBMono>
3418ff90:	4603      	mov	r3, r0
3418ff92:	461a      	mov	r2, r3
3418ff94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ff96:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    }
    else
    {
      ongoing->down.averageL = LuminanceFromRGB(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
    }
    break;
3418ff9a:	e02e      	b.n	3418fffa <ISP_SVC_Stats_Gather+0x22a>
      ongoing->down.averageL = LuminanceFromRGB(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
3418ff9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ff9e:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
3418ffa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ffa4:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
3418ffa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ffaa:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
3418ffae:	461a      	mov	r2, r3
3418ffb0:	f7fe fff6 	bl	3418efa0 <LuminanceFromRGB>
3418ffb4:	4603      	mov	r3, r0
3418ffb6:	461a      	mov	r2, r3
3418ffb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ffba:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    break;
3418ffbe:	e01c      	b.n	3418fffa <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_BINS_0_2:
    ReadStatHistogram(hIsp, &ongoing->down.histogram[0]);
3418ffc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ffc2:	3338      	adds	r3, #56	@ 0x38
3418ffc4:	4619      	mov	r1, r3
3418ffc6:	6878      	ldr	r0, [r7, #4]
3418ffc8:	f7fe fe46 	bl	3418ec58 <ReadStatHistogram>
    break;
3418ffcc:	e015      	b.n	3418fffa <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_BINS_3_5:
    ReadStatHistogram(hIsp, &ongoing->down.histogram[3]);
3418ffce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ffd0:	3344      	adds	r3, #68	@ 0x44
3418ffd2:	4619      	mov	r1, r3
3418ffd4:	6878      	ldr	r0, [r7, #4]
3418ffd6:	f7fe fe3f 	bl	3418ec58 <ReadStatHistogram>
    break;
3418ffda:	e00e      	b.n	3418fffa <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_BINS_6_8:
    ReadStatHistogram(hIsp, &ongoing->down.histogram[6]);
3418ffdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ffde:	3350      	adds	r3, #80	@ 0x50
3418ffe0:	4619      	mov	r1, r3
3418ffe2:	6878      	ldr	r0, [r7, #4]
3418ffe4:	f7fe fe38 	bl	3418ec58 <ReadStatHistogram>
    break;
3418ffe8:	e007      	b.n	3418fffa <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_BINS_9_11:
    ReadStatHistogram(hIsp, &ongoing->down.histogram[9]);
3418ffea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418ffec:	335c      	adds	r3, #92	@ 0x5c
3418ffee:	4619      	mov	r1, r3
3418fff0:	6878      	ldr	r0, [r7, #4]
3418fff2:	f7fe fe31 	bl	3418ec58 <ReadStatHistogram>
    break;
3418fff6:	e000      	b.n	3418fffa <ISP_SVC_Stats_Gather+0x22a>

  default:
    /* No Read */
    break;
3418fff8:	bf00      	nop
  }

  /* Configure stat for a new stage */
  switch(ISP_SVC_StatEngine.stage)
3418fffa:	4b36      	ldr	r3, [pc, #216]	@ (341900d4 <ISP_SVC_Stats_Gather+0x304>)
3418fffc:	781b      	ldrb	r3, [r3, #0]
3418fffe:	2b09      	cmp	r3, #9
34190000:	f200 80b8 	bhi.w	34190174 <ISP_SVC_Stats_Gather+0x3a4>
34190004:	a201      	add	r2, pc, #4	@ (adr r2, 3419000c <ISP_SVC_Stats_Gather+0x23c>)
34190006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3419000a:	bf00      	nop
3419000c:	34190035 	.word	0x34190035
34190010:	3419008b 	.word	0x3419008b
34190014:	34190099 	.word	0x34190099
34190018:	341900a7 	.word	0x341900a7
3419001c:	341900b5 	.word	0x341900b5
34190020:	341900c3 	.word	0x341900c3
34190024:	3419013d 	.word	0x3419013d
34190028:	3419014b 	.word	0x3419014b
3419002c:	34190159 	.word	0x34190159
34190030:	34190167 	.word	0x34190167
  {
  case ISP_STAT_CFG_UP_AVG:
    for (i = 0; i < 3; i++)
34190034:	2300      	movs	r3, #0
34190036:	647b      	str	r3, [r7, #68]	@ 0x44
34190038:	e023      	b.n	34190082 <ISP_SVC_Stats_Gather+0x2b2>
    {
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
3419003a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3419003c:	4613      	mov	r3, r2
3419003e:	005b      	lsls	r3, r3, #1
34190040:	4413      	add	r3, r2
34190042:	009b      	lsls	r3, r3, #2
34190044:	3348      	adds	r3, #72	@ 0x48
34190046:	443b      	add	r3, r7
34190048:	3b34      	subs	r3, #52	@ 0x34
3419004a:	2200      	movs	r2, #0
3419004c:	601a      	str	r2, [r3, #0]
      statConf[i].Source = avgRGBUp[i];
3419004e:	4a22      	ldr	r2, [pc, #136]	@ (341900d8 <ISP_SVC_Stats_Gather+0x308>)
34190050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34190052:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
34190056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
34190058:	4613      	mov	r3, r2
3419005a:	005b      	lsls	r3, r3, #1
3419005c:	4413      	add	r3, r2
3419005e:	009b      	lsls	r3, r3, #2
34190060:	3348      	adds	r3, #72	@ 0x48
34190062:	443b      	add	r3, r7
34190064:	3b30      	subs	r3, #48	@ 0x30
34190066:	6019      	str	r1, [r3, #0]
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
34190068:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3419006a:	4613      	mov	r3, r2
3419006c:	005b      	lsls	r3, r3, #1
3419006e:	4413      	add	r3, r2
34190070:	009b      	lsls	r3, r3, #2
34190072:	3348      	adds	r3, #72	@ 0x48
34190074:	443b      	add	r3, r7
34190076:	3b2c      	subs	r3, #44	@ 0x2c
34190078:	2200      	movs	r2, #0
3419007a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i++)
3419007c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419007e:	3301      	adds	r3, #1
34190080:	647b      	str	r3, [r7, #68]	@ 0x44
34190082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34190084:	2b02      	cmp	r3, #2
34190086:	d9d8      	bls.n	3419003a <ISP_SVC_Stats_Gather+0x26a>
    }
    break;
34190088:	e075      	b.n	34190176 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_UP_BINS_0_2:
    SetStatConfig(statConf, &statConfUpBins_0_2);
3419008a:	f107 0314 	add.w	r3, r7, #20
3419008e:	4913      	ldr	r1, [pc, #76]	@ (341900dc <ISP_SVC_Stats_Gather+0x30c>)
34190090:	4618      	mov	r0, r3
34190092:	f7fe fe03 	bl	3418ec9c <SetStatConfig>
    break;
34190096:	e06e      	b.n	34190176 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_UP_BINS_3_5:
    SetStatConfig(statConf, &statConfUpBins_3_5);
34190098:	f107 0314 	add.w	r3, r7, #20
3419009c:	4910      	ldr	r1, [pc, #64]	@ (341900e0 <ISP_SVC_Stats_Gather+0x310>)
3419009e:	4618      	mov	r0, r3
341900a0:	f7fe fdfc 	bl	3418ec9c <SetStatConfig>
    break;
341900a4:	e067      	b.n	34190176 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_UP_BINS_6_8:
    SetStatConfig(statConf, &statConfUpBins_6_8);
341900a6:	f107 0314 	add.w	r3, r7, #20
341900aa:	490e      	ldr	r1, [pc, #56]	@ (341900e4 <ISP_SVC_Stats_Gather+0x314>)
341900ac:	4618      	mov	r0, r3
341900ae:	f7fe fdf5 	bl	3418ec9c <SetStatConfig>
    break;
341900b2:	e060      	b.n	34190176 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_UP_BINS_9_11:
    SetStatConfig(statConf, &statConfUpBins_9_11);
341900b4:	f107 0314 	add.w	r3, r7, #20
341900b8:	490b      	ldr	r1, [pc, #44]	@ (341900e8 <ISP_SVC_Stats_Gather+0x318>)
341900ba:	4618      	mov	r0, r3
341900bc:	f7fe fdee 	bl	3418ec9c <SetStatConfig>
    break;
341900c0:	e059      	b.n	34190176 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_AVG:
    for (i = 0; i < 3; i++)
341900c2:	2300      	movs	r3, #0
341900c4:	647b      	str	r3, [r7, #68]	@ 0x44
341900c6:	e035      	b.n	34190134 <ISP_SVC_Stats_Gather+0x364>
341900c8:	34193dd8 	.word	0x34193dd8
341900cc:	341c15a0 	.word	0x341c15a0
341900d0:	341c00d5 	.word	0x341c00d5
341900d4:	341c1524 	.word	0x341c1524
341900d8:	341940d4 	.word	0x341940d4
341900dc:	341940ec 	.word	0x341940ec
341900e0:	341940f8 	.word	0x341940f8
341900e4:	34194104 	.word	0x34194104
341900e8:	34194110 	.word	0x34194110
    {
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
341900ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
341900ee:	4613      	mov	r3, r2
341900f0:	005b      	lsls	r3, r3, #1
341900f2:	4413      	add	r3, r2
341900f4:	009b      	lsls	r3, r3, #2
341900f6:	3348      	adds	r3, #72	@ 0x48
341900f8:	443b      	add	r3, r7
341900fa:	3b34      	subs	r3, #52	@ 0x34
341900fc:	2200      	movs	r2, #0
341900fe:	601a      	str	r2, [r3, #0]
      statConf[i].Source = avgRGBDown[i];
34190100:	4a8e      	ldr	r2, [pc, #568]	@ (3419033c <ISP_SVC_Stats_Gather+0x56c>)
34190102:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34190104:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
34190108:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3419010a:	4613      	mov	r3, r2
3419010c:	005b      	lsls	r3, r3, #1
3419010e:	4413      	add	r3, r2
34190110:	009b      	lsls	r3, r3, #2
34190112:	3348      	adds	r3, #72	@ 0x48
34190114:	443b      	add	r3, r7
34190116:	3b30      	subs	r3, #48	@ 0x30
34190118:	6019      	str	r1, [r3, #0]
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
3419011a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3419011c:	4613      	mov	r3, r2
3419011e:	005b      	lsls	r3, r3, #1
34190120:	4413      	add	r3, r2
34190122:	009b      	lsls	r3, r3, #2
34190124:	3348      	adds	r3, #72	@ 0x48
34190126:	443b      	add	r3, r7
34190128:	3b2c      	subs	r3, #44	@ 0x2c
3419012a:	2200      	movs	r2, #0
3419012c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i++)
3419012e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34190130:	3301      	adds	r3, #1
34190132:	647b      	str	r3, [r7, #68]	@ 0x44
34190134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34190136:	2b02      	cmp	r3, #2
34190138:	d9d8      	bls.n	341900ec <ISP_SVC_Stats_Gather+0x31c>
    }
    break;
3419013a:	e01c      	b.n	34190176 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_BINS_0_2:
    SetStatConfig(statConf, &statConfDownBins_0_2);
3419013c:	f107 0314 	add.w	r3, r7, #20
34190140:	497f      	ldr	r1, [pc, #508]	@ (34190340 <ISP_SVC_Stats_Gather+0x570>)
34190142:	4618      	mov	r0, r3
34190144:	f7fe fdaa 	bl	3418ec9c <SetStatConfig>
    break;
34190148:	e015      	b.n	34190176 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_BINS_3_5:
    SetStatConfig(statConf, &statConfDownBins_3_5);
3419014a:	f107 0314 	add.w	r3, r7, #20
3419014e:	497d      	ldr	r1, [pc, #500]	@ (34190344 <ISP_SVC_Stats_Gather+0x574>)
34190150:	4618      	mov	r0, r3
34190152:	f7fe fda3 	bl	3418ec9c <SetStatConfig>
    break;
34190156:	e00e      	b.n	34190176 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_BINS_6_8:
    SetStatConfig(statConf, &statConfDownBins_6_8);
34190158:	f107 0314 	add.w	r3, r7, #20
3419015c:	497a      	ldr	r1, [pc, #488]	@ (34190348 <ISP_SVC_Stats_Gather+0x578>)
3419015e:	4618      	mov	r0, r3
34190160:	f7fe fd9c 	bl	3418ec9c <SetStatConfig>
    break;
34190164:	e007      	b.n	34190176 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_BINS_9_11:
    SetStatConfig(statConf, &statConfDownBins_9_11);
34190166:	f107 0314 	add.w	r3, r7, #20
3419016a:	4978      	ldr	r1, [pc, #480]	@ (3419034c <ISP_SVC_Stats_Gather+0x57c>)
3419016c:	4618      	mov	r0, r3
3419016e:	f7fe fd95 	bl	3418ec9c <SetStatConfig>
    break;
34190172:	e000      	b.n	34190176 <ISP_SVC_Stats_Gather+0x3a6>

  default:
    /* Configure Unchanged */
    break;
34190174:	bf00      	nop
  }

  /* Apply configuration (for an output result available 2 VSYNC later) */
  for (i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34190176:	2301      	movs	r3, #1
34190178:	647b      	str	r3, [r7, #68]	@ 0x44
3419017a:	e029      	b.n	341901d0 <ISP_SVC_Stats_Gather+0x400>
  {
    if (HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, i, &statConf[i - DCMIPP_STATEXT_MODULE1]) != HAL_OK)
3419017c:	687b      	ldr	r3, [r7, #4]
3419017e:	6818      	ldr	r0, [r3, #0]
34190180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34190182:	b2dc      	uxtb	r4, r3
34190184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34190186:	1e5a      	subs	r2, r3, #1
34190188:	f107 0114 	add.w	r1, r7, #20
3419018c:	4613      	mov	r3, r2
3419018e:	005b      	lsls	r3, r3, #1
34190190:	4413      	add	r3, r2
34190192:	009b      	lsls	r3, r3, #2
34190194:	440b      	add	r3, r1
34190196:	4622      	mov	r2, r4
34190198:	2101      	movs	r1, #1
3419019a:	f7f4 fcfa 	bl	34184b92 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig>
3419019e:	4603      	mov	r3, r0
341901a0:	2b00      	cmp	r3, #0
341901a2:	d003      	beq.n	341901ac <ISP_SVC_Stats_Gather+0x3dc>
    {
      printf("ERROR: can't set Statistic Extraction config\r\n");
341901a4:	486a      	ldr	r0, [pc, #424]	@ (34190350 <ISP_SVC_Stats_Gather+0x580>)
341901a6:	f001 fd4b 	bl	34191c40 <puts>
      return;
341901aa:	e0c4      	b.n	34190336 <ISP_SVC_Stats_Gather+0x566>
    }

    if (HAL_DCMIPP_PIPE_EnableISPStatisticExtraction(hIsp->hDcmipp, DCMIPP_PIPE1, i) != HAL_OK)
341901ac:	687b      	ldr	r3, [r7, #4]
341901ae:	681b      	ldr	r3, [r3, #0]
341901b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
341901b2:	b2d2      	uxtb	r2, r2
341901b4:	2101      	movs	r1, #1
341901b6:	4618      	mov	r0, r3
341901b8:	f7f4 fd79 	bl	34184cae <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction>
341901bc:	4603      	mov	r3, r0
341901be:	2b00      	cmp	r3, #0
341901c0:	d003      	beq.n	341901ca <ISP_SVC_Stats_Gather+0x3fa>
    {
      printf("ERROR: can't enable Statistic Extraction config\r\n");
341901c2:	4864      	ldr	r0, [pc, #400]	@ (34190354 <ISP_SVC_Stats_Gather+0x584>)
341901c4:	f001 fd3c 	bl	34191c40 <puts>
      return;
341901c8:	e0b5      	b.n	34190336 <ISP_SVC_Stats_Gather+0x566>
  for (i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
341901ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
341901cc:	3301      	adds	r3, #1
341901ce:	647b      	str	r3, [r7, #68]	@ 0x44
341901d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
341901d2:	2b03      	cmp	r3, #3
341901d4:	d9d2      	bls.n	3419017c <ISP_SVC_Stats_Gather+0x3ac>
    }
  }

  /* Cycle start / end */
  frameId = ISP_SVC_Misc_GetMainFrameId(hIsp);
341901d6:	6878      	ldr	r0, [r7, #4]
341901d8:	f7ff fd27 	bl	3418fc2a <ISP_SVC_Misc_GetMainFrameId>
341901dc:	63b8      	str	r0, [r7, #56]	@ 0x38

  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_UP))
341901de:	2001      	movs	r0, #1
341901e0:	f7fe fe6e 	bl	3418eec0 <GetStatCycleStart>
341901e4:	4603      	mov	r3, r0
341901e6:	461a      	mov	r2, r3
341901e8:	4b5b      	ldr	r3, [pc, #364]	@ (34190358 <ISP_SVC_Stats_Gather+0x588>)
341901ea:	781b      	ldrb	r3, [r3, #0]
341901ec:	429a      	cmp	r2, r3
341901ee:	d102      	bne.n	341901f6 <ISP_SVC_Stats_Gather+0x426>
  {
    ongoing->upFrameIdStart = frameId;
341901f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
341901f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
341901f4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_DOWN))
341901f6:	2002      	movs	r0, #2
341901f8:	f7fe fe62 	bl	3418eec0 <GetStatCycleStart>
341901fc:	4603      	mov	r3, r0
341901fe:	461a      	mov	r2, r3
34190200:	4b55      	ldr	r3, [pc, #340]	@ (34190358 <ISP_SVC_Stats_Gather+0x588>)
34190202:	781b      	ldrb	r3, [r3, #0]
34190204:	429a      	cmp	r2, r3
34190206:	d102      	bne.n	3419020e <ISP_SVC_Stats_Gather+0x43e>
  {
    ongoing->downFrameIdStart = frameId;
34190208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419020a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
3419020c:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  if ((stagePrevious2 == GetStatCycleEnd(ISP_STAT_LOC_UP)) && (ongoing->upFrameIdStart != 0))
3419020e:	2001      	movs	r0, #1
34190210:	f7fe fe8e 	bl	3418ef30 <GetStatCycleEnd>
34190214:	4603      	mov	r3, r0
34190216:	461a      	mov	r2, r3
34190218:	4b4f      	ldr	r3, [pc, #316]	@ (34190358 <ISP_SVC_Stats_Gather+0x588>)
3419021a:	781b      	ldrb	r3, [r3, #0]
3419021c:	429a      	cmp	r2, r3
3419021e:	d122      	bne.n	34190266 <ISP_SVC_Stats_Gather+0x496>
34190220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34190222:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34190224:	2b00      	cmp	r3, #0
34190226:	d01e      	beq.n	34190266 <ISP_SVC_Stats_Gather+0x496>
  {
    /* Last measure of the up cycle : update the 'last' struct */
    ISP_SVC_StatEngine.last.up = ongoing->up;
34190228:	4b4c      	ldr	r3, [pc, #304]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
3419022a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
3419022c:	1d1c      	adds	r4, r3, #4
3419022e:	4615      	mov	r5, r2
34190230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34190232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34190234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34190236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34190238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3419023a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3419023c:	682b      	ldr	r3, [r5, #0]
3419023e:	6023      	str	r3, [r4, #0]
    ISP_SVC_StatEngine.last.upFrameIdEnd = frameId;
34190240:	4a46      	ldr	r2, [pc, #280]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
34190242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34190244:	6713      	str	r3, [r2, #112]	@ 0x70
    ISP_SVC_StatEngine.last.upFrameIdStart = ongoing->upFrameIdStart;
34190246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34190248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3419024a:	4a44      	ldr	r2, [pc, #272]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
3419024c:	66d3      	str	r3, [r2, #108]	@ 0x6c

    memset(&ongoing->up, 0, sizeof(ongoing->up));
3419024e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34190250:	2234      	movs	r2, #52	@ 0x34
34190252:	2100      	movs	r1, #0
34190254:	4618      	mov	r0, r3
34190256:	f001 fe23 	bl	34191ea0 <memset>
    ongoing->upFrameIdStart = 0;
3419025a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419025c:	2200      	movs	r2, #0
3419025e:	669a      	str	r2, [r3, #104]	@ 0x68
    ongoing->upFrameIdEnd = 0;
34190260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34190262:	2200      	movs	r2, #0
34190264:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  if ((stagePrevious2 == GetStatCycleEnd(ISP_STAT_LOC_DOWN)) && (ongoing->downFrameIdStart != 0))
34190266:	2002      	movs	r0, #2
34190268:	f7fe fe62 	bl	3418ef30 <GetStatCycleEnd>
3419026c:	4603      	mov	r3, r0
3419026e:	461a      	mov	r2, r3
34190270:	4b39      	ldr	r3, [pc, #228]	@ (34190358 <ISP_SVC_Stats_Gather+0x588>)
34190272:	781b      	ldrb	r3, [r3, #0]
34190274:	429a      	cmp	r2, r3
34190276:	d125      	bne.n	341902c4 <ISP_SVC_Stats_Gather+0x4f4>
34190278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419027a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419027c:	2b00      	cmp	r3, #0
3419027e:	d021      	beq.n	341902c4 <ISP_SVC_Stats_Gather+0x4f4>
  {
    /* Last measure of the down cycle : update the 'last' struct */
    ISP_SVC_StatEngine.last.down = ongoing->down;
34190280:	4a36      	ldr	r2, [pc, #216]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
34190282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34190284:	f102 0438 	add.w	r4, r2, #56	@ 0x38
34190288:	f103 0534 	add.w	r5, r3, #52	@ 0x34
3419028c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3419028e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34190290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34190292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34190294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34190296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34190298:	682b      	ldr	r3, [r5, #0]
3419029a:	6023      	str	r3, [r4, #0]
    ISP_SVC_StatEngine.last.downFrameIdEnd = frameId;
3419029c:	4a2f      	ldr	r2, [pc, #188]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
3419029e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
341902a0:	6793      	str	r3, [r2, #120]	@ 0x78
    ISP_SVC_StatEngine.last.downFrameIdStart = ongoing->downFrameIdStart;
341902a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
341902a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341902a6:	4a2d      	ldr	r2, [pc, #180]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
341902a8:	6753      	str	r3, [r2, #116]	@ 0x74

    memset(&ongoing->down, 0, sizeof(ongoing->down));
341902aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
341902ac:	3334      	adds	r3, #52	@ 0x34
341902ae:	2234      	movs	r2, #52	@ 0x34
341902b0:	2100      	movs	r1, #0
341902b2:	4618      	mov	r0, r3
341902b4:	f001 fdf4 	bl	34191ea0 <memset>
    ongoing->downFrameIdStart = 0;
341902b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
341902ba:	2200      	movs	r2, #0
341902bc:	671a      	str	r2, [r3, #112]	@ 0x70
    ongoing->downFrameIdEnd = 0;
341902be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
341902c0:	2200      	movs	r2, #0
341902c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  if (((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
341902c4:	4b25      	ldr	r3, [pc, #148]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
341902c6:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
341902ca:	f003 0304 	and.w	r3, r3, #4
341902ce:	2b00      	cmp	r3, #0
341902d0:	d106      	bne.n	341902e0 <ISP_SVC_Stats_Gather+0x510>
       (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP)) &&
341902d2:	4b22      	ldr	r3, [pc, #136]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
341902d4:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
341902d8:	f003 0304 	and.w	r3, r3, #4
  if (((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
341902dc:	2b00      	cmp	r3, #0
341902de:	d017      	beq.n	34190310 <ISP_SVC_Stats_Gather+0x540>
      (frameId > ISP_SVC_StatEngine.requestAllCounter))
341902e0:	4b1e      	ldr	r3, [pc, #120]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
341902e2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
       (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP)) &&
341902e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
341902e8:	429a      	cmp	r2, r3
341902ea:	d911      	bls.n	34190310 <ISP_SVC_Stats_Gather+0x540>
  {
    /* Stop the special temporary mode "request all stats" when its delay expires */
    ISP_SVC_StatEngine.upRequest &= ~ISP_STAT_TYPE_ALL_TMP;
341902ec:	4b1b      	ldr	r3, [pc, #108]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
341902ee:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
341902f2:	f023 0304 	bic.w	r3, r3, #4
341902f6:	b2da      	uxtb	r2, r3
341902f8:	4b18      	ldr	r3, [pc, #96]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
341902fa:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
    ISP_SVC_StatEngine.downRequest &= ~ISP_STAT_TYPE_ALL_TMP;
341902fe:	4b17      	ldr	r3, [pc, #92]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
34190300:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
34190304:	f023 0304 	bic.w	r3, r3, #4
34190308:	b2da      	uxtb	r2, r3
3419030a:	4b14      	ldr	r3, [pc, #80]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
3419030c:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
  }

  /* Save the two last processed stages and go to next stage */
  stagePrevious2 = stagePrevious1;
34190310:	4b13      	ldr	r3, [pc, #76]	@ (34190360 <ISP_SVC_Stats_Gather+0x590>)
34190312:	781a      	ldrb	r2, [r3, #0]
34190314:	4b10      	ldr	r3, [pc, #64]	@ (34190358 <ISP_SVC_Stats_Gather+0x588>)
34190316:	701a      	strb	r2, [r3, #0]
  stagePrevious1 = ISP_SVC_StatEngine.stage;
34190318:	4b10      	ldr	r3, [pc, #64]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
3419031a:	781a      	ldrb	r2, [r3, #0]
3419031c:	4b10      	ldr	r3, [pc, #64]	@ (34190360 <ISP_SVC_Stats_Gather+0x590>)
3419031e:	701a      	strb	r2, [r3, #0]
  ISP_SVC_StatEngine.stage = GetNextStatStage(ISP_SVC_StatEngine.stage);
34190320:	4b0e      	ldr	r3, [pc, #56]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
34190322:	781b      	ldrb	r3, [r3, #0]
34190324:	4618      	mov	r0, r3
34190326:	f7fe fcdb 	bl	3418ece0 <GetNextStatStage>
3419032a:	4603      	mov	r3, r0
3419032c:	461a      	mov	r2, r3
3419032e:	4b0b      	ldr	r3, [pc, #44]	@ (3419035c <ISP_SVC_Stats_Gather+0x58c>)
34190330:	701a      	strb	r2, [r3, #0]
34190332:	e000      	b.n	34190336 <ISP_SVC_Stats_Gather+0x566>
    return;
34190334:	bf00      	nop
}
34190336:	3748      	adds	r7, #72	@ 0x48
34190338:	46bd      	mov	sp, r7
3419033a:	bdb0      	pop	{r4, r5, r7, pc}
3419033c:	341940e0 	.word	0x341940e0
34190340:	3419411c 	.word	0x3419411c
34190344:	34194128 	.word	0x34194128
34190348:	34194134 	.word	0x34194134
3419034c:	34194140 	.word	0x34194140
34190350:	34193df4 	.word	0x34193df4
34190354:	34193e24 	.word	0x34193e24
34190358:	341c00d5 	.word	0x341c00d5
3419035c:	341c1524 	.word	0x341c1524
34190360:	341c00d6 	.word	0x341c00d6

34190364 <ISP_SVC_Stats_ProcessCallbacks>:
  *         If the conditions are met, call the client registered callbacks
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_Stats_ProcessCallbacks(ISP_HandleTypeDef *hIsp)
{
34190364:	b580      	push	{r7, lr}
34190366:	b088      	sub	sp, #32
34190368:	af00      	add	r7, sp, #0
3419036a:	6078      	str	r0, [r7, #4]
  (void)hIsp; /* unused */
  ISP_SVC_StatStateTypeDef *pLastStat;
  ISP_SVC_StatRegisteredClient *client;
  ISP_StatusTypeDef retcb, ret = ISP_OK;
3419036c:	2300      	movs	r3, #0
3419036e:	77fb      	strb	r3, [r7, #31]

  pLastStat = &ISP_SVC_StatEngine.last;
34190370:	4b2e      	ldr	r3, [pc, #184]	@ (3419042c <ISP_SVC_Stats_ProcessCallbacks+0xc8>)
34190372:	617b      	str	r3, [r7, #20]

  for (uint32_t i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
34190374:	2300      	movs	r3, #0
34190376:	61bb      	str	r3, [r7, #24]
34190378:	e04f      	b.n	3419041a <ISP_SVC_Stats_ProcessCallbacks+0xb6>
  {
    client = &ISP_SVC_StatEngine.client[i];
3419037a:	69ba      	ldr	r2, [r7, #24]
3419037c:	4613      	mov	r3, r2
3419037e:	009b      	lsls	r3, r3, #2
34190380:	4413      	add	r3, r2
34190382:	009b      	lsls	r3, r3, #2
34190384:	33f0      	adds	r3, #240	@ 0xf0
34190386:	4a2a      	ldr	r2, [pc, #168]	@ (34190430 <ISP_SVC_Stats_ProcessCallbacks+0xcc>)
34190388:	4413      	add	r3, r2
3419038a:	3304      	adds	r3, #4
3419038c:	613b      	str	r3, [r7, #16]

    if (client->callback == NULL)
3419038e:	693b      	ldr	r3, [r7, #16]
34190390:	681b      	ldr	r3, [r3, #0]
34190392:	2b00      	cmp	r3, #0
34190394:	d03d      	beq.n	34190412 <ISP_SVC_Stats_ProcessCallbacks+0xae>
      continue;

    /* Check if stats are available for a client, comparing the location and the specified frameId */
    if (((client->location == ISP_STAT_LOC_DOWN) && (client->refFrameId <= pLastStat->downFrameIdStart)) ||
34190396:	693b      	ldr	r3, [r7, #16]
34190398:	7c1b      	ldrb	r3, [r3, #16]
3419039a:	2b02      	cmp	r3, #2
3419039c:	d105      	bne.n	341903aa <ISP_SVC_Stats_ProcessCallbacks+0x46>
3419039e:	693b      	ldr	r3, [r7, #16]
341903a0:	68da      	ldr	r2, [r3, #12]
341903a2:	697b      	ldr	r3, [r7, #20]
341903a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341903a6:	429a      	cmp	r2, r3
341903a8:	d919      	bls.n	341903de <ISP_SVC_Stats_ProcessCallbacks+0x7a>
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
341903aa:	693b      	ldr	r3, [r7, #16]
341903ac:	7c1b      	ldrb	r3, [r3, #16]
    if (((client->location == ISP_STAT_LOC_DOWN) && (client->refFrameId <= pLastStat->downFrameIdStart)) ||
341903ae:	2b01      	cmp	r3, #1
341903b0:	d105      	bne.n	341903be <ISP_SVC_Stats_ProcessCallbacks+0x5a>
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
341903b2:	693b      	ldr	r3, [r7, #16]
341903b4:	68da      	ldr	r2, [r3, #12]
341903b6:	697b      	ldr	r3, [r7, #20]
341903b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
341903ba:	429a      	cmp	r2, r3
341903bc:	d90f      	bls.n	341903de <ISP_SVC_Stats_ProcessCallbacks+0x7a>
        ((client->location == ISP_STAT_LOC_UP_AND_DOWN) && (client->refFrameId <= pLastStat->upFrameIdStart) && (client->refFrameId <= pLastStat->downFrameIdStart)))
341903be:	693b      	ldr	r3, [r7, #16]
341903c0:	7c1b      	ldrb	r3, [r3, #16]
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
341903c2:	2b03      	cmp	r3, #3
341903c4:	d126      	bne.n	34190414 <ISP_SVC_Stats_ProcessCallbacks+0xb0>
        ((client->location == ISP_STAT_LOC_UP_AND_DOWN) && (client->refFrameId <= pLastStat->upFrameIdStart) && (client->refFrameId <= pLastStat->downFrameIdStart)))
341903c6:	693b      	ldr	r3, [r7, #16]
341903c8:	68da      	ldr	r2, [r3, #12]
341903ca:	697b      	ldr	r3, [r7, #20]
341903cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
341903ce:	429a      	cmp	r2, r3
341903d0:	d820      	bhi.n	34190414 <ISP_SVC_Stats_ProcessCallbacks+0xb0>
341903d2:	693b      	ldr	r3, [r7, #16]
341903d4:	68da      	ldr	r2, [r3, #12]
341903d6:	697b      	ldr	r3, [r7, #20]
341903d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341903da:	429a      	cmp	r2, r3
341903dc:	d81a      	bhi.n	34190414 <ISP_SVC_Stats_ProcessCallbacks+0xb0>
    {
      /* Copy the stats into the client buffer */
      *(client->pStats) = *pLastStat;
341903de:	693b      	ldr	r3, [r7, #16]
341903e0:	689a      	ldr	r2, [r3, #8]
341903e2:	697b      	ldr	r3, [r7, #20]
341903e4:	4610      	mov	r0, r2
341903e6:	4619      	mov	r1, r3
341903e8:	2378      	movs	r3, #120	@ 0x78
341903ea:	461a      	mov	r2, r3
341903ec:	f001 fdd3 	bl	34191f96 <memcpy>

      /* Call its callback */
      retcb = client->callback(client->pAlgo);
341903f0:	693b      	ldr	r3, [r7, #16]
341903f2:	681b      	ldr	r3, [r3, #0]
341903f4:	693a      	ldr	r2, [r7, #16]
341903f6:	6852      	ldr	r2, [r2, #4]
341903f8:	4610      	mov	r0, r2
341903fa:	4798      	blx	r3
341903fc:	4603      	mov	r3, r0
341903fe:	73fb      	strb	r3, [r7, #15]
      if (retcb != ISP_OK)
34190400:	7bfb      	ldrb	r3, [r7, #15]
34190402:	2b00      	cmp	r3, #0
34190404:	d001      	beq.n	3419040a <ISP_SVC_Stats_ProcessCallbacks+0xa6>
      {
        ret = retcb;
34190406:	7bfb      	ldrb	r3, [r7, #15]
34190408:	77fb      	strb	r3, [r7, #31]
      }

      /* Remove the client from the registered list */
      client->callback = NULL;
3419040a:	693b      	ldr	r3, [r7, #16]
3419040c:	2200      	movs	r2, #0
3419040e:	601a      	str	r2, [r3, #0]
34190410:	e000      	b.n	34190414 <ISP_SVC_Stats_ProcessCallbacks+0xb0>
      continue;
34190412:	bf00      	nop
  for (uint32_t i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
34190414:	69bb      	ldr	r3, [r7, #24]
34190416:	3301      	adds	r3, #1
34190418:	61bb      	str	r3, [r7, #24]
3419041a:	69bb      	ldr	r3, [r7, #24]
3419041c:	2b04      	cmp	r3, #4
3419041e:	d9ac      	bls.n	3419037a <ISP_SVC_Stats_ProcessCallbacks+0x16>
    }
  }

  return ret;
34190420:	7ffb      	ldrb	r3, [r7, #31]
}
34190422:	4618      	mov	r0, r3
34190424:	3720      	adds	r7, #32
34190426:	46bd      	mov	sp, r7
34190428:	bd80      	pop	{r7, pc}
3419042a:	bf00      	nop
3419042c:	341c1528 	.word	0x341c1528
34190430:	341c1524 	.word	0x341c1524

34190434 <ISP_SVC_Stats_GetNext>:
  * @param  frameDelay: number of frames to wait before considering the stats as valid
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_Stats_GetNext(ISP_HandleTypeDef *hIsp, ISP_stat_ready_cb callback, ISP_AlgoTypeDef *pAlgo, ISP_SVC_StatStateTypeDef *pStats,
                                        ISP_SVC_StatLocation location, ISP_SVC_StatType type, uint32_t frameDelay)
{
34190434:	b580      	push	{r7, lr}
34190436:	b086      	sub	sp, #24
34190438:	af00      	add	r7, sp, #0
3419043a:	60f8      	str	r0, [r7, #12]
3419043c:	60b9      	str	r1, [r7, #8]
3419043e:	607a      	str	r2, [r7, #4]
34190440:	603b      	str	r3, [r7, #0]
  uint32_t i, refFrameId;

  /* Check handle validity */
  if ((hIsp == NULL) || (pStats == NULL))
34190442:	68fb      	ldr	r3, [r7, #12]
34190444:	2b00      	cmp	r3, #0
34190446:	d002      	beq.n	3419044e <ISP_SVC_Stats_GetNext+0x1a>
34190448:	683b      	ldr	r3, [r7, #0]
3419044a:	2b00      	cmp	r3, #0
3419044c:	d101      	bne.n	34190452 <ISP_SVC_Stats_GetNext+0x1e>
  {
    return ISP_ERR_EINVAL;
3419044e:	2301      	movs	r3, #1
34190450:	e08f      	b.n	34190572 <ISP_SVC_Stats_GetNext+0x13e>
  }

  refFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp) + frameDelay;
34190452:	68f8      	ldr	r0, [r7, #12]
34190454:	f7ff fbe9 	bl	3418fc2a <ISP_SVC_Misc_GetMainFrameId>
34190458:	4602      	mov	r2, r0
3419045a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419045c:	4413      	add	r3, r2
3419045e:	613b      	str	r3, [r7, #16]

  /* Register the callback */
  for (i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
34190460:	2300      	movs	r3, #0
34190462:	617b      	str	r3, [r7, #20]
34190464:	e00d      	b.n	34190482 <ISP_SVC_Stats_GetNext+0x4e>
  {
    if (ISP_SVC_StatEngine.client[i].callback == NULL)
34190466:	4945      	ldr	r1, [pc, #276]	@ (3419057c <ISP_SVC_Stats_GetNext+0x148>)
34190468:	697a      	ldr	r2, [r7, #20]
3419046a:	4613      	mov	r3, r2
3419046c:	009b      	lsls	r3, r3, #2
3419046e:	4413      	add	r3, r2
34190470:	009b      	lsls	r3, r3, #2
34190472:	440b      	add	r3, r1
34190474:	33f4      	adds	r3, #244	@ 0xf4
34190476:	681b      	ldr	r3, [r3, #0]
34190478:	2b00      	cmp	r3, #0
3419047a:	d006      	beq.n	3419048a <ISP_SVC_Stats_GetNext+0x56>
  for (i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
3419047c:	697b      	ldr	r3, [r7, #20]
3419047e:	3301      	adds	r3, #1
34190480:	617b      	str	r3, [r7, #20]
34190482:	697b      	ldr	r3, [r7, #20]
34190484:	2b04      	cmp	r3, #4
34190486:	d9ee      	bls.n	34190466 <ISP_SVC_Stats_GetNext+0x32>
34190488:	e000      	b.n	3419048c <ISP_SVC_Stats_GetNext+0x58>
      break;
3419048a:	bf00      	nop
  }

  if (i == ISP_SVC_STAT_MAX_CB)
3419048c:	697b      	ldr	r3, [r7, #20]
3419048e:	2b05      	cmp	r3, #5
34190490:	d101      	bne.n	34190496 <ISP_SVC_Stats_GetNext+0x62>
  {
    /* Too much callback registered */
    return ISP_ERR_STAT_MAXCLIENTS;
34190492:	23ac      	movs	r3, #172	@ 0xac
34190494:	e06d      	b.n	34190572 <ISP_SVC_Stats_GetNext+0x13e>
  }

  /* Add this requested stat to the list of requested stats */
  if (location & ISP_STAT_LOC_UP)
34190496:	f897 3020 	ldrb.w	r3, [r7, #32]
3419049a:	f003 0301 	and.w	r3, r3, #1
3419049e:	2b00      	cmp	r3, #0
341904a0:	d009      	beq.n	341904b6 <ISP_SVC_Stats_GetNext+0x82>
  {
    ISP_SVC_StatEngine.upRequest |= type;
341904a2:	4b36      	ldr	r3, [pc, #216]	@ (3419057c <ISP_SVC_Stats_GetNext+0x148>)
341904a4:	f893 2158 	ldrb.w	r2, [r3, #344]	@ 0x158
341904a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
341904ac:	4313      	orrs	r3, r2
341904ae:	b2da      	uxtb	r2, r3
341904b0:	4b32      	ldr	r3, [pc, #200]	@ (3419057c <ISP_SVC_Stats_GetNext+0x148>)
341904b2:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
  }
  if (location & ISP_STAT_LOC_DOWN)
341904b6:	f897 3020 	ldrb.w	r3, [r7, #32]
341904ba:	f003 0302 	and.w	r3, r3, #2
341904be:	2b00      	cmp	r3, #0
341904c0:	d009      	beq.n	341904d6 <ISP_SVC_Stats_GetNext+0xa2>
  {
    ISP_SVC_StatEngine.downRequest |= type;
341904c2:	4b2e      	ldr	r3, [pc, #184]	@ (3419057c <ISP_SVC_Stats_GetNext+0x148>)
341904c4:	f893 2159 	ldrb.w	r2, [r3, #345]	@ 0x159
341904c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
341904cc:	4313      	orrs	r3, r2
341904ce:	b2da      	uxtb	r2, r3
341904d0:	4b2a      	ldr	r3, [pc, #168]	@ (3419057c <ISP_SVC_Stats_GetNext+0x148>)
341904d2:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
  }

  if (type == ISP_STAT_TYPE_ALL_TMP)
341904d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
341904da:	2b04      	cmp	r3, #4
341904dc:	d107      	bne.n	341904ee <ISP_SVC_Stats_GetNext+0xba>
  {
    /* Special case: request all stats for a short time (3 cycle) */
    ISP_SVC_StatEngine.requestAllCounter = ISP_SVC_Misc_GetMainFrameId(hIsp) + 3 * ISP_STAT_CFG_CYCLE_SIZE;
341904de:	68f8      	ldr	r0, [r7, #12]
341904e0:	f7ff fba3 	bl	3418fc2a <ISP_SVC_Misc_GetMainFrameId>
341904e4:	4603      	mov	r3, r0
341904e6:	331e      	adds	r3, #30
341904e8:	4a24      	ldr	r2, [pc, #144]	@ (3419057c <ISP_SVC_Stats_GetNext+0x148>)
341904ea:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  }

  /* Register client */
  ISP_SVC_StatEngine.client[i].callback = callback;
341904ee:	4923      	ldr	r1, [pc, #140]	@ (3419057c <ISP_SVC_Stats_GetNext+0x148>)
341904f0:	697a      	ldr	r2, [r7, #20]
341904f2:	4613      	mov	r3, r2
341904f4:	009b      	lsls	r3, r3, #2
341904f6:	4413      	add	r3, r2
341904f8:	009b      	lsls	r3, r3, #2
341904fa:	440b      	add	r3, r1
341904fc:	33f4      	adds	r3, #244	@ 0xf4
341904fe:	68ba      	ldr	r2, [r7, #8]
34190500:	601a      	str	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].pAlgo = pAlgo;
34190502:	491e      	ldr	r1, [pc, #120]	@ (3419057c <ISP_SVC_Stats_GetNext+0x148>)
34190504:	697a      	ldr	r2, [r7, #20]
34190506:	4613      	mov	r3, r2
34190508:	009b      	lsls	r3, r3, #2
3419050a:	4413      	add	r3, r2
3419050c:	009b      	lsls	r3, r3, #2
3419050e:	440b      	add	r3, r1
34190510:	33f8      	adds	r3, #248	@ 0xf8
34190512:	687a      	ldr	r2, [r7, #4]
34190514:	601a      	str	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].pStats = pStats;
34190516:	4919      	ldr	r1, [pc, #100]	@ (3419057c <ISP_SVC_Stats_GetNext+0x148>)
34190518:	697a      	ldr	r2, [r7, #20]
3419051a:	4613      	mov	r3, r2
3419051c:	009b      	lsls	r3, r3, #2
3419051e:	4413      	add	r3, r2
34190520:	009b      	lsls	r3, r3, #2
34190522:	440b      	add	r3, r1
34190524:	33fc      	adds	r3, #252	@ 0xfc
34190526:	683a      	ldr	r2, [r7, #0]
34190528:	601a      	str	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].location = location;
3419052a:	4914      	ldr	r1, [pc, #80]	@ (3419057c <ISP_SVC_Stats_GetNext+0x148>)
3419052c:	697a      	ldr	r2, [r7, #20]
3419052e:	4613      	mov	r3, r2
34190530:	009b      	lsls	r3, r3, #2
34190532:	4413      	add	r3, r2
34190534:	009b      	lsls	r3, r3, #2
34190536:	440b      	add	r3, r1
34190538:	f503 7382 	add.w	r3, r3, #260	@ 0x104
3419053c:	f897 2020 	ldrb.w	r2, [r7, #32]
34190540:	701a      	strb	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].type = type;
34190542:	490e      	ldr	r1, [pc, #56]	@ (3419057c <ISP_SVC_Stats_GetNext+0x148>)
34190544:	697a      	ldr	r2, [r7, #20]
34190546:	4613      	mov	r3, r2
34190548:	009b      	lsls	r3, r3, #2
3419054a:	4413      	add	r3, r2
3419054c:	009b      	lsls	r3, r3, #2
3419054e:	440b      	add	r3, r1
34190550:	f203 1305 	addw	r3, r3, #261	@ 0x105
34190554:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
34190558:	701a      	strb	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].refFrameId = refFrameId;
3419055a:	4908      	ldr	r1, [pc, #32]	@ (3419057c <ISP_SVC_Stats_GetNext+0x148>)
3419055c:	697a      	ldr	r2, [r7, #20]
3419055e:	4613      	mov	r3, r2
34190560:	009b      	lsls	r3, r3, #2
34190562:	4413      	add	r3, r2
34190564:	009b      	lsls	r3, r3, #2
34190566:	440b      	add	r3, r1
34190568:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3419056c:	693a      	ldr	r2, [r7, #16]
3419056e:	601a      	str	r2, [r3, #0]

  return ISP_OK;
34190570:	2300      	movs	r3, #0
}
34190572:	4618      	mov	r0, r3
34190574:	3718      	adds	r7, #24
34190576:	46bd      	mov	sp, r7
34190578:	bd80      	pop	{r7, pc}
3419057a:	bf00      	nop
3419057c:	341c1524 	.word	0x341c1524

34190580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
34190580:	b580      	push	{r7, lr}
34190582:	b084      	sub	sp, #16
34190584:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34190586:	4b3f      	ldr	r3, [pc, #252]	@ (34190684 <main+0x104>)
34190588:	695b      	ldr	r3, [r3, #20]
3419058a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3419058e:	2b00      	cmp	r3, #0
34190590:	d11b      	bne.n	341905ca <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
34190592:	f3bf 8f4f 	dsb	sy
}
34190596:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34190598:	f3bf 8f6f 	isb	sy
}
3419059c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
3419059e:	4b39      	ldr	r3, [pc, #228]	@ (34190684 <main+0x104>)
341905a0:	2200      	movs	r2, #0
341905a2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
341905a6:	f3bf 8f4f 	dsb	sy
}
341905aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
341905ac:	f3bf 8f6f 	isb	sy
}
341905b0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
341905b2:	4b34      	ldr	r3, [pc, #208]	@ (34190684 <main+0x104>)
341905b4:	695b      	ldr	r3, [r3, #20]
341905b6:	4a33      	ldr	r2, [pc, #204]	@ (34190684 <main+0x104>)
341905b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
341905bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
341905be:	f3bf 8f4f 	dsb	sy
}
341905c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
341905c4:	f3bf 8f6f 	isb	sy
}
341905c8:	e000      	b.n	341905cc <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
341905ca:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
341905cc:	4b2d      	ldr	r3, [pc, #180]	@ (34190684 <main+0x104>)
341905ce:	695b      	ldr	r3, [r3, #20]
341905d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
341905d4:	2b00      	cmp	r3, #0
341905d6:	d138      	bne.n	3419064a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
341905d8:	4b2a      	ldr	r3, [pc, #168]	@ (34190684 <main+0x104>)
341905da:	2200      	movs	r2, #0
341905dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
341905e0:	f3bf 8f4f 	dsb	sy
}
341905e4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
341905e6:	4b27      	ldr	r3, [pc, #156]	@ (34190684 <main+0x104>)
341905e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341905ec:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
341905ee:	68fb      	ldr	r3, [r7, #12]
341905f0:	0b5b      	lsrs	r3, r3, #13
341905f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
341905f6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
341905f8:	68fb      	ldr	r3, [r7, #12]
341905fa:	08db      	lsrs	r3, r3, #3
341905fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
34190600:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
34190602:	68bb      	ldr	r3, [r7, #8]
34190604:	015a      	lsls	r2, r3, #5
34190606:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
3419060a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
3419060c:	687a      	ldr	r2, [r7, #4]
3419060e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
34190610:	491c      	ldr	r1, [pc, #112]	@ (34190684 <main+0x104>)
34190612:	4313      	orrs	r3, r2
34190614:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
34190618:	687b      	ldr	r3, [r7, #4]
3419061a:	1e5a      	subs	r2, r3, #1
3419061c:	607a      	str	r2, [r7, #4]
3419061e:	2b00      	cmp	r3, #0
34190620:	d1ef      	bne.n	34190602 <main+0x82>
    } while(sets-- != 0U);
34190622:	68bb      	ldr	r3, [r7, #8]
34190624:	1e5a      	subs	r2, r3, #1
34190626:	60ba      	str	r2, [r7, #8]
34190628:	2b00      	cmp	r3, #0
3419062a:	d1e5      	bne.n	341905f8 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
3419062c:	f3bf 8f4f 	dsb	sy
}
34190630:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
34190632:	4b14      	ldr	r3, [pc, #80]	@ (34190684 <main+0x104>)
34190634:	695b      	ldr	r3, [r3, #20]
34190636:	4a13      	ldr	r2, [pc, #76]	@ (34190684 <main+0x104>)
34190638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3419063c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3419063e:	f3bf 8f4f 	dsb	sy
}
34190642:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34190644:	f3bf 8f6f 	isb	sy
}
34190648:	e000      	b.n	3419064c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
3419064a:	bf00      	nop
	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
3419064c:	f7f2 f998 	bl	34182980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
34190650:	f000 f81c 	bl	3419068c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_LED_Init(LED_GREEN);
34190654:	2000      	movs	r0, #0
34190656:	f7f1 f995 	bl	34181984 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
3419065a:	2001      	movs	r0, #1
3419065c:	f7f1 f992 	bl	34181984 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DCMIPP_Init();
34190660:	f000 f8b8 	bl	341907d4 <MX_DCMIPP_Init>
  /* USER CODE BEGIN 2 */
  CAMERA_MODULE_START();
34190664:	f000 fb0c 	bl	34190c80 <CAMERA_MODULE_START>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_LED_Toggle(LED_GREEN);
34190668:	2000      	movs	r0, #0
3419066a:	f7f1 f9f9 	bl	34181a60 <BSP_LED_Toggle>
	  if (ISP_BackgroundProcess(&hcamera_isp) != ISP_OK)
3419066e:	4806      	ldr	r0, [pc, #24]	@ (34190688 <main+0x108>)
34190670:	f7fe f99a 	bl	3418e9a8 <ISP_BackgroundProcess>
34190674:	4603      	mov	r3, r0
34190676:	2b00      	cmp	r3, #0
34190678:	d0f6      	beq.n	34190668 <main+0xe8>
	  {
	    BSP_LED_Toggle(LED_RED);
3419067a:	2001      	movs	r0, #1
3419067c:	f7f1 f9f0 	bl	34181a60 <BSP_LED_Toggle>
	  BSP_LED_Toggle(LED_GREEN);
34190680:	e7f2      	b.n	34190668 <main+0xe8>
34190682:	bf00      	nop
34190684:	e000ed00 	.word	0xe000ed00
34190688:	341c1738 	.word	0x341c1738

3419068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
3419068c:	b580      	push	{r7, lr}
3419068e:	b0b6      	sub	sp, #216	@ 0xd8
34190690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34190692:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34190696:	2298      	movs	r2, #152	@ 0x98
34190698:	2100      	movs	r1, #0
3419069a:	4618      	mov	r0, r3
3419069c:	f001 fc00 	bl	34191ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
341906a0:	463b      	mov	r3, r7
341906a2:	2240      	movs	r2, #64	@ 0x40
341906a4:	2100      	movs	r1, #0
341906a6:	4618      	mov	r0, r3
341906a8:	f001 fbfa 	bl	34191ea0 <memset>

  /** Configure the System Power Supply
  */
  if (HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY) != HAL_OK)
341906ac:	2000      	movs	r0, #0
341906ae:	f7f7 fc17 	bl	34187ee0 <HAL_PWREx_ConfigSupply>
341906b2:	4603      	mov	r3, r0
341906b4:	2b00      	cmp	r3, #0
341906b6:	d001      	beq.n	341906bc <SystemClock_Config+0x30>
  {
    Error_Handler();
341906b8:	f000 faf2 	bl	34190ca0 <Error_Handler>
  }

  /* Enable HSI */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
341906bc:	2302      	movs	r3, #2
341906be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
341906c0:	2308      	movs	r3, #8
341906c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
341906c4:	2300      	movs	r3, #0
341906c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
341906c8:	2300      	movs	r3, #0
341906ca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
341906cc:	2300      	movs	r3, #0
341906ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
341906d0:	2300      	movs	r3, #0
341906d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
341906d6:	2300      	movs	r3, #0
341906d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
341906dc:	2300      	movs	r3, #0
341906de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
341906e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
341906e6:	4618      	mov	r0, r3
341906e8:	f7f7 feea 	bl	341884c0 <HAL_RCC_OscConfig>
341906ec:	4603      	mov	r3, r0
341906ee:	2b00      	cmp	r3, #0
341906f0:	d001      	beq.n	341906f6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
341906f2:	f000 fad5 	bl	34190ca0 <Error_Handler>
  }

  /** Get current CPU/System buses clocks configuration and if necessary switch
 to intermediate HSI clock to ensure target clock can be set
  */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct);
341906f6:	463b      	mov	r3, r7
341906f8:	4618      	mov	r0, r3
341906fa:	f7f8 fdd7 	bl	341892ac <HAL_RCC_GetClockConfig>
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
341906fe:	687b      	ldr	r3, [r7, #4]
34190700:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34190704:	d003      	beq.n	3419070e <SystemClock_Config+0x82>
     (RCC_ClkInitStruct.SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11))
34190706:	68bb      	ldr	r3, [r7, #8]
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34190708:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3419070c:	d10e      	bne.n	3419072c <SystemClock_Config+0xa0>
  {
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK);
3419070e:	2303      	movs	r3, #3
34190710:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
34190712:	2300      	movs	r3, #0
34190714:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
34190716:	2300      	movs	r3, #0
34190718:	60bb      	str	r3, [r7, #8]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
3419071a:	463b      	mov	r3, r7
3419071c:	4618      	mov	r0, r3
3419071e:	f7f8 faaf 	bl	34188c80 <HAL_RCC_ClockConfig>
34190722:	4603      	mov	r3, r0
34190724:	2b00      	cmp	r3, #0
34190726:	d001      	beq.n	3419072c <SystemClock_Config+0xa0>
    {
      /* Initialization Error */
      Error_Handler();
34190728:	f000 faba 	bl	34190ca0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
3419072c:	2300      	movs	r3, #0
3419072e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34190730:	2302      	movs	r3, #2
34190732:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34190734:	2300      	movs	r3, #0
34190736:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL1.PLLM = 4;
34190738:	2304      	movs	r3, #4
3419073a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL1.PLLN = 75;
3419073c:	234b      	movs	r3, #75	@ 0x4b
3419073e:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34190740:	2300      	movs	r3, #0
34190742:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34190744:	2301      	movs	r3, #1
34190746:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34190748:	2301      	movs	r3, #1
3419074a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
3419074e:	2300      	movs	r3, #0
34190750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34190754:	2300      	movs	r3, #0
34190756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
3419075a:	2300      	movs	r3, #0
3419075c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34190760:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34190764:	4618      	mov	r0, r3
34190766:	f7f7 feab 	bl	341884c0 <HAL_RCC_OscConfig>
3419076a:	4603      	mov	r3, r0
3419076c:	2b00      	cmp	r3, #0
3419076e:	d001      	beq.n	34190774 <SystemClock_Config+0xe8>
  {
    Error_Handler();
34190770:	f000 fa96 	bl	34190ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_CPUCLK|RCC_CLOCKTYPE_HCLK
34190774:	237f      	movs	r3, #127	@ 0x7f
34190776:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2|RCC_CLOCKTYPE_PCLK5
                              |RCC_CLOCKTYPE_PCLK4;
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34190778:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
3419077c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
3419077e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34190782:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34190784:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34190788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
3419078a:	2300      	movs	r3, #0
3419078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
3419078e:	2300      	movs	r3, #0
34190790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34190792:	2300      	movs	r3, #0
34190794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34190796:	2300      	movs	r3, #0
34190798:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.IC1Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
3419079a:	2300      	movs	r3, #0
3419079c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 2;
3419079e:	2302      	movs	r3, #2
341907a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
341907a2:	2300      	movs	r3, #0
341907a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 3;
341907a6:	2303      	movs	r3, #3
341907a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
341907aa:	2300      	movs	r3, #0
341907ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 4;
341907ae:	2304      	movs	r3, #4
341907b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
341907b2:	2300      	movs	r3, #0
341907b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 3;
341907b6:	2303      	movs	r3, #3
341907b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
341907ba:	463b      	mov	r3, r7
341907bc:	4618      	mov	r0, r3
341907be:	f7f8 fa5f 	bl	34188c80 <HAL_RCC_ClockConfig>
341907c2:	4603      	mov	r3, r0
341907c4:	2b00      	cmp	r3, #0
341907c6:	d001      	beq.n	341907cc <SystemClock_Config+0x140>
  {
    Error_Handler();
341907c8:	f000 fa6a 	bl	34190ca0 <Error_Handler>
  }
}
341907cc:	bf00      	nop
341907ce:	37d8      	adds	r7, #216	@ 0xd8
341907d0:	46bd      	mov	sp, r7
341907d2:	bd80      	pop	{r7, pc}

341907d4 <MX_DCMIPP_Init>:
  * @brief DCMIPP Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMIPP_Init(void)
{
341907d4:	b580      	push	{r7, lr}
341907d6:	b090      	sub	sp, #64	@ 0x40
341907d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DCMIPP_Init 0 */

  /* USER CODE END DCMIPP_Init 0 */

  DCMIPP_CSI_PIPE_ConfTypeDef pCSI_PipeConfig = {0};
341907da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
341907de:	2200      	movs	r2, #0
341907e0:	601a      	str	r2, [r3, #0]
341907e2:	605a      	str	r2, [r3, #4]
341907e4:	609a      	str	r2, [r3, #8]
  DCMIPP_CSI_ConfTypeDef pCSI_Config = {0};
341907e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
341907ea:	2200      	movs	r2, #0
341907ec:	601a      	str	r2, [r3, #0]
341907ee:	605a      	str	r2, [r3, #4]
341907f0:	609a      	str	r2, [r3, #8]
  DCMIPP_PipeConfTypeDef pPipeConfig = {0};
341907f2:	f107 031c 	add.w	r3, r7, #28
341907f6:	2200      	movs	r2, #0
341907f8:	601a      	str	r2, [r3, #0]
341907fa:	605a      	str	r2, [r3, #4]
341907fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN DCMIPP_Init 1 */
  DCMIPP_DownsizeTypeDef DonwsizeConf ={0};
341907fe:	1d3b      	adds	r3, r7, #4
34190800:	2200      	movs	r2, #0
34190802:	601a      	str	r2, [r3, #0]
34190804:	605a      	str	r2, [r3, #4]
34190806:	609a      	str	r2, [r3, #8]
34190808:	60da      	str	r2, [r3, #12]
3419080a:	611a      	str	r2, [r3, #16]
3419080c:	615a      	str	r2, [r3, #20]
  /* USER CODE END DCMIPP_Init 1 */
  hdcmipp.Instance = DCMIPP;
3419080e:	4b38      	ldr	r3, [pc, #224]	@ (341908f0 <MX_DCMIPP_Init+0x11c>)
34190810:	4a38      	ldr	r2, [pc, #224]	@ (341908f4 <MX_DCMIPP_Init+0x120>)
34190812:	601a      	str	r2, [r3, #0]
  if (HAL_DCMIPP_Init(&hdcmipp) != HAL_OK)
34190814:	4836      	ldr	r0, [pc, #216]	@ (341908f0 <MX_DCMIPP_Init+0x11c>)
34190816:	f7f2 fa53 	bl	34182cc0 <HAL_DCMIPP_Init>
3419081a:	4603      	mov	r3, r0
3419081c:	2b00      	cmp	r3, #0
3419081e:	d001      	beq.n	34190824 <MX_DCMIPP_Init+0x50>
  {
    Error_Handler();
34190820:	f000 fa3e 	bl	34190ca0 <Error_Handler>
  }

  /** Pipe 1 Config
  */
  pCSI_PipeConfig.DataTypeMode = DCMIPP_DTMODE_DTIDA;
34190824:	2300      	movs	r3, #0
34190826:	637b      	str	r3, [r7, #52]	@ 0x34
  pCSI_PipeConfig.DataTypeIDA = DCMIPP_DT_RAW10;
34190828:	232b      	movs	r3, #43	@ 0x2b
3419082a:	63bb      	str	r3, [r7, #56]	@ 0x38
  pCSI_PipeConfig.DataTypeIDB = DCMIPP_DT_RAW10;
3419082c:	232b      	movs	r3, #43	@ 0x2b
3419082e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_DCMIPP_CSI_PIPE_SetConfig(&hdcmipp, DCMIPP_PIPE1, &pCSI_PipeConfig) != HAL_OK)
34190830:	f107 0334 	add.w	r3, r7, #52	@ 0x34
34190834:	461a      	mov	r2, r3
34190836:	2101      	movs	r1, #1
34190838:	482d      	ldr	r0, [pc, #180]	@ (341908f0 <MX_DCMIPP_Init+0x11c>)
3419083a:	f7f2 fbd3 	bl	34182fe4 <HAL_DCMIPP_CSI_PIPE_SetConfig>
3419083e:	4603      	mov	r3, r0
34190840:	2b00      	cmp	r3, #0
34190842:	d001      	beq.n	34190848 <MX_DCMIPP_Init+0x74>
  {
    Error_Handler();
34190844:	f000 fa2c 	bl	34190ca0 <Error_Handler>
  }
  pCSI_Config.PHYBitrate = DCMIPP_CSI_PHY_BT_1600;
34190848:	232c      	movs	r3, #44	@ 0x2c
3419084a:	633b      	str	r3, [r7, #48]	@ 0x30
  pCSI_Config.DataLaneMapping = DCMIPP_CSI_PHYSICAL_DATA_LANES;
3419084c:	2301      	movs	r3, #1
3419084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pCSI_Config.NumberOfLanes = DCMIPP_CSI_TWO_DATA_LANES;
34190850:	f44f 7300 	mov.w	r3, #512	@ 0x200
34190854:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_DCMIPP_CSI_SetConfig(&hdcmipp, &pCSI_Config);
34190856:	f107 0328 	add.w	r3, r7, #40	@ 0x28
3419085a:	4619      	mov	r1, r3
3419085c:	4824      	ldr	r0, [pc, #144]	@ (341908f0 <MX_DCMIPP_Init+0x11c>)
3419085e:	f7f2 fa5d 	bl	34182d1c <HAL_DCMIPP_CSI_SetConfig>
  pPipeConfig.FrameRate = DCMIPP_FRAME_RATE_ALL;
34190862:	2300      	movs	r3, #0
34190864:	61fb      	str	r3, [r7, #28]
  pPipeConfig.PixelPipePitch = 1600;
34190866:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
3419086a:	623b      	str	r3, [r7, #32]
  pPipeConfig.PixelPackerFormat = DCMIPP_PIXEL_PACKER_FORMAT_RGB565_1;
3419086c:	2301      	movs	r3, #1
3419086e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_DCMIPP_PIPE_SetConfig(&hdcmipp, DCMIPP_PIPE1, &pPipeConfig) != HAL_OK)
34190870:	f107 031c 	add.w	r3, r7, #28
34190874:	461a      	mov	r2, r3
34190876:	2101      	movs	r1, #1
34190878:	481d      	ldr	r0, [pc, #116]	@ (341908f0 <MX_DCMIPP_Init+0x11c>)
3419087a:	f7f2 fc95 	bl	341831a8 <HAL_DCMIPP_PIPE_SetConfig>
3419087e:	4603      	mov	r3, r0
34190880:	2b00      	cmp	r3, #0
34190882:	d001      	beq.n	34190888 <MX_DCMIPP_Init+0xb4>
  {
    Error_Handler();
34190884:	f000 fa0c 	bl	34190ca0 <Error_Handler>
  }
  if (HAL_DCMIPP_CSI_SetVCConfig(&hdcmipp,DCMIPP_VIRTUAL_CHANNEL0, DCMIPP_CSI_DT_BPP10) != HAL_OK)
34190888:	2203      	movs	r2, #3
3419088a:	2100      	movs	r1, #0
3419088c:	4818      	ldr	r0, [pc, #96]	@ (341908f0 <MX_DCMIPP_Init+0x11c>)
3419088e:	f7f2 fc49 	bl	34183124 <HAL_DCMIPP_CSI_SetVCConfig>
34190892:	4603      	mov	r3, r0
34190894:	2b00      	cmp	r3, #0
34190896:	d001      	beq.n	3419089c <MX_DCMIPP_Init+0xc8>
  {
    Error_Handler();
34190898:	f000 fa02 	bl	34190ca0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMIPP_Init 2 */
  /* Configure the downsize */
  DonwsizeConf.HRatio      = 25656;
3419089c:	f246 4338 	movw	r3, #25656	@ 0x6438
341908a0:	613b      	str	r3, [r7, #16]
  DonwsizeConf.VRatio      = 33161;
341908a2:	f248 1389 	movw	r3, #33161	@ 0x8189
341908a6:	60fb      	str	r3, [r7, #12]
  DonwsizeConf.HSize       = 800;
341908a8:	f44f 7348 	mov.w	r3, #800	@ 0x320
341908ac:	60bb      	str	r3, [r7, #8]
  DonwsizeConf.VSize       = 480;
341908ae:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
341908b2:	607b      	str	r3, [r7, #4]
  DonwsizeConf.HDivFactor  = 316;
341908b4:	f44f 739e 	mov.w	r3, #316	@ 0x13c
341908b8:	61bb      	str	r3, [r7, #24]
  DonwsizeConf.VDivFactor  = 253;
341908ba:	23fd      	movs	r3, #253	@ 0xfd
341908bc:	617b      	str	r3, [r7, #20]

  if(HAL_DCMIPP_PIPE_SetDownsizeConfig(&hdcmipp, DCMIPP_PIPE1, &DonwsizeConf) != HAL_OK)
341908be:	1d3b      	adds	r3, r7, #4
341908c0:	461a      	mov	r2, r3
341908c2:	2101      	movs	r1, #1
341908c4:	480a      	ldr	r0, [pc, #40]	@ (341908f0 <MX_DCMIPP_Init+0x11c>)
341908c6:	f7f3 fc44 	bl	34184152 <HAL_DCMIPP_PIPE_SetDownsizeConfig>
341908ca:	4603      	mov	r3, r0
341908cc:	2b00      	cmp	r3, #0
341908ce:	d001      	beq.n	341908d4 <MX_DCMIPP_Init+0x100>
  {
    Error_Handler();
341908d0:	f000 f9e6 	bl	34190ca0 <Error_Handler>
  }
  if(HAL_DCMIPP_PIPE_EnableDownsize(&hdcmipp, DCMIPP_PIPE1) != HAL_OK)
341908d4:	2101      	movs	r1, #1
341908d6:	4806      	ldr	r0, [pc, #24]	@ (341908f0 <MX_DCMIPP_Init+0x11c>)
341908d8:	f7f3 fcb9 	bl	3418424e <HAL_DCMIPP_PIPE_EnableDownsize>
341908dc:	4603      	mov	r3, r0
341908de:	2b00      	cmp	r3, #0
341908e0:	d001      	beq.n	341908e6 <MX_DCMIPP_Init+0x112>
  {
    Error_Handler();
341908e2:	f000 f9dd 	bl	34190ca0 <Error_Handler>
  }
  /* USER CODE END DCMIPP_Init 2 */

}
341908e6:	bf00      	nop
341908e8:	3740      	adds	r7, #64	@ 0x40
341908ea:	46bd      	mov	sp, r7
341908ec:	bd80      	pop	{r7, pc}
341908ee:	bf00      	nop
341908f0:	341c1684 	.word	0x341c1684
341908f4:	58002000 	.word	0x58002000

341908f8 <LCD_Init>:

/* USER CODE BEGIN 4 */
static void LCD_Init(uint32_t Width, uint32_t Height)
{
341908f8:	b580      	push	{r7, lr}
341908fa:	b090      	sub	sp, #64	@ 0x40
341908fc:	af00      	add	r7, sp, #0
341908fe:	6078      	str	r0, [r7, #4]
34190900:	6039      	str	r1, [r7, #0]
  LTDC_LayerCfgTypeDef pLayerCfg ={0};
34190902:	f107 030c 	add.w	r3, r7, #12
34190906:	2234      	movs	r2, #52	@ 0x34
34190908:	2100      	movs	r1, #0
3419090a:	4618      	mov	r0, r3
3419090c:	f001 fac8 	bl	34191ea0 <memset>

  hltdc.Instance = LTDC;
34190910:	4b39      	ldr	r3, [pc, #228]	@ (341909f8 <LCD_Init+0x100>)
34190912:	4a3a      	ldr	r2, [pc, #232]	@ (341909fc <LCD_Init+0x104>)
34190914:	601a      	str	r2, [r3, #0]

  hltdc.Instance = LTDC;
34190916:	4b38      	ldr	r3, [pc, #224]	@ (341909f8 <LCD_Init+0x100>)
34190918:	4a38      	ldr	r2, [pc, #224]	@ (341909fc <LCD_Init+0x104>)
3419091a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
3419091c:	4b36      	ldr	r3, [pc, #216]	@ (341909f8 <LCD_Init+0x100>)
3419091e:	2200      	movs	r2, #0
34190920:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
34190922:	4b35      	ldr	r3, [pc, #212]	@ (341909f8 <LCD_Init+0x100>)
34190924:	2200      	movs	r2, #0
34190926:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
34190928:	4b33      	ldr	r3, [pc, #204]	@ (341909f8 <LCD_Init+0x100>)
3419092a:	2200      	movs	r2, #0
3419092c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
3419092e:	4b32      	ldr	r3, [pc, #200]	@ (341909f8 <LCD_Init+0x100>)
34190930:	2200      	movs	r2, #0
34190932:	611a      	str	r2, [r3, #16]

  hltdc.Init.HorizontalSync     = RK050HR18_HSYNC - 1;
34190934:	4b30      	ldr	r3, [pc, #192]	@ (341909f8 <LCD_Init+0x100>)
34190936:	2203      	movs	r2, #3
34190938:	615a      	str	r2, [r3, #20]
  hltdc.Init.AccumulatedHBP     = RK050HR18_HSYNC + RK050HR18_HBP - 1;
3419093a:	4b2f      	ldr	r3, [pc, #188]	@ (341909f8 <LCD_Init+0x100>)
3419093c:	2207      	movs	r2, #7
3419093e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedActiveW = RK050HR18_HSYNC + Width + RK050HR18_HBP -1;
34190940:	687b      	ldr	r3, [r7, #4]
34190942:	3307      	adds	r3, #7
34190944:	4a2c      	ldr	r2, [pc, #176]	@ (341909f8 <LCD_Init+0x100>)
34190946:	6253      	str	r3, [r2, #36]	@ 0x24
  hltdc.Init.TotalWidth         = RK050HR18_HSYNC + Width + RK050HR18_HBP + RK050HR18_HFP - 1;
34190948:	687b      	ldr	r3, [r7, #4]
3419094a:	330b      	adds	r3, #11
3419094c:	4a2a      	ldr	r2, [pc, #168]	@ (341909f8 <LCD_Init+0x100>)
3419094e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hltdc.Init.VerticalSync       = RK050HR18_VSYNC - 1;
34190950:	4b29      	ldr	r3, [pc, #164]	@ (341909f8 <LCD_Init+0x100>)
34190952:	2203      	movs	r2, #3
34190954:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedVBP     = RK050HR18_VSYNC + RK050HR18_VBP - 1;
34190956:	4b28      	ldr	r3, [pc, #160]	@ (341909f8 <LCD_Init+0x100>)
34190958:	2207      	movs	r2, #7
3419095a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveH = RK050HR18_VSYNC + Height + RK050HR18_VBP -1 ;
3419095c:	683b      	ldr	r3, [r7, #0]
3419095e:	3307      	adds	r3, #7
34190960:	4a25      	ldr	r2, [pc, #148]	@ (341909f8 <LCD_Init+0x100>)
34190962:	6293      	str	r3, [r2, #40]	@ 0x28
  hltdc.Init.TotalHeigh         = RK050HR18_VSYNC + Height + RK050HR18_VBP + RK050HR18_VFP - 1;
34190964:	683b      	ldr	r3, [r7, #0]
34190966:	330b      	adds	r3, #11
34190968:	4a23      	ldr	r2, [pc, #140]	@ (341909f8 <LCD_Init+0x100>)
3419096a:	6313      	str	r3, [r2, #48]	@ 0x30

  hltdc.Init.Backcolor.Blue  = 0x0;
3419096c:	4b22      	ldr	r3, [pc, #136]	@ (341909f8 <LCD_Init+0x100>)
3419096e:	2200      	movs	r2, #0
34190970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0x0;
34190974:	4b20      	ldr	r3, [pc, #128]	@ (341909f8 <LCD_Init+0x100>)
34190976:	2200      	movs	r2, #0
34190978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red   = 0x0;
3419097c:	4b1e      	ldr	r3, [pc, #120]	@ (341909f8 <LCD_Init+0x100>)
3419097e:	2200      	movs	r2, #0
34190980:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  if(HAL_LTDC_Init(&hltdc) != HAL_OK)
34190984:	481c      	ldr	r0, [pc, #112]	@ (341909f8 <LCD_Init+0x100>)
34190986:	f7f6 f962 	bl	34186c4e <HAL_LTDC_Init>
3419098a:	4603      	mov	r3, r0
3419098c:	2b00      	cmp	r3, #0
3419098e:	d001      	beq.n	34190994 <LCD_Init+0x9c>
  {
    Error_Handler();
34190990:	f000 f986 	bl	34190ca0 <Error_Handler>
  }

  pLayerCfg.WindowX0       = 0;
34190994:	2300      	movs	r3, #0
34190996:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowX1       = Width;
34190998:	687b      	ldr	r3, [r7, #4]
3419099a:	613b      	str	r3, [r7, #16]
  pLayerCfg.WindowY0       = 0;
3419099c:	2300      	movs	r3, #0
3419099e:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowY1       = Height;
341909a0:	683b      	ldr	r3, [r7, #0]
341909a2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.PixelFormat    = LTDC_PIXEL_FORMAT_RGB565;
341909a4:	2304      	movs	r3, #4
341909a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.FBStartAdress  = BUFFER_ADDRESS;
341909a8:	4b15      	ldr	r3, [pc, #84]	@ (34190a00 <LCD_Init+0x108>)
341909aa:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Alpha = LTDC_LxCACR_CONSTA;
341909ac:	23ff      	movs	r3, #255	@ 0xff
341909ae:	623b      	str	r3, [r7, #32]
  pLayerCfg.Alpha0 = 0;
341909b0:	2300      	movs	r3, #0
341909b2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
341909b4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
341909b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
341909ba:	2307      	movs	r3, #7
341909bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageWidth = Width;
341909be:	687b      	ldr	r3, [r7, #4]
341909c0:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.ImageHeight = Height;
341909c2:	683b      	ldr	r3, [r7, #0]
341909c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.Backcolor.Blue = 0;
341909c6:	2300      	movs	r3, #0
341909c8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  pLayerCfg.Backcolor.Green = 0;
341909cc:	2300      	movs	r3, #0
341909ce:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  pLayerCfg.Backcolor.Red = 0;
341909d2:	2300      	movs	r3, #0
341909d4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if(HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LTDC_LAYER_1))
341909d8:	f107 030c 	add.w	r3, r7, #12
341909dc:	2200      	movs	r2, #0
341909de:	4619      	mov	r1, r3
341909e0:	4805      	ldr	r0, [pc, #20]	@ (341909f8 <LCD_Init+0x100>)
341909e2:	f7f6 f9df 	bl	34186da4 <HAL_LTDC_ConfigLayer>
341909e6:	4603      	mov	r3, r0
341909e8:	2b00      	cmp	r3, #0
341909ea:	d001      	beq.n	341909f0 <LCD_Init+0xf8>
  {
    Error_Handler();
341909ec:	f000 f958 	bl	34190ca0 <Error_Handler>
  }
}
341909f0:	bf00      	nop
341909f2:	3740      	adds	r7, #64	@ 0x40
341909f4:	46bd      	mov	sp, r7
341909f6:	bd80      	pop	{r7, pc}
341909f8:	341c1690 	.word	0x341c1690
341909fc:	58001000 	.word	0x58001000
34190a00:	34200000 	.word	0x34200000

34190a04 <IMX335_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static void IMX335_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
34190a04:	b580      	push	{r7, lr}
34190a06:	b08a      	sub	sp, #40	@ 0x28
34190a08:	af00      	add	r7, sp, #0
34190a0a:	6078      	str	r0, [r7, #4]
34190a0c:	6039      	str	r1, [r7, #0]
  IMX335_IO_t              IOCtx;
  uint32_t                 id;

  /* Configure the camera driver */
  IOCtx.Address     = CAMERA_IMX335_ADDRESS;
34190a0e:	2334      	movs	r3, #52	@ 0x34
34190a10:	833b      	strh	r3, [r7, #24]
  IOCtx.Init        = BSP_I2C1_Init;
34190a12:	4b20      	ldr	r3, [pc, #128]	@ (34190a94 <IMX335_Probe+0x90>)
34190a14:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
34190a16:	4b20      	ldr	r3, [pc, #128]	@ (34190a98 <IMX335_Probe+0x94>)
34190a18:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg16;
34190a1a:	4b20      	ldr	r3, [pc, #128]	@ (34190a9c <IMX335_Probe+0x98>)
34190a1c:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg16;
34190a1e:	4b20      	ldr	r3, [pc, #128]	@ (34190aa0 <IMX335_Probe+0x9c>)
34190a20:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
34190a22:	4b20      	ldr	r3, [pc, #128]	@ (34190aa4 <IMX335_Probe+0xa0>)
34190a24:	627b      	str	r3, [r7, #36]	@ 0x24

  if (IMX335_RegisterBusIO(&IMX335Obj, &IOCtx) != IMX335_OK)
34190a26:	f107 0310 	add.w	r3, r7, #16
34190a2a:	4619      	mov	r1, r3
34190a2c:	481e      	ldr	r0, [pc, #120]	@ (34190aa8 <IMX335_Probe+0xa4>)
34190a2e:	f7f1 fd57 	bl	341824e0 <IMX335_RegisterBusIO>
34190a32:	4603      	mov	r3, r0
34190a34:	2b00      	cmp	r3, #0
34190a36:	d002      	beq.n	34190a3e <IMX335_Probe+0x3a>
  {
    Error_Handler();
34190a38:	f000 f932 	bl	34190ca0 <Error_Handler>
34190a3c:	e027      	b.n	34190a8e <IMX335_Probe+0x8a>
  }
  else if (IMX335_ReadID(&IMX335Obj, &id) != IMX335_OK)
34190a3e:	f107 030c 	add.w	r3, r7, #12
34190a42:	4619      	mov	r1, r3
34190a44:	4818      	ldr	r0, [pc, #96]	@ (34190aa8 <IMX335_Probe+0xa4>)
34190a46:	f7f1 fde1 	bl	3418260c <IMX335_ReadID>
34190a4a:	4603      	mov	r3, r0
34190a4c:	2b00      	cmp	r3, #0
34190a4e:	d002      	beq.n	34190a56 <IMX335_Probe+0x52>
  {
    Error_Handler();
34190a50:	f000 f926 	bl	34190ca0 <Error_Handler>
34190a54:	e01b      	b.n	34190a8e <IMX335_Probe+0x8a>
  }
  else
  {
    if (id != (uint32_t) IMX335_CHIP_ID)
34190a56:	68fb      	ldr	r3, [r7, #12]
34190a58:	2b00      	cmp	r3, #0
34190a5a:	d002      	beq.n	34190a62 <IMX335_Probe+0x5e>
    {
      Error_Handler();
34190a5c:	f000 f920 	bl	34190ca0 <Error_Handler>
34190a60:	e015      	b.n	34190a8e <IMX335_Probe+0x8a>
    }
    else
    {
      if (IMX335_Init(&IMX335Obj, Resolution, PixelFormat) != IMX335_OK)
34190a62:	683a      	ldr	r2, [r7, #0]
34190a64:	6879      	ldr	r1, [r7, #4]
34190a66:	4810      	ldr	r0, [pc, #64]	@ (34190aa8 <IMX335_Probe+0xa4>)
34190a68:	f7f1 fd7c 	bl	34182564 <IMX335_Init>
34190a6c:	4603      	mov	r3, r0
34190a6e:	2b00      	cmp	r3, #0
34190a70:	d002      	beq.n	34190a78 <IMX335_Probe+0x74>
      {
        Error_Handler();
34190a72:	f000 f915 	bl	34190ca0 <Error_Handler>
34190a76:	e00a      	b.n	34190a8e <IMX335_Probe+0x8a>
      }
      else if(IMX335_SetFrequency(&IMX335Obj, IMX335_INCK_24MHZ)!= IMX335_OK)
34190a78:	2102      	movs	r1, #2
34190a7a:	480b      	ldr	r0, [pc, #44]	@ (34190aa8 <IMX335_Probe+0xa4>)
34190a7c:	f7f1 fee8 	bl	34182850 <IMX335_SetFrequency>
34190a80:	4603      	mov	r3, r0
34190a82:	2b00      	cmp	r3, #0
34190a84:	d002      	beq.n	34190a8c <IMX335_Probe+0x88>
      {
        Error_Handler();
34190a86:	f000 f90b 	bl	34190ca0 <Error_Handler>
34190a8a:	e000      	b.n	34190a8e <IMX335_Probe+0x8a>
      }
      else
      {
        return;
34190a8c:	bf00      	nop
      }
    }
  }
}
34190a8e:	3728      	adds	r7, #40	@ 0x28
34190a90:	46bd      	mov	sp, r7
34190a92:	bd80      	pop	{r7, pc}
34190a94:	34181b95 	.word	0x34181b95
34190a98:	34181c09 	.word	0x34181c09
34190a9c:	34181d31 	.word	0x34181d31
34190aa0:	34181cd5 	.word	0x34181cd5
34190aa4:	34181ee9 	.word	0x34181ee9
34190aa8:	341c17c4 	.word	0x341c17c4

34190aac <GetSensorInfoHelper>:
/**
  * @brief  ISP Middleware helper. Camera sensor info getter
  * @retval ISP Status
  */
static ISP_StatusTypeDef GetSensorInfoHelper(uint32_t Instance, ISP_SensorInfoTypeDef *SensorInfo)
{
34190aac:	b580      	push	{r7, lr}
34190aae:	b082      	sub	sp, #8
34190ab0:	af00      	add	r7, sp, #0
34190ab2:	6078      	str	r0, [r7, #4]
34190ab4:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  return (ISP_StatusTypeDef) IMX335_GetSensorInfo(&IMX335Obj, (IMX335_SensorInfo_t *) SensorInfo);
34190ab6:	6839      	ldr	r1, [r7, #0]
34190ab8:	4804      	ldr	r0, [pc, #16]	@ (34190acc <GetSensorInfoHelper+0x20>)
34190aba:	f7f1 fdcb 	bl	34182654 <IMX335_GetSensorInfo>
34190abe:	4603      	mov	r3, r0
34190ac0:	b2db      	uxtb	r3, r3
}
34190ac2:	4618      	mov	r0, r3
34190ac4:	3708      	adds	r7, #8
34190ac6:	46bd      	mov	sp, r7
34190ac8:	bd80      	pop	{r7, pc}
34190aca:	bf00      	nop
34190acc:	341c17c4 	.word	0x341c17c4

34190ad0 <SetSensorGainHelper>:
/**
  * @brief  ISP Middleware helper. Camera gain setter
  * @retval ISP Status
  */
static ISP_StatusTypeDef SetSensorGainHelper(uint32_t Instance, int32_t Gain)
{
34190ad0:	b580      	push	{r7, lr}
34190ad2:	b082      	sub	sp, #8
34190ad4:	af00      	add	r7, sp, #0
34190ad6:	6078      	str	r0, [r7, #4]
34190ad8:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  isp_gain = Gain;
34190ada:	4a06      	ldr	r2, [pc, #24]	@ (34190af4 <SetSensorGainHelper+0x24>)
34190adc:	683b      	ldr	r3, [r7, #0]
34190ade:	6013      	str	r3, [r2, #0]
  return (ISP_StatusTypeDef) IMX335_SetGain(&IMX335Obj, Gain);
34190ae0:	6839      	ldr	r1, [r7, #0]
34190ae2:	4805      	ldr	r0, [pc, #20]	@ (34190af8 <SetSensorGainHelper+0x28>)
34190ae4:	f7f1 fdf4 	bl	341826d0 <IMX335_SetGain>
34190ae8:	4603      	mov	r3, r0
34190aea:	b2db      	uxtb	r3, r3
}
34190aec:	4618      	mov	r0, r3
34190aee:	3708      	adds	r7, #8
34190af0:	46bd      	mov	sp, r7
34190af2:	bd80      	pop	{r7, pc}
34190af4:	341c17ec 	.word	0x341c17ec
34190af8:	341c17c4 	.word	0x341c17c4

34190afc <GetSensorGainHelper>:
/**
  * @brief  ISP Middleware helper. Camera gain getter
  * @retval ISP Status
  */
static ISP_StatusTypeDef GetSensorGainHelper(uint32_t Instance, int32_t *Gain)
{
34190afc:	b480      	push	{r7}
34190afe:	b083      	sub	sp, #12
34190b00:	af00      	add	r7, sp, #0
34190b02:	6078      	str	r0, [r7, #4]
34190b04:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  *Gain = isp_gain;
34190b06:	4b05      	ldr	r3, [pc, #20]	@ (34190b1c <GetSensorGainHelper+0x20>)
34190b08:	681a      	ldr	r2, [r3, #0]
34190b0a:	683b      	ldr	r3, [r7, #0]
34190b0c:	601a      	str	r2, [r3, #0]
  return ISP_OK;
34190b0e:	2300      	movs	r3, #0
}
34190b10:	4618      	mov	r0, r3
34190b12:	370c      	adds	r7, #12
34190b14:	46bd      	mov	sp, r7
34190b16:	f85d 7b04 	ldr.w	r7, [sp], #4
34190b1a:	4770      	bx	lr
34190b1c:	341c17ec 	.word	0x341c17ec

34190b20 <SetSensorExposureHelper>:
/**
  * @brief  ISP Middleware helper. Camera exposure setter
  * @retval ISP Status
  */
static ISP_StatusTypeDef SetSensorExposureHelper(uint32_t Instance, int32_t Exposure)
{
34190b20:	b580      	push	{r7, lr}
34190b22:	b082      	sub	sp, #8
34190b24:	af00      	add	r7, sp, #0
34190b26:	6078      	str	r0, [r7, #4]
34190b28:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  isp_exposure = Exposure;
34190b2a:	4a06      	ldr	r2, [pc, #24]	@ (34190b44 <SetSensorExposureHelper+0x24>)
34190b2c:	683b      	ldr	r3, [r7, #0]
34190b2e:	6013      	str	r3, [r2, #0]
  return (ISP_StatusTypeDef) IMX335_SetExposure(&IMX335Obj, Exposure);
34190b30:	6839      	ldr	r1, [r7, #0]
34190b32:	4805      	ldr	r0, [pc, #20]	@ (34190b48 <SetSensorExposureHelper+0x28>)
34190b34:	f7f1 fe24 	bl	34182780 <IMX335_SetExposure>
34190b38:	4603      	mov	r3, r0
34190b3a:	b2db      	uxtb	r3, r3
}
34190b3c:	4618      	mov	r0, r3
34190b3e:	3708      	adds	r7, #8
34190b40:	46bd      	mov	sp, r7
34190b42:	bd80      	pop	{r7, pc}
34190b44:	341c17f0 	.word	0x341c17f0
34190b48:	341c17c4 	.word	0x341c17c4

34190b4c <GetSensorExposureHelper>:
/**
  * @brief  ISP Middleware helper. Camera exposure getter
  * @retval ISP Status
  */
static ISP_StatusTypeDef GetSensorExposureHelper(uint32_t Instance, int32_t *Exposure)
{
34190b4c:	b480      	push	{r7}
34190b4e:	b083      	sub	sp, #12
34190b50:	af00      	add	r7, sp, #0
34190b52:	6078      	str	r0, [r7, #4]
34190b54:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  *Exposure = isp_exposure;
34190b56:	4b05      	ldr	r3, [pc, #20]	@ (34190b6c <GetSensorExposureHelper+0x20>)
34190b58:	681a      	ldr	r2, [r3, #0]
34190b5a:	683b      	ldr	r3, [r7, #0]
34190b5c:	601a      	str	r2, [r3, #0]
  return ISP_OK;
34190b5e:	2300      	movs	r3, #0
}
34190b60:	4618      	mov	r0, r3
34190b62:	370c      	adds	r7, #12
34190b64:	46bd      	mov	sp, r7
34190b66:	f85d 7b04 	ldr.w	r7, [sp], #4
34190b6a:	4770      	bx	lr
34190b6c:	341c17f0 	.word	0x341c17f0

34190b70 <HAL_DCMIPP_PIPE_FrameEventCallback>:

void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34190b70:	b480      	push	{r7}
34190b72:	b083      	sub	sp, #12
34190b74:	af00      	add	r7, sp, #0
34190b76:	6078      	str	r0, [r7, #4]
34190b78:	6039      	str	r1, [r7, #0]
  NbMainFrames++;
34190b7a:	4b05      	ldr	r3, [pc, #20]	@ (34190b90 <HAL_DCMIPP_PIPE_FrameEventCallback+0x20>)
34190b7c:	681b      	ldr	r3, [r3, #0]
34190b7e:	3301      	adds	r3, #1
34190b80:	4a03      	ldr	r2, [pc, #12]	@ (34190b90 <HAL_DCMIPP_PIPE_FrameEventCallback+0x20>)
34190b82:	6013      	str	r3, [r2, #0]
}
34190b84:	bf00      	nop
34190b86:	370c      	adds	r7, #12
34190b88:	46bd      	mov	sp, r7
34190b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34190b8e:	4770      	bx	lr
34190b90:	341c17c0 	.word	0x341c17c0

34190b94 <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @param  hdcmipp DCMIPP device handle
 *         Pipe    Pipe receiving the callback
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34190b94:	b580      	push	{r7, lr}
34190b96:	b082      	sub	sp, #8
34190b98:	af00      	add	r7, sp, #0
34190b9a:	6078      	str	r0, [r7, #4]
34190b9c:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  /* Update the frame counter and call the ISP statistics handler */
  switch (Pipe)
34190b9e:	683b      	ldr	r3, [r7, #0]
34190ba0:	2b02      	cmp	r3, #2
34190ba2:	d014      	beq.n	34190bce <HAL_DCMIPP_PIPE_VsyncEventCallback+0x3a>
34190ba4:	683b      	ldr	r3, [r7, #0]
34190ba6:	2b02      	cmp	r3, #2
34190ba8:	d815      	bhi.n	34190bd6 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x42>
34190baa:	683b      	ldr	r3, [r7, #0]
34190bac:	2b00      	cmp	r3, #0
34190bae:	d003      	beq.n	34190bb8 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x24>
34190bb0:	683b      	ldr	r3, [r7, #0]
34190bb2:	2b01      	cmp	r3, #1
34190bb4:	d004      	beq.n	34190bc0 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>
      break;
    case DCMIPP_PIPE2 :
      ISP_IncAncillaryFrameId(&hcamera_isp);
      break;
  }
}
34190bb6:	e00e      	b.n	34190bd6 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x42>
      ISP_IncDumpFrameId(&hcamera_isp);
34190bb8:	4809      	ldr	r0, [pc, #36]	@ (34190be0 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x4c>)
34190bba:	f7fd ff38 	bl	3418ea2e <ISP_IncDumpFrameId>
      break;
34190bbe:	e00a      	b.n	34190bd6 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x42>
      ISP_IncMainFrameId(&hcamera_isp);
34190bc0:	4807      	ldr	r0, [pc, #28]	@ (34190be0 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x4c>)
34190bc2:	f7fd ff1e 	bl	3418ea02 <ISP_IncMainFrameId>
      ISP_GatherStatistics(&hcamera_isp);
34190bc6:	4806      	ldr	r0, [pc, #24]	@ (34190be0 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x4c>)
34190bc8:	f7fd ff10 	bl	3418e9ec <ISP_GatherStatistics>
      break;
34190bcc:	e003      	b.n	34190bd6 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x42>
      ISP_IncAncillaryFrameId(&hcamera_isp);
34190bce:	4804      	ldr	r0, [pc, #16]	@ (34190be0 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x4c>)
34190bd0:	f7fd ff22 	bl	3418ea18 <ISP_IncAncillaryFrameId>
      break;
34190bd4:	bf00      	nop
}
34190bd6:	bf00      	nop
34190bd8:	3708      	adds	r7, #8
34190bda:	46bd      	mov	sp, r7
34190bdc:	bd80      	pop	{r7, pc}
34190bde:	bf00      	nop
34190be0:	341c1738 	.word	0x341c1738

34190be4 <CAMERA_START>:

void CAMERA_START(void)
{
34190be4:	b580      	push	{r7, lr}
34190be6:	b08c      	sub	sp, #48	@ 0x30
34190be8:	af02      	add	r7, sp, #8
	ISP_AppliHelpersTypeDef appliHelpers = {0};
34190bea:	1d3b      	adds	r3, r7, #4
34190bec:	2224      	movs	r2, #36	@ 0x24
34190bee:	2100      	movs	r1, #0
34190bf0:	4618      	mov	r0, r3
34190bf2:	f001 f955 	bl	34191ea0 <memset>
	/* Fill init struct with Camera driver helpers */
	appliHelpers.GetSensorInfo = GetSensorInfoHelper;
34190bf6:	4b19      	ldr	r3, [pc, #100]	@ (34190c5c <CAMERA_START+0x78>)
34190bf8:	613b      	str	r3, [r7, #16]
	appliHelpers.SetSensorGain = SetSensorGainHelper;
34190bfa:	4b19      	ldr	r3, [pc, #100]	@ (34190c60 <CAMERA_START+0x7c>)
34190bfc:	617b      	str	r3, [r7, #20]
	appliHelpers.GetSensorGain = GetSensorGainHelper;
34190bfe:	4b19      	ldr	r3, [pc, #100]	@ (34190c64 <CAMERA_START+0x80>)
34190c00:	61bb      	str	r3, [r7, #24]
	appliHelpers.SetSensorExposure = SetSensorExposureHelper;
34190c02:	4b19      	ldr	r3, [pc, #100]	@ (34190c68 <CAMERA_START+0x84>)
34190c04:	61fb      	str	r3, [r7, #28]
	appliHelpers.GetSensorExposure = GetSensorExposureHelper;
34190c06:	4b19      	ldr	r3, [pc, #100]	@ (34190c6c <CAMERA_START+0x88>)
34190c08:	623b      	str	r3, [r7, #32]
	/* Initialize the Image Signal Processing middleware */
	if(ISP_Init(&hcamera_isp, &hdcmipp, 0, &appliHelpers, ISP_IQParamCacheInit[0]) != ISP_OK)
34190c0a:	4b19      	ldr	r3, [pc, #100]	@ (34190c70 <CAMERA_START+0x8c>)
34190c0c:	681b      	ldr	r3, [r3, #0]
34190c0e:	1d3a      	adds	r2, r7, #4
34190c10:	9300      	str	r3, [sp, #0]
34190c12:	4613      	mov	r3, r2
34190c14:	2200      	movs	r2, #0
34190c16:	4917      	ldr	r1, [pc, #92]	@ (34190c74 <CAMERA_START+0x90>)
34190c18:	4817      	ldr	r0, [pc, #92]	@ (34190c78 <CAMERA_START+0x94>)
34190c1a:	f7fd fcf7 	bl	3418e60c <ISP_Init>
34190c1e:	4603      	mov	r3, r0
34190c20:	2b00      	cmp	r3, #0
34190c22:	d001      	beq.n	34190c28 <CAMERA_START+0x44>
	{
	  Error_Handler();
34190c24:	f000 f83c 	bl	34190ca0 <Error_Handler>
	}

	if (HAL_DCMIPP_CSI_PIPE_Start(&hdcmipp, DCMIPP_PIPE1, DCMIPP_VIRTUAL_CHANNEL0 , BUFFER_ADDRESS, DCMIPP_MODE_CONTINUOUS) != HAL_OK)
34190c28:	2300      	movs	r3, #0
34190c2a:	9300      	str	r3, [sp, #0]
34190c2c:	4b13      	ldr	r3, [pc, #76]	@ (34190c7c <CAMERA_START+0x98>)
34190c2e:	2200      	movs	r2, #0
34190c30:	2101      	movs	r1, #1
34190c32:	4810      	ldr	r0, [pc, #64]	@ (34190c74 <CAMERA_START+0x90>)
34190c34:	f7f2 fafa 	bl	3418322c <HAL_DCMIPP_CSI_PIPE_Start>
34190c38:	4603      	mov	r3, r0
34190c3a:	2b00      	cmp	r3, #0
34190c3c:	d001      	beq.n	34190c42 <CAMERA_START+0x5e>
	{
		Error_Handler();
34190c3e:	f000 f82f 	bl	34190ca0 <Error_Handler>
	}

	/* Start the Image Signal Processing */
	if (ISP_Start(&hcamera_isp) != ISP_OK)
34190c42:	480d      	ldr	r0, [pc, #52]	@ (34190c78 <CAMERA_START+0x94>)
34190c44:	f7fd fda8 	bl	3418e798 <ISP_Start>
34190c48:	4603      	mov	r3, r0
34190c4a:	2b00      	cmp	r3, #0
34190c4c:	d001      	beq.n	34190c52 <CAMERA_START+0x6e>
	{
	  Error_Handler();
34190c4e:	f000 f827 	bl	34190ca0 <Error_Handler>
	}
}
34190c52:	bf00      	nop
34190c54:	3728      	adds	r7, #40	@ 0x28
34190c56:	46bd      	mov	sp, r7
34190c58:	bd80      	pop	{r7, pc}
34190c5a:	bf00      	nop
34190c5c:	34190aad 	.word	0x34190aad
34190c60:	34190ad1 	.word	0x34190ad1
34190c64:	34190afd 	.word	0x34190afd
34190c68:	34190b21 	.word	0x34190b21
34190c6c:	34190b4d 	.word	0x34190b4d
34190c70:	341c00d8 	.word	0x341c00d8
34190c74:	341c1684 	.word	0x341c1684
34190c78:	341c1738 	.word	0x341c1738
34190c7c:	34200000 	.word	0x34200000

34190c80 <CAMERA_MODULE_START>:

void CAMERA_MODULE_START(void)
{
34190c80:	b580      	push	{r7, lr}
34190c82:	af00      	add	r7, sp, #0
	/* Initialize the IMX335 Sensor ----------------------------- */
	IMX335_Probe(IMX335_R2592_1944, IMX335_RAW_RGGB10);
34190c84:	210a      	movs	r1, #10
34190c86:	2006      	movs	r0, #6
34190c88:	f7ff febc 	bl	34190a04 <IMX335_Probe>
	/* Initialize the LCD ----------------------------- */
	LCD_Init(FRAME_WIDTH, FRAME_HEIGHT);
34190c8c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
34190c90:	f44f 7048 	mov.w	r0, #800	@ 0x320
34190c94:	f7ff fe30 	bl	341908f8 <LCD_Init>
	/* Start the Camera ----------------------------- */
	CAMERA_START();
34190c98:	f7ff ffa4 	bl	34190be4 <CAMERA_START>
}
34190c9c:	bf00      	nop
34190c9e:	bd80      	pop	{r7, pc}

34190ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
34190ca0:	b480      	push	{r7}
34190ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
34190ca4:	b672      	cpsid	i
}
34190ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
34190ca8:	bf00      	nop
34190caa:	e7fd      	b.n	34190ca8 <Error_Handler+0x8>

34190cac <LL_MEM_EnableClock>:
{
34190cac:	b480      	push	{r7}
34190cae:	b085      	sub	sp, #20
34190cb0:	af00      	add	r7, sp, #0
34190cb2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->MEMENSR, Memories);
34190cb4:	4a07      	ldr	r2, [pc, #28]	@ (34190cd4 <LL_MEM_EnableClock+0x28>)
34190cb6:	687b      	ldr	r3, [r7, #4]
34190cb8:	f8c2 3a4c 	str.w	r3, [r2, #2636]	@ 0xa4c
  tmpreg = READ_REG(RCC->MEMENR);
34190cbc:	4b05      	ldr	r3, [pc, #20]	@ (34190cd4 <LL_MEM_EnableClock+0x28>)
34190cbe:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
34190cc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34190cc4:	68fb      	ldr	r3, [r7, #12]
}
34190cc6:	bf00      	nop
34190cc8:	3714      	adds	r7, #20
34190cca:	46bd      	mov	sp, r7
34190ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
34190cd0:	4770      	bx	lr
34190cd2:	bf00      	nop
34190cd4:	56028000 	.word	0x56028000

34190cd8 <LL_AHB3_GRP1_EnableClock>:
{
34190cd8:	b480      	push	{r7}
34190cda:	b085      	sub	sp, #20
34190cdc:	af00      	add	r7, sp, #0
34190cde:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34190ce0:	4a07      	ldr	r2, [pc, #28]	@ (34190d00 <LL_AHB3_GRP1_EnableClock+0x28>)
34190ce2:	687b      	ldr	r3, [r7, #4]
34190ce4:	f8c2 3a58 	str.w	r3, [r2, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
34190ce8:	4b05      	ldr	r3, [pc, #20]	@ (34190d00 <LL_AHB3_GRP1_EnableClock+0x28>)
34190cea:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
34190cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34190cf0:	68fb      	ldr	r3, [r7, #12]
}
34190cf2:	bf00      	nop
34190cf4:	3714      	adds	r7, #20
34190cf6:	46bd      	mov	sp, r7
34190cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
34190cfc:	4770      	bx	lr
34190cfe:	bf00      	nop
34190d00:	56028000 	.word	0x56028000

34190d04 <LL_AHB4_GRP1_EnableClock>:
{
34190d04:	b480      	push	{r7}
34190d06:	b085      	sub	sp, #20
34190d08:	af00      	add	r7, sp, #0
34190d0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34190d0c:	4a07      	ldr	r2, [pc, #28]	@ (34190d2c <LL_AHB4_GRP1_EnableClock+0x28>)
34190d0e:	687b      	ldr	r3, [r7, #4]
34190d10:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34190d14:	4b05      	ldr	r3, [pc, #20]	@ (34190d2c <LL_AHB4_GRP1_EnableClock+0x28>)
34190d16:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34190d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34190d1c:	68fb      	ldr	r3, [r7, #12]
}
34190d1e:	bf00      	nop
34190d20:	3714      	adds	r7, #20
34190d22:	46bd      	mov	sp, r7
34190d24:	f85d 7b04 	ldr.w	r7, [sp], #4
34190d28:	4770      	bx	lr
34190d2a:	bf00      	nop
34190d2c:	56028000 	.word	0x56028000

34190d30 <LL_APB5_GRP1_EnableClock>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClock(uint32_t Periphs)
{
34190d30:	b480      	push	{r7}
34190d32:	b085      	sub	sp, #20
34190d34:	af00      	add	r7, sp, #0
34190d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5ENSR, Periphs);
34190d38:	4a07      	ldr	r2, [pc, #28]	@ (34190d58 <LL_APB5_GRP1_EnableClock+0x28>)
34190d3a:	687b      	ldr	r3, [r7, #4]
34190d3c:	f8c2 3a7c 	str.w	r3, [r2, #2684]	@ 0xa7c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5ENR);
34190d40:	4b05      	ldr	r3, [pc, #20]	@ (34190d58 <LL_APB5_GRP1_EnableClock+0x28>)
34190d42:	f8d3 327c 	ldr.w	r3, [r3, #636]	@ 0x27c
34190d46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34190d48:	68fb      	ldr	r3, [r7, #12]
}
34190d4a:	bf00      	nop
34190d4c:	3714      	adds	r7, #20
34190d4e:	46bd      	mov	sp, r7
34190d50:	f85d 7b04 	ldr.w	r7, [sp], #4
34190d54:	4770      	bx	lr
34190d56:	bf00      	nop
34190d58:	56028000 	.word	0x56028000

34190d5c <LL_APB5_GRP1_ForceReset>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_ForceReset(uint32_t Periphs)
{
34190d5c:	b480      	push	{r7}
34190d5e:	b083      	sub	sp, #12
34190d60:	af00      	add	r7, sp, #0
34190d62:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB5RSTSR, Periphs);
34190d64:	4a04      	ldr	r2, [pc, #16]	@ (34190d78 <LL_APB5_GRP1_ForceReset+0x1c>)
34190d66:	687b      	ldr	r3, [r7, #4]
34190d68:	f8c2 3a3c 	str.w	r3, [r2, #2620]	@ 0xa3c
}
34190d6c:	bf00      	nop
34190d6e:	370c      	adds	r7, #12
34190d70:	46bd      	mov	sp, r7
34190d72:	f85d 7b04 	ldr.w	r7, [sp], #4
34190d76:	4770      	bx	lr
34190d78:	56028000 	.word	0x56028000

34190d7c <LL_APB5_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_ReleaseReset(uint32_t Periphs)
{
34190d7c:	b480      	push	{r7}
34190d7e:	b083      	sub	sp, #12
34190d80:	af00      	add	r7, sp, #0
34190d82:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB5RSTCR, Periphs);
34190d84:	4b06      	ldr	r3, [pc, #24]	@ (34190da0 <LL_APB5_GRP1_ReleaseReset+0x24>)
34190d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34190d8a:	461a      	mov	r2, r3
34190d8c:	687b      	ldr	r3, [r7, #4]
34190d8e:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
}
34190d92:	bf00      	nop
34190d94:	370c      	adds	r7, #12
34190d96:	46bd      	mov	sp, r7
34190d98:	f85d 7b04 	ldr.w	r7, [sp], #4
34190d9c:	4770      	bx	lr
34190d9e:	bf00      	nop
34190da0:	56028000 	.word	0x56028000

34190da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
34190da4:	b480      	push	{r7}
34190da6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
34190da8:	bf00      	nop
34190daa:	46bd      	mov	sp, r7
34190dac:	f85d 7b04 	ldr.w	r7, [sp], #4
34190db0:	4770      	bx	lr
	...

34190db4 <HAL_DCMIPP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmipp: DCMIPP handle pointer
  * @retval None
  */
void HAL_DCMIPP_MspInit(DCMIPP_HandleTypeDef* hdcmipp)
{
34190db4:	b580      	push	{r7, lr}
34190db6:	b0f0      	sub	sp, #448	@ 0x1c0
34190db8:	af00      	add	r7, sp, #0
34190dba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190dbe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
34190dc2:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34190dc4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190dc8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34190dcc:	4618      	mov	r0, r3
34190dce:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34190dd2:	461a      	mov	r2, r3
34190dd4:	2100      	movs	r1, #0
34190dd6:	f001 f863 	bl	34191ea0 <memset>
  RAMCFG_HandleTypeDef hramcfg  = {0};
34190dda:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190dde:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
34190de2:	461a      	mov	r2, r3
34190de4:	2300      	movs	r3, #0
34190de6:	6013      	str	r3, [r2, #0]
34190de8:	6053      	str	r3, [r2, #4]
34190dea:	6093      	str	r3, [r2, #8]
  RIMC_MasterConfig_t RIMC_master = {0};
34190dec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190df0:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
34190df4:	461a      	mov	r2, r3
34190df6:	2300      	movs	r3, #0
34190df8:	6013      	str	r3, [r2, #0]
34190dfa:	6053      	str	r3, [r2, #4]
  if(hdcmipp->Instance==DCMIPP)
34190dfc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190e00:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
34190e04:	681b      	ldr	r3, [r3, #0]
34190e06:	681b      	ldr	r3, [r3, #0]
34190e08:	4a7b      	ldr	r2, [pc, #492]	@ (34190ff8 <HAL_DCMIPP_MspInit+0x244>)
34190e0a:	4293      	cmp	r3, r2
34190e0c:	f040 80ee 	bne.w	34190fec <HAL_DCMIPP_MspInit+0x238>

    /* USER CODE END DCMIPP_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DCMIPP|RCC_PERIPHCLK_CSI;
34190e10:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190e14:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
34190e18:	f04f 0218 	mov.w	r2, #24
34190e1c:	f04f 0300 	mov.w	r3, #0
34190e20:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.DcmippClockSelection = RCC_DCMIPPCLKSOURCE_IC17;
34190e24:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190e28:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34190e2c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34190e30:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    PeriphClkInitStruct.ICSelection[RCC_IC17].ClockSelection = RCC_ICCLKSOURCE_PLL1;
34190e34:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190e38:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34190e3c:	2200      	movs	r2, #0
34190e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    PeriphClkInitStruct.ICSelection[RCC_IC17].ClockDivider = 4;
34190e42:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190e46:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34190e4a:	2204      	movs	r2, #4
34190e4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    PeriphClkInitStruct.ICSelection[RCC_IC18].ClockSelection = RCC_ICCLKSOURCE_PLL1;
34190e50:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190e54:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34190e58:	2200      	movs	r2, #0
34190e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    PeriphClkInitStruct.ICSelection[RCC_IC18].ClockDivider = 60;
34190e5e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190e62:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34190e66:	223c      	movs	r2, #60	@ 0x3c
34190e68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34190e6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
34190e70:	4618      	mov	r0, r3
34190e72:	f7f9 fb49 	bl	3418a508 <HAL_RCCEx_PeriphCLKConfig>
34190e76:	4603      	mov	r3, r0
34190e78:	2b00      	cmp	r3, #0
34190e7a:	d001      	beq.n	34190e80 <HAL_DCMIPP_MspInit+0xcc>
    {
      Error_Handler();
34190e7c:	f7ff ff10 	bl	34190ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DCMIPP_CLK_ENABLE();
34190e80:	2004      	movs	r0, #4
34190e82:	f7ff ff55 	bl	34190d30 <LL_APB5_GRP1_EnableClock>
    __HAL_RCC_CSI_CLK_ENABLE();
34190e86:	2040      	movs	r0, #64	@ 0x40
34190e88:	f7ff ff52 	bl	34190d30 <LL_APB5_GRP1_EnableClock>
    __HAL_RCC_CSI_FORCE_RESET();
34190e8c:	2040      	movs	r0, #64	@ 0x40
34190e8e:	f7ff ff65 	bl	34190d5c <LL_APB5_GRP1_ForceReset>
    __HAL_RCC_CSI_RELEASE_RESET();
34190e92:	2040      	movs	r0, #64	@ 0x40
34190e94:	f7ff ff72 	bl	34190d7c <LL_APB5_GRP1_ReleaseReset>
    /* DCMIPP interrupt Init */
    HAL_NVIC_SetPriority(DCMIPP_IRQn, 0x07, 0);
34190e98:	2200      	movs	r2, #0
34190e9a:	2107      	movs	r1, #7
34190e9c:	2030      	movs	r0, #48	@ 0x30
34190e9e:	f7f1 fed8 	bl	34182c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMIPP_IRQn);
34190ea2:	2030      	movs	r0, #48	@ 0x30
34190ea4:	f7f1 fef2 	bl	34182c8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CSI_IRQn, 0x07, 0);
34190ea8:	2200      	movs	r2, #0
34190eaa:	2107      	movs	r1, #7
34190eac:	202f      	movs	r0, #47	@ 0x2f
34190eae:	f7f1 fed0 	bl	34182c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CSI_IRQn);
34190eb2:	202f      	movs	r0, #47	@ 0x2f
34190eb4:	f7f1 feea 	bl	34182c8c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN DCMIPP_MspInit 1 */
    /* IMX335 Sensor HW Reset */
    /* Enable GPIO clocks */
    __HAL_RCC_GPIOC_CLK_ENABLE();
34190eb8:	2004      	movs	r0, #4
34190eba:	f7ff ff23 	bl	34190d04 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
34190ebe:	2008      	movs	r0, #8
34190ec0:	f7ff ff20 	bl	34190d04 <LL_AHB4_GRP1_EnableClock>

    GPIO_InitTypeDef gpio_init_structure = {0};
34190ec4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190ec8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34190ecc:	461a      	mov	r2, r3
34190ece:	2300      	movs	r3, #0
34190ed0:	6013      	str	r3, [r2, #0]
34190ed2:	6053      	str	r3, [r2, #4]
34190ed4:	6093      	str	r3, [r2, #8]
34190ed6:	60d3      	str	r3, [r2, #12]
34190ed8:	6113      	str	r3, [r2, #16]

    /* Initialize camera NRST pin */
    gpio_init_structure.Pin       = GPIO_PIN_8;
34190eda:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190ede:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34190ee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
34190ee6:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Pull      = GPIO_NOPULL;
34190ee8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190eec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34190ef0:	2200      	movs	r2, #0
34190ef2:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34190ef4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190ef8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34190efc:	2201      	movs	r2, #1
34190efe:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34190f00:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190f04:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34190f08:	2203      	movs	r2, #3
34190f0a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
34190f0c:	f107 0308 	add.w	r3, r7, #8
34190f10:	4619      	mov	r1, r3
34190f12:	483a      	ldr	r0, [pc, #232]	@ (34190ffc <HAL_DCMIPP_MspInit+0x248>)
34190f14:	f7f4 fcf8 	bl	34185908 <HAL_GPIO_Init>

    /* Initialize camera EN pin */
    gpio_init_structure.Pin       = GPIO_PIN_2;
34190f18:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190f1c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34190f20:	2204      	movs	r2, #4
34190f22:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Pull      = GPIO_NOPULL;
34190f24:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190f28:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34190f2c:	2200      	movs	r2, #0
34190f2e:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34190f30:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190f34:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34190f38:	2201      	movs	r2, #1
34190f3a:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34190f3c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190f40:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34190f44:	2203      	movs	r2, #3
34190f46:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
34190f48:	f107 0308 	add.w	r3, r7, #8
34190f4c:	4619      	mov	r1, r3
34190f4e:	482c      	ldr	r0, [pc, #176]	@ (34191000 <HAL_DCMIPP_MspInit+0x24c>)
34190f50:	f7f4 fcda 	bl	34185908 <HAL_GPIO_Init>

    /* Camera sensor Power-On sequence */
    /* Assert the camera Enable and NRST pins */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
34190f54:	2201      	movs	r2, #1
34190f56:	f44f 7180 	mov.w	r1, #256	@ 0x100
34190f5a:	4828      	ldr	r0, [pc, #160]	@ (34190ffc <HAL_DCMIPP_MspInit+0x248>)
34190f5c:	f7f4 ffc6 	bl	34185eec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
34190f60:	2200      	movs	r2, #0
34190f62:	2104      	movs	r1, #4
34190f64:	4826      	ldr	r0, [pc, #152]	@ (34191000 <HAL_DCMIPP_MspInit+0x24c>)
34190f66:	f7f4 ffc1 	bl	34185eec <HAL_GPIO_WritePin>
    HAL_Delay(200);   /* NRST and Enable signals asserted during 200ms */
34190f6a:	20c8      	movs	r0, #200	@ 0xc8
34190f6c:	f7f1 fd72 	bl	34182a54 <HAL_Delay>

    /* De-assert the camera STANDBY pin (active high) */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
34190f70:	2201      	movs	r2, #1
34190f72:	2104      	movs	r1, #4
34190f74:	4822      	ldr	r0, [pc, #136]	@ (34191000 <HAL_DCMIPP_MspInit+0x24c>)
34190f76:	f7f4 ffb9 	bl	34185eec <HAL_GPIO_WritePin>
    HAL_Delay(3);     /* NRST de-asserted during 3ms */
34190f7a:	2003      	movs	r0, #3
34190f7c:	f7f1 fd6a 	bl	34182a54 <HAL_Delay>

    /* SRAM3 and SRAM4 memories clock enable */
    LL_MEM_EnableClock(LL_MEM_AXISRAM3);
34190f80:	2001      	movs	r0, #1
34190f82:	f7ff fe93 	bl	34190cac <LL_MEM_EnableClock>
    LL_MEM_EnableClock(LL_MEM_AXISRAM4);
34190f86:	2002      	movs	r0, #2
34190f88:	f7ff fe90 	bl	34190cac <LL_MEM_EnableClock>

    /* Power On AXSRAM3 and AXISRAM4 */
    hramcfg.Instance = RAMCFG_SRAM3_AXI;
34190f8c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190f90:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
34190f94:	4a1b      	ldr	r2, [pc, #108]	@ (34191004 <HAL_DCMIPP_MspInit+0x250>)
34190f96:	601a      	str	r2, [r3, #0]
    HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34190f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
34190f9c:	4618      	mov	r0, r3
34190f9e:	f7f6 ffe7 	bl	34187f70 <HAL_RAMCFG_EnableAXISRAM>

    hramcfg.Instance = RAMCFG_SRAM4_AXI;
34190fa2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190fa6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
34190faa:	4a17      	ldr	r2, [pc, #92]	@ (34191008 <HAL_DCMIPP_MspInit+0x254>)
34190fac:	601a      	str	r2, [r3, #0]
    HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34190fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
34190fb2:	4618      	mov	r0, r3
34190fb4:	f7f6 ffdc 	bl	34187f70 <HAL_RAMCFG_EnableAXISRAM>

    __HAL_RCC_RIFSC_CLK_ENABLE();
34190fb8:	f44f 7000 	mov.w	r0, #512	@ 0x200
34190fbc:	f7ff fe8c 	bl	34190cd8 <LL_AHB3_GRP1_EnableClock>

    RIMC_master.MasterCID = RIF_CID_1;
34190fc0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190fc4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
34190fc8:	2202      	movs	r2, #2
34190fca:	601a      	str	r2, [r3, #0]
    RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34190fcc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34190fd0:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
34190fd4:	2203      	movs	r2, #3
34190fd6:	605a      	str	r2, [r3, #4]

    HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
34190fd8:	f107 031c 	add.w	r3, r7, #28
34190fdc:	4619      	mov	r1, r3
34190fde:	2009      	movs	r0, #9
34190fe0:	f7fb ff38 	bl	3418ce54 <HAL_RIF_RIMC_ConfigMasterAttributes>
    HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34190fe4:	2103      	movs	r1, #3
34190fe6:	4809      	ldr	r0, [pc, #36]	@ (3419100c <HAL_DCMIPP_MspInit+0x258>)
34190fe8:	f7fb ff70 	bl	3418cecc <HAL_RIF_RISC_SetSlaveSecureAttributes>
    /* USER CODE END DCMIPP_MspInit 1 */

  }

}
34190fec:	bf00      	nop
34190fee:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
34190ff2:	46bd      	mov	sp, r7
34190ff4:	bd80      	pop	{r7, pc}
34190ff6:	bf00      	nop
34190ff8:	58002000 	.word	0x58002000
34190ffc:	56020800 	.word	0x56020800
34191000:	56020c00 	.word	0x56020c00
34191004:	52023100 	.word	0x52023100
34191008:	52023180 	.word	0x52023180
3419100c:	2000001d 	.word	0x2000001d

34191010 <HAL_LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
34191010:	b580      	push	{r7, lr}
34191012:	b0ee      	sub	sp, #440	@ 0x1b8
34191014:	af00      	add	r7, sp, #0
34191016:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
3419101a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
3419101e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef  gpio_init_structure = {0};
34191020:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
34191024:	2200      	movs	r2, #0
34191026:	601a      	str	r2, [r3, #0]
34191028:	605a      	str	r2, [r3, #4]
3419102a:	609a      	str	r2, [r3, #8]
3419102c:	60da      	str	r2, [r3, #12]
3419102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
34191030:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
34191034:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34191038:	4618      	mov	r0, r3
3419103a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
3419103e:	461a      	mov	r2, r3
34191040:	2100      	movs	r1, #0
34191042:	f000 ff2d 	bl	34191ea0 <memset>
  RIMC_MasterConfig_t RIMC_master = {0};
34191046:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
3419104a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
3419104e:	461a      	mov	r2, r3
34191050:	2300      	movs	r3, #0
34191052:	6013      	str	r3, [r2, #0]
34191054:	6053      	str	r3, [r2, #4]

  if (hltdc->Instance == LTDC)
34191056:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
3419105a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
3419105e:	681b      	ldr	r3, [r3, #0]
34191060:	681b      	ldr	r3, [r3, #0]
34191062:	4a79      	ldr	r2, [pc, #484]	@ (34191248 <HAL_LTDC_MspInit+0x238>)
34191064:	4293      	cmp	r3, r2
34191066:	f040 80ea 	bne.w	3419123e <HAL_LTDC_MspInit+0x22e>
  {
    __HAL_RCC_LTDC_CLK_ENABLE();
3419106a:	2002      	movs	r0, #2
3419106c:	f7ff fe60 	bl	34190d30 <LL_APB5_GRP1_EnableClock>

    __HAL_RCC_LTDC_FORCE_RESET();
34191070:	2002      	movs	r0, #2
34191072:	f7ff fe73 	bl	34190d5c <LL_APB5_GRP1_ForceReset>
    __HAL_RCC_LTDC_RELEASE_RESET();
34191076:	2002      	movs	r0, #2
34191078:	f7ff fe80 	bl	34190d7c <LL_APB5_GRP1_ReleaseReset>
    /* PB13 LCD_CLK     */
    /* PQ4  LCD_INT     */
    /* PQ6  LCD_BL_CTRL */
    /* PE1  NRST        */

    __HAL_RCC_GPIOA_CLK_ENABLE();
3419107c:	2001      	movs	r0, #1
3419107e:	f7ff fe41 	bl	34190d04 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
34191082:	2002      	movs	r0, #2
34191084:	f7ff fe3e 	bl	34190d04 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
34191088:	2008      	movs	r0, #8
3419108a:	f7ff fe3b 	bl	34190d04 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
3419108e:	2010      	movs	r0, #16
34191090:	f7ff fe38 	bl	34190d04 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOG_CLK_ENABLE();
34191094:	2040      	movs	r0, #64	@ 0x40
34191096:	f7ff fe35 	bl	34190d04 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOH_CLK_ENABLE();
3419109a:	2080      	movs	r0, #128	@ 0x80
3419109c:	f7ff fe32 	bl	34190d04 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOQ_CLK_ENABLE();
341910a0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
341910a4:	f7ff fe2e 	bl	34190d04 <LL_AHB4_GRP1_EnableClock>

    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
341910a8:	2302      	movs	r3, #2
341910aa:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    gpio_init_structure.Pull      = GPIO_NOPULL;
341910ae:	2300      	movs	r3, #0
341910b0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
341910b4:	2302      	movs	r3, #2
341910b6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

    /* G3, G2, B7, B1, B6, R5 */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_15;
341910ba:	f248 1387 	movw	r3, #33159	@ 0x8187
341910be:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
341910c2:	230e      	movs	r3, #14
341910c4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
341910c8:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
341910cc:	4619      	mov	r1, r3
341910ce:	485f      	ldr	r0, [pc, #380]	@ (3419124c <HAL_LTDC_MspInit+0x23c>)
341910d0:	f7f4 fc1a 	bl	34185908 <HAL_GPIO_Init>

    /* LCD_CLK, LCD_HSYNC B2, R3, G6, G5, G4 */
    gpio_init_structure.Pin       = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
341910d4:	f64f 0314 	movw	r3, #63508	@ 0xf814
341910d8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
341910dc:	230e      	movs	r3, #14
341910de:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    HAL_GPIO_Init(GPIOB, &gpio_init_structure);
341910e2:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
341910e6:	4619      	mov	r1, r3
341910e8:	4859      	ldr	r0, [pc, #356]	@ (34191250 <HAL_LTDC_MspInit+0x240>)
341910ea:	f7f4 fc0d 	bl	34185908 <HAL_GPIO_Init>

    /* R7, R1, R2 */
    gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_15;
341910ee:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
341910f2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
341910f6:	230e      	movs	r3, #14
341910f8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
341910fc:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
34191100:	4619      	mov	r1, r3
34191102:	4854      	ldr	r0, [pc, #336]	@ (34191254 <HAL_LTDC_MspInit+0x244>)
34191104:	f7f4 fc00 	bl	34185908 <HAL_GPIO_Init>

    /* LCD_VSYNC */
    gpio_init_structure.Pin       = GPIO_PIN_11;
34191108:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3419110c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
34191110:	230e      	movs	r3, #14
34191112:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
34191116:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
3419111a:	4619      	mov	r1, r3
3419111c:	484e      	ldr	r0, [pc, #312]	@ (34191258 <HAL_LTDC_MspInit+0x248>)
3419111e:	f7f4 fbf3 	bl	34185908 <HAL_GPIO_Init>

    /* R0, G1, B3, G7, R6, G0 */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 ;
34191122:	f641 1343 	movw	r3, #6467	@ 0x1943
34191126:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3419112a:	230e      	movs	r3, #14
3419112c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
34191130:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
34191134:	4619      	mov	r1, r3
34191136:	4849      	ldr	r0, [pc, #292]	@ (3419125c <HAL_LTDC_MspInit+0x24c>)
34191138:	f7f4 fbe6 	bl	34185908 <HAL_GPIO_Init>

    /* B4, R4, B5 */
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6;
3419113c:	2358      	movs	r3, #88	@ 0x58
3419113e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
34191142:	230e      	movs	r3, #14
34191144:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
34191148:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
3419114c:	4619      	mov	r1, r3
3419114e:	4844      	ldr	r0, [pc, #272]	@ (34191260 <HAL_LTDC_MspInit+0x250>)
34191150:	f7f4 fbda 	bl	34185908 <HAL_GPIO_Init>

    /* NRST */
    gpio_init_structure.Pin       = GPIO_PIN_1;
34191154:	2302      	movs	r3, #2
34191156:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3419115a:	2301      	movs	r3, #1
3419115c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
34191160:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
34191164:	4619      	mov	r1, r3
34191166:	483c      	ldr	r0, [pc, #240]	@ (34191258 <HAL_LTDC_MspInit+0x248>)
34191168:	f7f4 fbce 	bl	34185908 <HAL_GPIO_Init>

    /* LCD_ONOFF, LCD_BL_CTRL */
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_6;
3419116c:	2348      	movs	r3, #72	@ 0x48
3419116e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34191172:	2301      	movs	r3, #1
34191174:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    HAL_GPIO_Init(GPIOQ, &gpio_init_structure);
34191178:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
3419117c:	4619      	mov	r1, r3
3419117e:	4839      	ldr	r0, [pc, #228]	@ (34191264 <HAL_LTDC_MspInit+0x254>)
34191180:	f7f4 fbc2 	bl	34185908 <HAL_GPIO_Init>

    /* LCD_DE */
    gpio_init_structure.Pin       = GPIO_PIN_13;
34191184:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34191188:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3419118c:	2301      	movs	r3, #1
3419118e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
34191192:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
34191196:	4619      	mov	r1, r3
34191198:	4830      	ldr	r0, [pc, #192]	@ (3419125c <HAL_LTDC_MspInit+0x24c>)
3419119a:	f7f4 fbb5 	bl	34185908 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOQ, GPIO_PIN_3, GPIO_PIN_SET); /* LCD On */ /* PQ3  LCD_ONOFF   */
3419119e:	2201      	movs	r2, #1
341911a0:	2108      	movs	r1, #8
341911a2:	4830      	ldr	r0, [pc, #192]	@ (34191264 <HAL_LTDC_MspInit+0x254>)
341911a4:	f7f4 fea2 	bl	34185eec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET); /* Display Enable */ /* PG13 LCD_DE      */
341911a8:	2201      	movs	r2, #1
341911aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
341911ae:	482b      	ldr	r0, [pc, #172]	@ (3419125c <HAL_LTDC_MspInit+0x24c>)
341911b0:	f7f4 fe9c 	bl	34185eec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOQ, GPIO_PIN_6, GPIO_PIN_SET); /* 100% Brightness */ /* PQ6  LCD_BL_CTRL */
341911b4:	2201      	movs	r2, #1
341911b6:	2140      	movs	r1, #64	@ 0x40
341911b8:	482a      	ldr	r0, [pc, #168]	@ (34191264 <HAL_LTDC_MspInit+0x254>)
341911ba:	f7f4 fe97 	bl	34185eec <HAL_GPIO_WritePin>
    /* LCD clock configuration */
    /* PLL1_VCO Input = HSI_VALUE/PLLM = 64 Mhz / 4 = 16 */
    /* PLL1_VCO Output = PLL3_VCO Input * PLLN = 16 Mhz * 75 = 1200 */
    /* PLLLCDCLK = PLL3_VCO Output/(PLLP1 * PLLP2) = 1200/48 = 25Mhz */
    /* LTDC clock frequency = PLLLCDCLK = 25 Mhz */
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
341911be:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
341911c2:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
341911c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
341911ca:	f04f 0300 	mov.w	r3, #0
341911ce:	e9c1 2300 	strd	r2, r3, [r1]
    RCC_PeriphCLKInitStruct.LtdcClockSelection = RCC_LTDCCLKSOURCE_IC16;
341911d2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
341911d6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341911da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
341911de:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockSelection = RCC_ICCLKSOURCE_PLL1;
341911e2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
341911e6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341911ea:	2200      	movs	r2, #0
341911ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockDivider = 48;
341911f0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
341911f4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341911f8:	2230      	movs	r2, #48	@ 0x30
341911fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
341911fe:	f107 0310 	add.w	r3, r7, #16
34191202:	4618      	mov	r0, r3
34191204:	f7f9 f980 	bl	3418a508 <HAL_RCCEx_PeriphCLKConfig>
34191208:	4603      	mov	r3, r0
3419120a:	2b00      	cmp	r3, #0
3419120c:	d001      	beq.n	34191212 <HAL_LTDC_MspInit+0x202>
    {
      Error_Handler();
3419120e:	f7ff fd47 	bl	34190ca0 <Error_Handler>
    }

    RIMC_master.MasterCID = RIF_CID_1;
34191212:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
34191216:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
3419121a:	2202      	movs	r2, #2
3419121c:	601a      	str	r2, [r3, #0]
    RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3419121e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
34191222:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
34191226:	2203      	movs	r2, #3
34191228:	605a      	str	r2, [r3, #4]

    HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
3419122a:	f107 0308 	add.w	r3, r7, #8
3419122e:	4619      	mov	r1, r3
34191230:	200a      	movs	r0, #10
34191232:	f7fb fe0f 	bl	3418ce54 <HAL_RIF_RIMC_ConfigMasterAttributes>
    HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34191236:	2103      	movs	r1, #3
34191238:	480b      	ldr	r0, [pc, #44]	@ (34191268 <HAL_LTDC_MspInit+0x258>)
3419123a:	f7fb fe47 	bl	3418cecc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  }
}
3419123e:	bf00      	nop
34191240:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
34191244:	46bd      	mov	sp, r7
34191246:	bd80      	pop	{r7, pc}
34191248:	58001000 	.word	0x58001000
3419124c:	56020000 	.word	0x56020000
34191250:	56020400 	.word	0x56020400
34191254:	56020c00 	.word	0x56020c00
34191258:	56021000 	.word	0x56021000
3419125c:	56021800 	.word	0x56021800
34191260:	56021c00 	.word	0x56021c00
34191264:	56024000 	.word	0x56024000
34191268:	30000007 	.word	0x30000007

3419126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
3419126c:	b480      	push	{r7}
3419126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
34191270:	bf00      	nop
34191272:	e7fd      	b.n	34191270 <NMI_Handler+0x4>

34191274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
34191274:	b480      	push	{r7}
34191276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
34191278:	bf00      	nop
3419127a:	e7fd      	b.n	34191278 <HardFault_Handler+0x4>

3419127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
3419127c:	b480      	push	{r7}
3419127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
34191280:	bf00      	nop
34191282:	e7fd      	b.n	34191280 <MemManage_Handler+0x4>

34191284 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
34191284:	b480      	push	{r7}
34191286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
34191288:	bf00      	nop
3419128a:	e7fd      	b.n	34191288 <BusFault_Handler+0x4>

3419128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
3419128c:	b480      	push	{r7}
3419128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
34191290:	bf00      	nop
34191292:	e7fd      	b.n	34191290 <UsageFault_Handler+0x4>

34191294 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
34191294:	b480      	push	{r7}
34191296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
34191298:	bf00      	nop
3419129a:	e7fd      	b.n	34191298 <SecureFault_Handler+0x4>

3419129c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
3419129c:	b480      	push	{r7}
3419129e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
341912a0:	bf00      	nop
341912a2:	46bd      	mov	sp, r7
341912a4:	f85d 7b04 	ldr.w	r7, [sp], #4
341912a8:	4770      	bx	lr

341912aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
341912aa:	b480      	push	{r7}
341912ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
341912ae:	bf00      	nop
341912b0:	46bd      	mov	sp, r7
341912b2:	f85d 7b04 	ldr.w	r7, [sp], #4
341912b6:	4770      	bx	lr

341912b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
341912b8:	b480      	push	{r7}
341912ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
341912bc:	bf00      	nop
341912be:	46bd      	mov	sp, r7
341912c0:	f85d 7b04 	ldr.w	r7, [sp], #4
341912c4:	4770      	bx	lr

341912c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
341912c6:	b580      	push	{r7, lr}
341912c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
341912ca:	f7f1 fba3 	bl	34182a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
341912ce:	bf00      	nop
341912d0:	bd80      	pop	{r7, pc}
	...

341912d4 <DCMIPP_IRQHandler>:

/**
  * @brief This function handles DCMIPP global interrupt.
  */
void DCMIPP_IRQHandler(void)
{
341912d4:	b580      	push	{r7, lr}
341912d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMIPP_IRQn 0 */

  /* USER CODE END DCMIPP_IRQn 0 */
  HAL_DCMIPP_IRQHandler(&hdcmipp);
341912d8:	4802      	ldr	r0, [pc, #8]	@ (341912e4 <DCMIPP_IRQHandler+0x10>)
341912da:	f7f1 ffe5 	bl	341832a8 <HAL_DCMIPP_IRQHandler>
  /* USER CODE BEGIN DCMIPP_IRQn 1 */

  /* USER CODE END DCMIPP_IRQn 1 */
}
341912de:	bf00      	nop
341912e0:	bd80      	pop	{r7, pc}
341912e2:	bf00      	nop
341912e4:	341c1684 	.word	0x341c1684

341912e8 <CSI_IRQHandler>:

/**
  * @brief This function handles CSI global interrupt.
  */
void CSI_IRQHandler(void)
{
341912e8:	b580      	push	{r7, lr}
341912ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CSI_IRQn 0 */

  /* USER CODE END CSI_IRQn 0 */
  HAL_DCMIPP_CSI_IRQHandler(&hdcmipp);
341912ec:	4802      	ldr	r0, [pc, #8]	@ (341912f8 <CSI_IRQHandler+0x10>)
341912ee:	f7f2 f9bf 	bl	34183670 <HAL_DCMIPP_CSI_IRQHandler>
  /* USER CODE BEGIN CSI_IRQn 1 */

  /* USER CODE END CSI_IRQn 1 */
}
341912f2:	bf00      	nop
341912f4:	bd80      	pop	{r7, pc}
341912f6:	bf00      	nop
341912f8:	341c1684 	.word	0x341c1684

341912fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
341912fc:	b580      	push	{r7, lr}
341912fe:	b086      	sub	sp, #24
34191300:	af00      	add	r7, sp, #0
34191302:	60f8      	str	r0, [r7, #12]
34191304:	60b9      	str	r1, [r7, #8]
34191306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34191308:	2300      	movs	r3, #0
3419130a:	617b      	str	r3, [r7, #20]
3419130c:	e00a      	b.n	34191324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
3419130e:	f3af 8000 	nop.w
34191312:	4601      	mov	r1, r0
34191314:	68bb      	ldr	r3, [r7, #8]
34191316:	1c5a      	adds	r2, r3, #1
34191318:	60ba      	str	r2, [r7, #8]
3419131a:	b2ca      	uxtb	r2, r1
3419131c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
3419131e:	697b      	ldr	r3, [r7, #20]
34191320:	3301      	adds	r3, #1
34191322:	617b      	str	r3, [r7, #20]
34191324:	697a      	ldr	r2, [r7, #20]
34191326:	687b      	ldr	r3, [r7, #4]
34191328:	429a      	cmp	r2, r3
3419132a:	dbf0      	blt.n	3419130e <_read+0x12>
  }

  return len;
3419132c:	687b      	ldr	r3, [r7, #4]
}
3419132e:	4618      	mov	r0, r3
34191330:	3718      	adds	r7, #24
34191332:	46bd      	mov	sp, r7
34191334:	bd80      	pop	{r7, pc}

34191336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
34191336:	b580      	push	{r7, lr}
34191338:	b086      	sub	sp, #24
3419133a:	af00      	add	r7, sp, #0
3419133c:	60f8      	str	r0, [r7, #12]
3419133e:	60b9      	str	r1, [r7, #8]
34191340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34191342:	2300      	movs	r3, #0
34191344:	617b      	str	r3, [r7, #20]
34191346:	e009      	b.n	3419135c <_write+0x26>
  {
    __io_putchar(*ptr++);
34191348:	68bb      	ldr	r3, [r7, #8]
3419134a:	1c5a      	adds	r2, r3, #1
3419134c:	60ba      	str	r2, [r7, #8]
3419134e:	781b      	ldrb	r3, [r3, #0]
34191350:	4618      	mov	r0, r3
34191352:	f7f0 fb9f 	bl	34181a94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34191356:	697b      	ldr	r3, [r7, #20]
34191358:	3301      	adds	r3, #1
3419135a:	617b      	str	r3, [r7, #20]
3419135c:	697a      	ldr	r2, [r7, #20]
3419135e:	687b      	ldr	r3, [r7, #4]
34191360:	429a      	cmp	r2, r3
34191362:	dbf1      	blt.n	34191348 <_write+0x12>
  }
  return len;
34191364:	687b      	ldr	r3, [r7, #4]
}
34191366:	4618      	mov	r0, r3
34191368:	3718      	adds	r7, #24
3419136a:	46bd      	mov	sp, r7
3419136c:	bd80      	pop	{r7, pc}

3419136e <_close>:

int _close(int file)
{
3419136e:	b480      	push	{r7}
34191370:	b083      	sub	sp, #12
34191372:	af00      	add	r7, sp, #0
34191374:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
34191376:	f04f 33ff 	mov.w	r3, #4294967295
}
3419137a:	4618      	mov	r0, r3
3419137c:	370c      	adds	r7, #12
3419137e:	46bd      	mov	sp, r7
34191380:	f85d 7b04 	ldr.w	r7, [sp], #4
34191384:	4770      	bx	lr

34191386 <_fstat>:


int _fstat(int file, struct stat *st)
{
34191386:	b480      	push	{r7}
34191388:	b083      	sub	sp, #12
3419138a:	af00      	add	r7, sp, #0
3419138c:	6078      	str	r0, [r7, #4]
3419138e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
34191390:	683b      	ldr	r3, [r7, #0]
34191392:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34191396:	605a      	str	r2, [r3, #4]
  return 0;
34191398:	2300      	movs	r3, #0
}
3419139a:	4618      	mov	r0, r3
3419139c:	370c      	adds	r7, #12
3419139e:	46bd      	mov	sp, r7
341913a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341913a4:	4770      	bx	lr

341913a6 <_isatty>:

int _isatty(int file)
{
341913a6:	b480      	push	{r7}
341913a8:	b083      	sub	sp, #12
341913aa:	af00      	add	r7, sp, #0
341913ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
341913ae:	2301      	movs	r3, #1
}
341913b0:	4618      	mov	r0, r3
341913b2:	370c      	adds	r7, #12
341913b4:	46bd      	mov	sp, r7
341913b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341913ba:	4770      	bx	lr

341913bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
341913bc:	b480      	push	{r7}
341913be:	b085      	sub	sp, #20
341913c0:	af00      	add	r7, sp, #0
341913c2:	60f8      	str	r0, [r7, #12]
341913c4:	60b9      	str	r1, [r7, #8]
341913c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
341913c8:	2300      	movs	r3, #0
}
341913ca:	4618      	mov	r0, r3
341913cc:	3714      	adds	r7, #20
341913ce:	46bd      	mov	sp, r7
341913d0:	f85d 7b04 	ldr.w	r7, [sp], #4
341913d4:	4770      	bx	lr
	...

341913d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
341913d8:	b580      	push	{r7, lr}
341913da:	b086      	sub	sp, #24
341913dc:	af00      	add	r7, sp, #0
341913de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
341913e0:	4a14      	ldr	r2, [pc, #80]	@ (34191434 <_sbrk+0x5c>)
341913e2:	4b15      	ldr	r3, [pc, #84]	@ (34191438 <_sbrk+0x60>)
341913e4:	1ad3      	subs	r3, r2, r3
341913e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
341913e8:	697b      	ldr	r3, [r7, #20]
341913ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
341913ec:	4b13      	ldr	r3, [pc, #76]	@ (3419143c <_sbrk+0x64>)
341913ee:	681b      	ldr	r3, [r3, #0]
341913f0:	2b00      	cmp	r3, #0
341913f2:	d102      	bne.n	341913fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
341913f4:	4b11      	ldr	r3, [pc, #68]	@ (3419143c <_sbrk+0x64>)
341913f6:	4a12      	ldr	r2, [pc, #72]	@ (34191440 <_sbrk+0x68>)
341913f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
341913fa:	4b10      	ldr	r3, [pc, #64]	@ (3419143c <_sbrk+0x64>)
341913fc:	681a      	ldr	r2, [r3, #0]
341913fe:	687b      	ldr	r3, [r7, #4]
34191400:	4413      	add	r3, r2
34191402:	693a      	ldr	r2, [r7, #16]
34191404:	429a      	cmp	r2, r3
34191406:	d207      	bcs.n	34191418 <_sbrk+0x40>
  {
    errno = ENOMEM;
34191408:	f000 fd98 	bl	34191f3c <__errno>
3419140c:	4603      	mov	r3, r0
3419140e:	220c      	movs	r2, #12
34191410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
34191412:	f04f 33ff 	mov.w	r3, #4294967295
34191416:	e009      	b.n	3419142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
34191418:	4b08      	ldr	r3, [pc, #32]	@ (3419143c <_sbrk+0x64>)
3419141a:	681b      	ldr	r3, [r3, #0]
3419141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
3419141e:	4b07      	ldr	r3, [pc, #28]	@ (3419143c <_sbrk+0x64>)
34191420:	681a      	ldr	r2, [r3, #0]
34191422:	687b      	ldr	r3, [r7, #4]
34191424:	4413      	add	r3, r2
34191426:	4a05      	ldr	r2, [pc, #20]	@ (3419143c <_sbrk+0x64>)
34191428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
3419142a:	68fb      	ldr	r3, [r7, #12]
}
3419142c:	4618      	mov	r0, r3
3419142e:	3718      	adds	r7, #24
34191430:	46bd      	mov	sp, r7
34191432:	bd80      	pop	{r7, pc}
34191434:	34200000 	.word	0x34200000
34191438:	00000800 	.word	0x00000800
3419143c:	341c17f4 	.word	0x341c17f4
34191440:	341c1948 	.word	0x341c1948

34191444 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
34191444:	b480      	push	{r7}
34191446:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34191448:	4b6a      	ldr	r3, [pc, #424]	@ (341915f4 <SystemInit+0x1b0>)
3419144a:	4a6b      	ldr	r2, [pc, #428]	@ (341915f8 <SystemInit+0x1b4>)
3419144c:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3419144e:	4b6b      	ldr	r3, [pc, #428]	@ (341915fc <SystemInit+0x1b8>)
34191450:	2201      	movs	r2, #1
34191452:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34191456:	4b69      	ldr	r3, [pc, #420]	@ (341915fc <SystemInit+0x1b8>)
34191458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3419145c:	461a      	mov	r2, r3
3419145e:	2301      	movs	r3, #1
34191460:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
34191464:	4b65      	ldr	r3, [pc, #404]	@ (341915fc <SystemInit+0x1b8>)
34191466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3419146a:	461a      	mov	r2, r3
3419146c:	2301      	movs	r3, #1
3419146e:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
34191472:	4b63      	ldr	r3, [pc, #396]	@ (34191600 <SystemInit+0x1bc>)
34191474:	2200      	movs	r2, #0
34191476:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34191478:	4b61      	ldr	r3, [pc, #388]	@ (34191600 <SystemInit+0x1bc>)
3419147a:	2200      	movs	r2, #0
3419147c:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3419147e:	4b60      	ldr	r3, [pc, #384]	@ (34191600 <SystemInit+0x1bc>)
34191480:	2200      	movs	r2, #0
34191482:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
34191484:	4b5e      	ldr	r3, [pc, #376]	@ (34191600 <SystemInit+0x1bc>)
34191486:	2201      	movs	r2, #1
34191488:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3419148a:	4b5d      	ldr	r3, [pc, #372]	@ (34191600 <SystemInit+0x1bc>)
3419148c:	2200      	movs	r2, #0
3419148e:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34191490:	4b5b      	ldr	r3, [pc, #364]	@ (34191600 <SystemInit+0x1bc>)
34191492:	2200      	movs	r2, #0
34191494:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
34191496:	4b5a      	ldr	r3, [pc, #360]	@ (34191600 <SystemInit+0x1bc>)
34191498:	2202      	movs	r2, #2
3419149a:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3419149c:	4b58      	ldr	r3, [pc, #352]	@ (34191600 <SystemInit+0x1bc>)
3419149e:	2200      	movs	r2, #0
341914a0:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341914a2:	4b57      	ldr	r3, [pc, #348]	@ (34191600 <SystemInit+0x1bc>)
341914a4:	2200      	movs	r2, #0
341914a6:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
341914a8:	4b55      	ldr	r3, [pc, #340]	@ (34191600 <SystemInit+0x1bc>)
341914aa:	2203      	movs	r2, #3
341914ac:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341914ae:	4b54      	ldr	r3, [pc, #336]	@ (34191600 <SystemInit+0x1bc>)
341914b0:	2200      	movs	r2, #0
341914b2:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341914b4:	4b52      	ldr	r3, [pc, #328]	@ (34191600 <SystemInit+0x1bc>)
341914b6:	2200      	movs	r2, #0
341914b8:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
341914ba:	4b51      	ldr	r3, [pc, #324]	@ (34191600 <SystemInit+0x1bc>)
341914bc:	2204      	movs	r2, #4
341914be:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341914c0:	4b4f      	ldr	r3, [pc, #316]	@ (34191600 <SystemInit+0x1bc>)
341914c2:	2200      	movs	r2, #0
341914c4:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341914c6:	4b4e      	ldr	r3, [pc, #312]	@ (34191600 <SystemInit+0x1bc>)
341914c8:	2200      	movs	r2, #0
341914ca:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
341914cc:	4b4c      	ldr	r3, [pc, #304]	@ (34191600 <SystemInit+0x1bc>)
341914ce:	2205      	movs	r2, #5
341914d0:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341914d2:	4b4b      	ldr	r3, [pc, #300]	@ (34191600 <SystemInit+0x1bc>)
341914d4:	2200      	movs	r2, #0
341914d6:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341914d8:	4b49      	ldr	r3, [pc, #292]	@ (34191600 <SystemInit+0x1bc>)
341914da:	2200      	movs	r2, #0
341914dc:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
341914de:	4b48      	ldr	r3, [pc, #288]	@ (34191600 <SystemInit+0x1bc>)
341914e0:	2206      	movs	r2, #6
341914e2:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341914e4:	4b46      	ldr	r3, [pc, #280]	@ (34191600 <SystemInit+0x1bc>)
341914e6:	2200      	movs	r2, #0
341914e8:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341914ea:	4b45      	ldr	r3, [pc, #276]	@ (34191600 <SystemInit+0x1bc>)
341914ec:	2200      	movs	r2, #0
341914ee:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
341914f0:	4b43      	ldr	r3, [pc, #268]	@ (34191600 <SystemInit+0x1bc>)
341914f2:	2207      	movs	r2, #7
341914f4:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341914f6:	4b42      	ldr	r3, [pc, #264]	@ (34191600 <SystemInit+0x1bc>)
341914f8:	2200      	movs	r2, #0
341914fa:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341914fc:	4b40      	ldr	r3, [pc, #256]	@ (34191600 <SystemInit+0x1bc>)
341914fe:	2200      	movs	r2, #0
34191500:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34191502:	4b3e      	ldr	r3, [pc, #248]	@ (341915fc <SystemInit+0x1b8>)
34191504:	2201      	movs	r2, #1
34191506:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
3419150a:	4b3c      	ldr	r3, [pc, #240]	@ (341915fc <SystemInit+0x1b8>)
3419150c:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34191510:	4b38      	ldr	r3, [pc, #224]	@ (341915f4 <SystemInit+0x1b0>)
34191512:	4a3c      	ldr	r2, [pc, #240]	@ (34191604 <SystemInit+0x1c0>)
34191514:	689b      	ldr	r3, [r3, #8]
34191516:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34191518:	4b3b      	ldr	r3, [pc, #236]	@ (34191608 <SystemInit+0x1c4>)
3419151a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3419151c:	4a3a      	ldr	r2, [pc, #232]	@ (34191608 <SystemInit+0x1c4>)
3419151e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34191522:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
34191524:	4b38      	ldr	r3, [pc, #224]	@ (34191608 <SystemInit+0x1c4>)
34191526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34191528:	4a37      	ldr	r2, [pc, #220]	@ (34191608 <SystemInit+0x1c4>)
3419152a:	f043 0310 	orr.w	r3, r3, #16
3419152e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34191530:	4b35      	ldr	r3, [pc, #212]	@ (34191608 <SystemInit+0x1c4>)
34191532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
34191534:	4b31      	ldr	r3, [pc, #196]	@ (341915fc <SystemInit+0x1b8>)
34191536:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
3419153a:	4a30      	ldr	r2, [pc, #192]	@ (341915fc <SystemInit+0x1b8>)
3419153c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34191540:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
34191544:	4b2d      	ldr	r3, [pc, #180]	@ (341915fc <SystemInit+0x1b8>)
34191546:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
3419154a:	4a2c      	ldr	r2, [pc, #176]	@ (341915fc <SystemInit+0x1b8>)
3419154c:	f043 0310 	orr.w	r3, r3, #16
34191550:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34191554:	4b29      	ldr	r3, [pc, #164]	@ (341915fc <SystemInit+0x1b8>)
34191556:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
3419155a:	4b28      	ldr	r3, [pc, #160]	@ (341915fc <SystemInit+0x1b8>)
3419155c:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34191560:	4a26      	ldr	r2, [pc, #152]	@ (341915fc <SystemInit+0x1b8>)
34191562:	f023 0310 	bic.w	r3, r3, #16
34191566:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
3419156a:	4b24      	ldr	r3, [pc, #144]	@ (341915fc <SystemInit+0x1b8>)
3419156c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34191570:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
34191574:	4b21      	ldr	r3, [pc, #132]	@ (341915fc <SystemInit+0x1b8>)
34191576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3419157a:	461a      	mov	r2, r3
3419157c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34191580:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
34191584:	4b1d      	ldr	r3, [pc, #116]	@ (341915fc <SystemInit+0x1b8>)
34191586:	2201      	movs	r2, #1
34191588:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
3419158c:	4b1b      	ldr	r3, [pc, #108]	@ (341915fc <SystemInit+0x1b8>)
3419158e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34191592:	461a      	mov	r2, r3
34191594:	2301      	movs	r3, #1
34191596:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
3419159a:	4b18      	ldr	r3, [pc, #96]	@ (341915fc <SystemInit+0x1b8>)
3419159c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341915a0:	461a      	mov	r2, r3
341915a2:	2301      	movs	r3, #1
341915a4:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
341915a8:	4b14      	ldr	r3, [pc, #80]	@ (341915fc <SystemInit+0x1b8>)
341915aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341915ae:	461a      	mov	r2, r3
341915b0:	2340      	movs	r3, #64	@ 0x40
341915b2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
341915b6:	4b13      	ldr	r3, [pc, #76]	@ (34191604 <SystemInit+0x1c0>)
341915b8:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
341915ba:	4b10      	ldr	r3, [pc, #64]	@ (341915fc <SystemInit+0x1b8>)
341915bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341915c0:	461a      	mov	r2, r3
341915c2:	2301      	movs	r3, #1
341915c4:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
341915c8:	4b0a      	ldr	r3, [pc, #40]	@ (341915f4 <SystemInit+0x1b0>)
341915ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341915ce:	4a09      	ldr	r2, [pc, #36]	@ (341915f4 <SystemInit+0x1b0>)
341915d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
341915d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
341915d8:	4b0c      	ldr	r3, [pc, #48]	@ (3419160c <SystemInit+0x1c8>)
341915da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341915de:	4a0b      	ldr	r2, [pc, #44]	@ (3419160c <SystemInit+0x1c8>)
341915e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
341915e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
341915e8:	bf00      	nop
341915ea:	46bd      	mov	sp, r7
341915ec:	f85d 7b04 	ldr.w	r7, [sp], #4
341915f0:	4770      	bx	lr
341915f2:	bf00      	nop
341915f4:	e000ed00 	.word	0xe000ed00
341915f8:	34180400 	.word	0x34180400
341915fc:	56028000 	.word	0x56028000
34191600:	e000edd0 	.word	0xe000edd0
34191604:	56008000 	.word	0x56008000
34191608:	56024800 	.word	0x56024800
3419160c:	e002ed00 	.word	0xe002ed00

34191610 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
34191610:	b480      	push	{r7}
34191612:	b08d      	sub	sp, #52	@ 0x34
34191614:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
34191616:	2300      	movs	r3, #0
34191618:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
3419161a:	2300      	movs	r3, #0
3419161c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
3419161e:	2300      	movs	r3, #0
34191620:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
34191622:	2300      	movs	r3, #0
34191624:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
34191626:	2300      	movs	r3, #0
34191628:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
3419162a:	2300      	movs	r3, #0
3419162c:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3419162e:	4b9b      	ldr	r3, [pc, #620]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
34191630:	6a1b      	ldr	r3, [r3, #32]
34191632:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34191636:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3419163a:	d029      	beq.n	34191690 <SystemCoreClockUpdate+0x80>
3419163c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34191640:	f200 8180 	bhi.w	34191944 <SystemCoreClockUpdate+0x334>
34191644:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34191648:	d01f      	beq.n	3419168a <SystemCoreClockUpdate+0x7a>
3419164a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3419164e:	f200 8179 	bhi.w	34191944 <SystemCoreClockUpdate+0x334>
34191652:	2b00      	cmp	r3, #0
34191654:	d003      	beq.n	3419165e <SystemCoreClockUpdate+0x4e>
34191656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3419165a:	d00a      	beq.n	34191672 <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
3419165c:	e172      	b.n	34191944 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3419165e:	4b8f      	ldr	r3, [pc, #572]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
34191660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34191662:	09db      	lsrs	r3, r3, #7
34191664:	f003 0303 	and.w	r3, r3, #3
34191668:	4a8d      	ldr	r2, [pc, #564]	@ (341918a0 <SystemCoreClockUpdate+0x290>)
3419166a:	fa22 f303 	lsr.w	r3, r2, r3
3419166e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34191670:	e169      	b.n	34191946 <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34191672:	4b8a      	ldr	r3, [pc, #552]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
34191674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34191676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3419167a:	2b00      	cmp	r3, #0
3419167c:	d102      	bne.n	34191684 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
3419167e:	4b89      	ldr	r3, [pc, #548]	@ (341918a4 <SystemCoreClockUpdate+0x294>)
34191680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34191682:	e160      	b.n	34191946 <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
34191684:	4b88      	ldr	r3, [pc, #544]	@ (341918a8 <SystemCoreClockUpdate+0x298>)
34191686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34191688:	e15d      	b.n	34191946 <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
3419168a:	4b88      	ldr	r3, [pc, #544]	@ (341918ac <SystemCoreClockUpdate+0x29c>)
3419168c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
3419168e:	e15a      	b.n	34191946 <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34191690:	4b82      	ldr	r3, [pc, #520]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
34191692:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34191696:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3419169a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419169e:	d066      	beq.n	3419176e <SystemCoreClockUpdate+0x15e>
341916a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341916a4:	f200 8091 	bhi.w	341917ca <SystemCoreClockUpdate+0x1ba>
341916a8:	2b00      	cmp	r3, #0
341916aa:	d003      	beq.n	341916b4 <SystemCoreClockUpdate+0xa4>
341916ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341916b0:	d02f      	beq.n	34191712 <SystemCoreClockUpdate+0x102>
341916b2:	e08a      	b.n	341917ca <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
341916b4:	4b79      	ldr	r3, [pc, #484]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
341916b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341916ba:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
341916bc:	68fb      	ldr	r3, [r7, #12]
341916be:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341916c2:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
341916c4:	68fb      	ldr	r3, [r7, #12]
341916c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341916ca:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341916cc:	693b      	ldr	r3, [r7, #16]
341916ce:	2b00      	cmp	r3, #0
341916d0:	f040 80a9 	bne.w	34191826 <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
341916d4:	68fb      	ldr	r3, [r7, #12]
341916d6:	0d1b      	lsrs	r3, r3, #20
341916d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341916dc:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
341916de:	68fb      	ldr	r3, [r7, #12]
341916e0:	0a1b      	lsrs	r3, r3, #8
341916e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
341916e6:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
341916e8:	4b6c      	ldr	r3, [pc, #432]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
341916ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
341916ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341916f2:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
341916f4:	4b69      	ldr	r3, [pc, #420]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
341916f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341916fa:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
341916fc:	68fb      	ldr	r3, [r7, #12]
341916fe:	0edb      	lsrs	r3, r3, #27
34191700:	f003 0307 	and.w	r3, r3, #7
34191704:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
34191706:	68fb      	ldr	r3, [r7, #12]
34191708:	0e1b      	lsrs	r3, r3, #24
3419170a:	f003 0307 	and.w	r3, r3, #7
3419170e:	61bb      	str	r3, [r7, #24]
      break;
34191710:	e089      	b.n	34191826 <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
34191712:	4b62      	ldr	r3, [pc, #392]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
34191714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34191718:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
3419171a:	68fb      	ldr	r3, [r7, #12]
3419171c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34191720:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
34191722:	68fb      	ldr	r3, [r7, #12]
34191724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34191728:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3419172a:	693b      	ldr	r3, [r7, #16]
3419172c:	2b00      	cmp	r3, #0
3419172e:	d17c      	bne.n	3419182a <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
34191730:	68fb      	ldr	r3, [r7, #12]
34191732:	0d1b      	lsrs	r3, r3, #20
34191734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34191738:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
3419173a:	68fb      	ldr	r3, [r7, #12]
3419173c:	0a1b      	lsrs	r3, r3, #8
3419173e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34191742:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34191744:	4b55      	ldr	r3, [pc, #340]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
34191746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3419174a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3419174e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34191750:	4b52      	ldr	r3, [pc, #328]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
34191752:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34191756:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
34191758:	68fb      	ldr	r3, [r7, #12]
3419175a:	0edb      	lsrs	r3, r3, #27
3419175c:	f003 0307 	and.w	r3, r3, #7
34191760:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
34191762:	68fb      	ldr	r3, [r7, #12]
34191764:	0e1b      	lsrs	r3, r3, #24
34191766:	f003 0307 	and.w	r3, r3, #7
3419176a:	61bb      	str	r3, [r7, #24]
      break;
3419176c:	e05d      	b.n	3419182a <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
3419176e:	4b4b      	ldr	r3, [pc, #300]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
34191770:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34191774:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
34191776:	68fb      	ldr	r3, [r7, #12]
34191778:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
3419177c:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
3419177e:	68fb      	ldr	r3, [r7, #12]
34191780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34191784:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34191786:	693b      	ldr	r3, [r7, #16]
34191788:	2b00      	cmp	r3, #0
3419178a:	d150      	bne.n	3419182e <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
3419178c:	68fb      	ldr	r3, [r7, #12]
3419178e:	0d1b      	lsrs	r3, r3, #20
34191790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34191794:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
34191796:	68fb      	ldr	r3, [r7, #12]
34191798:	0a1b      	lsrs	r3, r3, #8
3419179a:	f3c3 030b 	ubfx	r3, r3, #0, #12
3419179e:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
341917a0:	4b3e      	ldr	r3, [pc, #248]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
341917a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
341917a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341917aa:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
341917ac:	4b3b      	ldr	r3, [pc, #236]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
341917ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341917b2:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
341917b4:	68fb      	ldr	r3, [r7, #12]
341917b6:	0edb      	lsrs	r3, r3, #27
341917b8:	f003 0307 	and.w	r3, r3, #7
341917bc:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
341917be:	68fb      	ldr	r3, [r7, #12]
341917c0:	0e1b      	lsrs	r3, r3, #24
341917c2:	f003 0307 	and.w	r3, r3, #7
341917c6:	61bb      	str	r3, [r7, #24]
      break;
341917c8:	e031      	b.n	3419182e <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
341917ca:	4b34      	ldr	r3, [pc, #208]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
341917cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341917d0:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
341917d2:	68fb      	ldr	r3, [r7, #12]
341917d4:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341917d8:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
341917da:	68fb      	ldr	r3, [r7, #12]
341917dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341917e0:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341917e2:	693b      	ldr	r3, [r7, #16]
341917e4:	2b00      	cmp	r3, #0
341917e6:	d124      	bne.n	34191832 <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
341917e8:	68fb      	ldr	r3, [r7, #12]
341917ea:	0d1b      	lsrs	r3, r3, #20
341917ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341917f0:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
341917f2:	68fb      	ldr	r3, [r7, #12]
341917f4:	0a1b      	lsrs	r3, r3, #8
341917f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
341917fa:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
341917fc:	4b27      	ldr	r3, [pc, #156]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
341917fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34191802:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34191806:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34191808:	4b24      	ldr	r3, [pc, #144]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
3419180a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3419180e:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34191810:	68fb      	ldr	r3, [r7, #12]
34191812:	0edb      	lsrs	r3, r3, #27
34191814:	f003 0307 	and.w	r3, r3, #7
34191818:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
3419181a:	68fb      	ldr	r3, [r7, #12]
3419181c:	0e1b      	lsrs	r3, r3, #24
3419181e:	f003 0307 	and.w	r3, r3, #7
34191822:	61bb      	str	r3, [r7, #24]
      break;
34191824:	e005      	b.n	34191832 <SystemCoreClockUpdate+0x222>
      break;
34191826:	bf00      	nop
34191828:	e004      	b.n	34191834 <SystemCoreClockUpdate+0x224>
      break;
3419182a:	bf00      	nop
3419182c:	e002      	b.n	34191834 <SystemCoreClockUpdate+0x224>
      break;
3419182e:	bf00      	nop
34191830:	e000      	b.n	34191834 <SystemCoreClockUpdate+0x224>
      break;
34191832:	bf00      	nop
    switch (pllsource)
34191834:	697b      	ldr	r3, [r7, #20]
34191836:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419183a:	d02c      	beq.n	34191896 <SystemCoreClockUpdate+0x286>
3419183c:	697b      	ldr	r3, [r7, #20]
3419183e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191842:	d839      	bhi.n	341918b8 <SystemCoreClockUpdate+0x2a8>
34191844:	697b      	ldr	r3, [r7, #20]
34191846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419184a:	d021      	beq.n	34191890 <SystemCoreClockUpdate+0x280>
3419184c:	697b      	ldr	r3, [r7, #20]
3419184e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34191852:	d831      	bhi.n	341918b8 <SystemCoreClockUpdate+0x2a8>
34191854:	697b      	ldr	r3, [r7, #20]
34191856:	2b00      	cmp	r3, #0
34191858:	d004      	beq.n	34191864 <SystemCoreClockUpdate+0x254>
3419185a:	697b      	ldr	r3, [r7, #20]
3419185c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34191860:	d00a      	beq.n	34191878 <SystemCoreClockUpdate+0x268>
      break;
34191862:	e029      	b.n	341918b8 <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34191864:	4b0d      	ldr	r3, [pc, #52]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
34191866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34191868:	09db      	lsrs	r3, r3, #7
3419186a:	f003 0303 	and.w	r3, r3, #3
3419186e:	4a0c      	ldr	r2, [pc, #48]	@ (341918a0 <SystemCoreClockUpdate+0x290>)
34191870:	fa22 f303 	lsr.w	r3, r2, r3
34191874:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34191876:	e020      	b.n	341918ba <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34191878:	4b08      	ldr	r3, [pc, #32]	@ (3419189c <SystemCoreClockUpdate+0x28c>)
3419187a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419187c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34191880:	2b00      	cmp	r3, #0
34191882:	d102      	bne.n	3419188a <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
34191884:	4b07      	ldr	r3, [pc, #28]	@ (341918a4 <SystemCoreClockUpdate+0x294>)
34191886:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34191888:	e017      	b.n	341918ba <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
3419188a:	4b07      	ldr	r3, [pc, #28]	@ (341918a8 <SystemCoreClockUpdate+0x298>)
3419188c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3419188e:	e014      	b.n	341918ba <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
34191890:	4b06      	ldr	r3, [pc, #24]	@ (341918ac <SystemCoreClockUpdate+0x29c>)
34191892:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34191894:	e011      	b.n	341918ba <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34191896:	4b06      	ldr	r3, [pc, #24]	@ (341918b0 <SystemCoreClockUpdate+0x2a0>)
34191898:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3419189a:	e00e      	b.n	341918ba <SystemCoreClockUpdate+0x2aa>
3419189c:	56028000 	.word	0x56028000
341918a0:	03d09000 	.word	0x03d09000
341918a4:	003d0900 	.word	0x003d0900
341918a8:	00f42400 	.word	0x00f42400
341918ac:	02dc6c00 	.word	0x02dc6c00
341918b0:	00bb8000 	.word	0x00bb8000
341918b4:	4b800000 	.word	0x4b800000
      break;
341918b8:	bf00      	nop
    if (pllbypass == 0U)
341918ba:	693b      	ldr	r3, [r7, #16]
341918bc:	2b00      	cmp	r3, #0
341918be:	d134      	bne.n	3419192a <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
341918c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341918c2:	ee07 3a90 	vmov	s15, r3
341918c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341918ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341918cc:	ee07 3a90 	vmov	s15, r3
341918d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
341918d4:	6a3b      	ldr	r3, [r7, #32]
341918d6:	ee07 3a90 	vmov	s15, r3
341918da:	eeb8 6a67 	vcvt.f32.u32	s12, s15
341918de:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 341918b4 <SystemCoreClockUpdate+0x2a4>
341918e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
341918e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
341918ea:	ee67 6a27 	vmul.f32	s13, s14, s15
341918ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341918f0:	ee07 3a90 	vmov	s15, r3
341918f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341918f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
341918fc:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34191900:	69fb      	ldr	r3, [r7, #28]
34191902:	ee07 3a90 	vmov	s15, r3
34191906:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3419190a:	69bb      	ldr	r3, [r7, #24]
3419190c:	ee07 3a90 	vmov	s15, r3
34191910:	eef8 7a67 	vcvt.f32.u32	s15, s15
34191914:	ee27 7a27 	vmul.f32	s14, s14, s15
34191918:	edd7 6a02 	vldr	s13, [r7, #8]
3419191c:	eec6 7a87 	vdiv.f32	s15, s13, s14
34191920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34191924:	ee17 3a90 	vmov	r3, s15
34191928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
3419192a:	4b0b      	ldr	r3, [pc, #44]	@ (34191958 <SystemCoreClockUpdate+0x348>)
3419192c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34191930:	0c1b      	lsrs	r3, r3, #16
34191932:	b2db      	uxtb	r3, r3
34191934:	3301      	adds	r3, #1
34191936:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
34191938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
3419193a:	687b      	ldr	r3, [r7, #4]
3419193c:	fbb2 f3f3 	udiv	r3, r2, r3
34191940:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34191942:	e000      	b.n	34191946 <SystemCoreClockUpdate+0x336>
    break;
34191944:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
34191946:	4a05      	ldr	r2, [pc, #20]	@ (3419195c <SystemCoreClockUpdate+0x34c>)
34191948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3419194a:	6013      	str	r3, [r2, #0]
}
3419194c:	bf00      	nop
3419194e:	3734      	adds	r7, #52	@ 0x34
34191950:	46bd      	mov	sp, r7
34191952:	f85d 7b04 	ldr.w	r7, [sp], #4
34191956:	4770      	bx	lr
34191958:	56028000 	.word	0x56028000
3419195c:	341c00dc 	.word	0x341c00dc

34191960 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34191960:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34191964:	b588      	push	{r3, r7, lr}
34191966:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
34191968:	f7ff fe52 	bl	34191610 <SystemCoreClockUpdate>

  return SystemCoreClock;
3419196c:	4b06      	ldr	r3, [pc, #24]	@ (34191988 <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
3419196e:	681b      	ldr	r3, [r3, #0]
}
34191970:	4618      	mov	r0, r3
34191972:	46bd      	mov	sp, r7
34191974:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
34191978:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
3419197c:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34191980:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34191984:	4774      	bxns	lr
34191986:	bf00      	nop
34191988:	341c00dc 	.word	0x341c00dc

3419198c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3419198c:	480f      	ldr	r0, [pc, #60]	@ (341919cc <LoopForever+0x4>)
  msr   MSPLIM, r0
3419198e:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
34191992:	480f      	ldr	r0, [pc, #60]	@ (341919d0 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
34191994:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
34191996:	f7ff fd55 	bl	34191444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3419199a:	480e      	ldr	r0, [pc, #56]	@ (341919d4 <LoopForever+0xc>)
  ldr r1, =_edata
3419199c:	490e      	ldr	r1, [pc, #56]	@ (341919d8 <LoopForever+0x10>)
  ldr r2, =_sidata
3419199e:	4a0f      	ldr	r2, [pc, #60]	@ (341919dc <LoopForever+0x14>)
  movs r3, #0
341919a0:	2300      	movs	r3, #0
  b LoopCopyDataInit
341919a2:	e002      	b.n	341919aa <LoopCopyDataInit>

341919a4 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
341919a4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
341919a6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
341919a8:	3304      	adds	r3, #4

341919aa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
341919aa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
341919ac:	428c      	cmp	r4, r1
  bcc CopyDataInit
341919ae:	d3f9      	bcc.n	341919a4 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
341919b0:	4a0b      	ldr	r2, [pc, #44]	@ (341919e0 <LoopForever+0x18>)
  ldr r4, =_ebss
341919b2:	4c0c      	ldr	r4, [pc, #48]	@ (341919e4 <LoopForever+0x1c>)
  movs r3, #0
341919b4:	2300      	movs	r3, #0
  b LoopFillZerobss
341919b6:	e001      	b.n	341919bc <LoopFillZerobss>

341919b8 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
341919b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
341919ba:	3204      	adds	r2, #4

341919bc <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
341919bc:	42a2      	cmp	r2, r4
  bcc FillZerobss
341919be:	d3fb      	bcc.n	341919b8 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
341919c0:	f000 fac2 	bl	34191f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
341919c4:	f7fe fddc 	bl	34190580 <main>

341919c8 <LoopForever>:

LoopForever:
  b LoopForever
341919c8:	e7fe      	b.n	341919c8 <LoopForever>
341919ca:	0000      	.short	0x0000
  ldr   r0, =_sstack
341919cc:	341ff800 	.word	0x341ff800
  ldr   r0, =_estack
341919d0:	34200000 	.word	0x34200000
  ldr r0, =_sdata
341919d4:	341c0000 	.word	0x341c0000
  ldr r1, =_edata
341919d8:	341c013c 	.word	0x341c013c
  ldr r2, =_sidata
341919dc:	34196e4c 	.word	0x34196e4c
  ldr r2, =_sbss
341919e0:	341c0140 	.word	0x341c0140
  ldr r4, =_ebss
341919e4:	341c1944 	.word	0x341c1944

341919e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
341919e8:	e7fe      	b.n	341919e8 <ADC1_2_IRQHandler>
	...

341919ec <std>:
341919ec:	2300      	movs	r3, #0
341919ee:	b510      	push	{r4, lr}
341919f0:	4604      	mov	r4, r0
341919f2:	6083      	str	r3, [r0, #8]
341919f4:	8181      	strh	r1, [r0, #12]
341919f6:	4619      	mov	r1, r3
341919f8:	6643      	str	r3, [r0, #100]	@ 0x64
341919fa:	81c2      	strh	r2, [r0, #14]
341919fc:	2208      	movs	r2, #8
341919fe:	6183      	str	r3, [r0, #24]
34191a00:	e9c0 3300 	strd	r3, r3, [r0]
34191a04:	e9c0 3304 	strd	r3, r3, [r0, #16]
34191a08:	305c      	adds	r0, #92	@ 0x5c
34191a0a:	f000 fa49 	bl	34191ea0 <memset>
34191a0e:	4b0d      	ldr	r3, [pc, #52]	@ (34191a44 <std+0x58>)
34191a10:	6224      	str	r4, [r4, #32]
34191a12:	6263      	str	r3, [r4, #36]	@ 0x24
34191a14:	4b0c      	ldr	r3, [pc, #48]	@ (34191a48 <std+0x5c>)
34191a16:	62a3      	str	r3, [r4, #40]	@ 0x28
34191a18:	4b0c      	ldr	r3, [pc, #48]	@ (34191a4c <std+0x60>)
34191a1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
34191a1c:	4b0c      	ldr	r3, [pc, #48]	@ (34191a50 <std+0x64>)
34191a1e:	6323      	str	r3, [r4, #48]	@ 0x30
34191a20:	4b0c      	ldr	r3, [pc, #48]	@ (34191a54 <std+0x68>)
34191a22:	429c      	cmp	r4, r3
34191a24:	d006      	beq.n	34191a34 <std+0x48>
34191a26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
34191a2a:	4294      	cmp	r4, r2
34191a2c:	d002      	beq.n	34191a34 <std+0x48>
34191a2e:	33d0      	adds	r3, #208	@ 0xd0
34191a30:	429c      	cmp	r4, r3
34191a32:	d105      	bne.n	34191a40 <std+0x54>
34191a34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
34191a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34191a3c:	f000 baa8 	b.w	34191f90 <__retarget_lock_init_recursive>
34191a40:	bd10      	pop	{r4, pc}
34191a42:	bf00      	nop
34191a44:	34191cbd 	.word	0x34191cbd
34191a48:	34191cdf 	.word	0x34191cdf
34191a4c:	34191d17 	.word	0x34191d17
34191a50:	34191d3b 	.word	0x34191d3b
34191a54:	341c17f8 	.word	0x341c17f8

34191a58 <stdio_exit_handler>:
34191a58:	4a02      	ldr	r2, [pc, #8]	@ (34191a64 <stdio_exit_handler+0xc>)
34191a5a:	4903      	ldr	r1, [pc, #12]	@ (34191a68 <stdio_exit_handler+0x10>)
34191a5c:	4803      	ldr	r0, [pc, #12]	@ (34191a6c <stdio_exit_handler+0x14>)
34191a5e:	f000 b869 	b.w	34191b34 <_fwalk_sglue>
34191a62:	bf00      	nop
34191a64:	341c00e0 	.word	0x341c00e0
34191a68:	34192afd 	.word	0x34192afd
34191a6c:	341c00f0 	.word	0x341c00f0

34191a70 <cleanup_stdio>:
34191a70:	6841      	ldr	r1, [r0, #4]
34191a72:	4b0c      	ldr	r3, [pc, #48]	@ (34191aa4 <cleanup_stdio+0x34>)
34191a74:	4299      	cmp	r1, r3
34191a76:	b510      	push	{r4, lr}
34191a78:	4604      	mov	r4, r0
34191a7a:	d001      	beq.n	34191a80 <cleanup_stdio+0x10>
34191a7c:	f001 f83e 	bl	34192afc <_fflush_r>
34191a80:	68a1      	ldr	r1, [r4, #8]
34191a82:	4b09      	ldr	r3, [pc, #36]	@ (34191aa8 <cleanup_stdio+0x38>)
34191a84:	4299      	cmp	r1, r3
34191a86:	d002      	beq.n	34191a8e <cleanup_stdio+0x1e>
34191a88:	4620      	mov	r0, r4
34191a8a:	f001 f837 	bl	34192afc <_fflush_r>
34191a8e:	68e1      	ldr	r1, [r4, #12]
34191a90:	4b06      	ldr	r3, [pc, #24]	@ (34191aac <cleanup_stdio+0x3c>)
34191a92:	4299      	cmp	r1, r3
34191a94:	d004      	beq.n	34191aa0 <cleanup_stdio+0x30>
34191a96:	4620      	mov	r0, r4
34191a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34191a9c:	f001 b82e 	b.w	34192afc <_fflush_r>
34191aa0:	bd10      	pop	{r4, pc}
34191aa2:	bf00      	nop
34191aa4:	341c17f8 	.word	0x341c17f8
34191aa8:	341c1860 	.word	0x341c1860
34191aac:	341c18c8 	.word	0x341c18c8

34191ab0 <global_stdio_init.part.0>:
34191ab0:	b510      	push	{r4, lr}
34191ab2:	4b0b      	ldr	r3, [pc, #44]	@ (34191ae0 <global_stdio_init.part.0+0x30>)
34191ab4:	2104      	movs	r1, #4
34191ab6:	4c0b      	ldr	r4, [pc, #44]	@ (34191ae4 <global_stdio_init.part.0+0x34>)
34191ab8:	4a0b      	ldr	r2, [pc, #44]	@ (34191ae8 <global_stdio_init.part.0+0x38>)
34191aba:	4620      	mov	r0, r4
34191abc:	601a      	str	r2, [r3, #0]
34191abe:	2200      	movs	r2, #0
34191ac0:	f7ff ff94 	bl	341919ec <std>
34191ac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
34191ac8:	2201      	movs	r2, #1
34191aca:	2109      	movs	r1, #9
34191acc:	f7ff ff8e 	bl	341919ec <std>
34191ad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
34191ad4:	2202      	movs	r2, #2
34191ad6:	2112      	movs	r1, #18
34191ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34191adc:	f7ff bf86 	b.w	341919ec <std>
34191ae0:	341c1930 	.word	0x341c1930
34191ae4:	341c17f8 	.word	0x341c17f8
34191ae8:	34191a59 	.word	0x34191a59

34191aec <__sfp_lock_acquire>:
34191aec:	4801      	ldr	r0, [pc, #4]	@ (34191af4 <__sfp_lock_acquire+0x8>)
34191aee:	f000 ba50 	b.w	34191f92 <__retarget_lock_acquire_recursive>
34191af2:	bf00      	nop
34191af4:	341c1939 	.word	0x341c1939

34191af8 <__sfp_lock_release>:
34191af8:	4801      	ldr	r0, [pc, #4]	@ (34191b00 <__sfp_lock_release+0x8>)
34191afa:	f000 ba4b 	b.w	34191f94 <__retarget_lock_release_recursive>
34191afe:	bf00      	nop
34191b00:	341c1939 	.word	0x341c1939

34191b04 <__sinit>:
34191b04:	b510      	push	{r4, lr}
34191b06:	4604      	mov	r4, r0
34191b08:	f7ff fff0 	bl	34191aec <__sfp_lock_acquire>
34191b0c:	6a23      	ldr	r3, [r4, #32]
34191b0e:	b11b      	cbz	r3, 34191b18 <__sinit+0x14>
34191b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34191b14:	f7ff bff0 	b.w	34191af8 <__sfp_lock_release>
34191b18:	4b04      	ldr	r3, [pc, #16]	@ (34191b2c <__sinit+0x28>)
34191b1a:	6223      	str	r3, [r4, #32]
34191b1c:	4b04      	ldr	r3, [pc, #16]	@ (34191b30 <__sinit+0x2c>)
34191b1e:	681b      	ldr	r3, [r3, #0]
34191b20:	2b00      	cmp	r3, #0
34191b22:	d1f5      	bne.n	34191b10 <__sinit+0xc>
34191b24:	f7ff ffc4 	bl	34191ab0 <global_stdio_init.part.0>
34191b28:	e7f2      	b.n	34191b10 <__sinit+0xc>
34191b2a:	bf00      	nop
34191b2c:	34191a71 	.word	0x34191a71
34191b30:	341c1930 	.word	0x341c1930

34191b34 <_fwalk_sglue>:
34191b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34191b38:	4607      	mov	r7, r0
34191b3a:	4688      	mov	r8, r1
34191b3c:	4614      	mov	r4, r2
34191b3e:	2600      	movs	r6, #0
34191b40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
34191b44:	f1b9 0901 	subs.w	r9, r9, #1
34191b48:	d505      	bpl.n	34191b56 <_fwalk_sglue+0x22>
34191b4a:	6824      	ldr	r4, [r4, #0]
34191b4c:	2c00      	cmp	r4, #0
34191b4e:	d1f7      	bne.n	34191b40 <_fwalk_sglue+0xc>
34191b50:	4630      	mov	r0, r6
34191b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34191b56:	89ab      	ldrh	r3, [r5, #12]
34191b58:	2b01      	cmp	r3, #1
34191b5a:	d907      	bls.n	34191b6c <_fwalk_sglue+0x38>
34191b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
34191b60:	3301      	adds	r3, #1
34191b62:	d003      	beq.n	34191b6c <_fwalk_sglue+0x38>
34191b64:	4629      	mov	r1, r5
34191b66:	4638      	mov	r0, r7
34191b68:	47c0      	blx	r8
34191b6a:	4306      	orrs	r6, r0
34191b6c:	3568      	adds	r5, #104	@ 0x68
34191b6e:	e7e9      	b.n	34191b44 <_fwalk_sglue+0x10>

34191b70 <iprintf>:
34191b70:	b40f      	push	{r0, r1, r2, r3}
34191b72:	b507      	push	{r0, r1, r2, lr}
34191b74:	4906      	ldr	r1, [pc, #24]	@ (34191b90 <iprintf+0x20>)
34191b76:	ab04      	add	r3, sp, #16
34191b78:	6808      	ldr	r0, [r1, #0]
34191b7a:	f853 2b04 	ldr.w	r2, [r3], #4
34191b7e:	6881      	ldr	r1, [r0, #8]
34191b80:	9301      	str	r3, [sp, #4]
34191b82:	f000 fc8f 	bl	341924a4 <_vfiprintf_r>
34191b86:	b003      	add	sp, #12
34191b88:	f85d eb04 	ldr.w	lr, [sp], #4
34191b8c:	b004      	add	sp, #16
34191b8e:	4770      	bx	lr
34191b90:	341c00ec 	.word	0x341c00ec

34191b94 <_puts_r>:
34191b94:	6a03      	ldr	r3, [r0, #32]
34191b96:	b570      	push	{r4, r5, r6, lr}
34191b98:	4605      	mov	r5, r0
34191b9a:	460e      	mov	r6, r1
34191b9c:	6884      	ldr	r4, [r0, #8]
34191b9e:	b90b      	cbnz	r3, 34191ba4 <_puts_r+0x10>
34191ba0:	f7ff ffb0 	bl	34191b04 <__sinit>
34191ba4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34191ba6:	07db      	lsls	r3, r3, #31
34191ba8:	d405      	bmi.n	34191bb6 <_puts_r+0x22>
34191baa:	89a3      	ldrh	r3, [r4, #12]
34191bac:	0598      	lsls	r0, r3, #22
34191bae:	d402      	bmi.n	34191bb6 <_puts_r+0x22>
34191bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34191bb2:	f000 f9ee 	bl	34191f92 <__retarget_lock_acquire_recursive>
34191bb6:	89a3      	ldrh	r3, [r4, #12]
34191bb8:	0719      	lsls	r1, r3, #28
34191bba:	d502      	bpl.n	34191bc2 <_puts_r+0x2e>
34191bbc:	6923      	ldr	r3, [r4, #16]
34191bbe:	2b00      	cmp	r3, #0
34191bc0:	d135      	bne.n	34191c2e <_puts_r+0x9a>
34191bc2:	4621      	mov	r1, r4
34191bc4:	4628      	mov	r0, r5
34191bc6:	f000 f8fb 	bl	34191dc0 <__swsetup_r>
34191bca:	b380      	cbz	r0, 34191c2e <_puts_r+0x9a>
34191bcc:	f04f 35ff 	mov.w	r5, #4294967295
34191bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34191bd2:	07da      	lsls	r2, r3, #31
34191bd4:	d405      	bmi.n	34191be2 <_puts_r+0x4e>
34191bd6:	89a3      	ldrh	r3, [r4, #12]
34191bd8:	059b      	lsls	r3, r3, #22
34191bda:	d402      	bmi.n	34191be2 <_puts_r+0x4e>
34191bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34191bde:	f000 f9d9 	bl	34191f94 <__retarget_lock_release_recursive>
34191be2:	4628      	mov	r0, r5
34191be4:	bd70      	pop	{r4, r5, r6, pc}
34191be6:	2b00      	cmp	r3, #0
34191be8:	da04      	bge.n	34191bf4 <_puts_r+0x60>
34191bea:	69a2      	ldr	r2, [r4, #24]
34191bec:	429a      	cmp	r2, r3
34191bee:	dc17      	bgt.n	34191c20 <_puts_r+0x8c>
34191bf0:	290a      	cmp	r1, #10
34191bf2:	d015      	beq.n	34191c20 <_puts_r+0x8c>
34191bf4:	6823      	ldr	r3, [r4, #0]
34191bf6:	1c5a      	adds	r2, r3, #1
34191bf8:	6022      	str	r2, [r4, #0]
34191bfa:	7019      	strb	r1, [r3, #0]
34191bfc:	68a3      	ldr	r3, [r4, #8]
34191bfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
34191c02:	3b01      	subs	r3, #1
34191c04:	60a3      	str	r3, [r4, #8]
34191c06:	2900      	cmp	r1, #0
34191c08:	d1ed      	bne.n	34191be6 <_puts_r+0x52>
34191c0a:	2b00      	cmp	r3, #0
34191c0c:	da11      	bge.n	34191c32 <_puts_r+0x9e>
34191c0e:	4622      	mov	r2, r4
34191c10:	210a      	movs	r1, #10
34191c12:	4628      	mov	r0, r5
34191c14:	f000 f895 	bl	34191d42 <__swbuf_r>
34191c18:	3001      	adds	r0, #1
34191c1a:	d0d7      	beq.n	34191bcc <_puts_r+0x38>
34191c1c:	250a      	movs	r5, #10
34191c1e:	e7d7      	b.n	34191bd0 <_puts_r+0x3c>
34191c20:	4622      	mov	r2, r4
34191c22:	4628      	mov	r0, r5
34191c24:	f000 f88d 	bl	34191d42 <__swbuf_r>
34191c28:	3001      	adds	r0, #1
34191c2a:	d1e7      	bne.n	34191bfc <_puts_r+0x68>
34191c2c:	e7ce      	b.n	34191bcc <_puts_r+0x38>
34191c2e:	3e01      	subs	r6, #1
34191c30:	e7e4      	b.n	34191bfc <_puts_r+0x68>
34191c32:	6823      	ldr	r3, [r4, #0]
34191c34:	1c5a      	adds	r2, r3, #1
34191c36:	6022      	str	r2, [r4, #0]
34191c38:	220a      	movs	r2, #10
34191c3a:	701a      	strb	r2, [r3, #0]
34191c3c:	e7ee      	b.n	34191c1c <_puts_r+0x88>
	...

34191c40 <puts>:
34191c40:	4b02      	ldr	r3, [pc, #8]	@ (34191c4c <puts+0xc>)
34191c42:	4601      	mov	r1, r0
34191c44:	6818      	ldr	r0, [r3, #0]
34191c46:	f7ff bfa5 	b.w	34191b94 <_puts_r>
34191c4a:	bf00      	nop
34191c4c:	341c00ec 	.word	0x341c00ec

34191c50 <sniprintf>:
34191c50:	b40c      	push	{r2, r3}
34191c52:	4b19      	ldr	r3, [pc, #100]	@ (34191cb8 <sniprintf+0x68>)
34191c54:	b530      	push	{r4, r5, lr}
34191c56:	1e0c      	subs	r4, r1, #0
34191c58:	b09d      	sub	sp, #116	@ 0x74
34191c5a:	681d      	ldr	r5, [r3, #0]
34191c5c:	da08      	bge.n	34191c70 <sniprintf+0x20>
34191c5e:	238b      	movs	r3, #139	@ 0x8b
34191c60:	f04f 30ff 	mov.w	r0, #4294967295
34191c64:	602b      	str	r3, [r5, #0]
34191c66:	b01d      	add	sp, #116	@ 0x74
34191c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34191c6c:	b002      	add	sp, #8
34191c6e:	4770      	bx	lr
34191c70:	f44f 7302 	mov.w	r3, #520	@ 0x208
34191c74:	9002      	str	r0, [sp, #8]
34191c76:	9006      	str	r0, [sp, #24]
34191c78:	a902      	add	r1, sp, #8
34191c7a:	f8ad 3014 	strh.w	r3, [sp, #20]
34191c7e:	f04f 0300 	mov.w	r3, #0
34191c82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
34191c84:	4628      	mov	r0, r5
34191c86:	931b      	str	r3, [sp, #108]	@ 0x6c
34191c88:	bf14      	ite	ne
34191c8a:	f104 33ff 	addne.w	r3, r4, #4294967295
34191c8e:	4623      	moveq	r3, r4
34191c90:	9304      	str	r3, [sp, #16]
34191c92:	9307      	str	r3, [sp, #28]
34191c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
34191c98:	f8ad 3016 	strh.w	r3, [sp, #22]
34191c9c:	ab21      	add	r3, sp, #132	@ 0x84
34191c9e:	9301      	str	r3, [sp, #4]
34191ca0:	f000 fada 	bl	34192258 <_svfiprintf_r>
34191ca4:	1c43      	adds	r3, r0, #1
34191ca6:	bfbc      	itt	lt
34191ca8:	238b      	movlt	r3, #139	@ 0x8b
34191caa:	602b      	strlt	r3, [r5, #0]
34191cac:	2c00      	cmp	r4, #0
34191cae:	d0da      	beq.n	34191c66 <sniprintf+0x16>
34191cb0:	9b02      	ldr	r3, [sp, #8]
34191cb2:	2200      	movs	r2, #0
34191cb4:	701a      	strb	r2, [r3, #0]
34191cb6:	e7d6      	b.n	34191c66 <sniprintf+0x16>
34191cb8:	341c00ec 	.word	0x341c00ec

34191cbc <__sread>:
34191cbc:	b510      	push	{r4, lr}
34191cbe:	460c      	mov	r4, r1
34191cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34191cc4:	f000 f916 	bl	34191ef4 <_read_r>
34191cc8:	2800      	cmp	r0, #0
34191cca:	bfab      	itete	ge
34191ccc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
34191cce:	89a3      	ldrhlt	r3, [r4, #12]
34191cd0:	181b      	addge	r3, r3, r0
34191cd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
34191cd6:	bfac      	ite	ge
34191cd8:	6563      	strge	r3, [r4, #84]	@ 0x54
34191cda:	81a3      	strhlt	r3, [r4, #12]
34191cdc:	bd10      	pop	{r4, pc}

34191cde <__swrite>:
34191cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34191ce2:	461f      	mov	r7, r3
34191ce4:	898b      	ldrh	r3, [r1, #12]
34191ce6:	4605      	mov	r5, r0
34191ce8:	460c      	mov	r4, r1
34191cea:	05db      	lsls	r3, r3, #23
34191cec:	4616      	mov	r6, r2
34191cee:	d505      	bpl.n	34191cfc <__swrite+0x1e>
34191cf0:	2302      	movs	r3, #2
34191cf2:	2200      	movs	r2, #0
34191cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34191cf8:	f000 f8ea 	bl	34191ed0 <_lseek_r>
34191cfc:	89a3      	ldrh	r3, [r4, #12]
34191cfe:	4632      	mov	r2, r6
34191d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34191d04:	4628      	mov	r0, r5
34191d06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
34191d0a:	81a3      	strh	r3, [r4, #12]
34191d0c:	463b      	mov	r3, r7
34191d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
34191d12:	f000 b901 	b.w	34191f18 <_write_r>

34191d16 <__sseek>:
34191d16:	b510      	push	{r4, lr}
34191d18:	460c      	mov	r4, r1
34191d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34191d1e:	f000 f8d7 	bl	34191ed0 <_lseek_r>
34191d22:	1c43      	adds	r3, r0, #1
34191d24:	89a3      	ldrh	r3, [r4, #12]
34191d26:	bf15      	itete	ne
34191d28:	6560      	strne	r0, [r4, #84]	@ 0x54
34191d2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
34191d2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
34191d32:	81a3      	strheq	r3, [r4, #12]
34191d34:	bf18      	it	ne
34191d36:	81a3      	strhne	r3, [r4, #12]
34191d38:	bd10      	pop	{r4, pc}

34191d3a <__sclose>:
34191d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34191d3e:	f000 b8b7 	b.w	34191eb0 <_close_r>

34191d42 <__swbuf_r>:
34191d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34191d44:	460e      	mov	r6, r1
34191d46:	4614      	mov	r4, r2
34191d48:	4605      	mov	r5, r0
34191d4a:	b118      	cbz	r0, 34191d54 <__swbuf_r+0x12>
34191d4c:	6a03      	ldr	r3, [r0, #32]
34191d4e:	b90b      	cbnz	r3, 34191d54 <__swbuf_r+0x12>
34191d50:	f7ff fed8 	bl	34191b04 <__sinit>
34191d54:	69a3      	ldr	r3, [r4, #24]
34191d56:	60a3      	str	r3, [r4, #8]
34191d58:	89a3      	ldrh	r3, [r4, #12]
34191d5a:	071a      	lsls	r2, r3, #28
34191d5c:	d501      	bpl.n	34191d62 <__swbuf_r+0x20>
34191d5e:	6923      	ldr	r3, [r4, #16]
34191d60:	b943      	cbnz	r3, 34191d74 <__swbuf_r+0x32>
34191d62:	4621      	mov	r1, r4
34191d64:	4628      	mov	r0, r5
34191d66:	f000 f82b 	bl	34191dc0 <__swsetup_r>
34191d6a:	b118      	cbz	r0, 34191d74 <__swbuf_r+0x32>
34191d6c:	f04f 37ff 	mov.w	r7, #4294967295
34191d70:	4638      	mov	r0, r7
34191d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34191d74:	6823      	ldr	r3, [r4, #0]
34191d76:	b2f6      	uxtb	r6, r6
34191d78:	6922      	ldr	r2, [r4, #16]
34191d7a:	4637      	mov	r7, r6
34191d7c:	1a98      	subs	r0, r3, r2
34191d7e:	6963      	ldr	r3, [r4, #20]
34191d80:	4283      	cmp	r3, r0
34191d82:	dc05      	bgt.n	34191d90 <__swbuf_r+0x4e>
34191d84:	4621      	mov	r1, r4
34191d86:	4628      	mov	r0, r5
34191d88:	f000 feb8 	bl	34192afc <_fflush_r>
34191d8c:	2800      	cmp	r0, #0
34191d8e:	d1ed      	bne.n	34191d6c <__swbuf_r+0x2a>
34191d90:	68a3      	ldr	r3, [r4, #8]
34191d92:	3b01      	subs	r3, #1
34191d94:	60a3      	str	r3, [r4, #8]
34191d96:	6823      	ldr	r3, [r4, #0]
34191d98:	1c5a      	adds	r2, r3, #1
34191d9a:	6022      	str	r2, [r4, #0]
34191d9c:	701e      	strb	r6, [r3, #0]
34191d9e:	1c43      	adds	r3, r0, #1
34191da0:	6962      	ldr	r2, [r4, #20]
34191da2:	429a      	cmp	r2, r3
34191da4:	d004      	beq.n	34191db0 <__swbuf_r+0x6e>
34191da6:	89a3      	ldrh	r3, [r4, #12]
34191da8:	07db      	lsls	r3, r3, #31
34191daa:	d5e1      	bpl.n	34191d70 <__swbuf_r+0x2e>
34191dac:	2e0a      	cmp	r6, #10
34191dae:	d1df      	bne.n	34191d70 <__swbuf_r+0x2e>
34191db0:	4621      	mov	r1, r4
34191db2:	4628      	mov	r0, r5
34191db4:	f000 fea2 	bl	34192afc <_fflush_r>
34191db8:	2800      	cmp	r0, #0
34191dba:	d0d9      	beq.n	34191d70 <__swbuf_r+0x2e>
34191dbc:	e7d6      	b.n	34191d6c <__swbuf_r+0x2a>
	...

34191dc0 <__swsetup_r>:
34191dc0:	b538      	push	{r3, r4, r5, lr}
34191dc2:	4b29      	ldr	r3, [pc, #164]	@ (34191e68 <__swsetup_r+0xa8>)
34191dc4:	4605      	mov	r5, r0
34191dc6:	460c      	mov	r4, r1
34191dc8:	6818      	ldr	r0, [r3, #0]
34191dca:	b118      	cbz	r0, 34191dd4 <__swsetup_r+0x14>
34191dcc:	6a03      	ldr	r3, [r0, #32]
34191dce:	b90b      	cbnz	r3, 34191dd4 <__swsetup_r+0x14>
34191dd0:	f7ff fe98 	bl	34191b04 <__sinit>
34191dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34191dd8:	0719      	lsls	r1, r3, #28
34191dda:	d422      	bmi.n	34191e22 <__swsetup_r+0x62>
34191ddc:	06da      	lsls	r2, r3, #27
34191dde:	d407      	bmi.n	34191df0 <__swsetup_r+0x30>
34191de0:	2209      	movs	r2, #9
34191de2:	602a      	str	r2, [r5, #0]
34191de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34191de8:	f04f 30ff 	mov.w	r0, #4294967295
34191dec:	81a3      	strh	r3, [r4, #12]
34191dee:	e033      	b.n	34191e58 <__swsetup_r+0x98>
34191df0:	0758      	lsls	r0, r3, #29
34191df2:	d512      	bpl.n	34191e1a <__swsetup_r+0x5a>
34191df4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
34191df6:	b141      	cbz	r1, 34191e0a <__swsetup_r+0x4a>
34191df8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
34191dfc:	4299      	cmp	r1, r3
34191dfe:	d002      	beq.n	34191e06 <__swsetup_r+0x46>
34191e00:	4628      	mov	r0, r5
34191e02:	f000 f8d5 	bl	34191fb0 <_free_r>
34191e06:	2300      	movs	r3, #0
34191e08:	6363      	str	r3, [r4, #52]	@ 0x34
34191e0a:	89a3      	ldrh	r3, [r4, #12]
34191e0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
34191e10:	81a3      	strh	r3, [r4, #12]
34191e12:	2300      	movs	r3, #0
34191e14:	6063      	str	r3, [r4, #4]
34191e16:	6923      	ldr	r3, [r4, #16]
34191e18:	6023      	str	r3, [r4, #0]
34191e1a:	89a3      	ldrh	r3, [r4, #12]
34191e1c:	f043 0308 	orr.w	r3, r3, #8
34191e20:	81a3      	strh	r3, [r4, #12]
34191e22:	6923      	ldr	r3, [r4, #16]
34191e24:	b94b      	cbnz	r3, 34191e3a <__swsetup_r+0x7a>
34191e26:	89a3      	ldrh	r3, [r4, #12]
34191e28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
34191e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34191e30:	d003      	beq.n	34191e3a <__swsetup_r+0x7a>
34191e32:	4621      	mov	r1, r4
34191e34:	4628      	mov	r0, r5
34191e36:	f000 feae 	bl	34192b96 <__smakebuf_r>
34191e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34191e3e:	f013 0201 	ands.w	r2, r3, #1
34191e42:	d00a      	beq.n	34191e5a <__swsetup_r+0x9a>
34191e44:	2200      	movs	r2, #0
34191e46:	60a2      	str	r2, [r4, #8]
34191e48:	6962      	ldr	r2, [r4, #20]
34191e4a:	4252      	negs	r2, r2
34191e4c:	61a2      	str	r2, [r4, #24]
34191e4e:	6922      	ldr	r2, [r4, #16]
34191e50:	b942      	cbnz	r2, 34191e64 <__swsetup_r+0xa4>
34191e52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
34191e56:	d1c5      	bne.n	34191de4 <__swsetup_r+0x24>
34191e58:	bd38      	pop	{r3, r4, r5, pc}
34191e5a:	0799      	lsls	r1, r3, #30
34191e5c:	bf58      	it	pl
34191e5e:	6962      	ldrpl	r2, [r4, #20]
34191e60:	60a2      	str	r2, [r4, #8]
34191e62:	e7f4      	b.n	34191e4e <__swsetup_r+0x8e>
34191e64:	2000      	movs	r0, #0
34191e66:	e7f7      	b.n	34191e58 <__swsetup_r+0x98>
34191e68:	341c00ec 	.word	0x341c00ec

34191e6c <memmove>:
34191e6c:	4288      	cmp	r0, r1
34191e6e:	b510      	push	{r4, lr}
34191e70:	eb01 0402 	add.w	r4, r1, r2
34191e74:	d902      	bls.n	34191e7c <memmove+0x10>
34191e76:	4284      	cmp	r4, r0
34191e78:	4623      	mov	r3, r4
34191e7a:	d807      	bhi.n	34191e8c <memmove+0x20>
34191e7c:	1e43      	subs	r3, r0, #1
34191e7e:	42a1      	cmp	r1, r4
34191e80:	d008      	beq.n	34191e94 <memmove+0x28>
34191e82:	f811 2b01 	ldrb.w	r2, [r1], #1
34191e86:	f803 2f01 	strb.w	r2, [r3, #1]!
34191e8a:	e7f8      	b.n	34191e7e <memmove+0x12>
34191e8c:	4402      	add	r2, r0
34191e8e:	4601      	mov	r1, r0
34191e90:	428a      	cmp	r2, r1
34191e92:	d100      	bne.n	34191e96 <memmove+0x2a>
34191e94:	bd10      	pop	{r4, pc}
34191e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
34191e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
34191e9e:	e7f7      	b.n	34191e90 <memmove+0x24>

34191ea0 <memset>:
34191ea0:	4402      	add	r2, r0
34191ea2:	4603      	mov	r3, r0
34191ea4:	4293      	cmp	r3, r2
34191ea6:	d100      	bne.n	34191eaa <memset+0xa>
34191ea8:	4770      	bx	lr
34191eaa:	f803 1b01 	strb.w	r1, [r3], #1
34191eae:	e7f9      	b.n	34191ea4 <memset+0x4>

34191eb0 <_close_r>:
34191eb0:	b538      	push	{r3, r4, r5, lr}
34191eb2:	2300      	movs	r3, #0
34191eb4:	4d05      	ldr	r5, [pc, #20]	@ (34191ecc <_close_r+0x1c>)
34191eb6:	4604      	mov	r4, r0
34191eb8:	4608      	mov	r0, r1
34191eba:	602b      	str	r3, [r5, #0]
34191ebc:	f7ff fa57 	bl	3419136e <_close>
34191ec0:	1c43      	adds	r3, r0, #1
34191ec2:	d102      	bne.n	34191eca <_close_r+0x1a>
34191ec4:	682b      	ldr	r3, [r5, #0]
34191ec6:	b103      	cbz	r3, 34191eca <_close_r+0x1a>
34191ec8:	6023      	str	r3, [r4, #0]
34191eca:	bd38      	pop	{r3, r4, r5, pc}
34191ecc:	341c1934 	.word	0x341c1934

34191ed0 <_lseek_r>:
34191ed0:	b538      	push	{r3, r4, r5, lr}
34191ed2:	4604      	mov	r4, r0
34191ed4:	4d06      	ldr	r5, [pc, #24]	@ (34191ef0 <_lseek_r+0x20>)
34191ed6:	4608      	mov	r0, r1
34191ed8:	4611      	mov	r1, r2
34191eda:	2200      	movs	r2, #0
34191edc:	602a      	str	r2, [r5, #0]
34191ede:	461a      	mov	r2, r3
34191ee0:	f7ff fa6c 	bl	341913bc <_lseek>
34191ee4:	1c43      	adds	r3, r0, #1
34191ee6:	d102      	bne.n	34191eee <_lseek_r+0x1e>
34191ee8:	682b      	ldr	r3, [r5, #0]
34191eea:	b103      	cbz	r3, 34191eee <_lseek_r+0x1e>
34191eec:	6023      	str	r3, [r4, #0]
34191eee:	bd38      	pop	{r3, r4, r5, pc}
34191ef0:	341c1934 	.word	0x341c1934

34191ef4 <_read_r>:
34191ef4:	b538      	push	{r3, r4, r5, lr}
34191ef6:	4604      	mov	r4, r0
34191ef8:	4d06      	ldr	r5, [pc, #24]	@ (34191f14 <_read_r+0x20>)
34191efa:	4608      	mov	r0, r1
34191efc:	4611      	mov	r1, r2
34191efe:	2200      	movs	r2, #0
34191f00:	602a      	str	r2, [r5, #0]
34191f02:	461a      	mov	r2, r3
34191f04:	f7ff f9fa 	bl	341912fc <_read>
34191f08:	1c43      	adds	r3, r0, #1
34191f0a:	d102      	bne.n	34191f12 <_read_r+0x1e>
34191f0c:	682b      	ldr	r3, [r5, #0]
34191f0e:	b103      	cbz	r3, 34191f12 <_read_r+0x1e>
34191f10:	6023      	str	r3, [r4, #0]
34191f12:	bd38      	pop	{r3, r4, r5, pc}
34191f14:	341c1934 	.word	0x341c1934

34191f18 <_write_r>:
34191f18:	b538      	push	{r3, r4, r5, lr}
34191f1a:	4604      	mov	r4, r0
34191f1c:	4d06      	ldr	r5, [pc, #24]	@ (34191f38 <_write_r+0x20>)
34191f1e:	4608      	mov	r0, r1
34191f20:	4611      	mov	r1, r2
34191f22:	2200      	movs	r2, #0
34191f24:	602a      	str	r2, [r5, #0]
34191f26:	461a      	mov	r2, r3
34191f28:	f7ff fa05 	bl	34191336 <_write>
34191f2c:	1c43      	adds	r3, r0, #1
34191f2e:	d102      	bne.n	34191f36 <_write_r+0x1e>
34191f30:	682b      	ldr	r3, [r5, #0]
34191f32:	b103      	cbz	r3, 34191f36 <_write_r+0x1e>
34191f34:	6023      	str	r3, [r4, #0]
34191f36:	bd38      	pop	{r3, r4, r5, pc}
34191f38:	341c1934 	.word	0x341c1934

34191f3c <__errno>:
34191f3c:	4b01      	ldr	r3, [pc, #4]	@ (34191f44 <__errno+0x8>)
34191f3e:	6818      	ldr	r0, [r3, #0]
34191f40:	4770      	bx	lr
34191f42:	bf00      	nop
34191f44:	341c00ec 	.word	0x341c00ec

34191f48 <__libc_init_array>:
34191f48:	b570      	push	{r4, r5, r6, lr}
34191f4a:	4d0d      	ldr	r5, [pc, #52]	@ (34191f80 <__libc_init_array+0x38>)
34191f4c:	2600      	movs	r6, #0
34191f4e:	4c0d      	ldr	r4, [pc, #52]	@ (34191f84 <__libc_init_array+0x3c>)
34191f50:	1b64      	subs	r4, r4, r5
34191f52:	10a4      	asrs	r4, r4, #2
34191f54:	42a6      	cmp	r6, r4
34191f56:	d109      	bne.n	34191f6c <__libc_init_array+0x24>
34191f58:	4d0b      	ldr	r5, [pc, #44]	@ (34191f88 <__libc_init_array+0x40>)
34191f5a:	2600      	movs	r6, #0
34191f5c:	4c0b      	ldr	r4, [pc, #44]	@ (34191f8c <__libc_init_array+0x44>)
34191f5e:	f001 fd57 	bl	34193a10 <_init>
34191f62:	1b64      	subs	r4, r4, r5
34191f64:	10a4      	asrs	r4, r4, #2
34191f66:	42a6      	cmp	r6, r4
34191f68:	d105      	bne.n	34191f76 <__libc_init_array+0x2e>
34191f6a:	bd70      	pop	{r4, r5, r6, pc}
34191f6c:	f855 3b04 	ldr.w	r3, [r5], #4
34191f70:	3601      	adds	r6, #1
34191f72:	4798      	blx	r3
34191f74:	e7ee      	b.n	34191f54 <__libc_init_array+0xc>
34191f76:	f855 3b04 	ldr.w	r3, [r5], #4
34191f7a:	3601      	adds	r6, #1
34191f7c:	4798      	blx	r3
34191f7e:	e7f2      	b.n	34191f66 <__libc_init_array+0x1e>
34191f80:	34196e44 	.word	0x34196e44
34191f84:	34196e44 	.word	0x34196e44
34191f88:	34196e44 	.word	0x34196e44
34191f8c:	34196e48 	.word	0x34196e48

34191f90 <__retarget_lock_init_recursive>:
34191f90:	4770      	bx	lr

34191f92 <__retarget_lock_acquire_recursive>:
34191f92:	4770      	bx	lr

34191f94 <__retarget_lock_release_recursive>:
34191f94:	4770      	bx	lr

34191f96 <memcpy>:
34191f96:	440a      	add	r2, r1
34191f98:	1e43      	subs	r3, r0, #1
34191f9a:	4291      	cmp	r1, r2
34191f9c:	d100      	bne.n	34191fa0 <memcpy+0xa>
34191f9e:	4770      	bx	lr
34191fa0:	b510      	push	{r4, lr}
34191fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
34191fa6:	4291      	cmp	r1, r2
34191fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
34191fac:	d1f9      	bne.n	34191fa2 <memcpy+0xc>
34191fae:	bd10      	pop	{r4, pc}

34191fb0 <_free_r>:
34191fb0:	b538      	push	{r3, r4, r5, lr}
34191fb2:	4605      	mov	r5, r0
34191fb4:	2900      	cmp	r1, #0
34191fb6:	d041      	beq.n	3419203c <_free_r+0x8c>
34191fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
34191fbc:	1f0c      	subs	r4, r1, #4
34191fbe:	2b00      	cmp	r3, #0
34191fc0:	bfb8      	it	lt
34191fc2:	18e4      	addlt	r4, r4, r3
34191fc4:	f000 f8e0 	bl	34192188 <__malloc_lock>
34191fc8:	4a1d      	ldr	r2, [pc, #116]	@ (34192040 <_free_r+0x90>)
34191fca:	6813      	ldr	r3, [r2, #0]
34191fcc:	b933      	cbnz	r3, 34191fdc <_free_r+0x2c>
34191fce:	6063      	str	r3, [r4, #4]
34191fd0:	6014      	str	r4, [r2, #0]
34191fd2:	4628      	mov	r0, r5
34191fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
34191fd8:	f000 b8dc 	b.w	34192194 <__malloc_unlock>
34191fdc:	42a3      	cmp	r3, r4
34191fde:	d908      	bls.n	34191ff2 <_free_r+0x42>
34191fe0:	6820      	ldr	r0, [r4, #0]
34191fe2:	1821      	adds	r1, r4, r0
34191fe4:	428b      	cmp	r3, r1
34191fe6:	bf01      	itttt	eq
34191fe8:	6819      	ldreq	r1, [r3, #0]
34191fea:	685b      	ldreq	r3, [r3, #4]
34191fec:	1809      	addeq	r1, r1, r0
34191fee:	6021      	streq	r1, [r4, #0]
34191ff0:	e7ed      	b.n	34191fce <_free_r+0x1e>
34191ff2:	461a      	mov	r2, r3
34191ff4:	685b      	ldr	r3, [r3, #4]
34191ff6:	b10b      	cbz	r3, 34191ffc <_free_r+0x4c>
34191ff8:	42a3      	cmp	r3, r4
34191ffa:	d9fa      	bls.n	34191ff2 <_free_r+0x42>
34191ffc:	6811      	ldr	r1, [r2, #0]
34191ffe:	1850      	adds	r0, r2, r1
34192000:	42a0      	cmp	r0, r4
34192002:	d10b      	bne.n	3419201c <_free_r+0x6c>
34192004:	6820      	ldr	r0, [r4, #0]
34192006:	4401      	add	r1, r0
34192008:	1850      	adds	r0, r2, r1
3419200a:	6011      	str	r1, [r2, #0]
3419200c:	4283      	cmp	r3, r0
3419200e:	d1e0      	bne.n	34191fd2 <_free_r+0x22>
34192010:	6818      	ldr	r0, [r3, #0]
34192012:	685b      	ldr	r3, [r3, #4]
34192014:	4408      	add	r0, r1
34192016:	6053      	str	r3, [r2, #4]
34192018:	6010      	str	r0, [r2, #0]
3419201a:	e7da      	b.n	34191fd2 <_free_r+0x22>
3419201c:	d902      	bls.n	34192024 <_free_r+0x74>
3419201e:	230c      	movs	r3, #12
34192020:	602b      	str	r3, [r5, #0]
34192022:	e7d6      	b.n	34191fd2 <_free_r+0x22>
34192024:	6820      	ldr	r0, [r4, #0]
34192026:	1821      	adds	r1, r4, r0
34192028:	428b      	cmp	r3, r1
3419202a:	bf02      	ittt	eq
3419202c:	6819      	ldreq	r1, [r3, #0]
3419202e:	685b      	ldreq	r3, [r3, #4]
34192030:	1809      	addeq	r1, r1, r0
34192032:	6063      	str	r3, [r4, #4]
34192034:	bf08      	it	eq
34192036:	6021      	streq	r1, [r4, #0]
34192038:	6054      	str	r4, [r2, #4]
3419203a:	e7ca      	b.n	34191fd2 <_free_r+0x22>
3419203c:	bd38      	pop	{r3, r4, r5, pc}
3419203e:	bf00      	nop
34192040:	341c1940 	.word	0x341c1940

34192044 <sbrk_aligned>:
34192044:	b570      	push	{r4, r5, r6, lr}
34192046:	4e0f      	ldr	r6, [pc, #60]	@ (34192084 <sbrk_aligned+0x40>)
34192048:	460c      	mov	r4, r1
3419204a:	4605      	mov	r5, r0
3419204c:	6831      	ldr	r1, [r6, #0]
3419204e:	b911      	cbnz	r1, 34192056 <sbrk_aligned+0x12>
34192050:	f000 fe00 	bl	34192c54 <_sbrk_r>
34192054:	6030      	str	r0, [r6, #0]
34192056:	4621      	mov	r1, r4
34192058:	4628      	mov	r0, r5
3419205a:	f000 fdfb 	bl	34192c54 <_sbrk_r>
3419205e:	1c43      	adds	r3, r0, #1
34192060:	d103      	bne.n	3419206a <sbrk_aligned+0x26>
34192062:	f04f 34ff 	mov.w	r4, #4294967295
34192066:	4620      	mov	r0, r4
34192068:	bd70      	pop	{r4, r5, r6, pc}
3419206a:	1cc4      	adds	r4, r0, #3
3419206c:	f024 0403 	bic.w	r4, r4, #3
34192070:	42a0      	cmp	r0, r4
34192072:	d0f8      	beq.n	34192066 <sbrk_aligned+0x22>
34192074:	1a21      	subs	r1, r4, r0
34192076:	4628      	mov	r0, r5
34192078:	f000 fdec 	bl	34192c54 <_sbrk_r>
3419207c:	3001      	adds	r0, #1
3419207e:	d1f2      	bne.n	34192066 <sbrk_aligned+0x22>
34192080:	e7ef      	b.n	34192062 <sbrk_aligned+0x1e>
34192082:	bf00      	nop
34192084:	341c193c 	.word	0x341c193c

34192088 <_malloc_r>:
34192088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3419208c:	1ccd      	adds	r5, r1, #3
3419208e:	4606      	mov	r6, r0
34192090:	f025 0503 	bic.w	r5, r5, #3
34192094:	3508      	adds	r5, #8
34192096:	2d0c      	cmp	r5, #12
34192098:	bf38      	it	cc
3419209a:	250c      	movcc	r5, #12
3419209c:	2d00      	cmp	r5, #0
3419209e:	db01      	blt.n	341920a4 <_malloc_r+0x1c>
341920a0:	42a9      	cmp	r1, r5
341920a2:	d904      	bls.n	341920ae <_malloc_r+0x26>
341920a4:	230c      	movs	r3, #12
341920a6:	6033      	str	r3, [r6, #0]
341920a8:	2000      	movs	r0, #0
341920aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
341920ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 34192184 <_malloc_r+0xfc>
341920b2:	f000 f869 	bl	34192188 <__malloc_lock>
341920b6:	f8d8 3000 	ldr.w	r3, [r8]
341920ba:	461c      	mov	r4, r3
341920bc:	bb44      	cbnz	r4, 34192110 <_malloc_r+0x88>
341920be:	4629      	mov	r1, r5
341920c0:	4630      	mov	r0, r6
341920c2:	f7ff ffbf 	bl	34192044 <sbrk_aligned>
341920c6:	1c43      	adds	r3, r0, #1
341920c8:	4604      	mov	r4, r0
341920ca:	d158      	bne.n	3419217e <_malloc_r+0xf6>
341920cc:	f8d8 4000 	ldr.w	r4, [r8]
341920d0:	4627      	mov	r7, r4
341920d2:	2f00      	cmp	r7, #0
341920d4:	d143      	bne.n	3419215e <_malloc_r+0xd6>
341920d6:	2c00      	cmp	r4, #0
341920d8:	d04b      	beq.n	34192172 <_malloc_r+0xea>
341920da:	6823      	ldr	r3, [r4, #0]
341920dc:	4639      	mov	r1, r7
341920de:	4630      	mov	r0, r6
341920e0:	eb04 0903 	add.w	r9, r4, r3
341920e4:	f000 fdb6 	bl	34192c54 <_sbrk_r>
341920e8:	4581      	cmp	r9, r0
341920ea:	d142      	bne.n	34192172 <_malloc_r+0xea>
341920ec:	6821      	ldr	r1, [r4, #0]
341920ee:	4630      	mov	r0, r6
341920f0:	1a6d      	subs	r5, r5, r1
341920f2:	4629      	mov	r1, r5
341920f4:	f7ff ffa6 	bl	34192044 <sbrk_aligned>
341920f8:	3001      	adds	r0, #1
341920fa:	d03a      	beq.n	34192172 <_malloc_r+0xea>
341920fc:	6823      	ldr	r3, [r4, #0]
341920fe:	442b      	add	r3, r5
34192100:	6023      	str	r3, [r4, #0]
34192102:	f8d8 3000 	ldr.w	r3, [r8]
34192106:	685a      	ldr	r2, [r3, #4]
34192108:	bb62      	cbnz	r2, 34192164 <_malloc_r+0xdc>
3419210a:	f8c8 7000 	str.w	r7, [r8]
3419210e:	e00f      	b.n	34192130 <_malloc_r+0xa8>
34192110:	6822      	ldr	r2, [r4, #0]
34192112:	1b52      	subs	r2, r2, r5
34192114:	d420      	bmi.n	34192158 <_malloc_r+0xd0>
34192116:	2a0b      	cmp	r2, #11
34192118:	d917      	bls.n	3419214a <_malloc_r+0xc2>
3419211a:	1961      	adds	r1, r4, r5
3419211c:	42a3      	cmp	r3, r4
3419211e:	6025      	str	r5, [r4, #0]
34192120:	bf18      	it	ne
34192122:	6059      	strne	r1, [r3, #4]
34192124:	6863      	ldr	r3, [r4, #4]
34192126:	bf08      	it	eq
34192128:	f8c8 1000 	streq.w	r1, [r8]
3419212c:	5162      	str	r2, [r4, r5]
3419212e:	604b      	str	r3, [r1, #4]
34192130:	4630      	mov	r0, r6
34192132:	f000 f82f 	bl	34192194 <__malloc_unlock>
34192136:	f104 000b 	add.w	r0, r4, #11
3419213a:	1d23      	adds	r3, r4, #4
3419213c:	f020 0007 	bic.w	r0, r0, #7
34192140:	1ac2      	subs	r2, r0, r3
34192142:	bf1c      	itt	ne
34192144:	1a1b      	subne	r3, r3, r0
34192146:	50a3      	strne	r3, [r4, r2]
34192148:	e7af      	b.n	341920aa <_malloc_r+0x22>
3419214a:	6862      	ldr	r2, [r4, #4]
3419214c:	42a3      	cmp	r3, r4
3419214e:	bf0c      	ite	eq
34192150:	f8c8 2000 	streq.w	r2, [r8]
34192154:	605a      	strne	r2, [r3, #4]
34192156:	e7eb      	b.n	34192130 <_malloc_r+0xa8>
34192158:	4623      	mov	r3, r4
3419215a:	6864      	ldr	r4, [r4, #4]
3419215c:	e7ae      	b.n	341920bc <_malloc_r+0x34>
3419215e:	463c      	mov	r4, r7
34192160:	687f      	ldr	r7, [r7, #4]
34192162:	e7b6      	b.n	341920d2 <_malloc_r+0x4a>
34192164:	461a      	mov	r2, r3
34192166:	685b      	ldr	r3, [r3, #4]
34192168:	42a3      	cmp	r3, r4
3419216a:	d1fb      	bne.n	34192164 <_malloc_r+0xdc>
3419216c:	2300      	movs	r3, #0
3419216e:	6053      	str	r3, [r2, #4]
34192170:	e7de      	b.n	34192130 <_malloc_r+0xa8>
34192172:	230c      	movs	r3, #12
34192174:	4630      	mov	r0, r6
34192176:	6033      	str	r3, [r6, #0]
34192178:	f000 f80c 	bl	34192194 <__malloc_unlock>
3419217c:	e794      	b.n	341920a8 <_malloc_r+0x20>
3419217e:	6005      	str	r5, [r0, #0]
34192180:	e7d6      	b.n	34192130 <_malloc_r+0xa8>
34192182:	bf00      	nop
34192184:	341c1940 	.word	0x341c1940

34192188 <__malloc_lock>:
34192188:	4801      	ldr	r0, [pc, #4]	@ (34192190 <__malloc_lock+0x8>)
3419218a:	f7ff bf02 	b.w	34191f92 <__retarget_lock_acquire_recursive>
3419218e:	bf00      	nop
34192190:	341c1938 	.word	0x341c1938

34192194 <__malloc_unlock>:
34192194:	4801      	ldr	r0, [pc, #4]	@ (3419219c <__malloc_unlock+0x8>)
34192196:	f7ff befd 	b.w	34191f94 <__retarget_lock_release_recursive>
3419219a:	bf00      	nop
3419219c:	341c1938 	.word	0x341c1938

341921a0 <__ssputs_r>:
341921a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
341921a4:	461f      	mov	r7, r3
341921a6:	688e      	ldr	r6, [r1, #8]
341921a8:	4682      	mov	sl, r0
341921aa:	460c      	mov	r4, r1
341921ac:	42be      	cmp	r6, r7
341921ae:	4690      	mov	r8, r2
341921b0:	680b      	ldr	r3, [r1, #0]
341921b2:	d82d      	bhi.n	34192210 <__ssputs_r+0x70>
341921b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
341921b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
341921bc:	d026      	beq.n	3419220c <__ssputs_r+0x6c>
341921be:	6965      	ldr	r5, [r4, #20]
341921c0:	6909      	ldr	r1, [r1, #16]
341921c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
341921c6:	eba3 0901 	sub.w	r9, r3, r1
341921ca:	1c7b      	adds	r3, r7, #1
341921cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
341921d0:	444b      	add	r3, r9
341921d2:	106d      	asrs	r5, r5, #1
341921d4:	429d      	cmp	r5, r3
341921d6:	bf38      	it	cc
341921d8:	461d      	movcc	r5, r3
341921da:	0553      	lsls	r3, r2, #21
341921dc:	d527      	bpl.n	3419222e <__ssputs_r+0x8e>
341921de:	4629      	mov	r1, r5
341921e0:	f7ff ff52 	bl	34192088 <_malloc_r>
341921e4:	4606      	mov	r6, r0
341921e6:	b360      	cbz	r0, 34192242 <__ssputs_r+0xa2>
341921e8:	464a      	mov	r2, r9
341921ea:	6921      	ldr	r1, [r4, #16]
341921ec:	f7ff fed3 	bl	34191f96 <memcpy>
341921f0:	89a3      	ldrh	r3, [r4, #12]
341921f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
341921f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
341921fa:	81a3      	strh	r3, [r4, #12]
341921fc:	6126      	str	r6, [r4, #16]
341921fe:	444e      	add	r6, r9
34192200:	6165      	str	r5, [r4, #20]
34192202:	eba5 0509 	sub.w	r5, r5, r9
34192206:	6026      	str	r6, [r4, #0]
34192208:	463e      	mov	r6, r7
3419220a:	60a5      	str	r5, [r4, #8]
3419220c:	42be      	cmp	r6, r7
3419220e:	d900      	bls.n	34192212 <__ssputs_r+0x72>
34192210:	463e      	mov	r6, r7
34192212:	4632      	mov	r2, r6
34192214:	4641      	mov	r1, r8
34192216:	6820      	ldr	r0, [r4, #0]
34192218:	f7ff fe28 	bl	34191e6c <memmove>
3419221c:	68a3      	ldr	r3, [r4, #8]
3419221e:	2000      	movs	r0, #0
34192220:	1b9b      	subs	r3, r3, r6
34192222:	60a3      	str	r3, [r4, #8]
34192224:	6823      	ldr	r3, [r4, #0]
34192226:	4433      	add	r3, r6
34192228:	6023      	str	r3, [r4, #0]
3419222a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3419222e:	462a      	mov	r2, r5
34192230:	f000 fd2e 	bl	34192c90 <_realloc_r>
34192234:	4606      	mov	r6, r0
34192236:	2800      	cmp	r0, #0
34192238:	d1e0      	bne.n	341921fc <__ssputs_r+0x5c>
3419223a:	6921      	ldr	r1, [r4, #16]
3419223c:	4650      	mov	r0, sl
3419223e:	f7ff feb7 	bl	34191fb0 <_free_r>
34192242:	230c      	movs	r3, #12
34192244:	f04f 30ff 	mov.w	r0, #4294967295
34192248:	f8ca 3000 	str.w	r3, [sl]
3419224c:	89a3      	ldrh	r3, [r4, #12]
3419224e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34192252:	81a3      	strh	r3, [r4, #12]
34192254:	e7e9      	b.n	3419222a <__ssputs_r+0x8a>
	...

34192258 <_svfiprintf_r>:
34192258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3419225c:	4698      	mov	r8, r3
3419225e:	898b      	ldrh	r3, [r1, #12]
34192260:	b09d      	sub	sp, #116	@ 0x74
34192262:	4607      	mov	r7, r0
34192264:	061b      	lsls	r3, r3, #24
34192266:	460d      	mov	r5, r1
34192268:	4614      	mov	r4, r2
3419226a:	d510      	bpl.n	3419228e <_svfiprintf_r+0x36>
3419226c:	690b      	ldr	r3, [r1, #16]
3419226e:	b973      	cbnz	r3, 3419228e <_svfiprintf_r+0x36>
34192270:	2140      	movs	r1, #64	@ 0x40
34192272:	f7ff ff09 	bl	34192088 <_malloc_r>
34192276:	6028      	str	r0, [r5, #0]
34192278:	6128      	str	r0, [r5, #16]
3419227a:	b930      	cbnz	r0, 3419228a <_svfiprintf_r+0x32>
3419227c:	230c      	movs	r3, #12
3419227e:	603b      	str	r3, [r7, #0]
34192280:	f04f 30ff 	mov.w	r0, #4294967295
34192284:	b01d      	add	sp, #116	@ 0x74
34192286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3419228a:	2340      	movs	r3, #64	@ 0x40
3419228c:	616b      	str	r3, [r5, #20]
3419228e:	2300      	movs	r3, #0
34192290:	f8cd 800c 	str.w	r8, [sp, #12]
34192294:	f04f 0901 	mov.w	r9, #1
34192298:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 3419243c <_svfiprintf_r+0x1e4>
3419229c:	9309      	str	r3, [sp, #36]	@ 0x24
3419229e:	2320      	movs	r3, #32
341922a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
341922a4:	2330      	movs	r3, #48	@ 0x30
341922a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
341922aa:	4623      	mov	r3, r4
341922ac:	469a      	mov	sl, r3
341922ae:	f813 2b01 	ldrb.w	r2, [r3], #1
341922b2:	b10a      	cbz	r2, 341922b8 <_svfiprintf_r+0x60>
341922b4:	2a25      	cmp	r2, #37	@ 0x25
341922b6:	d1f9      	bne.n	341922ac <_svfiprintf_r+0x54>
341922b8:	ebba 0b04 	subs.w	fp, sl, r4
341922bc:	d00b      	beq.n	341922d6 <_svfiprintf_r+0x7e>
341922be:	465b      	mov	r3, fp
341922c0:	4622      	mov	r2, r4
341922c2:	4629      	mov	r1, r5
341922c4:	4638      	mov	r0, r7
341922c6:	f7ff ff6b 	bl	341921a0 <__ssputs_r>
341922ca:	3001      	adds	r0, #1
341922cc:	f000 80a7 	beq.w	3419241e <_svfiprintf_r+0x1c6>
341922d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
341922d2:	445a      	add	r2, fp
341922d4:	9209      	str	r2, [sp, #36]	@ 0x24
341922d6:	f89a 3000 	ldrb.w	r3, [sl]
341922da:	2b00      	cmp	r3, #0
341922dc:	f000 809f 	beq.w	3419241e <_svfiprintf_r+0x1c6>
341922e0:	2300      	movs	r3, #0
341922e2:	f04f 32ff 	mov.w	r2, #4294967295
341922e6:	f10a 0a01 	add.w	sl, sl, #1
341922ea:	9304      	str	r3, [sp, #16]
341922ec:	9307      	str	r3, [sp, #28]
341922ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
341922f2:	931a      	str	r3, [sp, #104]	@ 0x68
341922f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
341922f8:	4654      	mov	r4, sl
341922fa:	2205      	movs	r2, #5
341922fc:	484f      	ldr	r0, [pc, #316]	@ (3419243c <_svfiprintf_r+0x1e4>)
341922fe:	f814 1b01 	ldrb.w	r1, [r4], #1
34192302:	f000 fcb7 	bl	34192c74 <memchr>
34192306:	9a04      	ldr	r2, [sp, #16]
34192308:	b9d8      	cbnz	r0, 34192342 <_svfiprintf_r+0xea>
3419230a:	06d0      	lsls	r0, r2, #27
3419230c:	bf44      	itt	mi
3419230e:	2320      	movmi	r3, #32
34192310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34192314:	0711      	lsls	r1, r2, #28
34192316:	bf44      	itt	mi
34192318:	232b      	movmi	r3, #43	@ 0x2b
3419231a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3419231e:	f89a 3000 	ldrb.w	r3, [sl]
34192322:	2b2a      	cmp	r3, #42	@ 0x2a
34192324:	d015      	beq.n	34192352 <_svfiprintf_r+0xfa>
34192326:	9a07      	ldr	r2, [sp, #28]
34192328:	4654      	mov	r4, sl
3419232a:	2000      	movs	r0, #0
3419232c:	f04f 0c0a 	mov.w	ip, #10
34192330:	4621      	mov	r1, r4
34192332:	f811 3b01 	ldrb.w	r3, [r1], #1
34192336:	3b30      	subs	r3, #48	@ 0x30
34192338:	2b09      	cmp	r3, #9
3419233a:	d94b      	bls.n	341923d4 <_svfiprintf_r+0x17c>
3419233c:	b1b0      	cbz	r0, 3419236c <_svfiprintf_r+0x114>
3419233e:	9207      	str	r2, [sp, #28]
34192340:	e014      	b.n	3419236c <_svfiprintf_r+0x114>
34192342:	eba0 0308 	sub.w	r3, r0, r8
34192346:	46a2      	mov	sl, r4
34192348:	fa09 f303 	lsl.w	r3, r9, r3
3419234c:	4313      	orrs	r3, r2
3419234e:	9304      	str	r3, [sp, #16]
34192350:	e7d2      	b.n	341922f8 <_svfiprintf_r+0xa0>
34192352:	9b03      	ldr	r3, [sp, #12]
34192354:	1d19      	adds	r1, r3, #4
34192356:	681b      	ldr	r3, [r3, #0]
34192358:	2b00      	cmp	r3, #0
3419235a:	9103      	str	r1, [sp, #12]
3419235c:	bfbb      	ittet	lt
3419235e:	425b      	neglt	r3, r3
34192360:	f042 0202 	orrlt.w	r2, r2, #2
34192364:	9307      	strge	r3, [sp, #28]
34192366:	9307      	strlt	r3, [sp, #28]
34192368:	bfb8      	it	lt
3419236a:	9204      	strlt	r2, [sp, #16]
3419236c:	7823      	ldrb	r3, [r4, #0]
3419236e:	2b2e      	cmp	r3, #46	@ 0x2e
34192370:	d10a      	bne.n	34192388 <_svfiprintf_r+0x130>
34192372:	7863      	ldrb	r3, [r4, #1]
34192374:	2b2a      	cmp	r3, #42	@ 0x2a
34192376:	d132      	bne.n	341923de <_svfiprintf_r+0x186>
34192378:	9b03      	ldr	r3, [sp, #12]
3419237a:	3402      	adds	r4, #2
3419237c:	1d1a      	adds	r2, r3, #4
3419237e:	681b      	ldr	r3, [r3, #0]
34192380:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
34192384:	9203      	str	r2, [sp, #12]
34192386:	9305      	str	r3, [sp, #20]
34192388:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 3419244c <_svfiprintf_r+0x1f4>
3419238c:	2203      	movs	r2, #3
3419238e:	7821      	ldrb	r1, [r4, #0]
34192390:	4650      	mov	r0, sl
34192392:	f000 fc6f 	bl	34192c74 <memchr>
34192396:	b138      	cbz	r0, 341923a8 <_svfiprintf_r+0x150>
34192398:	eba0 000a 	sub.w	r0, r0, sl
3419239c:	2240      	movs	r2, #64	@ 0x40
3419239e:	9b04      	ldr	r3, [sp, #16]
341923a0:	3401      	adds	r4, #1
341923a2:	4082      	lsls	r2, r0
341923a4:	4313      	orrs	r3, r2
341923a6:	9304      	str	r3, [sp, #16]
341923a8:	f814 1b01 	ldrb.w	r1, [r4], #1
341923ac:	2206      	movs	r2, #6
341923ae:	4824      	ldr	r0, [pc, #144]	@ (34192440 <_svfiprintf_r+0x1e8>)
341923b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
341923b4:	f000 fc5e 	bl	34192c74 <memchr>
341923b8:	2800      	cmp	r0, #0
341923ba:	d036      	beq.n	3419242a <_svfiprintf_r+0x1d2>
341923bc:	4b21      	ldr	r3, [pc, #132]	@ (34192444 <_svfiprintf_r+0x1ec>)
341923be:	bb1b      	cbnz	r3, 34192408 <_svfiprintf_r+0x1b0>
341923c0:	9b03      	ldr	r3, [sp, #12]
341923c2:	3307      	adds	r3, #7
341923c4:	f023 0307 	bic.w	r3, r3, #7
341923c8:	3308      	adds	r3, #8
341923ca:	9303      	str	r3, [sp, #12]
341923cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
341923ce:	4433      	add	r3, r6
341923d0:	9309      	str	r3, [sp, #36]	@ 0x24
341923d2:	e76a      	b.n	341922aa <_svfiprintf_r+0x52>
341923d4:	fb0c 3202 	mla	r2, ip, r2, r3
341923d8:	460c      	mov	r4, r1
341923da:	2001      	movs	r0, #1
341923dc:	e7a8      	b.n	34192330 <_svfiprintf_r+0xd8>
341923de:	2300      	movs	r3, #0
341923e0:	3401      	adds	r4, #1
341923e2:	f04f 0c0a 	mov.w	ip, #10
341923e6:	4619      	mov	r1, r3
341923e8:	9305      	str	r3, [sp, #20]
341923ea:	4620      	mov	r0, r4
341923ec:	f810 2b01 	ldrb.w	r2, [r0], #1
341923f0:	3a30      	subs	r2, #48	@ 0x30
341923f2:	2a09      	cmp	r2, #9
341923f4:	d903      	bls.n	341923fe <_svfiprintf_r+0x1a6>
341923f6:	2b00      	cmp	r3, #0
341923f8:	d0c6      	beq.n	34192388 <_svfiprintf_r+0x130>
341923fa:	9105      	str	r1, [sp, #20]
341923fc:	e7c4      	b.n	34192388 <_svfiprintf_r+0x130>
341923fe:	fb0c 2101 	mla	r1, ip, r1, r2
34192402:	4604      	mov	r4, r0
34192404:	2301      	movs	r3, #1
34192406:	e7f0      	b.n	341923ea <_svfiprintf_r+0x192>
34192408:	ab03      	add	r3, sp, #12
3419240a:	462a      	mov	r2, r5
3419240c:	a904      	add	r1, sp, #16
3419240e:	4638      	mov	r0, r7
34192410:	9300      	str	r3, [sp, #0]
34192412:	4b0d      	ldr	r3, [pc, #52]	@ (34192448 <_svfiprintf_r+0x1f0>)
34192414:	f3af 8000 	nop.w
34192418:	1c42      	adds	r2, r0, #1
3419241a:	4606      	mov	r6, r0
3419241c:	d1d6      	bne.n	341923cc <_svfiprintf_r+0x174>
3419241e:	89ab      	ldrh	r3, [r5, #12]
34192420:	065b      	lsls	r3, r3, #25
34192422:	f53f af2d 	bmi.w	34192280 <_svfiprintf_r+0x28>
34192426:	9809      	ldr	r0, [sp, #36]	@ 0x24
34192428:	e72c      	b.n	34192284 <_svfiprintf_r+0x2c>
3419242a:	ab03      	add	r3, sp, #12
3419242c:	462a      	mov	r2, r5
3419242e:	a904      	add	r1, sp, #16
34192430:	4638      	mov	r0, r7
34192432:	9300      	str	r3, [sp, #0]
34192434:	4b04      	ldr	r3, [pc, #16]	@ (34192448 <_svfiprintf_r+0x1f0>)
34192436:	f000 f9bf 	bl	341927b8 <_printf_i>
3419243a:	e7ed      	b.n	34192418 <_svfiprintf_r+0x1c0>
3419243c:	34194a45 	.word	0x34194a45
34192440:	34194a4f 	.word	0x34194a4f
34192444:	00000000 	.word	0x00000000
34192448:	341921a1 	.word	0x341921a1
3419244c:	34194a4b 	.word	0x34194a4b

34192450 <__sfputc_r>:
34192450:	6893      	ldr	r3, [r2, #8]
34192452:	3b01      	subs	r3, #1
34192454:	2b00      	cmp	r3, #0
34192456:	b410      	push	{r4}
34192458:	6093      	str	r3, [r2, #8]
3419245a:	da08      	bge.n	3419246e <__sfputc_r+0x1e>
3419245c:	6994      	ldr	r4, [r2, #24]
3419245e:	42a3      	cmp	r3, r4
34192460:	db01      	blt.n	34192466 <__sfputc_r+0x16>
34192462:	290a      	cmp	r1, #10
34192464:	d103      	bne.n	3419246e <__sfputc_r+0x1e>
34192466:	f85d 4b04 	ldr.w	r4, [sp], #4
3419246a:	f7ff bc6a 	b.w	34191d42 <__swbuf_r>
3419246e:	6813      	ldr	r3, [r2, #0]
34192470:	1c58      	adds	r0, r3, #1
34192472:	6010      	str	r0, [r2, #0]
34192474:	4608      	mov	r0, r1
34192476:	7019      	strb	r1, [r3, #0]
34192478:	f85d 4b04 	ldr.w	r4, [sp], #4
3419247c:	4770      	bx	lr

3419247e <__sfputs_r>:
3419247e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34192480:	4606      	mov	r6, r0
34192482:	460f      	mov	r7, r1
34192484:	4614      	mov	r4, r2
34192486:	18d5      	adds	r5, r2, r3
34192488:	42ac      	cmp	r4, r5
3419248a:	d101      	bne.n	34192490 <__sfputs_r+0x12>
3419248c:	2000      	movs	r0, #0
3419248e:	e007      	b.n	341924a0 <__sfputs_r+0x22>
34192490:	463a      	mov	r2, r7
34192492:	f814 1b01 	ldrb.w	r1, [r4], #1
34192496:	4630      	mov	r0, r6
34192498:	f7ff ffda 	bl	34192450 <__sfputc_r>
3419249c:	1c43      	adds	r3, r0, #1
3419249e:	d1f3      	bne.n	34192488 <__sfputs_r+0xa>
341924a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

341924a4 <_vfiprintf_r>:
341924a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341924a8:	460d      	mov	r5, r1
341924aa:	b09d      	sub	sp, #116	@ 0x74
341924ac:	4614      	mov	r4, r2
341924ae:	4698      	mov	r8, r3
341924b0:	4606      	mov	r6, r0
341924b2:	b118      	cbz	r0, 341924bc <_vfiprintf_r+0x18>
341924b4:	6a03      	ldr	r3, [r0, #32]
341924b6:	b90b      	cbnz	r3, 341924bc <_vfiprintf_r+0x18>
341924b8:	f7ff fb24 	bl	34191b04 <__sinit>
341924bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
341924be:	07d9      	lsls	r1, r3, #31
341924c0:	d405      	bmi.n	341924ce <_vfiprintf_r+0x2a>
341924c2:	89ab      	ldrh	r3, [r5, #12]
341924c4:	059a      	lsls	r2, r3, #22
341924c6:	d402      	bmi.n	341924ce <_vfiprintf_r+0x2a>
341924c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
341924ca:	f7ff fd62 	bl	34191f92 <__retarget_lock_acquire_recursive>
341924ce:	89ab      	ldrh	r3, [r5, #12]
341924d0:	071b      	lsls	r3, r3, #28
341924d2:	d501      	bpl.n	341924d8 <_vfiprintf_r+0x34>
341924d4:	692b      	ldr	r3, [r5, #16]
341924d6:	b99b      	cbnz	r3, 34192500 <_vfiprintf_r+0x5c>
341924d8:	4629      	mov	r1, r5
341924da:	4630      	mov	r0, r6
341924dc:	f7ff fc70 	bl	34191dc0 <__swsetup_r>
341924e0:	b170      	cbz	r0, 34192500 <_vfiprintf_r+0x5c>
341924e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
341924e4:	07dc      	lsls	r4, r3, #31
341924e6:	d504      	bpl.n	341924f2 <_vfiprintf_r+0x4e>
341924e8:	f04f 30ff 	mov.w	r0, #4294967295
341924ec:	b01d      	add	sp, #116	@ 0x74
341924ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
341924f2:	89ab      	ldrh	r3, [r5, #12]
341924f4:	0598      	lsls	r0, r3, #22
341924f6:	d4f7      	bmi.n	341924e8 <_vfiprintf_r+0x44>
341924f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
341924fa:	f7ff fd4b 	bl	34191f94 <__retarget_lock_release_recursive>
341924fe:	e7f3      	b.n	341924e8 <_vfiprintf_r+0x44>
34192500:	2300      	movs	r3, #0
34192502:	f8cd 800c 	str.w	r8, [sp, #12]
34192506:	f04f 0901 	mov.w	r9, #1
3419250a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 341926c0 <_vfiprintf_r+0x21c>
3419250e:	9309      	str	r3, [sp, #36]	@ 0x24
34192510:	2320      	movs	r3, #32
34192512:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
34192516:	2330      	movs	r3, #48	@ 0x30
34192518:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
3419251c:	4623      	mov	r3, r4
3419251e:	469a      	mov	sl, r3
34192520:	f813 2b01 	ldrb.w	r2, [r3], #1
34192524:	b10a      	cbz	r2, 3419252a <_vfiprintf_r+0x86>
34192526:	2a25      	cmp	r2, #37	@ 0x25
34192528:	d1f9      	bne.n	3419251e <_vfiprintf_r+0x7a>
3419252a:	ebba 0b04 	subs.w	fp, sl, r4
3419252e:	d00b      	beq.n	34192548 <_vfiprintf_r+0xa4>
34192530:	465b      	mov	r3, fp
34192532:	4622      	mov	r2, r4
34192534:	4629      	mov	r1, r5
34192536:	4630      	mov	r0, r6
34192538:	f7ff ffa1 	bl	3419247e <__sfputs_r>
3419253c:	3001      	adds	r0, #1
3419253e:	f000 80a7 	beq.w	34192690 <_vfiprintf_r+0x1ec>
34192542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34192544:	445a      	add	r2, fp
34192546:	9209      	str	r2, [sp, #36]	@ 0x24
34192548:	f89a 3000 	ldrb.w	r3, [sl]
3419254c:	2b00      	cmp	r3, #0
3419254e:	f000 809f 	beq.w	34192690 <_vfiprintf_r+0x1ec>
34192552:	2300      	movs	r3, #0
34192554:	f04f 32ff 	mov.w	r2, #4294967295
34192558:	f10a 0a01 	add.w	sl, sl, #1
3419255c:	9304      	str	r3, [sp, #16]
3419255e:	9307      	str	r3, [sp, #28]
34192560:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
34192564:	931a      	str	r3, [sp, #104]	@ 0x68
34192566:	e9cd 2305 	strd	r2, r3, [sp, #20]
3419256a:	4654      	mov	r4, sl
3419256c:	2205      	movs	r2, #5
3419256e:	4854      	ldr	r0, [pc, #336]	@ (341926c0 <_vfiprintf_r+0x21c>)
34192570:	f814 1b01 	ldrb.w	r1, [r4], #1
34192574:	f000 fb7e 	bl	34192c74 <memchr>
34192578:	9a04      	ldr	r2, [sp, #16]
3419257a:	b9d8      	cbnz	r0, 341925b4 <_vfiprintf_r+0x110>
3419257c:	06d1      	lsls	r1, r2, #27
3419257e:	bf44      	itt	mi
34192580:	2320      	movmi	r3, #32
34192582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34192586:	0713      	lsls	r3, r2, #28
34192588:	bf44      	itt	mi
3419258a:	232b      	movmi	r3, #43	@ 0x2b
3419258c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34192590:	f89a 3000 	ldrb.w	r3, [sl]
34192594:	2b2a      	cmp	r3, #42	@ 0x2a
34192596:	d015      	beq.n	341925c4 <_vfiprintf_r+0x120>
34192598:	9a07      	ldr	r2, [sp, #28]
3419259a:	4654      	mov	r4, sl
3419259c:	2000      	movs	r0, #0
3419259e:	f04f 0c0a 	mov.w	ip, #10
341925a2:	4621      	mov	r1, r4
341925a4:	f811 3b01 	ldrb.w	r3, [r1], #1
341925a8:	3b30      	subs	r3, #48	@ 0x30
341925aa:	2b09      	cmp	r3, #9
341925ac:	d94b      	bls.n	34192646 <_vfiprintf_r+0x1a2>
341925ae:	b1b0      	cbz	r0, 341925de <_vfiprintf_r+0x13a>
341925b0:	9207      	str	r2, [sp, #28]
341925b2:	e014      	b.n	341925de <_vfiprintf_r+0x13a>
341925b4:	eba0 0308 	sub.w	r3, r0, r8
341925b8:	46a2      	mov	sl, r4
341925ba:	fa09 f303 	lsl.w	r3, r9, r3
341925be:	4313      	orrs	r3, r2
341925c0:	9304      	str	r3, [sp, #16]
341925c2:	e7d2      	b.n	3419256a <_vfiprintf_r+0xc6>
341925c4:	9b03      	ldr	r3, [sp, #12]
341925c6:	1d19      	adds	r1, r3, #4
341925c8:	681b      	ldr	r3, [r3, #0]
341925ca:	2b00      	cmp	r3, #0
341925cc:	9103      	str	r1, [sp, #12]
341925ce:	bfbb      	ittet	lt
341925d0:	425b      	neglt	r3, r3
341925d2:	f042 0202 	orrlt.w	r2, r2, #2
341925d6:	9307      	strge	r3, [sp, #28]
341925d8:	9307      	strlt	r3, [sp, #28]
341925da:	bfb8      	it	lt
341925dc:	9204      	strlt	r2, [sp, #16]
341925de:	7823      	ldrb	r3, [r4, #0]
341925e0:	2b2e      	cmp	r3, #46	@ 0x2e
341925e2:	d10a      	bne.n	341925fa <_vfiprintf_r+0x156>
341925e4:	7863      	ldrb	r3, [r4, #1]
341925e6:	2b2a      	cmp	r3, #42	@ 0x2a
341925e8:	d132      	bne.n	34192650 <_vfiprintf_r+0x1ac>
341925ea:	9b03      	ldr	r3, [sp, #12]
341925ec:	3402      	adds	r4, #2
341925ee:	1d1a      	adds	r2, r3, #4
341925f0:	681b      	ldr	r3, [r3, #0]
341925f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
341925f6:	9203      	str	r2, [sp, #12]
341925f8:	9305      	str	r3, [sp, #20]
341925fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 341926d0 <_vfiprintf_r+0x22c>
341925fe:	2203      	movs	r2, #3
34192600:	7821      	ldrb	r1, [r4, #0]
34192602:	4650      	mov	r0, sl
34192604:	f000 fb36 	bl	34192c74 <memchr>
34192608:	b138      	cbz	r0, 3419261a <_vfiprintf_r+0x176>
3419260a:	eba0 000a 	sub.w	r0, r0, sl
3419260e:	2240      	movs	r2, #64	@ 0x40
34192610:	9b04      	ldr	r3, [sp, #16]
34192612:	3401      	adds	r4, #1
34192614:	4082      	lsls	r2, r0
34192616:	4313      	orrs	r3, r2
34192618:	9304      	str	r3, [sp, #16]
3419261a:	f814 1b01 	ldrb.w	r1, [r4], #1
3419261e:	2206      	movs	r2, #6
34192620:	4828      	ldr	r0, [pc, #160]	@ (341926c4 <_vfiprintf_r+0x220>)
34192622:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
34192626:	f000 fb25 	bl	34192c74 <memchr>
3419262a:	2800      	cmp	r0, #0
3419262c:	d03f      	beq.n	341926ae <_vfiprintf_r+0x20a>
3419262e:	4b26      	ldr	r3, [pc, #152]	@ (341926c8 <_vfiprintf_r+0x224>)
34192630:	bb1b      	cbnz	r3, 3419267a <_vfiprintf_r+0x1d6>
34192632:	9b03      	ldr	r3, [sp, #12]
34192634:	3307      	adds	r3, #7
34192636:	f023 0307 	bic.w	r3, r3, #7
3419263a:	3308      	adds	r3, #8
3419263c:	9303      	str	r3, [sp, #12]
3419263e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34192640:	443b      	add	r3, r7
34192642:	9309      	str	r3, [sp, #36]	@ 0x24
34192644:	e76a      	b.n	3419251c <_vfiprintf_r+0x78>
34192646:	fb0c 3202 	mla	r2, ip, r2, r3
3419264a:	460c      	mov	r4, r1
3419264c:	2001      	movs	r0, #1
3419264e:	e7a8      	b.n	341925a2 <_vfiprintf_r+0xfe>
34192650:	2300      	movs	r3, #0
34192652:	3401      	adds	r4, #1
34192654:	f04f 0c0a 	mov.w	ip, #10
34192658:	4619      	mov	r1, r3
3419265a:	9305      	str	r3, [sp, #20]
3419265c:	4620      	mov	r0, r4
3419265e:	f810 2b01 	ldrb.w	r2, [r0], #1
34192662:	3a30      	subs	r2, #48	@ 0x30
34192664:	2a09      	cmp	r2, #9
34192666:	d903      	bls.n	34192670 <_vfiprintf_r+0x1cc>
34192668:	2b00      	cmp	r3, #0
3419266a:	d0c6      	beq.n	341925fa <_vfiprintf_r+0x156>
3419266c:	9105      	str	r1, [sp, #20]
3419266e:	e7c4      	b.n	341925fa <_vfiprintf_r+0x156>
34192670:	fb0c 2101 	mla	r1, ip, r1, r2
34192674:	4604      	mov	r4, r0
34192676:	2301      	movs	r3, #1
34192678:	e7f0      	b.n	3419265c <_vfiprintf_r+0x1b8>
3419267a:	ab03      	add	r3, sp, #12
3419267c:	462a      	mov	r2, r5
3419267e:	a904      	add	r1, sp, #16
34192680:	4630      	mov	r0, r6
34192682:	9300      	str	r3, [sp, #0]
34192684:	4b11      	ldr	r3, [pc, #68]	@ (341926cc <_vfiprintf_r+0x228>)
34192686:	f3af 8000 	nop.w
3419268a:	4607      	mov	r7, r0
3419268c:	1c78      	adds	r0, r7, #1
3419268e:	d1d6      	bne.n	3419263e <_vfiprintf_r+0x19a>
34192690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34192692:	07d9      	lsls	r1, r3, #31
34192694:	d405      	bmi.n	341926a2 <_vfiprintf_r+0x1fe>
34192696:	89ab      	ldrh	r3, [r5, #12]
34192698:	059a      	lsls	r2, r3, #22
3419269a:	d402      	bmi.n	341926a2 <_vfiprintf_r+0x1fe>
3419269c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3419269e:	f7ff fc79 	bl	34191f94 <__retarget_lock_release_recursive>
341926a2:	89ab      	ldrh	r3, [r5, #12]
341926a4:	065b      	lsls	r3, r3, #25
341926a6:	f53f af1f 	bmi.w	341924e8 <_vfiprintf_r+0x44>
341926aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
341926ac:	e71e      	b.n	341924ec <_vfiprintf_r+0x48>
341926ae:	ab03      	add	r3, sp, #12
341926b0:	462a      	mov	r2, r5
341926b2:	a904      	add	r1, sp, #16
341926b4:	4630      	mov	r0, r6
341926b6:	9300      	str	r3, [sp, #0]
341926b8:	4b04      	ldr	r3, [pc, #16]	@ (341926cc <_vfiprintf_r+0x228>)
341926ba:	f000 f87d 	bl	341927b8 <_printf_i>
341926be:	e7e4      	b.n	3419268a <_vfiprintf_r+0x1e6>
341926c0:	34194a45 	.word	0x34194a45
341926c4:	34194a4f 	.word	0x34194a4f
341926c8:	00000000 	.word	0x00000000
341926cc:	3419247f 	.word	0x3419247f
341926d0:	34194a4b 	.word	0x34194a4b

341926d4 <_printf_common>:
341926d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
341926d8:	4616      	mov	r6, r2
341926da:	4698      	mov	r8, r3
341926dc:	688a      	ldr	r2, [r1, #8]
341926de:	4607      	mov	r7, r0
341926e0:	690b      	ldr	r3, [r1, #16]
341926e2:	460c      	mov	r4, r1
341926e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
341926e8:	4293      	cmp	r3, r2
341926ea:	bfb8      	it	lt
341926ec:	4613      	movlt	r3, r2
341926ee:	6033      	str	r3, [r6, #0]
341926f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
341926f4:	b10a      	cbz	r2, 341926fa <_printf_common+0x26>
341926f6:	3301      	adds	r3, #1
341926f8:	6033      	str	r3, [r6, #0]
341926fa:	6823      	ldr	r3, [r4, #0]
341926fc:	0699      	lsls	r1, r3, #26
341926fe:	bf42      	ittt	mi
34192700:	6833      	ldrmi	r3, [r6, #0]
34192702:	3302      	addmi	r3, #2
34192704:	6033      	strmi	r3, [r6, #0]
34192706:	6825      	ldr	r5, [r4, #0]
34192708:	f015 0506 	ands.w	r5, r5, #6
3419270c:	d106      	bne.n	3419271c <_printf_common+0x48>
3419270e:	f104 0a19 	add.w	sl, r4, #25
34192712:	68e3      	ldr	r3, [r4, #12]
34192714:	6832      	ldr	r2, [r6, #0]
34192716:	1a9b      	subs	r3, r3, r2
34192718:	42ab      	cmp	r3, r5
3419271a:	dc2b      	bgt.n	34192774 <_printf_common+0xa0>
3419271c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
34192720:	6822      	ldr	r2, [r4, #0]
34192722:	3b00      	subs	r3, #0
34192724:	bf18      	it	ne
34192726:	2301      	movne	r3, #1
34192728:	0692      	lsls	r2, r2, #26
3419272a:	d430      	bmi.n	3419278e <_printf_common+0xba>
3419272c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
34192730:	4641      	mov	r1, r8
34192732:	4638      	mov	r0, r7
34192734:	47c8      	blx	r9
34192736:	3001      	adds	r0, #1
34192738:	d023      	beq.n	34192782 <_printf_common+0xae>
3419273a:	6823      	ldr	r3, [r4, #0]
3419273c:	341a      	adds	r4, #26
3419273e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
34192742:	f003 0306 	and.w	r3, r3, #6
34192746:	2b04      	cmp	r3, #4
34192748:	bf0a      	itet	eq
3419274a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3419274e:	2500      	movne	r5, #0
34192750:	6833      	ldreq	r3, [r6, #0]
34192752:	f04f 0600 	mov.w	r6, #0
34192756:	bf08      	it	eq
34192758:	1aed      	subeq	r5, r5, r3
3419275a:	f854 3c12 	ldr.w	r3, [r4, #-18]
3419275e:	bf08      	it	eq
34192760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
34192764:	4293      	cmp	r3, r2
34192766:	bfc4      	itt	gt
34192768:	1a9b      	subgt	r3, r3, r2
3419276a:	18ed      	addgt	r5, r5, r3
3419276c:	42b5      	cmp	r5, r6
3419276e:	d11a      	bne.n	341927a6 <_printf_common+0xd2>
34192770:	2000      	movs	r0, #0
34192772:	e008      	b.n	34192786 <_printf_common+0xb2>
34192774:	2301      	movs	r3, #1
34192776:	4652      	mov	r2, sl
34192778:	4641      	mov	r1, r8
3419277a:	4638      	mov	r0, r7
3419277c:	47c8      	blx	r9
3419277e:	3001      	adds	r0, #1
34192780:	d103      	bne.n	3419278a <_printf_common+0xb6>
34192782:	f04f 30ff 	mov.w	r0, #4294967295
34192786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3419278a:	3501      	adds	r5, #1
3419278c:	e7c1      	b.n	34192712 <_printf_common+0x3e>
3419278e:	18e1      	adds	r1, r4, r3
34192790:	1c5a      	adds	r2, r3, #1
34192792:	2030      	movs	r0, #48	@ 0x30
34192794:	3302      	adds	r3, #2
34192796:	4422      	add	r2, r4
34192798:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3419279c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
341927a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
341927a4:	e7c2      	b.n	3419272c <_printf_common+0x58>
341927a6:	2301      	movs	r3, #1
341927a8:	4622      	mov	r2, r4
341927aa:	4641      	mov	r1, r8
341927ac:	4638      	mov	r0, r7
341927ae:	47c8      	blx	r9
341927b0:	3001      	adds	r0, #1
341927b2:	d0e6      	beq.n	34192782 <_printf_common+0xae>
341927b4:	3601      	adds	r6, #1
341927b6:	e7d9      	b.n	3419276c <_printf_common+0x98>

341927b8 <_printf_i>:
341927b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
341927bc:	7e0f      	ldrb	r7, [r1, #24]
341927be:	4691      	mov	r9, r2
341927c0:	4680      	mov	r8, r0
341927c2:	460c      	mov	r4, r1
341927c4:	2f78      	cmp	r7, #120	@ 0x78
341927c6:	469a      	mov	sl, r3
341927c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
341927ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
341927ce:	d807      	bhi.n	341927e0 <_printf_i+0x28>
341927d0:	2f62      	cmp	r7, #98	@ 0x62
341927d2:	d80a      	bhi.n	341927ea <_printf_i+0x32>
341927d4:	2f00      	cmp	r7, #0
341927d6:	f000 80d1 	beq.w	3419297c <_printf_i+0x1c4>
341927da:	2f58      	cmp	r7, #88	@ 0x58
341927dc:	f000 80b8 	beq.w	34192950 <_printf_i+0x198>
341927e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
341927e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
341927e8:	e03a      	b.n	34192860 <_printf_i+0xa8>
341927ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
341927ee:	2b15      	cmp	r3, #21
341927f0:	d8f6      	bhi.n	341927e0 <_printf_i+0x28>
341927f2:	a101      	add	r1, pc, #4	@ (adr r1, 341927f8 <_printf_i+0x40>)
341927f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
341927f8:	34192851 	.word	0x34192851
341927fc:	34192865 	.word	0x34192865
34192800:	341927e1 	.word	0x341927e1
34192804:	341927e1 	.word	0x341927e1
34192808:	341927e1 	.word	0x341927e1
3419280c:	341927e1 	.word	0x341927e1
34192810:	34192865 	.word	0x34192865
34192814:	341927e1 	.word	0x341927e1
34192818:	341927e1 	.word	0x341927e1
3419281c:	341927e1 	.word	0x341927e1
34192820:	341927e1 	.word	0x341927e1
34192824:	34192963 	.word	0x34192963
34192828:	3419288f 	.word	0x3419288f
3419282c:	3419291d 	.word	0x3419291d
34192830:	341927e1 	.word	0x341927e1
34192834:	341927e1 	.word	0x341927e1
34192838:	34192985 	.word	0x34192985
3419283c:	341927e1 	.word	0x341927e1
34192840:	3419288f 	.word	0x3419288f
34192844:	341927e1 	.word	0x341927e1
34192848:	341927e1 	.word	0x341927e1
3419284c:	34192925 	.word	0x34192925
34192850:	6833      	ldr	r3, [r6, #0]
34192852:	1d1a      	adds	r2, r3, #4
34192854:	681b      	ldr	r3, [r3, #0]
34192856:	6032      	str	r2, [r6, #0]
34192858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3419285c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
34192860:	2301      	movs	r3, #1
34192862:	e09c      	b.n	3419299e <_printf_i+0x1e6>
34192864:	6833      	ldr	r3, [r6, #0]
34192866:	6820      	ldr	r0, [r4, #0]
34192868:	1d19      	adds	r1, r3, #4
3419286a:	6031      	str	r1, [r6, #0]
3419286c:	0606      	lsls	r6, r0, #24
3419286e:	d501      	bpl.n	34192874 <_printf_i+0xbc>
34192870:	681d      	ldr	r5, [r3, #0]
34192872:	e003      	b.n	3419287c <_printf_i+0xc4>
34192874:	0645      	lsls	r5, r0, #25
34192876:	d5fb      	bpl.n	34192870 <_printf_i+0xb8>
34192878:	f9b3 5000 	ldrsh.w	r5, [r3]
3419287c:	2d00      	cmp	r5, #0
3419287e:	da03      	bge.n	34192888 <_printf_i+0xd0>
34192880:	232d      	movs	r3, #45	@ 0x2d
34192882:	426d      	negs	r5, r5
34192884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34192888:	4858      	ldr	r0, [pc, #352]	@ (341929ec <_printf_i+0x234>)
3419288a:	230a      	movs	r3, #10
3419288c:	e011      	b.n	341928b2 <_printf_i+0xfa>
3419288e:	6821      	ldr	r1, [r4, #0]
34192890:	6833      	ldr	r3, [r6, #0]
34192892:	0608      	lsls	r0, r1, #24
34192894:	f853 5b04 	ldr.w	r5, [r3], #4
34192898:	d402      	bmi.n	341928a0 <_printf_i+0xe8>
3419289a:	0649      	lsls	r1, r1, #25
3419289c:	bf48      	it	mi
3419289e:	b2ad      	uxthmi	r5, r5
341928a0:	2f6f      	cmp	r7, #111	@ 0x6f
341928a2:	6033      	str	r3, [r6, #0]
341928a4:	4851      	ldr	r0, [pc, #324]	@ (341929ec <_printf_i+0x234>)
341928a6:	bf14      	ite	ne
341928a8:	230a      	movne	r3, #10
341928aa:	2308      	moveq	r3, #8
341928ac:	2100      	movs	r1, #0
341928ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
341928b2:	6866      	ldr	r6, [r4, #4]
341928b4:	2e00      	cmp	r6, #0
341928b6:	60a6      	str	r6, [r4, #8]
341928b8:	db05      	blt.n	341928c6 <_printf_i+0x10e>
341928ba:	6821      	ldr	r1, [r4, #0]
341928bc:	432e      	orrs	r6, r5
341928be:	f021 0104 	bic.w	r1, r1, #4
341928c2:	6021      	str	r1, [r4, #0]
341928c4:	d04b      	beq.n	3419295e <_printf_i+0x1a6>
341928c6:	4616      	mov	r6, r2
341928c8:	fbb5 f1f3 	udiv	r1, r5, r3
341928cc:	fb03 5711 	mls	r7, r3, r1, r5
341928d0:	5dc7      	ldrb	r7, [r0, r7]
341928d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
341928d6:	462f      	mov	r7, r5
341928d8:	460d      	mov	r5, r1
341928da:	42bb      	cmp	r3, r7
341928dc:	d9f4      	bls.n	341928c8 <_printf_i+0x110>
341928de:	2b08      	cmp	r3, #8
341928e0:	d10b      	bne.n	341928fa <_printf_i+0x142>
341928e2:	6823      	ldr	r3, [r4, #0]
341928e4:	07df      	lsls	r7, r3, #31
341928e6:	d508      	bpl.n	341928fa <_printf_i+0x142>
341928e8:	6923      	ldr	r3, [r4, #16]
341928ea:	6861      	ldr	r1, [r4, #4]
341928ec:	4299      	cmp	r1, r3
341928ee:	bfde      	ittt	le
341928f0:	2330      	movle	r3, #48	@ 0x30
341928f2:	f806 3c01 	strble.w	r3, [r6, #-1]
341928f6:	f106 36ff 	addle.w	r6, r6, #4294967295
341928fa:	1b92      	subs	r2, r2, r6
341928fc:	6122      	str	r2, [r4, #16]
341928fe:	464b      	mov	r3, r9
34192900:	aa03      	add	r2, sp, #12
34192902:	4621      	mov	r1, r4
34192904:	4640      	mov	r0, r8
34192906:	f8cd a000 	str.w	sl, [sp]
3419290a:	f7ff fee3 	bl	341926d4 <_printf_common>
3419290e:	3001      	adds	r0, #1
34192910:	d14a      	bne.n	341929a8 <_printf_i+0x1f0>
34192912:	f04f 30ff 	mov.w	r0, #4294967295
34192916:	b004      	add	sp, #16
34192918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3419291c:	6823      	ldr	r3, [r4, #0]
3419291e:	f043 0320 	orr.w	r3, r3, #32
34192922:	6023      	str	r3, [r4, #0]
34192924:	2778      	movs	r7, #120	@ 0x78
34192926:	4832      	ldr	r0, [pc, #200]	@ (341929f0 <_printf_i+0x238>)
34192928:	6823      	ldr	r3, [r4, #0]
3419292a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3419292e:	061f      	lsls	r7, r3, #24
34192930:	6831      	ldr	r1, [r6, #0]
34192932:	f851 5b04 	ldr.w	r5, [r1], #4
34192936:	d402      	bmi.n	3419293e <_printf_i+0x186>
34192938:	065f      	lsls	r7, r3, #25
3419293a:	bf48      	it	mi
3419293c:	b2ad      	uxthmi	r5, r5
3419293e:	6031      	str	r1, [r6, #0]
34192940:	07d9      	lsls	r1, r3, #31
34192942:	bf44      	itt	mi
34192944:	f043 0320 	orrmi.w	r3, r3, #32
34192948:	6023      	strmi	r3, [r4, #0]
3419294a:	b11d      	cbz	r5, 34192954 <_printf_i+0x19c>
3419294c:	2310      	movs	r3, #16
3419294e:	e7ad      	b.n	341928ac <_printf_i+0xf4>
34192950:	4826      	ldr	r0, [pc, #152]	@ (341929ec <_printf_i+0x234>)
34192952:	e7e9      	b.n	34192928 <_printf_i+0x170>
34192954:	6823      	ldr	r3, [r4, #0]
34192956:	f023 0320 	bic.w	r3, r3, #32
3419295a:	6023      	str	r3, [r4, #0]
3419295c:	e7f6      	b.n	3419294c <_printf_i+0x194>
3419295e:	4616      	mov	r6, r2
34192960:	e7bd      	b.n	341928de <_printf_i+0x126>
34192962:	6833      	ldr	r3, [r6, #0]
34192964:	6825      	ldr	r5, [r4, #0]
34192966:	1d18      	adds	r0, r3, #4
34192968:	6961      	ldr	r1, [r4, #20]
3419296a:	6030      	str	r0, [r6, #0]
3419296c:	062e      	lsls	r6, r5, #24
3419296e:	681b      	ldr	r3, [r3, #0]
34192970:	d501      	bpl.n	34192976 <_printf_i+0x1be>
34192972:	6019      	str	r1, [r3, #0]
34192974:	e002      	b.n	3419297c <_printf_i+0x1c4>
34192976:	0668      	lsls	r0, r5, #25
34192978:	d5fb      	bpl.n	34192972 <_printf_i+0x1ba>
3419297a:	8019      	strh	r1, [r3, #0]
3419297c:	2300      	movs	r3, #0
3419297e:	4616      	mov	r6, r2
34192980:	6123      	str	r3, [r4, #16]
34192982:	e7bc      	b.n	341928fe <_printf_i+0x146>
34192984:	6833      	ldr	r3, [r6, #0]
34192986:	2100      	movs	r1, #0
34192988:	1d1a      	adds	r2, r3, #4
3419298a:	6032      	str	r2, [r6, #0]
3419298c:	681e      	ldr	r6, [r3, #0]
3419298e:	6862      	ldr	r2, [r4, #4]
34192990:	4630      	mov	r0, r6
34192992:	f000 f96f 	bl	34192c74 <memchr>
34192996:	b108      	cbz	r0, 3419299c <_printf_i+0x1e4>
34192998:	1b80      	subs	r0, r0, r6
3419299a:	6060      	str	r0, [r4, #4]
3419299c:	6863      	ldr	r3, [r4, #4]
3419299e:	6123      	str	r3, [r4, #16]
341929a0:	2300      	movs	r3, #0
341929a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
341929a6:	e7aa      	b.n	341928fe <_printf_i+0x146>
341929a8:	6923      	ldr	r3, [r4, #16]
341929aa:	4632      	mov	r2, r6
341929ac:	4649      	mov	r1, r9
341929ae:	4640      	mov	r0, r8
341929b0:	47d0      	blx	sl
341929b2:	3001      	adds	r0, #1
341929b4:	d0ad      	beq.n	34192912 <_printf_i+0x15a>
341929b6:	6823      	ldr	r3, [r4, #0]
341929b8:	079b      	lsls	r3, r3, #30
341929ba:	d413      	bmi.n	341929e4 <_printf_i+0x22c>
341929bc:	68e0      	ldr	r0, [r4, #12]
341929be:	9b03      	ldr	r3, [sp, #12]
341929c0:	4298      	cmp	r0, r3
341929c2:	bfb8      	it	lt
341929c4:	4618      	movlt	r0, r3
341929c6:	e7a6      	b.n	34192916 <_printf_i+0x15e>
341929c8:	2301      	movs	r3, #1
341929ca:	4632      	mov	r2, r6
341929cc:	4649      	mov	r1, r9
341929ce:	4640      	mov	r0, r8
341929d0:	47d0      	blx	sl
341929d2:	3001      	adds	r0, #1
341929d4:	d09d      	beq.n	34192912 <_printf_i+0x15a>
341929d6:	3501      	adds	r5, #1
341929d8:	68e3      	ldr	r3, [r4, #12]
341929da:	9903      	ldr	r1, [sp, #12]
341929dc:	1a5b      	subs	r3, r3, r1
341929de:	42ab      	cmp	r3, r5
341929e0:	dcf2      	bgt.n	341929c8 <_printf_i+0x210>
341929e2:	e7eb      	b.n	341929bc <_printf_i+0x204>
341929e4:	2500      	movs	r5, #0
341929e6:	f104 0619 	add.w	r6, r4, #25
341929ea:	e7f5      	b.n	341929d8 <_printf_i+0x220>
341929ec:	34194a56 	.word	0x34194a56
341929f0:	34194a67 	.word	0x34194a67

341929f4 <__sflush_r>:
341929f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
341929f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
341929fc:	0716      	lsls	r6, r2, #28
341929fe:	4605      	mov	r5, r0
34192a00:	460c      	mov	r4, r1
34192a02:	d454      	bmi.n	34192aae <__sflush_r+0xba>
34192a04:	684b      	ldr	r3, [r1, #4]
34192a06:	2b00      	cmp	r3, #0
34192a08:	dc02      	bgt.n	34192a10 <__sflush_r+0x1c>
34192a0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
34192a0c:	2b00      	cmp	r3, #0
34192a0e:	dd48      	ble.n	34192aa2 <__sflush_r+0xae>
34192a10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
34192a12:	2e00      	cmp	r6, #0
34192a14:	d045      	beq.n	34192aa2 <__sflush_r+0xae>
34192a16:	2300      	movs	r3, #0
34192a18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
34192a1c:	682f      	ldr	r7, [r5, #0]
34192a1e:	6a21      	ldr	r1, [r4, #32]
34192a20:	602b      	str	r3, [r5, #0]
34192a22:	d030      	beq.n	34192a86 <__sflush_r+0x92>
34192a24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
34192a26:	89a3      	ldrh	r3, [r4, #12]
34192a28:	0759      	lsls	r1, r3, #29
34192a2a:	d505      	bpl.n	34192a38 <__sflush_r+0x44>
34192a2c:	6863      	ldr	r3, [r4, #4]
34192a2e:	1ad2      	subs	r2, r2, r3
34192a30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34192a32:	b10b      	cbz	r3, 34192a38 <__sflush_r+0x44>
34192a34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34192a36:	1ad2      	subs	r2, r2, r3
34192a38:	2300      	movs	r3, #0
34192a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
34192a3c:	6a21      	ldr	r1, [r4, #32]
34192a3e:	4628      	mov	r0, r5
34192a40:	47b0      	blx	r6
34192a42:	1c43      	adds	r3, r0, #1
34192a44:	89a3      	ldrh	r3, [r4, #12]
34192a46:	d106      	bne.n	34192a56 <__sflush_r+0x62>
34192a48:	6829      	ldr	r1, [r5, #0]
34192a4a:	291d      	cmp	r1, #29
34192a4c:	d82b      	bhi.n	34192aa6 <__sflush_r+0xb2>
34192a4e:	4a2a      	ldr	r2, [pc, #168]	@ (34192af8 <__sflush_r+0x104>)
34192a50:	40ca      	lsrs	r2, r1
34192a52:	07d6      	lsls	r6, r2, #31
34192a54:	d527      	bpl.n	34192aa6 <__sflush_r+0xb2>
34192a56:	2200      	movs	r2, #0
34192a58:	04d9      	lsls	r1, r3, #19
34192a5a:	6062      	str	r2, [r4, #4]
34192a5c:	6922      	ldr	r2, [r4, #16]
34192a5e:	6022      	str	r2, [r4, #0]
34192a60:	d504      	bpl.n	34192a6c <__sflush_r+0x78>
34192a62:	1c42      	adds	r2, r0, #1
34192a64:	d101      	bne.n	34192a6a <__sflush_r+0x76>
34192a66:	682b      	ldr	r3, [r5, #0]
34192a68:	b903      	cbnz	r3, 34192a6c <__sflush_r+0x78>
34192a6a:	6560      	str	r0, [r4, #84]	@ 0x54
34192a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
34192a6e:	602f      	str	r7, [r5, #0]
34192a70:	b1b9      	cbz	r1, 34192aa2 <__sflush_r+0xae>
34192a72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
34192a76:	4299      	cmp	r1, r3
34192a78:	d002      	beq.n	34192a80 <__sflush_r+0x8c>
34192a7a:	4628      	mov	r0, r5
34192a7c:	f7ff fa98 	bl	34191fb0 <_free_r>
34192a80:	2300      	movs	r3, #0
34192a82:	6363      	str	r3, [r4, #52]	@ 0x34
34192a84:	e00d      	b.n	34192aa2 <__sflush_r+0xae>
34192a86:	2301      	movs	r3, #1
34192a88:	4628      	mov	r0, r5
34192a8a:	47b0      	blx	r6
34192a8c:	4602      	mov	r2, r0
34192a8e:	1c50      	adds	r0, r2, #1
34192a90:	d1c9      	bne.n	34192a26 <__sflush_r+0x32>
34192a92:	682b      	ldr	r3, [r5, #0]
34192a94:	2b00      	cmp	r3, #0
34192a96:	d0c6      	beq.n	34192a26 <__sflush_r+0x32>
34192a98:	2b1d      	cmp	r3, #29
34192a9a:	d001      	beq.n	34192aa0 <__sflush_r+0xac>
34192a9c:	2b16      	cmp	r3, #22
34192a9e:	d11d      	bne.n	34192adc <__sflush_r+0xe8>
34192aa0:	602f      	str	r7, [r5, #0]
34192aa2:	2000      	movs	r0, #0
34192aa4:	e021      	b.n	34192aea <__sflush_r+0xf6>
34192aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34192aaa:	b21b      	sxth	r3, r3
34192aac:	e01a      	b.n	34192ae4 <__sflush_r+0xf0>
34192aae:	690f      	ldr	r7, [r1, #16]
34192ab0:	2f00      	cmp	r7, #0
34192ab2:	d0f6      	beq.n	34192aa2 <__sflush_r+0xae>
34192ab4:	0793      	lsls	r3, r2, #30
34192ab6:	680e      	ldr	r6, [r1, #0]
34192ab8:	600f      	str	r7, [r1, #0]
34192aba:	bf0c      	ite	eq
34192abc:	694b      	ldreq	r3, [r1, #20]
34192abe:	2300      	movne	r3, #0
34192ac0:	eba6 0807 	sub.w	r8, r6, r7
34192ac4:	608b      	str	r3, [r1, #8]
34192ac6:	f1b8 0f00 	cmp.w	r8, #0
34192aca:	ddea      	ble.n	34192aa2 <__sflush_r+0xae>
34192acc:	4643      	mov	r3, r8
34192ace:	463a      	mov	r2, r7
34192ad0:	6a21      	ldr	r1, [r4, #32]
34192ad2:	4628      	mov	r0, r5
34192ad4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
34192ad6:	47b0      	blx	r6
34192ad8:	2800      	cmp	r0, #0
34192ada:	dc08      	bgt.n	34192aee <__sflush_r+0xfa>
34192adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34192ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34192ae4:	f04f 30ff 	mov.w	r0, #4294967295
34192ae8:	81a3      	strh	r3, [r4, #12]
34192aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34192aee:	4407      	add	r7, r0
34192af0:	eba8 0800 	sub.w	r8, r8, r0
34192af4:	e7e7      	b.n	34192ac6 <__sflush_r+0xd2>
34192af6:	bf00      	nop
34192af8:	20400001 	.word	0x20400001

34192afc <_fflush_r>:
34192afc:	b538      	push	{r3, r4, r5, lr}
34192afe:	690b      	ldr	r3, [r1, #16]
34192b00:	4605      	mov	r5, r0
34192b02:	460c      	mov	r4, r1
34192b04:	b913      	cbnz	r3, 34192b0c <_fflush_r+0x10>
34192b06:	2500      	movs	r5, #0
34192b08:	4628      	mov	r0, r5
34192b0a:	bd38      	pop	{r3, r4, r5, pc}
34192b0c:	b118      	cbz	r0, 34192b16 <_fflush_r+0x1a>
34192b0e:	6a03      	ldr	r3, [r0, #32]
34192b10:	b90b      	cbnz	r3, 34192b16 <_fflush_r+0x1a>
34192b12:	f7fe fff7 	bl	34191b04 <__sinit>
34192b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34192b1a:	2b00      	cmp	r3, #0
34192b1c:	d0f3      	beq.n	34192b06 <_fflush_r+0xa>
34192b1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
34192b20:	07d0      	lsls	r0, r2, #31
34192b22:	d404      	bmi.n	34192b2e <_fflush_r+0x32>
34192b24:	0599      	lsls	r1, r3, #22
34192b26:	d402      	bmi.n	34192b2e <_fflush_r+0x32>
34192b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34192b2a:	f7ff fa32 	bl	34191f92 <__retarget_lock_acquire_recursive>
34192b2e:	4628      	mov	r0, r5
34192b30:	4621      	mov	r1, r4
34192b32:	f7ff ff5f 	bl	341929f4 <__sflush_r>
34192b36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34192b38:	4605      	mov	r5, r0
34192b3a:	07da      	lsls	r2, r3, #31
34192b3c:	d4e4      	bmi.n	34192b08 <_fflush_r+0xc>
34192b3e:	89a3      	ldrh	r3, [r4, #12]
34192b40:	059b      	lsls	r3, r3, #22
34192b42:	d4e1      	bmi.n	34192b08 <_fflush_r+0xc>
34192b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34192b46:	f7ff fa25 	bl	34191f94 <__retarget_lock_release_recursive>
34192b4a:	e7dd      	b.n	34192b08 <_fflush_r+0xc>

34192b4c <__swhatbuf_r>:
34192b4c:	b570      	push	{r4, r5, r6, lr}
34192b4e:	460c      	mov	r4, r1
34192b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34192b54:	b096      	sub	sp, #88	@ 0x58
34192b56:	4615      	mov	r5, r2
34192b58:	2900      	cmp	r1, #0
34192b5a:	461e      	mov	r6, r3
34192b5c:	da0c      	bge.n	34192b78 <__swhatbuf_r+0x2c>
34192b5e:	89a3      	ldrh	r3, [r4, #12]
34192b60:	2100      	movs	r1, #0
34192b62:	f013 0f80 	tst.w	r3, #128	@ 0x80
34192b66:	bf14      	ite	ne
34192b68:	2340      	movne	r3, #64	@ 0x40
34192b6a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
34192b6e:	2000      	movs	r0, #0
34192b70:	6031      	str	r1, [r6, #0]
34192b72:	602b      	str	r3, [r5, #0]
34192b74:	b016      	add	sp, #88	@ 0x58
34192b76:	bd70      	pop	{r4, r5, r6, pc}
34192b78:	466a      	mov	r2, sp
34192b7a:	f000 f849 	bl	34192c10 <_fstat_r>
34192b7e:	2800      	cmp	r0, #0
34192b80:	dbed      	blt.n	34192b5e <__swhatbuf_r+0x12>
34192b82:	9901      	ldr	r1, [sp, #4]
34192b84:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
34192b88:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
34192b8c:	4259      	negs	r1, r3
34192b8e:	4159      	adcs	r1, r3
34192b90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34192b94:	e7eb      	b.n	34192b6e <__swhatbuf_r+0x22>

34192b96 <__smakebuf_r>:
34192b96:	898b      	ldrh	r3, [r1, #12]
34192b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34192b9a:	079d      	lsls	r5, r3, #30
34192b9c:	4606      	mov	r6, r0
34192b9e:	460c      	mov	r4, r1
34192ba0:	d507      	bpl.n	34192bb2 <__smakebuf_r+0x1c>
34192ba2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
34192ba6:	6023      	str	r3, [r4, #0]
34192ba8:	6123      	str	r3, [r4, #16]
34192baa:	2301      	movs	r3, #1
34192bac:	6163      	str	r3, [r4, #20]
34192bae:	b003      	add	sp, #12
34192bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
34192bb2:	ab01      	add	r3, sp, #4
34192bb4:	466a      	mov	r2, sp
34192bb6:	f7ff ffc9 	bl	34192b4c <__swhatbuf_r>
34192bba:	9f00      	ldr	r7, [sp, #0]
34192bbc:	4605      	mov	r5, r0
34192bbe:	4630      	mov	r0, r6
34192bc0:	4639      	mov	r1, r7
34192bc2:	f7ff fa61 	bl	34192088 <_malloc_r>
34192bc6:	b948      	cbnz	r0, 34192bdc <__smakebuf_r+0x46>
34192bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34192bcc:	059a      	lsls	r2, r3, #22
34192bce:	d4ee      	bmi.n	34192bae <__smakebuf_r+0x18>
34192bd0:	f023 0303 	bic.w	r3, r3, #3
34192bd4:	f043 0302 	orr.w	r3, r3, #2
34192bd8:	81a3      	strh	r3, [r4, #12]
34192bda:	e7e2      	b.n	34192ba2 <__smakebuf_r+0xc>
34192bdc:	89a3      	ldrh	r3, [r4, #12]
34192bde:	6020      	str	r0, [r4, #0]
34192be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
34192be4:	81a3      	strh	r3, [r4, #12]
34192be6:	9b01      	ldr	r3, [sp, #4]
34192be8:	e9c4 0704 	strd	r0, r7, [r4, #16]
34192bec:	b15b      	cbz	r3, 34192c06 <__smakebuf_r+0x70>
34192bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34192bf2:	4630      	mov	r0, r6
34192bf4:	f000 f81e 	bl	34192c34 <_isatty_r>
34192bf8:	b128      	cbz	r0, 34192c06 <__smakebuf_r+0x70>
34192bfa:	89a3      	ldrh	r3, [r4, #12]
34192bfc:	f023 0303 	bic.w	r3, r3, #3
34192c00:	f043 0301 	orr.w	r3, r3, #1
34192c04:	81a3      	strh	r3, [r4, #12]
34192c06:	89a3      	ldrh	r3, [r4, #12]
34192c08:	431d      	orrs	r5, r3
34192c0a:	81a5      	strh	r5, [r4, #12]
34192c0c:	e7cf      	b.n	34192bae <__smakebuf_r+0x18>
	...

34192c10 <_fstat_r>:
34192c10:	b538      	push	{r3, r4, r5, lr}
34192c12:	2300      	movs	r3, #0
34192c14:	4d06      	ldr	r5, [pc, #24]	@ (34192c30 <_fstat_r+0x20>)
34192c16:	4604      	mov	r4, r0
34192c18:	4608      	mov	r0, r1
34192c1a:	4611      	mov	r1, r2
34192c1c:	602b      	str	r3, [r5, #0]
34192c1e:	f7fe fbb2 	bl	34191386 <_fstat>
34192c22:	1c43      	adds	r3, r0, #1
34192c24:	d102      	bne.n	34192c2c <_fstat_r+0x1c>
34192c26:	682b      	ldr	r3, [r5, #0]
34192c28:	b103      	cbz	r3, 34192c2c <_fstat_r+0x1c>
34192c2a:	6023      	str	r3, [r4, #0]
34192c2c:	bd38      	pop	{r3, r4, r5, pc}
34192c2e:	bf00      	nop
34192c30:	341c1934 	.word	0x341c1934

34192c34 <_isatty_r>:
34192c34:	b538      	push	{r3, r4, r5, lr}
34192c36:	2300      	movs	r3, #0
34192c38:	4d05      	ldr	r5, [pc, #20]	@ (34192c50 <_isatty_r+0x1c>)
34192c3a:	4604      	mov	r4, r0
34192c3c:	4608      	mov	r0, r1
34192c3e:	602b      	str	r3, [r5, #0]
34192c40:	f7fe fbb1 	bl	341913a6 <_isatty>
34192c44:	1c43      	adds	r3, r0, #1
34192c46:	d102      	bne.n	34192c4e <_isatty_r+0x1a>
34192c48:	682b      	ldr	r3, [r5, #0]
34192c4a:	b103      	cbz	r3, 34192c4e <_isatty_r+0x1a>
34192c4c:	6023      	str	r3, [r4, #0]
34192c4e:	bd38      	pop	{r3, r4, r5, pc}
34192c50:	341c1934 	.word	0x341c1934

34192c54 <_sbrk_r>:
34192c54:	b538      	push	{r3, r4, r5, lr}
34192c56:	2300      	movs	r3, #0
34192c58:	4d05      	ldr	r5, [pc, #20]	@ (34192c70 <_sbrk_r+0x1c>)
34192c5a:	4604      	mov	r4, r0
34192c5c:	4608      	mov	r0, r1
34192c5e:	602b      	str	r3, [r5, #0]
34192c60:	f7fe fbba 	bl	341913d8 <_sbrk>
34192c64:	1c43      	adds	r3, r0, #1
34192c66:	d102      	bne.n	34192c6e <_sbrk_r+0x1a>
34192c68:	682b      	ldr	r3, [r5, #0]
34192c6a:	b103      	cbz	r3, 34192c6e <_sbrk_r+0x1a>
34192c6c:	6023      	str	r3, [r4, #0]
34192c6e:	bd38      	pop	{r3, r4, r5, pc}
34192c70:	341c1934 	.word	0x341c1934

34192c74 <memchr>:
34192c74:	b2c9      	uxtb	r1, r1
34192c76:	4603      	mov	r3, r0
34192c78:	4402      	add	r2, r0
34192c7a:	b510      	push	{r4, lr}
34192c7c:	4293      	cmp	r3, r2
34192c7e:	4618      	mov	r0, r3
34192c80:	d101      	bne.n	34192c86 <memchr+0x12>
34192c82:	2000      	movs	r0, #0
34192c84:	e003      	b.n	34192c8e <memchr+0x1a>
34192c86:	7804      	ldrb	r4, [r0, #0]
34192c88:	3301      	adds	r3, #1
34192c8a:	428c      	cmp	r4, r1
34192c8c:	d1f6      	bne.n	34192c7c <memchr+0x8>
34192c8e:	bd10      	pop	{r4, pc}

34192c90 <_realloc_r>:
34192c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34192c94:	4607      	mov	r7, r0
34192c96:	4614      	mov	r4, r2
34192c98:	460d      	mov	r5, r1
34192c9a:	b921      	cbnz	r1, 34192ca6 <_realloc_r+0x16>
34192c9c:	4611      	mov	r1, r2
34192c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
34192ca2:	f7ff b9f1 	b.w	34192088 <_malloc_r>
34192ca6:	b92a      	cbnz	r2, 34192cb4 <_realloc_r+0x24>
34192ca8:	4625      	mov	r5, r4
34192caa:	f7ff f981 	bl	34191fb0 <_free_r>
34192cae:	4628      	mov	r0, r5
34192cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34192cb4:	f000 f81a 	bl	34192cec <_malloc_usable_size_r>
34192cb8:	4284      	cmp	r4, r0
34192cba:	4606      	mov	r6, r0
34192cbc:	d802      	bhi.n	34192cc4 <_realloc_r+0x34>
34192cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
34192cc2:	d8f4      	bhi.n	34192cae <_realloc_r+0x1e>
34192cc4:	4621      	mov	r1, r4
34192cc6:	4638      	mov	r0, r7
34192cc8:	f7ff f9de 	bl	34192088 <_malloc_r>
34192ccc:	4680      	mov	r8, r0
34192cce:	b908      	cbnz	r0, 34192cd4 <_realloc_r+0x44>
34192cd0:	4645      	mov	r5, r8
34192cd2:	e7ec      	b.n	34192cae <_realloc_r+0x1e>
34192cd4:	42b4      	cmp	r4, r6
34192cd6:	4622      	mov	r2, r4
34192cd8:	4629      	mov	r1, r5
34192cda:	bf28      	it	cs
34192cdc:	4632      	movcs	r2, r6
34192cde:	f7ff f95a 	bl	34191f96 <memcpy>
34192ce2:	4629      	mov	r1, r5
34192ce4:	4638      	mov	r0, r7
34192ce6:	f7ff f963 	bl	34191fb0 <_free_r>
34192cea:	e7f1      	b.n	34192cd0 <_realloc_r+0x40>

34192cec <_malloc_usable_size_r>:
34192cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
34192cf0:	1f18      	subs	r0, r3, #4
34192cf2:	2b00      	cmp	r3, #0
34192cf4:	bfbc      	itt	lt
34192cf6:	580b      	ldrlt	r3, [r1, r0]
34192cf8:	18c0      	addlt	r0, r0, r3
34192cfa:	4770      	bx	lr
34192cfc:	0000      	movs	r0, r0
	...

34192d00 <log10>:
34192d00:	b508      	push	{r3, lr}
34192d02:	ed2d 8b02 	vpush	{d8}
34192d06:	eeb0 8b40 	vmov.f64	d8, d0
34192d0a:	f000 fca1 	bl	34193650 <__ieee754_log10>
34192d0e:	eeb4 8b48 	vcmp.f64	d8, d8
34192d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34192d16:	d60f      	bvs.n	34192d38 <log10+0x38>
34192d18:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
34192d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34192d20:	d80a      	bhi.n	34192d38 <log10+0x38>
34192d22:	eeb5 8b40 	vcmp.f64	d8, #0.0
34192d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34192d2a:	d108      	bne.n	34192d3e <log10+0x3e>
34192d2c:	f7ff f906 	bl	34191f3c <__errno>
34192d30:	2322      	movs	r3, #34	@ 0x22
34192d32:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 34192d58 <log10+0x58>
34192d36:	6003      	str	r3, [r0, #0]
34192d38:	ecbd 8b02 	vpop	{d8}
34192d3c:	bd08      	pop	{r3, pc}
34192d3e:	f7ff f8fd 	bl	34191f3c <__errno>
34192d42:	2321      	movs	r3, #33	@ 0x21
34192d44:	ecbd 8b02 	vpop	{d8}
34192d48:	6003      	str	r3, [r0, #0]
34192d4a:	4805      	ldr	r0, [pc, #20]	@ (34192d60 <log10+0x60>)
34192d4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
34192d50:	f000 b82a 	b.w	34192da8 <nan>
34192d54:	f3af 8000 	nop.w
34192d58:	00000000 	.word	0x00000000
34192d5c:	fff00000 	.word	0xfff00000
34192d60:	341945fd 	.word	0x341945fd
34192d64:	00000000 	.word	0x00000000

34192d68 <sqrt>:
34192d68:	b508      	push	{r3, lr}
34192d6a:	ed2d 8b04 	vpush	{d8-d9}
34192d6e:	eeb0 8b40 	vmov.f64	d8, d0
34192d72:	f000 fc6a 	bl	3419364a <__ieee754_sqrt>
34192d76:	eeb4 8b48 	vcmp.f64	d8, d8
34192d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34192d7e:	d60c      	bvs.n	34192d9a <sqrt+0x32>
34192d80:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 34192da0 <sqrt+0x38>
34192d84:	eeb4 8bc9 	vcmpe.f64	d8, d9
34192d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34192d8c:	d505      	bpl.n	34192d9a <sqrt+0x32>
34192d8e:	f7ff f8d5 	bl	34191f3c <__errno>
34192d92:	ee89 0b09 	vdiv.f64	d0, d9, d9
34192d96:	2321      	movs	r3, #33	@ 0x21
34192d98:	6003      	str	r3, [r0, #0]
34192d9a:	ecbd 8b04 	vpop	{d8-d9}
34192d9e:	bd08      	pop	{r3, pc}
	...

34192da8 <nan>:
34192da8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 34192db0 <nan+0x8>
34192dac:	4770      	bx	lr
34192dae:	bf00      	nop
34192db0:	00000000 	.word	0x00000000
34192db4:	7ff80000 	.word	0x7ff80000

34192db8 <checkint>:
34192db8:	f3c1 520a 	ubfx	r2, r1, #20, #11
34192dbc:	f240 33fe 	movw	r3, #1022	@ 0x3fe
34192dc0:	429a      	cmp	r2, r3
34192dc2:	b570      	push	{r4, r5, r6, lr}
34192dc4:	dd2a      	ble.n	34192e1c <checkint+0x64>
34192dc6:	f240 4333 	movw	r3, #1075	@ 0x433
34192dca:	429a      	cmp	r2, r3
34192dcc:	dc24      	bgt.n	34192e18 <checkint+0x60>
34192dce:	1a9b      	subs	r3, r3, r2
34192dd0:	f04f 32ff 	mov.w	r2, #4294967295
34192dd4:	f1a3 0620 	sub.w	r6, r3, #32
34192dd8:	fa02 f403 	lsl.w	r4, r2, r3
34192ddc:	f1c3 0520 	rsb	r5, r3, #32
34192de0:	fa02 f606 	lsl.w	r6, r2, r6
34192de4:	fa22 f505 	lsr.w	r5, r2, r5
34192de8:	409a      	lsls	r2, r3
34192dea:	4334      	orrs	r4, r6
34192dec:	ea20 0202 	bic.w	r2, r0, r2
34192df0:	432c      	orrs	r4, r5
34192df2:	ea21 0404 	bic.w	r4, r1, r4
34192df6:	4322      	orrs	r2, r4
34192df8:	f1a3 0420 	sub.w	r4, r3, #32
34192dfc:	f1c3 0220 	rsb	r2, r3, #32
34192e00:	d10c      	bne.n	34192e1c <checkint+0x64>
34192e02:	40d8      	lsrs	r0, r3
34192e04:	fa01 f302 	lsl.w	r3, r1, r2
34192e08:	40e1      	lsrs	r1, r4
34192e0a:	4318      	orrs	r0, r3
34192e0c:	4308      	orrs	r0, r1
34192e0e:	f000 0001 	and.w	r0, r0, #1
34192e12:	f1d0 0002 	rsbs	r0, r0, #2
34192e16:	bd70      	pop	{r4, r5, r6, pc}
34192e18:	2002      	movs	r0, #2
34192e1a:	e7fc      	b.n	34192e16 <checkint+0x5e>
34192e1c:	2000      	movs	r0, #0
34192e1e:	e7fa      	b.n	34192e16 <checkint+0x5e>

34192e20 <pow>:
34192e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34192e24:	ee10 4a90 	vmov	r4, s1
34192e28:	f240 73fd 	movw	r3, #2045	@ 0x7fd
34192e2c:	ee11 aa90 	vmov	sl, s3
34192e30:	ee10 5a10 	vmov	r5, s0
34192e34:	ea4f 5814 	mov.w	r8, r4, lsr #20
34192e38:	ee11 0a10 	vmov	r0, s2
34192e3c:	ea4f 561a 	mov.w	r6, sl, lsr #20
34192e40:	f108 32ff 	add.w	r2, r8, #4294967295
34192e44:	46c4      	mov	ip, r8
34192e46:	429a      	cmp	r2, r3
34192e48:	ed2d 8b0a 	vpush	{d8-d12}
34192e4c:	b087      	sub	sp, #28
34192e4e:	d806      	bhi.n	34192e5e <pow+0x3e>
34192e50:	f3c6 030a 	ubfx	r3, r6, #0, #11
34192e54:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
34192e58:	2b7f      	cmp	r3, #127	@ 0x7f
34192e5a:	f240 8157 	bls.w	3419310c <pow+0x2ec>
34192e5e:	1802      	adds	r2, r0, r0
34192e60:	f06f 0b01 	mvn.w	fp, #1
34192e64:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
34192e68:	eb4a 010a 	adc.w	r1, sl, sl
34192e6c:	1e57      	subs	r7, r2, #1
34192e6e:	f141 33ff 	adc.w	r3, r1, #4294967295
34192e72:	45bb      	cmp	fp, r7
34192e74:	eb7e 0303 	sbcs.w	r3, lr, r3
34192e78:	d242      	bcs.n	34192f00 <pow+0xe0>
34192e7a:	ea52 0301 	orrs.w	r3, r2, r1
34192e7e:	f04f 0300 	mov.w	r3, #0
34192e82:	d10c      	bne.n	34192e9e <pow+0x7e>
34192e84:	196d      	adds	r5, r5, r5
34192e86:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
34192e8a:	4164      	adcs	r4, r4
34192e8c:	42ab      	cmp	r3, r5
34192e8e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
34192e92:	41a3      	sbcs	r3, r4
34192e94:	f0c0 808f 	bcc.w	34192fb6 <pow+0x196>
34192e98:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34192e9c:	e02b      	b.n	34192ef6 <pow+0xd6>
34192e9e:	4ed4      	ldr	r6, [pc, #848]	@ (341931f0 <pow+0x3d0>)
34192ea0:	42b4      	cmp	r4, r6
34192ea2:	bf08      	it	eq
34192ea4:	429d      	cmpeq	r5, r3
34192ea6:	d109      	bne.n	34192ebc <pow+0x9c>
34192ea8:	1800      	adds	r0, r0, r0
34192eaa:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
34192eae:	eb4a 0a0a 	adc.w	sl, sl, sl
34192eb2:	4283      	cmp	r3, r0
34192eb4:	4bcf      	ldr	r3, [pc, #828]	@ (341931f4 <pow+0x3d4>)
34192eb6:	eb73 030a 	sbcs.w	r3, r3, sl
34192eba:	e7eb      	b.n	34192e94 <pow+0x74>
34192ebc:	196d      	adds	r5, r5, r5
34192ebe:	48ce      	ldr	r0, [pc, #824]	@ (341931f8 <pow+0x3d8>)
34192ec0:	4164      	adcs	r4, r4
34192ec2:	42ab      	cmp	r3, r5
34192ec4:	eb70 0604 	sbcs.w	r6, r0, r4
34192ec8:	d375      	bcc.n	34192fb6 <pow+0x196>
34192eca:	4281      	cmp	r1, r0
34192ecc:	bf08      	it	eq
34192ece:	429a      	cmpeq	r2, r3
34192ed0:	d171      	bne.n	34192fb6 <pow+0x196>
34192ed2:	4aca      	ldr	r2, [pc, #808]	@ (341931fc <pow+0x3dc>)
34192ed4:	4294      	cmp	r4, r2
34192ed6:	bf08      	it	eq
34192ed8:	429d      	cmpeq	r5, r3
34192eda:	d0dd      	beq.n	34192e98 <pow+0x78>
34192edc:	4294      	cmp	r4, r2
34192ede:	ea6f 0a0a 	mvn.w	sl, sl
34192ee2:	bf34      	ite	cc
34192ee4:	2400      	movcc	r4, #0
34192ee6:	2401      	movcs	r4, #1
34192ee8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
34192eec:	4554      	cmp	r4, sl
34192eee:	f040 81dc 	bne.w	341932aa <pow+0x48a>
34192ef2:	ee21 0b01 	vmul.f64	d0, d1, d1
34192ef6:	b007      	add	sp, #28
34192ef8:	ecbd 8b0a 	vpop	{d8-d12}
34192efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34192f00:	196f      	adds	r7, r5, r5
34192f02:	eb44 0904 	adc.w	r9, r4, r4
34192f06:	1e7a      	subs	r2, r7, #1
34192f08:	f169 0300 	sbc.w	r3, r9, #0
34192f0c:	4593      	cmp	fp, r2
34192f0e:	eb7e 0303 	sbcs.w	r3, lr, r3
34192f12:	d225      	bcs.n	34192f60 <pow+0x140>
34192f14:	2c00      	cmp	r4, #0
34192f16:	ee20 0b00 	vmul.f64	d0, d0, d0
34192f1a:	da13      	bge.n	34192f44 <pow+0x124>
34192f1c:	4651      	mov	r1, sl
34192f1e:	f7ff ff4b 	bl	34192db8 <checkint>
34192f22:	2801      	cmp	r0, #1
34192f24:	d10e      	bne.n	34192f44 <pow+0x124>
34192f26:	eeb1 0b40 	vneg.f64	d0, d0
34192f2a:	ea57 0909 	orrs.w	r9, r7, r9
34192f2e:	d10b      	bne.n	34192f48 <pow+0x128>
34192f30:	f1ba 0f00 	cmp.w	sl, #0
34192f34:	dadf      	bge.n	34192ef6 <pow+0xd6>
34192f36:	b007      	add	sp, #28
34192f38:	ecbd 8b0a 	vpop	{d8-d12}
34192f3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34192f40:	f000 bc26 	b.w	34193790 <__math_divzero>
34192f44:	2000      	movs	r0, #0
34192f46:	e7f0      	b.n	34192f2a <pow+0x10a>
34192f48:	f1ba 0f00 	cmp.w	sl, #0
34192f4c:	dad3      	bge.n	34192ef6 <pow+0xd6>
34192f4e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
34192f52:	ee86 7b00 	vdiv.f64	d7, d6, d0
34192f56:	ed8d 7b00 	vstr	d7, [sp]
34192f5a:	ed9d 0b00 	vldr	d0, [sp]
34192f5e:	e7ca      	b.n	34192ef6 <pow+0xd6>
34192f60:	2c00      	cmp	r4, #0
34192f62:	da2b      	bge.n	34192fbc <pow+0x19c>
34192f64:	4651      	mov	r1, sl
34192f66:	f7ff ff27 	bl	34192db8 <checkint>
34192f6a:	b930      	cbnz	r0, 34192f7a <pow+0x15a>
34192f6c:	b007      	add	sp, #28
34192f6e:	ecbd 8b0a 	vpop	{d8-d12}
34192f72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34192f76:	f000 bc27 	b.w	341937c8 <__math_invalid>
34192f7a:	1e41      	subs	r1, r0, #1
34192f7c:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
34192f80:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
34192f84:	4248      	negs	r0, r1
34192f86:	4148      	adcs	r0, r1
34192f88:	0480      	lsls	r0, r0, #18
34192f8a:	f3c6 020a 	ubfx	r2, r6, #0, #11
34192f8e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
34192f92:	2b7f      	cmp	r3, #127	@ 0x7f
34192f94:	d92d      	bls.n	34192ff2 <pow+0x1d2>
34192f96:	2000      	movs	r0, #0
34192f98:	4b95      	ldr	r3, [pc, #596]	@ (341931f0 <pow+0x3d0>)
34192f9a:	429c      	cmp	r4, r3
34192f9c:	bf08      	it	eq
34192f9e:	4285      	cmpeq	r5, r0
34192fa0:	f43f af7a 	beq.w	34192e98 <pow+0x78>
34192fa4:	f240 31bd 	movw	r1, #957	@ 0x3bd
34192fa8:	428a      	cmp	r2, r1
34192faa:	d80c      	bhi.n	34192fc6 <pow+0x1a6>
34192fac:	42a8      	cmp	r0, r5
34192fae:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34192fb2:	41a3      	sbcs	r3, r4
34192fb4:	d204      	bcs.n	34192fc0 <pow+0x1a0>
34192fb6:	ee31 0b00 	vadd.f64	d0, d1, d0
34192fba:	e79c      	b.n	34192ef6 <pow+0xd6>
34192fbc:	2000      	movs	r0, #0
34192fbe:	e7e4      	b.n	34192f8a <pow+0x16a>
34192fc0:	ee30 0b41 	vsub.f64	d0, d0, d1
34192fc4:	e797      	b.n	34192ef6 <pow+0xd6>
34192fc6:	2d01      	cmp	r5, #1
34192fc8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
34192fcc:	eb74 0303 	sbcs.w	r3, r4, r3
34192fd0:	bf34      	ite	cc
34192fd2:	2301      	movcc	r3, #1
34192fd4:	2300      	movcs	r3, #0
34192fd6:	4296      	cmp	r6, r2
34192fd8:	bf8c      	ite	hi
34192fda:	2600      	movhi	r6, #0
34192fdc:	2601      	movls	r6, #1
34192fde:	42b3      	cmp	r3, r6
34192fe0:	f000 809c 	beq.w	3419311c <pow+0x2fc>
34192fe4:	b007      	add	sp, #28
34192fe6:	ecbd 8b0a 	vpop	{d8-d12}
34192fea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34192fee:	f000 bbc7 	b.w	34193780 <__math_oflow>
34192ff2:	f1bc 0f00 	cmp.w	ip, #0
34192ff6:	d10a      	bne.n	3419300e <pow+0x1ee>
34192ff8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 341931e0 <pow+0x3c0>
34192ffc:	ee20 7b07 	vmul.f64	d7, d0, d7
34193000:	ec53 2b17 	vmov	r2, r3, d7
34193004:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
34193008:	4615      	mov	r5, r2
3419300a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
3419300e:	4a7c      	ldr	r2, [pc, #496]	@ (34193200 <pow+0x3e0>)
34193010:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
34193014:	4422      	add	r2, r4
34193016:	1513      	asrs	r3, r2, #20
34193018:	f3c2 3146 	ubfx	r1, r2, #13, #7
3419301c:	f36f 0213 	bfc	r2, #0, #20
34193020:	ee03 3a10 	vmov	s6, r3
34193024:	4b77      	ldr	r3, [pc, #476]	@ (34193204 <pow+0x3e4>)
34193026:	1aa7      	subs	r7, r4, r2
34193028:	eb03 1641 	add.w	r6, r3, r1, lsl #5
3419302c:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
34193030:	eb03 1241 	add.w	r2, r3, r1, lsl #5
34193034:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
34193038:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
3419303c:	1e2e      	subs	r6, r5, #0
3419303e:	ec47 6b14 	vmov	d4, r6, r7
34193042:	eea4 6b05 	vfma.f64	d6, d4, d5
34193046:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
3419304a:	ed93 5b00 	vldr	d5, [r3]
3419304e:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
34193052:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
34193056:	eea3 2b05 	vfma.f64	d2, d3, d5
3419305a:	ed93 5b02 	vldr	d5, [r3, #8]
3419305e:	eea3 7b05 	vfma.f64	d7, d3, d5
34193062:	ee36 4b02 	vadd.f64	d4, d6, d2
34193066:	ed93 5b04 	vldr	d5, [r3, #16]
3419306a:	ee32 2b44 	vsub.f64	d2, d2, d4
3419306e:	ee26 5b05 	vmul.f64	d5, d6, d5
34193072:	ee32 2b06 	vadd.f64	d2, d2, d6
34193076:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
3419307a:	ee26 0b05 	vmul.f64	d0, d6, d5
3419307e:	ee37 7b02 	vadd.f64	d7, d7, d2
34193082:	ee34 8b00 	vadd.f64	d8, d4, d0
34193086:	eeb0 9b40 	vmov.f64	d9, d0
3419308a:	ee26 bb00 	vmul.f64	d11, d6, d0
3419308e:	ee34 4b48 	vsub.f64	d4, d4, d8
34193092:	ee96 9b05 	vfnms.f64	d9, d6, d5
34193096:	ee34 ab00 	vadd.f64	d10, d4, d0
3419309a:	ed93 5b06 	vldr	d5, [r3, #24]
3419309e:	ed93 4b08 	vldr	d4, [r3, #32]
341930a2:	eea6 5b04 	vfma.f64	d5, d6, d4
341930a6:	ee37 7b09 	vadd.f64	d7, d7, d9
341930aa:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
341930ae:	ee37 7b0a 	vadd.f64	d7, d7, d10
341930b2:	eea6 4b03 	vfma.f64	d4, d6, d3
341930b6:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
341930ba:	eea6 3b0c 	vfma.f64	d3, d6, d12
341930be:	eea0 4b03 	vfma.f64	d4, d0, d3
341930c2:	eea0 5b04 	vfma.f64	d5, d0, d4
341930c6:	eeab 7b05 	vfma.f64	d7, d11, d5
341930ca:	ee38 4b07 	vadd.f64	d4, d8, d7
341930ce:	ee21 6b04 	vmul.f64	d6, d1, d4
341930d2:	ee38 8b44 	vsub.f64	d8, d8, d4
341930d6:	eeb0 5b46 	vmov.f64	d5, d6
341930da:	ee16 3a90 	vmov	r3, s13
341930de:	ee38 8b07 	vadd.f64	d8, d8, d7
341930e2:	f3c3 560a 	ubfx	r6, r3, #20, #11
341930e6:	ee91 5b04 	vfnms.f64	d5, d1, d4
341930ea:	18b2      	adds	r2, r6, r2
341930ec:	2a3e      	cmp	r2, #62	@ 0x3e
341930ee:	eea1 5b08 	vfma.f64	d5, d1, d8
341930f2:	d91b      	bls.n	3419312c <pow+0x30c>
341930f4:	2a00      	cmp	r2, #0
341930f6:	da0b      	bge.n	34193110 <pow+0x2f0>
341930f8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
341930fc:	ee36 0b00 	vadd.f64	d0, d6, d0
34193100:	2800      	cmp	r0, #0
34193102:	f43f aef8 	beq.w	34192ef6 <pow+0xd6>
34193106:	eeb1 0b40 	vneg.f64	d0, d0
3419310a:	e6f4      	b.n	34192ef6 <pow+0xd6>
3419310c:	2000      	movs	r0, #0
3419310e:	e77e      	b.n	3419300e <pow+0x1ee>
34193110:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
34193114:	d909      	bls.n	3419312a <pow+0x30a>
34193116:	2b00      	cmp	r3, #0
34193118:	f6bf af64 	bge.w	34192fe4 <pow+0x1c4>
3419311c:	b007      	add	sp, #28
3419311e:	ecbd 8b0a 	vpop	{d8-d12}
34193122:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34193126:	f000 bb23 	b.w	34193770 <__math_uflow>
3419312a:	2600      	movs	r6, #0
3419312c:	4936      	ldr	r1, [pc, #216]	@ (34193208 <pow+0x3e8>)
3419312e:	2700      	movs	r7, #0
34193130:	ed91 4b02 	vldr	d4, [r1, #8]
34193134:	ed91 3b00 	vldr	d3, [r1]
34193138:	eeb0 7b44 	vmov.f64	d7, d4
3419313c:	eea6 7b03 	vfma.f64	d7, d6, d3
34193140:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
34193144:	ee17 5a10 	vmov	r5, s14
34193148:	ee37 7b44 	vsub.f64	d7, d7, d4
3419314c:	ed91 4b04 	vldr	d4, [r1, #16]
34193150:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
34193154:	eea7 6b04 	vfma.f64	d6, d7, d4
34193158:	18dc      	adds	r4, r3, r3
3419315a:	1940      	adds	r0, r0, r5
3419315c:	f104 030f 	add.w	r3, r4, #15
34193160:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
34193164:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
34193168:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
3419316c:	ed91 4b06 	vldr	d4, [r1, #24]
34193170:	f8d2 e004 	ldr.w	lr, [r2, #4]
34193174:	eb17 020c 	adds.w	r2, r7, ip
34193178:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
3419317c:	eea7 6b04 	vfma.f64	d6, d7, d4
34193180:	ed91 4b08 	vldr	d4, [r1, #32]
34193184:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
34193188:	ee35 5b06 	vadd.f64	d5, d5, d6
3419318c:	eea5 4b03 	vfma.f64	d4, d5, d3
34193190:	ee25 6b05 	vmul.f64	d6, d5, d5
34193194:	ee35 7b07 	vadd.f64	d7, d5, d7
34193198:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
3419319c:	eea6 7b04 	vfma.f64	d7, d6, d4
341931a0:	ee26 6b06 	vmul.f64	d6, d6, d6
341931a4:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
341931a8:	eea5 4b03 	vfma.f64	d4, d5, d3
341931ac:	eea6 7b04 	vfma.f64	d7, d6, d4
341931b0:	2e00      	cmp	r6, #0
341931b2:	d175      	bne.n	341932a0 <pow+0x480>
341931b4:	42bd      	cmp	r5, r7
341931b6:	db29      	blt.n	3419320c <pow+0x3ec>
341931b8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
341931bc:	4610      	mov	r0, r2
341931be:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
341931c2:	ec41 0b10 	vmov	d0, r0, r1
341931c6:	eea7 0b00 	vfma.f64	d0, d7, d0
341931ca:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 341931e8 <pow+0x3c8>
341931ce:	ee20 0b07 	vmul.f64	d0, d0, d7
341931d2:	b007      	add	sp, #28
341931d4:	ecbd 8b0a 	vpop	{d8-d12}
341931d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341931dc:	f000 bb0c 	b.w	341937f8 <__math_check_oflow>
341931e0:	00000000 	.word	0x00000000
341931e4:	43300000 	.word	0x43300000
341931e8:	00000000 	.word	0x00000000
341931ec:	7f000000 	.word	0x7f000000
341931f0:	3ff00000 	.word	0x3ff00000
341931f4:	fff00000 	.word	0xfff00000
341931f8:	ffe00000 	.word	0xffe00000
341931fc:	7fe00000 	.word	0x7fe00000
34193200:	c0196aab 	.word	0xc0196aab
34193204:	34194a78 	.word	0x34194a78
34193208:	34195ac0 	.word	0x34195ac0
3419320c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
34193210:	4610      	mov	r0, r2
34193212:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
34193216:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
3419321a:	ec41 0b15 	vmov	d5, r0, r1
3419321e:	ee27 6b05 	vmul.f64	d6, d7, d5
34193222:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 341932b0 <pow+0x490>
34193226:	ee35 7b06 	vadd.f64	d7, d5, d6
3419322a:	eeb0 4bc7 	vabs.f64	d4, d7
3419322e:	eeb4 4bc3 	vcmpe.f64	d4, d3
34193232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34193236:	d52a      	bpl.n	3419328e <pow+0x46e>
34193238:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3419323c:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
34193240:	ee35 5b47 	vsub.f64	d5, d5, d7
34193244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34193248:	ee35 5b06 	vadd.f64	d5, d5, d6
3419324c:	bf58      	it	pl
3419324e:	eeb0 4b43 	vmovpl.f64	d4, d3
34193252:	ee37 3b04 	vadd.f64	d3, d7, d4
34193256:	ee34 6b43 	vsub.f64	d6, d4, d3
3419325a:	ee36 6b07 	vadd.f64	d6, d6, d7
3419325e:	ee36 6b05 	vadd.f64	d6, d6, d5
34193262:	ee36 6b03 	vadd.f64	d6, d6, d3
34193266:	ee36 7b44 	vsub.f64	d7, d6, d4
3419326a:	eeb5 7b40 	vcmp.f64	d7, #0.0
3419326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34193272:	d104      	bne.n	3419327e <pow+0x45e>
34193274:	4632      	mov	r2, r6
34193276:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
3419327a:	ec43 2b17 	vmov	d7, r2, r3
3419327e:	ed8d 0b02 	vstr	d0, [sp, #8]
34193282:	ed9d 6b02 	vldr	d6, [sp, #8]
34193286:	ee26 6b00 	vmul.f64	d6, d6, d0
3419328a:	ed8d 6b04 	vstr	d6, [sp, #16]
3419328e:	ee27 0b00 	vmul.f64	d0, d7, d0
34193292:	b007      	add	sp, #28
34193294:	ecbd 8b0a 	vpop	{d8-d12}
34193298:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3419329c:	f000 baa3 	b.w	341937e6 <__math_check_uflow>
341932a0:	ec43 2b10 	vmov	d0, r2, r3
341932a4:	eea7 0b00 	vfma.f64	d0, d7, d0
341932a8:	e625      	b.n	34192ef6 <pow+0xd6>
341932aa:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 341932b8 <pow+0x498>
341932ae:	e622      	b.n	34192ef6 <pow+0xd6>
341932b0:	00000000 	.word	0x00000000
341932b4:	00100000 	.word	0x00100000
	...

341932c0 <checkint>:
341932c0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
341932c4:	2b7e      	cmp	r3, #126	@ 0x7e
341932c6:	d910      	bls.n	341932ea <checkint+0x2a>
341932c8:	2b96      	cmp	r3, #150	@ 0x96
341932ca:	d80c      	bhi.n	341932e6 <checkint+0x26>
341932cc:	2201      	movs	r2, #1
341932ce:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
341932d2:	fa02 f303 	lsl.w	r3, r2, r3
341932d6:	1e5a      	subs	r2, r3, #1
341932d8:	4202      	tst	r2, r0
341932da:	d106      	bne.n	341932ea <checkint+0x2a>
341932dc:	4203      	tst	r3, r0
341932de:	bf14      	ite	ne
341932e0:	2001      	movne	r0, #1
341932e2:	2002      	moveq	r0, #2
341932e4:	4770      	bx	lr
341932e6:	2002      	movs	r0, #2
341932e8:	4770      	bx	lr
341932ea:	2000      	movs	r0, #0
341932ec:	4770      	bx	lr
	...

341932f0 <powf>:
341932f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
341932f2:	ee10 1a10 	vmov	r1, s0
341932f6:	ee10 4a90 	vmov	r4, s1
341932fa:	eef0 7a40 	vmov.f32	s15, s0
341932fe:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
34193302:	0063      	lsls	r3, r4, #1
34193304:	eeb0 7a60 	vmov.f32	s14, s1
34193308:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
3419330c:	f103 30ff 	add.w	r0, r3, #4294967295
34193310:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
34193314:	d252      	bcs.n	341933bc <powf+0xcc>
34193316:	4290      	cmp	r0, r2
34193318:	d258      	bcs.n	341933cc <powf+0xdc>
3419331a:	2000      	movs	r0, #0
3419331c:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
34193320:	4a9f      	ldr	r2, [pc, #636]	@ (341935a0 <powf+0x2b0>)
34193322:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
34193326:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
3419332a:	f3c3 44c3 	ubfx	r4, r3, #19, #4
3419332e:	f36f 0316 	bfc	r3, #0, #23
34193332:	1ac9      	subs	r1, r1, r3
34193334:	eb02 1404 	add.w	r4, r2, r4, lsl #4
34193338:	15db      	asrs	r3, r3, #23
3419333a:	ee07 1a90 	vmov	s15, r1
3419333e:	ed94 4b00 	vldr	d4, [r4]
34193342:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
34193346:	ee07 3a90 	vmov	s15, r3
3419334a:	ed94 5b02 	vldr	d5, [r4, #8]
3419334e:	eea4 2b06 	vfma.f64	d2, d4, d6
34193352:	eeb8 6be7 	vcvt.f64.s32	d6, s15
34193356:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3419335a:	ee36 6b05 	vadd.f64	d6, d6, d5
3419335e:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
34193362:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
34193366:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
3419336a:	ee22 4b02 	vmul.f64	d4, d2, d2
3419336e:	eea2 1b05 	vfma.f64	d1, d2, d5
34193372:	ee24 0b04 	vmul.f64	d0, d4, d4
34193376:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
3419337a:	eea2 5b03 	vfma.f64	d5, d2, d3
3419337e:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
34193382:	eea2 6b03 	vfma.f64	d6, d2, d3
34193386:	eea4 6b05 	vfma.f64	d6, d4, d5
3419338a:	eea1 6b00 	vfma.f64	d6, d1, d0
3419338e:	ee27 7b06 	vmul.f64	d7, d7, d6
34193392:	ee17 3a90 	vmov	r3, s15
34193396:	f3c3 32cf 	ubfx	r2, r3, #15, #16
3419339a:	f248 03bf 	movw	r3, #32959	@ 0x80bf
3419339e:	429a      	cmp	r2, r3
341933a0:	f0c0 8098 	bcc.w	341934d4 <powf+0x1e4>
341933a4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 34193580 <powf+0x290>
341933a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
341933ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341933b0:	dd79      	ble.n	341934a6 <powf+0x1b6>
341933b2:	b003      	add	sp, #12
341933b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
341933b8:	f000 b920 	b.w	341935fc <__math_oflowf>
341933bc:	4290      	cmp	r0, r2
341933be:	d330      	bcc.n	34193422 <powf+0x132>
341933c0:	b12b      	cbz	r3, 341933ce <powf+0xde>
341933c2:	0049      	lsls	r1, r1, #1
341933c4:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
341933c8:	d808      	bhi.n	341933dc <powf+0xec>
341933ca:	e015      	b.n	341933f8 <powf+0x108>
341933cc:	b953      	cbnz	r3, 341933e4 <powf+0xf4>
341933ce:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
341933d2:	0049      	lsls	r1, r1, #1
341933d4:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
341933d8:	f240 80ca 	bls.w	34193570 <powf+0x280>
341933dc:	ee37 0a87 	vadd.f32	s0, s15, s14
341933e0:	b003      	add	sp, #12
341933e2:	bd30      	pop	{r4, r5, pc}
341933e4:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
341933e8:	d105      	bne.n	341933f6 <powf+0x106>
341933ea:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
341933ee:	0064      	lsls	r4, r4, #1
341933f0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
341933f4:	e7f0      	b.n	341933d8 <powf+0xe8>
341933f6:	0049      	lsls	r1, r1, #1
341933f8:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
341933fc:	d1ee      	bne.n	341933dc <powf+0xec>
341933fe:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
34193402:	f000 80b5 	beq.w	34193570 <powf+0x280>
34193406:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
3419340a:	ea6f 0404 	mvn.w	r4, r4
3419340e:	bf34      	ite	cc
34193410:	2100      	movcc	r1, #0
34193412:	2101      	movcs	r1, #1
34193414:	0fe4      	lsrs	r4, r4, #31
34193416:	42a1      	cmp	r1, r4
34193418:	f040 80ad 	bne.w	34193576 <powf+0x286>
3419341c:	ee27 0a07 	vmul.f32	s0, s14, s14
34193420:	e7de      	b.n	341933e0 <powf+0xf0>
34193422:	004d      	lsls	r5, r1, #1
34193424:	1e6b      	subs	r3, r5, #1
34193426:	4293      	cmp	r3, r2
34193428:	d31b      	bcc.n	34193462 <powf+0x172>
3419342a:	2900      	cmp	r1, #0
3419342c:	ee20 0a00 	vmul.f32	s0, s0, s0
34193430:	da0e      	bge.n	34193450 <powf+0x160>
34193432:	4620      	mov	r0, r4
34193434:	f7ff ff44 	bl	341932c0 <checkint>
34193438:	2801      	cmp	r0, #1
3419343a:	d109      	bne.n	34193450 <powf+0x160>
3419343c:	eeb1 0a40 	vneg.f32	s0, s0
34193440:	b945      	cbnz	r5, 34193454 <powf+0x164>
34193442:	2c00      	cmp	r4, #0
34193444:	dacc      	bge.n	341933e0 <powf+0xf0>
34193446:	b003      	add	sp, #12
34193448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3419344c:	f000 b8dc 	b.w	34193608 <__math_divzerof>
34193450:	2000      	movs	r0, #0
34193452:	e7f5      	b.n	34193440 <powf+0x150>
34193454:	2c00      	cmp	r4, #0
34193456:	dac3      	bge.n	341933e0 <powf+0xf0>
34193458:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3419345c:	ee87 0a80 	vdiv.f32	s0, s15, s0
34193460:	e7be      	b.n	341933e0 <powf+0xf0>
34193462:	2900      	cmp	r1, #0
34193464:	da1d      	bge.n	341934a2 <powf+0x1b2>
34193466:	4620      	mov	r0, r4
34193468:	f7ff ff2a 	bl	341932c0 <checkint>
3419346c:	b920      	cbnz	r0, 34193478 <powf+0x188>
3419346e:	b003      	add	sp, #12
34193470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34193474:	f000 b8da 	b.w	3419362c <__math_invalidf>
34193478:	1e43      	subs	r3, r0, #1
3419347a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
3419347e:	4258      	negs	r0, r3
34193480:	4158      	adcs	r0, r3
34193482:	0400      	lsls	r0, r0, #16
34193484:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
34193488:	f4bf af48 	bcs.w	3419331c <powf+0x2c>
3419348c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 341935a4 <powf+0x2b4>
34193490:	ee27 0aa6 	vmul.f32	s0, s15, s13
34193494:	ee10 3a10 	vmov	r3, s0
34193498:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3419349c:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
341934a0:	e73c      	b.n	3419331c <powf+0x2c>
341934a2:	2000      	movs	r0, #0
341934a4:	e7ee      	b.n	34193484 <powf+0x194>
341934a6:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 34193588 <powf+0x298>
341934aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
341934ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341934b2:	dd45      	ble.n	34193540 <powf+0x250>
341934b4:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
341934b8:	b3d0      	cbz	r0, 34193530 <powf+0x240>
341934ba:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
341934be:	9301      	str	r3, [sp, #4]
341934c0:	eddd 6a01 	vldr	s13, [sp, #4]
341934c4:	ee76 6a66 	vsub.f32	s13, s12, s13
341934c8:	eef4 6a46 	vcmp.f32	s13, s12
341934cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341934d0:	f47f af6f 	bne.w	341933b2 <powf+0xc2>
341934d4:	4b34      	ldr	r3, [pc, #208]	@ (341935a8 <powf+0x2b8>)
341934d6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
341934da:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
341934de:	ee37 6b05 	vadd.f64	d6, d7, d5
341934e2:	ee16 2a10 	vmov	r2, s12
341934e6:	ee36 6b45 	vsub.f64	d6, d6, d5
341934ea:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
341934ee:	ee37 7b46 	vsub.f64	d7, d7, d6
341934f2:	f002 011f 	and.w	r1, r2, #31
341934f6:	1880      	adds	r0, r0, r2
341934f8:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
341934fc:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
34193500:	ee27 4b07 	vmul.f64	d4, d7, d7
34193504:	2100      	movs	r1, #0
34193506:	686d      	ldr	r5, [r5, #4]
34193508:	190a      	adds	r2, r1, r4
3419350a:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
3419350e:	eea7 6b05 	vfma.f64	d6, d7, d5
34193512:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
34193516:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
3419351a:	eea7 0b05 	vfma.f64	d0, d7, d5
3419351e:	ec43 2b17 	vmov	d7, r2, r3
34193522:	eea6 0b04 	vfma.f64	d0, d6, d4
34193526:	ee20 0b07 	vmul.f64	d0, d0, d7
3419352a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
3419352e:	e757      	b.n	341933e0 <powf+0xf0>
34193530:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
34193534:	9300      	str	r3, [sp, #0]
34193536:	eddd 6a00 	vldr	s13, [sp]
3419353a:	ee76 6a86 	vadd.f32	s13, s13, s12
3419353e:	e7c3      	b.n	341934c8 <powf+0x1d8>
34193540:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 34193590 <powf+0x2a0>
34193544:	eeb4 7bc6 	vcmpe.f64	d7, d6
34193548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3419354c:	d804      	bhi.n	34193558 <powf+0x268>
3419354e:	b003      	add	sp, #12
34193550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34193554:	f000 b846 	b.w	341935e4 <__math_uflowf>
34193558:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 34193598 <powf+0x2a8>
3419355c:	eeb4 7bc6 	vcmpe.f64	d7, d6
34193560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34193564:	d5b6      	bpl.n	341934d4 <powf+0x1e4>
34193566:	b003      	add	sp, #12
34193568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3419356c:	f000 b840 	b.w	341935f0 <__math_may_uflowf>
34193570:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34193574:	e734      	b.n	341933e0 <powf+0xf0>
34193576:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 341935ac <powf+0x2bc>
3419357a:	e731      	b.n	341933e0 <powf+0xf0>
3419357c:	f3af 8000 	nop.w
34193580:	ffd1d571 	.word	0xffd1d571
34193584:	405fffff 	.word	0x405fffff
34193588:	ffa3aae2 	.word	0xffa3aae2
3419358c:	405fffff 	.word	0x405fffff
34193590:	00000000 	.word	0x00000000
34193594:	c062c000 	.word	0xc062c000
34193598:	00000000 	.word	0x00000000
3419359c:	c062a000 	.word	0xc062a000
341935a0:	34196d08 	.word	0x34196d08
341935a4:	4b000000 	.word	0x4b000000
341935a8:	34196bc0 	.word	0x34196bc0
341935ac:	00000000 	.word	0x00000000

341935b0 <with_errnof>:
341935b0:	b510      	push	{r4, lr}
341935b2:	ed2d 8b02 	vpush	{d8}
341935b6:	eeb0 8a40 	vmov.f32	s16, s0
341935ba:	4604      	mov	r4, r0
341935bc:	f7fe fcbe 	bl	34191f3c <__errno>
341935c0:	6004      	str	r4, [r0, #0]
341935c2:	eeb0 0a48 	vmov.f32	s0, s16
341935c6:	ecbd 8b02 	vpop	{d8}
341935ca:	bd10      	pop	{r4, pc}

341935cc <xflowf>:
341935cc:	b130      	cbz	r0, 341935dc <xflowf+0x10>
341935ce:	eef1 7a40 	vneg.f32	s15, s0
341935d2:	ee27 0a80 	vmul.f32	s0, s15, s0
341935d6:	2022      	movs	r0, #34	@ 0x22
341935d8:	f7ff bfea 	b.w	341935b0 <with_errnof>
341935dc:	eef0 7a40 	vmov.f32	s15, s0
341935e0:	e7f7      	b.n	341935d2 <xflowf+0x6>
	...

341935e4 <__math_uflowf>:
341935e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 341935ec <__math_uflowf+0x8>
341935e8:	f7ff bff0 	b.w	341935cc <xflowf>
341935ec:	10000000 	.word	0x10000000

341935f0 <__math_may_uflowf>:
341935f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 341935f8 <__math_may_uflowf+0x8>
341935f4:	f7ff bfea 	b.w	341935cc <xflowf>
341935f8:	1a200000 	.word	0x1a200000

341935fc <__math_oflowf>:
341935fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 34193604 <__math_oflowf+0x8>
34193600:	f7ff bfe4 	b.w	341935cc <xflowf>
34193604:	70000000 	.word	0x70000000

34193608 <__math_divzerof>:
34193608:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3419360c:	2800      	cmp	r0, #0
3419360e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
34193612:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 34193628 <__math_divzerof+0x20>
34193616:	f04f 0022 	mov.w	r0, #34	@ 0x22
3419361a:	fe47 7a87 	vseleq.f32	s15, s15, s14
3419361e:	ee87 0a80 	vdiv.f32	s0, s15, s0
34193622:	f7ff bfc5 	b.w	341935b0 <with_errnof>
34193626:	bf00      	nop
34193628:	00000000 	.word	0x00000000

3419362c <__math_invalidf>:
3419362c:	eef0 7a40 	vmov.f32	s15, s0
34193630:	ee30 7a40 	vsub.f32	s14, s0, s0
34193634:	eef4 7a67 	vcmp.f32	s15, s15
34193638:	ee87 0a07 	vdiv.f32	s0, s14, s14
3419363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34193640:	d602      	bvs.n	34193648 <__math_invalidf+0x1c>
34193642:	2021      	movs	r0, #33	@ 0x21
34193644:	f7ff bfb4 	b.w	341935b0 <with_errnof>
34193648:	4770      	bx	lr

3419364a <__ieee754_sqrt>:
3419364a:	eeb1 0bc0 	vsqrt.f64	d0, d0
3419364e:	4770      	bx	lr

34193650 <__ieee754_log10>:
34193650:	ee10 3a90 	vmov	r3, s1
34193654:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34193658:	b510      	push	{r4, lr}
3419365a:	ed2d 8b02 	vpush	{d8}
3419365e:	da21      	bge.n	341936a4 <__ieee754_log10+0x54>
34193660:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
34193664:	ee10 1a10 	vmov	r1, s0
34193668:	430a      	orrs	r2, r1
3419366a:	d108      	bne.n	3419367e <__ieee754_log10+0x2e>
3419366c:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 341936f8 <__ieee754_log10+0xa8>
34193670:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 34193700 <__ieee754_log10+0xb0>
34193674:	ee86 0b07 	vdiv.f64	d0, d6, d7
34193678:	ecbd 8b02 	vpop	{d8}
3419367c:	bd10      	pop	{r4, pc}
3419367e:	2b00      	cmp	r3, #0
34193680:	da02      	bge.n	34193688 <__ieee754_log10+0x38>
34193682:	ee30 6b40 	vsub.f64	d6, d0, d0
34193686:	e7f3      	b.n	34193670 <__ieee754_log10+0x20>
34193688:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 34193708 <__ieee754_log10+0xb8>
3419368c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
34193690:	ee20 0b07 	vmul.f64	d0, d0, d7
34193694:	ee10 3a90 	vmov	r3, s1
34193698:	4923      	ldr	r1, [pc, #140]	@ (34193728 <__ieee754_log10+0xd8>)
3419369a:	428b      	cmp	r3, r1
3419369c:	dd04      	ble.n	341936a8 <__ieee754_log10+0x58>
3419369e:	ee30 0b00 	vadd.f64	d0, d0, d0
341936a2:	e7e9      	b.n	34193678 <__ieee754_log10+0x28>
341936a4:	2200      	movs	r2, #0
341936a6:	e7f7      	b.n	34193698 <__ieee754_log10+0x48>
341936a8:	1518      	asrs	r0, r3, #20
341936aa:	f240 34ff 	movw	r4, #1023	@ 0x3ff
341936ae:	f3c3 0113 	ubfx	r1, r3, #0, #20
341936b2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
341936b6:	4410      	add	r0, r2
341936b8:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
341936bc:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
341936c0:	ee08 3a10 	vmov	s16, r3
341936c4:	ec53 2b10 	vmov	r2, r3, d0
341936c8:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
341936cc:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
341936d0:	ec43 2b10 	vmov	d0, r2, r3
341936d4:	f000 f8a4 	bl	34193820 <log>
341936d8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34193710 <__ieee754_log10+0xc0>
341936dc:	ee20 0b07 	vmul.f64	d0, d0, d7
341936e0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34193718 <__ieee754_log10+0xc8>
341936e4:	eea8 0b07 	vfma.f64	d0, d8, d7
341936e8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34193720 <__ieee754_log10+0xd0>
341936ec:	eea8 0b07 	vfma.f64	d0, d8, d7
341936f0:	e7c2      	b.n	34193678 <__ieee754_log10+0x28>
341936f2:	bf00      	nop
341936f4:	f3af 8000 	nop.w
341936f8:	00000000 	.word	0x00000000
341936fc:	c3500000 	.word	0xc3500000
	...
3419370c:	43500000 	.word	0x43500000
34193710:	1526e50e 	.word	0x1526e50e
34193714:	3fdbcb7b 	.word	0x3fdbcb7b
34193718:	11f12b36 	.word	0x11f12b36
3419371c:	3d59fef3 	.word	0x3d59fef3
34193720:	509f6000 	.word	0x509f6000
34193724:	3fd34413 	.word	0x3fd34413
34193728:	7fefffff 	.word	0x7fefffff

3419372c <with_errno>:
3419372c:	b510      	push	{r4, lr}
3419372e:	ed2d 8b02 	vpush	{d8}
34193732:	eeb0 8b40 	vmov.f64	d8, d0
34193736:	4604      	mov	r4, r0
34193738:	f7fe fc00 	bl	34191f3c <__errno>
3419373c:	6004      	str	r4, [r0, #0]
3419373e:	eeb0 0b48 	vmov.f64	d0, d8
34193742:	ecbd 8b02 	vpop	{d8}
34193746:	bd10      	pop	{r4, pc}

34193748 <xflow>:
34193748:	b082      	sub	sp, #8
3419374a:	b158      	cbz	r0, 34193764 <xflow+0x1c>
3419374c:	eeb1 7b40 	vneg.f64	d7, d0
34193750:	2022      	movs	r0, #34	@ 0x22
34193752:	ed8d 7b00 	vstr	d7, [sp]
34193756:	ed9d 7b00 	vldr	d7, [sp]
3419375a:	ee20 0b07 	vmul.f64	d0, d0, d7
3419375e:	b002      	add	sp, #8
34193760:	f7ff bfe4 	b.w	3419372c <with_errno>
34193764:	eeb0 7b40 	vmov.f64	d7, d0
34193768:	e7f2      	b.n	34193750 <xflow+0x8>
3419376a:	0000      	movs	r0, r0
3419376c:	0000      	movs	r0, r0
	...

34193770 <__math_uflow>:
34193770:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 34193778 <__math_uflow+0x8>
34193774:	f7ff bfe8 	b.w	34193748 <xflow>
34193778:	00000000 	.word	0x00000000
3419377c:	10000000 	.word	0x10000000

34193780 <__math_oflow>:
34193780:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 34193788 <__math_oflow+0x8>
34193784:	f7ff bfe0 	b.w	34193748 <xflow>
34193788:	00000000 	.word	0x00000000
3419378c:	70000000 	.word	0x70000000

34193790 <__math_divzero>:
34193790:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
34193794:	b082      	sub	sp, #8
34193796:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
3419379a:	2800      	cmp	r0, #0
3419379c:	f04f 0022 	mov.w	r0, #34	@ 0x22
341937a0:	fe07 7b06 	vseleq.f64	d7, d7, d6
341937a4:	ed8d 7b00 	vstr	d7, [sp]
341937a8:	ed9d 0b00 	vldr	d0, [sp]
341937ac:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 341937c0 <__math_divzero+0x30>
341937b0:	ee80 0b07 	vdiv.f64	d0, d0, d7
341937b4:	b002      	add	sp, #8
341937b6:	f7ff bfb9 	b.w	3419372c <with_errno>
341937ba:	bf00      	nop
341937bc:	f3af 8000 	nop.w
	...

341937c8 <__math_invalid>:
341937c8:	eeb0 7b40 	vmov.f64	d7, d0
341937cc:	ee30 6b40 	vsub.f64	d6, d0, d0
341937d0:	eeb4 7b47 	vcmp.f64	d7, d7
341937d4:	ee86 0b06 	vdiv.f64	d0, d6, d6
341937d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341937dc:	d602      	bvs.n	341937e4 <__math_invalid+0x1c>
341937de:	2021      	movs	r0, #33	@ 0x21
341937e0:	f7ff bfa4 	b.w	3419372c <with_errno>
341937e4:	4770      	bx	lr

341937e6 <__math_check_uflow>:
341937e6:	eeb5 0b40 	vcmp.f64	d0, #0.0
341937ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341937ee:	d102      	bne.n	341937f6 <__math_check_uflow+0x10>
341937f0:	2022      	movs	r0, #34	@ 0x22
341937f2:	f7ff bf9b 	b.w	3419372c <with_errno>
341937f6:	4770      	bx	lr

341937f8 <__math_check_oflow>:
341937f8:	eeb0 7bc0 	vabs.f64	d7, d0
341937fc:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 34193818 <__math_check_oflow+0x20>
34193800:	eeb4 7b46 	vcmp.f64	d7, d6
34193804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34193808:	dd02      	ble.n	34193810 <__math_check_oflow+0x18>
3419380a:	2022      	movs	r0, #34	@ 0x22
3419380c:	f7ff bf8e 	b.w	3419372c <with_errno>
34193810:	4770      	bx	lr
34193812:	bf00      	nop
34193814:	f3af 8000 	nop.w
34193818:	ffffffff 	.word	0xffffffff
3419381c:	7fefffff 	.word	0x7fefffff

34193820 <log>:
34193820:	ee10 0a90 	vmov	r0, s1
34193824:	ee10 3a10 	vmov	r3, s0
34193828:	b4f0      	push	{r4, r5, r6, r7}
3419382a:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
3419382e:	f04f 34ff 	mov.w	r4, #4294967295
34193832:	0c02      	lsrs	r2, r0, #16
34193834:	429c      	cmp	r4, r3
34193836:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
3419383a:	4c71      	ldr	r4, [pc, #452]	@ (34193a00 <log+0x1e0>)
3419383c:	418c      	sbcs	r4, r1
3419383e:	ed2d 8b02 	vpush	{d8}
34193842:	d35a      	bcc.n	341938fa <log+0xda>
34193844:	4a6f      	ldr	r2, [pc, #444]	@ (34193a04 <log+0x1e4>)
34193846:	4290      	cmp	r0, r2
34193848:	bf08      	it	eq
3419384a:	2b00      	cmpeq	r3, #0
3419384c:	f000 80c7 	beq.w	341939de <log+0x1be>
34193850:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
34193854:	4b6c      	ldr	r3, [pc, #432]	@ (34193a08 <log+0x1e8>)
34193856:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
3419385a:	ee30 0b47 	vsub.f64	d0, d0, d7
3419385e:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
34193862:	ee20 2b00 	vmul.f64	d2, d0, d0
34193866:	eea6 7b00 	vfma.f64	d7, d6, d0
3419386a:	ee20 4b02 	vmul.f64	d4, d0, d2
3419386e:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
34193872:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
34193876:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
3419387a:	eea6 7b02 	vfma.f64	d7, d6, d2
3419387e:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
34193882:	eea5 6b00 	vfma.f64	d6, d5, d0
34193886:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
3419388a:	eea5 6b02 	vfma.f64	d6, d5, d2
3419388e:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
34193892:	eea3 5b00 	vfma.f64	d5, d3, d0
34193896:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
3419389a:	eea3 5b02 	vfma.f64	d5, d3, d2
3419389e:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
341938a2:	eea3 5b04 	vfma.f64	d5, d3, d4
341938a6:	eeb0 3b40 	vmov.f64	d3, d0
341938aa:	eea5 6b04 	vfma.f64	d6, d5, d4
341938ae:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
341938b2:	eea6 7b04 	vfma.f64	d7, d6, d4
341938b6:	eeb0 6b40 	vmov.f64	d6, d0
341938ba:	eeb0 2b47 	vmov.f64	d2, d7
341938be:	ed9f 7b4a 	vldr	d7, [pc, #296]	@ 341939e8 <log+0x1c8>
341938c2:	eea0 6b07 	vfma.f64	d6, d0, d7
341938c6:	eea0 6b47 	vfms.f64	d6, d0, d7
341938ca:	ee26 1b06 	vmul.f64	d1, d6, d6
341938ce:	ee30 8b46 	vsub.f64	d8, d0, d6
341938d2:	eea1 3b05 	vfma.f64	d3, d1, d5
341938d6:	ee30 7b43 	vsub.f64	d7, d0, d3
341938da:	ee30 0b06 	vadd.f64	d0, d0, d6
341938de:	eea1 7b05 	vfma.f64	d7, d1, d5
341938e2:	ee25 5b08 	vmul.f64	d5, d5, d8
341938e6:	eea5 7b00 	vfma.f64	d7, d5, d0
341938ea:	eea2 7b04 	vfma.f64	d7, d2, d4
341938ee:	ee33 0b07 	vadd.f64	d0, d3, d7
341938f2:	ecbd 8b02 	vpop	{d8}
341938f6:	bcf0      	pop	{r4, r5, r6, r7}
341938f8:	4770      	bx	lr
341938fa:	f1a2 0410 	sub.w	r4, r2, #16
341938fe:	f647 71df 	movw	r1, #32735	@ 0x7fdf
34193902:	428c      	cmp	r4, r1
34193904:	d923      	bls.n	3419394e <log+0x12e>
34193906:	18d9      	adds	r1, r3, r3
34193908:	eb40 0400 	adc.w	r4, r0, r0
3419390c:	4321      	orrs	r1, r4
3419390e:	d105      	bne.n	3419391c <log+0xfc>
34193910:	2001      	movs	r0, #1
34193912:	ecbd 8b02 	vpop	{d8}
34193916:	bcf0      	pop	{r4, r5, r6, r7}
34193918:	f7ff bf3a 	b.w	34193790 <__math_divzero>
3419391c:	493b      	ldr	r1, [pc, #236]	@ (34193a0c <log+0x1ec>)
3419391e:	4288      	cmp	r0, r1
34193920:	bf08      	it	eq
34193922:	2b00      	cmpeq	r3, #0
34193924:	d0e5      	beq.n	341938f2 <log+0xd2>
34193926:	0413      	lsls	r3, r2, #16
34193928:	d403      	bmi.n	34193932 <log+0x112>
3419392a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
3419392e:	4393      	bics	r3, r2
34193930:	d104      	bne.n	3419393c <log+0x11c>
34193932:	ecbd 8b02 	vpop	{d8}
34193936:	bcf0      	pop	{r4, r5, r6, r7}
34193938:	f7ff bf46 	b.w	341937c8 <__math_invalid>
3419393c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 341939f0 <log+0x1d0>
34193940:	ee20 7b07 	vmul.f64	d7, d0, d7
34193944:	ec53 2b17 	vmov	r2, r3, d7
34193948:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
3419394c:	4613      	mov	r3, r2
3419394e:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
34193952:	492d      	ldr	r1, [pc, #180]	@ (34193a08 <log+0x1e8>)
34193954:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
34193958:	1e1e      	subs	r6, r3, #0
3419395a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
3419395e:	f3c2 3446 	ubfx	r4, r2, #13, #7
34193962:	ea4f 5c12 	mov.w	ip, r2, lsr #20
34193966:	1512      	asrs	r2, r2, #20
34193968:	eb01 1504 	add.w	r5, r1, r4, lsl #4
3419396c:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
34193970:	ed95 7b24 	vldr	d7, [r5, #144]	@ 0x90
34193974:	eba0 070c 	sub.w	r7, r0, ip
34193978:	ec47 6b16 	vmov	d6, r6, r7
3419397c:	eea7 5b06 	vfma.f64	d5, d7, d6
34193980:	ee07 2a90 	vmov	s15, r2
34193984:	eeb8 6be7 	vcvt.f64.s32	d6, s15
34193988:	ed91 4b00 	vldr	d4, [r1]
3419398c:	ed95 7b26 	vldr	d7, [r5, #152]	@ 0x98
34193990:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
34193994:	eea4 7b06 	vfma.f64	d7, d4, d6
34193998:	ee25 2b05 	vmul.f64	d2, d5, d5
3419399c:	ee35 4b07 	vadd.f64	d4, d5, d7
341939a0:	ee25 1b02 	vmul.f64	d1, d5, d2
341939a4:	ee37 0b44 	vsub.f64	d0, d7, d4
341939a8:	ed91 7b02 	vldr	d7, [r1, #8]
341939ac:	ee30 0b05 	vadd.f64	d0, d0, d5
341939b0:	eea7 0b06 	vfma.f64	d0, d7, d6
341939b4:	ed91 7b04 	vldr	d7, [r1, #16]
341939b8:	ed91 6b08 	vldr	d6, [r1, #32]
341939bc:	eea7 0b02 	vfma.f64	d0, d7, d2
341939c0:	ed91 7b06 	vldr	d7, [r1, #24]
341939c4:	eea6 7b05 	vfma.f64	d7, d6, d5
341939c8:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
341939cc:	eea3 6b05 	vfma.f64	d6, d3, d5
341939d0:	eea6 7b02 	vfma.f64	d7, d6, d2
341939d4:	eea1 0b07 	vfma.f64	d0, d1, d7
341939d8:	ee30 0b04 	vadd.f64	d0, d0, d4
341939dc:	e789      	b.n	341938f2 <log+0xd2>
341939de:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 341939f8 <log+0x1d8>
341939e2:	e786      	b.n	341938f2 <log+0xd2>
341939e4:	f3af 8000 	nop.w
341939e8:	00000000 	.word	0x00000000
341939ec:	41a00000 	.word	0x41a00000
341939f0:	00000000 	.word	0x00000000
341939f4:	43300000 	.word	0x43300000
	...
34193a00:	000308ff 	.word	0x000308ff
34193a04:	3ff00000 	.word	0x3ff00000
34193a08:	34196330 	.word	0x34196330
34193a0c:	7ff00000 	.word	0x7ff00000

34193a10 <_init>:
34193a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34193a12:	bf00      	nop
34193a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
34193a16:	bc08      	pop	{r3}
34193a18:	469e      	mov	lr, r3
34193a1a:	4770      	bx	lr

34193a1c <_fini>:
34193a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34193a1e:	bf00      	nop
34193a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
34193a22:	bc08      	pop	{r3}
34193a24:	469e      	mov	lr, r3
34193a26:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

34196fa0 <SECURE_SystemCoreClockUpdate>:
34196fa0:	e97f e97f 	sg
34196fa4:	f7fa bcdc 	b.w	34191960 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
